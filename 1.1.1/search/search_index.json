{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"OpenSSL300Design/","title":"OpenSSL 3.0.0 Design (Draft)","text":""},{"location":"OpenSSL300Design/#introduction","title":"Introduction","text":"<p>This document outlines the design of OpenSSL 3.0, the next version of OpenSSL after 1.1.1. It assumes familiarity with the document entitled OpenSSL Strategic Architecture and a working knowledge of OpenSSL 1.1.x.</p> <p>The OpenSSL 3.0 release will have minimal impact to the vast majority of existing applications; almost all well-behaved applications will just need to be recompiled.</p> <p>The majority of the changes in OpenSSL 3.0 are internal architectural restructuring to facilitate a long-term supportable cryptographic framework that enables better separation of algorithm implementations from algorithm APIs. These structural changes also support a more maintainable OpenSSL FIPS Cryptographic Module 3.0.</p> <p>No currently marked deprecated APIs will be removed in OpenSSL 3.0.</p> <p>Many additional low-level functions will be marked as deprecated APIs in OpenSSL 3.0.</p> <p>OpenSSL 3.0 will support an application having TLS connections that are in FIPS mode (using the OpenSSL FIPS Cryptographic Module 3.0) and TLS connections that are in non-FIPS mode simultaneously.</p>"},{"location":"OpenSSL300Design/#terms-used-in-this-document","title":"Terms Used in This Document","text":"<p>The following terms, in alphabetical order,  are used in this document.  A brief (summary) definition is provided.</p> <ul> <li>Algorithm, or sometimes cryptographic algorithm, is a     method to perform a set of operations (such as encryption or     decryption).  Our use of the term is abstract, and usually     represents an algorithm by its name, such as \"aes-128-cbc\".</li> <li>Algorithm implementation, or sometimes just     implementation, is a concrete implementation of an algorithm.     This is mainly represented in code in the form of a set of     functions.</li> <li>CAVS is the Cryptographic Algorithm Validation System. A tool     used to test that a cryptographic implementation conforms to FIPS     standards.</li> <li>CMVP is the Cryptographic Module Validation Program. A process     that validates that cryptographic implementations conform to FIPS     standards.</li> <li>EVP is a family of APIs implemented by libcrypto that enables     applications to perform cryptographic operations. The     implementation of the EVP API uses the Core and Provider     components.</li> <li>The Core is a component in libcrypto that enables applications     to access the algorithm implementations offered by providers.</li> <li>CSP is Critical Security Parameters. This includes any information (e.g.     private keys, passwords, pin numbers etc) that might compromise the security     of a module in the event of their unauthorised disclosure or modification.</li> <li>Explicit Fetch is a method for finding an algorithm     implementation where the application makes an explicit call to     locate the implementation and supplies search criteria.</li> <li>FIPS is the Federal Information Processing Standards. This is     a set of standards defined by the US government. In particular,     FIPS standard 140-2 is applicable to cryptographic software.</li> <li>A FIPS module is an implementation of cryptographic algorithms     that has been validated by the CMVP as conforming to FIPS     standards. In OpenSSL the FIPS module is implemented as a provider     and is available in dynamically loadable module form.</li> <li>Implicit Fetch is a method for finding an algorithm     implementation where the application does not explicitly make a     call to locate the implementation and therefore default search     criteria are used.</li> <li>The Integrity Check is a test that is automatically run when     the FIPS module is loaded. The module checksums itself and     verifies that it hasn't been inadvertently altered.</li> <li>KAS is Key Agreement Scheme. A method by which two communicating parties     can agree a shared key between them.</li> <li>KATs are Known Answer Tests. A set of tests used to perform a     health-check of a FIPS module.</li> <li>libcrypto is a shared library implemented by OpenSSL that     provides applications with access to various cryptography related     capabilities.</li> <li>libssl is a shared library implemented by OpenSSL that     provides applications with the ability to create SSL/TLS     connections either as a client or as a server.</li> <li>A Library Context is an opaque structure that holds library     \"global\" data.</li> <li>Operation is a class of functions to be performed on data,     such as calculating a digest, encrypting, decrypting, etc. An     algorithm may offer one or more operations. For example RSA     provides asymmetric encryption, asymmetric decryption, signing,     verifying, etc</li> <li>Parameters are an implementation agnostic set of key-value     pairs that are used to communicate object data between the Core     and providers. For example they could be used to transfer private     key data.</li> <li>POST refers to the FIPS module Power-Up Self-Tests     (a.k.a. Power-On Self-Tests) that are run at installation time, at     power up (i.e. each time the FIPS module is loaded for an     application) or on demand. These tests include the Integrity Check     and the KATs. If the KATs were run successfully at installation     time then they don't need to be run again at power up, however the     Integrity Check is always performed.</li> <li>Properties are used by providers to describe the features of     their algorithm implementations. They are also used in application     queries to find specific implementations.</li> <li>Provider is a unit that provides one or more algorithm     implementations.</li> <li>Provider module is a provider in dynamically loadable module     form.</li> </ul>"},{"location":"OpenSSL300Design/#architecture","title":"Architecture","text":"<p>The architecture shall have the following features:</p> <ul> <li>Common Services form the building blocks usable by applications     and providers. (e.g. BIO, X509, SECMEM, ASN.1, etc).</li> <li>Providers implement cryptographic algorithms and supporting     services. An algorithm may consist of multiple operations (for     example RSA may have \"encrypt\", \"decrypt\", \"sign\", \"verify\"     etc). Similarly an operation (for example \"sign\") can be     implemented by multiple algorithms such as RSA and ECDSA. A     provider has implementations of the cryptographic primitives for     an algorithm. This release will include the following providers:     a.  Default, which contains the current non-legacy OpenSSL         cryptographic algorithms; this will be built-in (i.e., part of         libcrypto)     b.  Legacy, with implementations of older algorithms (e.g, DES,         MDC2, MD2, Blowfish, CAST)     c.  FIPS, which implements the OpenSSL FIPS Cryptographic Module         3.0; this can be loaded dynamically at runtime.</li> <li>The Core enables access to the operations offered by providers to     applications (and other providers). The Core is the mechanism via     which concrete implementations of operations are located.</li> <li>Protocol implementations. E.g. TLS, DTLS.</li> </ul> <p>This document has many references to the \"EVP API.\" This refers to \"application-level\" operations, such as public-key signing, generating a digest and so on. These functions include <code>EVP_DigestSign</code>, <code>EVP_Digest</code>, <code>EVP_MAC_init</code> and the like. The EVP API also encapsulates the cryptographic objects used to perform those services, such as <code>EVP_PKEY</code>, <code>EVP_CIPHER</code>, <code>EVP_MD</code>, <code>EVP_MAC</code> and so forth. Providers implement the backend functionality for the latter set. Instances of these objects can be bound to providers implicitly or explicitly, depending on the application's needs. This is discussed in more detail in the Provider Design, below.</p> <p>The architecture has the following characteristics:</p> <ul> <li>The EVP layer is a thin wrapper for operations implemented in the     providers. Most calls are passed straight through with little/no     pre- or post-processing.</li> <li>New EVP APIs will be provided to affect how the Core selects (or     finds) the implementation of an operation to be used for any given     EVP call.</li> <li>Information will be passed between libcrypto and the providers in     an implementation agnostic manner.</li> <li>Legacy APIs (e.g. low level cryptographic APIs that do not go via     the EVP layer) will be deprecated. Note that there are legacy APIs     to non legacy algorithms (e.g. AES is not a legacy algorithm but     <code>AES_encrypt</code> is a legacy API).</li> <li>The OpenSSL FIPS Cryptographic Module will be implemented as a     dynamically loaded provider. It will be self-contained (i.e. can     only depend on system runtime libraries and services provided by     the Core).</li> </ul>"},{"location":"OpenSSL300Design/#conceptual-component-view","title":"Conceptual Component View","text":"<p>An overview of the conceptual components in the OpenSSL architecture is as shown in the diagram below. Note that the existence of a component in the diagram does not indicate that the component is a public API or intended for end-user direct access or usage.</p> <p></p> <p>The new components (not present in the previous architecture) shown here are as follows:</p> <ul> <li>Core: This is a fundamental component that connects requests for     an operation (such as encryption) to a provider of that     operation. It provides the ability to locate an implementation of     an algorithm offering specified operations given a set of     properties that the implementation must fulfil. For example,     properties of an encryption algorithm may include at a minimum     \"fips\".</li> <li>Default Provider: Implements a set of default algorithms.</li> <li>FIPS Provider: Implements a set of algorithms that are FIPS     validated and are made available via the Core. This includes the     following supporting services:<ul> <li>POST: Power On Self Test that perform:<ul> <li>KAT: Known Answer Tests</li> <li>Integrity Check</li> </ul> </li> <li>Low Level Implementations: This is the set of components that     actually implement the cryptographic primitives (to meet the     FIPS-mandated self-contained requirement).</li> </ul> </li> <li>Legacy Provider: Provides implementations of older algorithms that     will be exposed via EVP-level APIs.</li> <li>3rd Party Providers: Eventually, third-parties may provide their     own providers. A third-party provider, like any other provider,     implements a set of algorithms that will be accessible to     applications and other providers via the Core.</li> <li>Null Provider: A provider that does nothing. This can be useful     for testing that the correct library context is used.</li> <li>Base Provider: A provider for serialization of keys. The FIPS     provider requires this since it does not contain methods to     load keys. The Base provider is also embedded in the default     provider.</li> </ul>"},{"location":"OpenSSL300Design/#packaging-view","title":"Packaging View","text":"<p>The various components described in the conceptual component view above are physically packaged into:</p> <ul> <li>Executable application(s) for use by users</li> <li>Libraries for use by application(s)</li> <li>Dynamically loadable module(s) for use by the Core.</li> </ul> <p>There will be multiple different packaging options provided with OpenSSL 3.0 (for example a single library libcrypto containing everything except the FIPS Provider, and all providers as separate dynamically loadable modules).</p> <p>Which dynamically loadable modules are registered, used, or available will be able to be configured at runtime.</p> <p>The following figure describes the architecture in terms of physical packages.</p> <p></p> <p>The physical packages new to this release are:</p> <ul> <li> <p>FIPS module. This contains the FIPS Provider that implements a set     of algorithms that are FIPS validated and are available via the     Core. The FIPS Provider is the OpenSSL FIPS Cryptographic Module     3.0.</p> <p>We will not attempt to preclude users from making errors, however we will keep in mind the typical user usage and \"safety\". By default the FIPS provider will be built and installed.</p> <p>We will be able to perform a safety check that detects if the user has modified the source in a FIPS-impactful manner from the release distribution and block building the FIPS provider (on best effort basis) unless an override option is provided.</p> <p>We need to ensure there is a mechanism that enables the end user to determine whether or not their usage of the FIPS module is within the allowed uses under a formal validation.</p> <p>Versioning of the FIPS module will be aligned with the base OpenSSL version  number at the point in time of the validation. Not all OpenSSL releases will need an update to the FIPS module. Therefore when a new FIPS module version is released there may be gaps/jumps in its version number since the previous release.</p> </li> <li> <p>Legacy module. This contains implementations of legacy     algorithms.</p> </li> </ul> <p>It was originally intended that Engines would be built with a provider shim, to allow them to work as usual for cases when an ENGINE pointer is passed to some functions, and as providers when acting as default implementations. Investigations during development, showed that this approach had problematic edge cases. The workaround for now is that there are two code paths currently when EVP calls are made. For engines support, the legacy code is used for 'legacy keys'. The long term plan is to remove engines and the legacy code paths from the code base. Anything written as an engine will need to be rewritten as a provider once engines are removed.</p>"},{"location":"OpenSSL300Design/#core-and-provider-design","title":"Core and Provider Design","text":"<p>The interactions relevant for the Core and provider design are shown in the diagram below. There are four major components: User Application, EVP component, the Core, and a cryptographic Provider. (There may be multiple providers, but that is not relevant here).</p> <p></p> <p>The Core has the following characteristics:</p> <ul> <li>It enables Provider discovery, loading, initialisation and     unloading</li> <li>It enables property-based algorithm queries</li> <li>It implements caching of algorithm queries and implementation     details</li> <li>It operates within a library context that contains data such as     global properties, search cache and dispatch tables.</li> </ul> <p>Providers have the following characteristics:</p> <ul> <li>They provide for access to specific algorithm implementations</li> <li>They associate algorithm implementations with a set of well     defined properties</li> <li>They support parameter passing in an implementation agnostic     manner</li> <li>They can be loaded at any point in time</li> <li>They have a well-known module entry point</li> </ul> <p>The subsections that follow describe the flow an application uses to load a provider, fetch an algorithm implementation, and use it.  In addition, this section describes in detail how algorithms, properties, and parameters are named; how algorithm queries are handled; how algorithms are registered and initialized; and how providers are loaded.</p> <p>In order for an application to be able to use an algorithm it must first \"fetch\" an implementation of it through an algorithm query. Our design objective is to be able to support both explicit (up front) fetching of algorithms and fetching of algorithms on use. By default we expect to do fetching on use (e.g. using <code>EVP_sha256()</code>) so that algorithms are typically fetched during an \"init\" function and bound to a context  object (often named <code>ctx</code>). The explicit fetching option will be implemented via new API calls (e.g. <code>EVP_MD_fetch()</code>).</p> <p>The diagram above shows the explicit fetch approach. The steps are as follows:</p> <ol> <li>Every provider needs to be loaded. This will happen implicitly     (default provider or specified via configuration) and may also be     explicitly requested by the application. Load encompases both     dynamic shared object loading (as needed) and initialisation.<ol> <li>The Core physically loads the module into memory (not required     if default provider is already in memory).</li> <li>The Core calls the provider's entry point for the provider to     initialise itself.<ol> <li>Within the entry point function, the provider initialises     some provider variables using values passed in from the     Core. A provider algorithm implementation query callback     is returned to the Core if initialization succeeds.</li> </ol> </li> </ol> </li> <li>User application requests algorithm by calling a fetch routine.<ol> <li>The search by EVP will combine global properties with     call-specific ones and an algorithm identity to find the     corresponding algorithm implementation, and then create and     return a library handle (e.g. <code>EVP_MD</code>, <code>EVP_CIPHER</code>) to the     application.<ol> <li>The first search of the implementation dispatch table is     made in an internal cache.</li> <li>Should the first search fail, a second search is made by     asking the providers if they have an implementation of     said algorithm with the queried properties. When this     search is done, the resulting data is cached unless the     provider opts out of caching, to be used in the first     search (2.1.1). For example a PKCS#11 provider may opt out     of caching because its algorithms may become available and     unavailable over time.</li> </ol> </li> </ol> </li> <li>The user application then uses the algorithm via EVP APIs (e.g.,     <code>EVP_DigestInit()</code>, <code>EVP_DigestUpdate()</code>, <code>EVP_DigestFinal()</code>,     etc).<ol> <li>The function pointer is invoked and ends up in the provider     for the implementation to perform the requested cryptographic     algorithm.</li> </ol> </li> </ol> <p>For the existing <code>EVP_{algorithm}()</code> functions (e.g. <code>EVP_sha256()</code>, etc) things remain mostly unchanged. In particular, the fetch call is not performed when the <code>EVP_{algorithm}()</code> call returns, but rather it happens implicitly when the context object (e.g. <code>EVP_MD_CTX</code>) is bound within the respective EVP init function. Specifically, step 2.1 happens just before step 3.1. This is known as \"implicit fetch\". Implicit fetch always operates within a default library context (see Library Context below).</p> <p>The method dispatch table is a list of <code>&lt;function-id, function-pointer&gt;</code> pairs \u2014 where the <code>function-id</code>s are publically defined and known by OpenSSL \u2014 put together with a set of properties that can be used to identify each particular implementation.  The Core can take a property query and find the corresponding dispatch table, to be used for applicable operations. This approach allows providers to flexibly pass references to functions that the OpenSSL code can use to create its method structures dynamically.</p> <p>Providers can be loaded at any point in time. Unload at any point in time can be requested.  It is up to the application to ensure that a provider is not currently being used or referenced when it is unloaded. If an attempt is made to use an implementation that is no longer available then an error will be returned.</p> <p>The assumptions an application can currently make about the return from <code>EVP_{algorithm}()</code> and not the new fetch approach are:</p> <ul> <li>const pointer</li> <li>does not need to be freed by the application</li> <li>can safely be compared for checking algorithms are the same     (i.e. specifically comparing pointers to <code>EVP_CIPHER</code>, <code>EVP_MD</code>,     etc)</li> </ul> <p>For a direct use of explicit fetch by the application (rather than using the existing <code>EVP_{algorithm}()</code> functions) the semantics will be different:</p> <ul> <li>non-const pointer</li> <li>needs to be freed by the application</li> <li>pointers can't be safely compared with each other (more on that in     the next paragraph)</li> </ul> <p>There will be new APIs to test the equality of objects that can be used for both explicitly fetched objects and static variant ones These APIs will enable comparison of just the algorithm identity, or of specific algorithm implementations.</p>"},{"location":"OpenSSL300Design/#library-context","title":"Library Context","text":"<p>A library context is an opaque structure that holds library \"global\" data.  OpenSSL will provide such a structure, limited to the global data that the Core has to keep. Future expansion may come to include other existing global data. An application will be able to create and destroy one or more library context(s) within which all subsequent interactions with the Core operate within. If the application does not create and provide its own library context, an internal default one will be used.</p> <pre><code>OPENSSL_CTX *OPENSSL_CTX_new();\nvoid OPENSSL_CTX_free(OPENSSL_CTX *ctx);\n</code></pre> <p>A library context can be passed to the explicit fetch functions.  If <code>NULL</code> is passed to them, the internal default context will be used.</p> <p>More than one library context may be allocated, which implies that any provider module may be initialized more than once.  This permits an application to both be directly linked with libcrypto and loading providers it's interested in, as well as being linked with other libraries that use their own provider modules, independently.</p>"},{"location":"OpenSSL300Design/#naming","title":"Naming","text":"<p>Names are required for algorithms, parameters, and properties. In order to ensure consistency and to enable external Provider implementers to define new names in a consistent way there will be a registry of recommended or used names. It will be maintained separately from the sources.</p> <p>The ability to define aliases for names is required because there are contexts where there are more than one name for the same thing (e.g. EC curves with general names and NIST names for the same thing).</p>"},{"location":"OpenSSL300Design/#properties-for-algorithm-implementation-selection","title":"Properties for Algorithm Implementation Selection","text":"<p>Algorithm implementations (cryptographic and non-cryptographic) will have some properties which will be used to select an implementation from amongst those available. For 3.0, two properties are defined:</p> <ul> <li>is this implementation the default implementation?</li> <li>is this implementation FIPS validated?</li> </ul> <p>The valid input and their meaning are:</p> Property String Meaning in a definition Meaning in a query <code>default</code> This is the default implementation Request the default implementation <code>default=yes</code> This is the default implementation Request the default implementation <code>default=no</code> This is not the default implementation Request a non-default implementation <code>fips</code> This implementation is FIPS validated Request an implementation that is FIPS validated <code>fips=yes</code> This implementation is FIPS validated Request an implementation that is FIPS validated <code>fips=no</code> This implementation is not FIPS validated Request an implementation that is not FIPS validated <p>In all cases property names will be defined as printable ASCII characters and are case insensitive. Property values may be quoted or unquoted. Unquoted values will also always be printable ASCII characters and are case insensitive. Quoted values are tested for equality on a raw byte comparison basis only.</p> <p>Providers will be able to provide their own names or values. The full syntax of property definitions and queries appear in Appendix 1 - Property Syntax.</p> <p>OpenSSL reserves all property names that do not have a period; vendor-provided property names must have a period in the name. It is expected (but not enforced) that the part of the property name before the first period is or relates to the provider's name, to provide some level of conflict avoidance via namespacing.</p> <p>It is likely that additional properties will be defined during the development of this release.  A likely candidate is <code>provider</code> being the name of the provider that is supplying the implementation. Another possibility is <code>engine</code>, meaning that this algorithm is implemented by an OpenSSL 1.1.1 dynamically loaded engine masquerading as a provider.</p> <p>There will be a built in global property query string, which will be \"default\".</p>"},{"location":"OpenSSL300Design/#property-based-algorithm-selection","title":"Property-based Algorithm Selection","text":"<p>Algorithm implementation selection is based on properties.</p> <p>The provider sets properties on the algorithms it offers. The application sets which properties that it wants to see used as a filter during algorithm selection - the query.</p> <p>The desired properties for fetching algorithm implementations can be specified in the following places:</p> <ol> <li>globally, based on configuration files.</li> <li>globally, based on API calls.</li> <li>on a per-object basis for specific objects. E.g. SSL_CTX, SSL.</li> </ol> <p>Properties will be used during algorithm lookup (parameter specification of property values).</p> <p>The sets of properties will be evaluated in a manner that resolves to a single value of a property for each specified property (keyword). The precedence order for keyword evaluation is:</p> <ol> <li>The per-object or directly specified API parameter to fetch</li> <li>The global (default) properties set by API calls</li> <li>The global (default) properties set in configuration files</li> </ol> <p>It is possible that additional property setting methods and evaluation approaches will be defined during the development of this release.</p> <p>By default, OpenSSL 3.0 will load a configuration file (which contains global properties and other settings) automatically without explicit application API calls. This will occur in libcrypto. Note that in OpenSSL 1.1.1 the configuration file is automatically loaded only by the default (automatic) initialisation of libssl.</p>"},{"location":"OpenSSL300Design/#parameter-definition","title":"Parameter Definition","text":"<p>The OpenSSL Core and providers have to exchange data while keeping OpenSSL and provider structures opaque.  All composite values will be passed as an array of items, using the public data structure defined in Appendix 2 - OpenSSL parameter passing. Parameters will be identified using their name (as a string) and each contains its own type and size information.</p> <p>The Core will define an API to pass an array of parameter values or requests for values to a provider or a specific algorithm implementation, and for the latter, an associated object handled by that implementation.  In the cases of the basic machine types, macros could be developed to assist in the construction and extraction of values.</p>"},{"location":"OpenSSL300Design/#operation-and-operation-function-definitions","title":"Operation and Operation Function Definitions","text":"<p>While algorithm and parameter names are essentially controlled and allocated by the providers, the operations and associated functions that are going to be called by libcrypto are essentially controlled and allocated by the Core.</p> <p>For things that are only controlled by the Core, we will use macros to name them, with numbers as values to be used as indexes.  Allocation will be incremental, i.e. for any new operation or function, the next number available will be picked.</p>"},{"location":"OpenSSL300Design/#algorithm-query","title":"Algorithm Query","text":"<p>Each algorithm type (e.g. <code>EVP_MD</code>, <code>EVP_CIPHER</code> etc) with have a \"fetch\" function available (e.g. <code>EVP_MD_fetch()</code>, <code>EVP_CIPHER_fetch()</code>).  Algorithm implementations are identified using their name and properties</p> <p>Each fetch function will use services provided by the Core to find an appropriate implementation as described in the introduction of Core and Provider Design. If an appropriate implementation has been found then it is constructed into a suitable algorithm structure (e.g. <code>EVP_MD</code>, <code>EVP_CIPHER</code>) and returned to the calling application.</p> <p>If multiple implementations are equally good matches for the passed name and properties, one of these will be returned on retrieval but exactly which one is not defined. Furthermore, there is no guarantee that the same match would be returned every time.</p>"},{"location":"OpenSSL300Design/#algorithm-query-caching","title":"Algorithm Query Caching","text":"<p>Algorithm queries will be cached together with their result.</p> <p>The algorithm query cache can be flushed to remove:</p> <ul> <li>All queries returning a specific algorithm implementation</li> <li>All algorithm implementations from a specific provider</li> <li>All algorithm implementations</li> </ul>"},{"location":"OpenSSL300Design/#multilevel-queries","title":"Multilevel Queries","text":"<p>In order to handle both global properties and properties passed to specific calls (such as fetch calls), the global property query settings will be merged with the passed property settings except where there is a conflict, specifically:</p> Global Setting Passed Settings Resulting Query <code>fips=yes</code> <code>fips=yes</code> <code>fips=yes</code> <code>fips=yes</code> <code>fips=no</code> <code>fips=no</code> <code>fips=yes</code> <code>-fips</code> fips is not specified <code>fips=yes</code> fips is not specified <code>fips=yes</code> <code>fips=no</code> <code>fips=yes</code> <code>fips=yes</code> <code>fips=no</code> <code>fips=no</code> <code>fips=no</code> <code>fips=no</code> <code>-fips</code> fips is not specified <code>fips=no</code> fips is not specified <code>fips=no</code> fips is not specified <code>fips=yes</code> <code>fips=yes</code> fips is not specified <code>fips=no</code> <code>fips=no</code> fips is not specified <code>-fips</code> fips stays not specified fips is not specified fips is not specified fips stays not specified"},{"location":"OpenSSL300Design/#provider-module-loading","title":"Provider Module Loading","text":"<p>Providers can either be built-in or dynamically loadable modules.</p> <p>All algorithms are implemented by providers. The OpenSSL Core will initially have no providers loaded, and therefore will have no algorithms available. Providers will need to be discovered and loaded. The algorithm implementations contained within them can then be queried by the Core at a later time, with those queries possibly becoming cached.</p> <p>If no provider has been loaded at the time of the first fetch (implicit as well as explicit), the built in default provider will be automatically loaded.</p> <p>Note that a provider may be written against an older version of the Core API than the current version in libcrypto. For example, it will have to be possible for users to run a different FIPS provider module version than the main OpenSSL version. This means the Core API will have to remain stable and backwards compatible (just like any other public API).</p> <p>All of the command line applications supplied as part of the OpenSSL build will gain a <code>-provider xxx</code> option which loads a provider.  This option can be specified multiple times on the command line (as multiple providers can always be loaded) and it isn't an error if the provider remains unused for any specific operation (e.g. loading a provider that only supplies AES when doing a SHA256 digest).</p>"},{"location":"OpenSSL300Design/#finding-and-loading-dynamic-provider-modules","title":"Finding and loading dynamic provider modules","text":"<p>Dynamic provider modules are <code>.so</code> files on UNIX type operating systems, or a <code>.dll</code> file on Windows type operating systems, or whatever corresponds on other operating systems.  By default, they will be installed in a well known directory.</p> <p>Provider module loading can occur several ways:</p> <ul> <li>On demand, the application will have to specify exactly what     provider modules should be loaded.</li> <li>By configuration, the set of provider modules to load would be     specified in a configuration file.</li> </ul> <p>Some of these methods may be combined.</p> <p>A provider module can be specified by full path, and can therefore be loaded even if it isn't located in the well known directory.</p> <p>After the Core loads a  provider module, it calls the provider module entry point.</p>"},{"location":"OpenSSL300Design/#provider-module-entry-point","title":"Provider Module Entry Point","text":"<p>A provider module must have the following  well known entry point:</p> <pre><code>int OSSL_provider_init(const OSSL_PROVIDER *provider,\n                       const OSSL_DISPATCH *in,\n                       const OSSL_DISPATCH **out\n                       void **provider_ctx);\n</code></pre> <p>If the entry point does not exist in the dynamically loaded object, then it is not a valid module and loading it will fail.</p> <p><code>in</code> is an array of functions that the Core passes to the provider.</p> <p><code>out</code> is an array of provider functions that the provider passes back to the Core.</p> <p><code>provider_ctx</code> (may be shortened to <code>provctx</code> elsewhere in this document) is an object optionally created by the provider for its own use (storing data it needs to keep around safely).  This pointer will be passed back to appropriate provider functions.</p> <p><code>provider</code> is a handle to a provider object belonging to the Core. This can serve as a unique provider identity which may be required in some API calls.  This object will also be populated with diverse data, such as module path, NCONF configuration structure for the provider (see CONF / NCONF values as parameters below for an idea on how that would be implemented), and these diverse values can then be retrieved by the provider using a params getter callback that the Core provides.  The type <code>OSSL_PROVIDER</code> is opaque.</p> <p><code>OSSL_DISPATCH</code> is an open structure that implements the <code>&lt; function-id, function-pointer &gt;</code> tuple mentioned in the introduction of Core and Provider Design:</p> <pre><code>typedef struct ossl_dispatch_st {\n    int function_id;\n    void *(*function)();\n} OSSL_DISPATCH;\n</code></pre> <p>The <code>funcion_id</code> identifies a specific function, and <code>function</code> is the pointer to that function. An array of these is terminated with <code>function_id</code> set to zero.</p> <p>The provider module may or may not be linked against libcrypto. If it is not then it will have no direct access to any libcrypto functions. All essential communication back to libcrypto will be via callback functions provided by the Core. It is important that memory allocated by specific providers is freed by the same providers. Similarly memory allocated in libcrypto should be freed by libcrypto.</p> <p>The API will specify a well known set of callback function numbers. More function numbers can be added in later releases as required without breaking backwards compatibility.</p> <pre><code>/* Functions provided by the Core to the provider */\n#define OSSL_FUNC_ERR_PUT_ERROR                        1\n#define OSSL_FUNC_GET_PARAMS                           2\n/* Functions provided by the provider to the Core */\n#define OSSL_FUNC_PROVIDER_QUERY_OPERATION             3\n#define OSSL_FUNC_PROVIDER_TEARDOWN                    4\n</code></pre> <p>The Core will set up an array of the well known callback functions:</p> <pre><code>static OSSL_DISPATCH core_callbacks[] = {\n    { OSSL_FUNC_ERR_PUT_ERROR, ERR_put_error },\n    /* int ossl_get_params(OSSL_PROVIDER *prov, OSSL_PARAM params[]); */\n    { OSSL_FUNC_GET_PARAMS, ossl_get_params, }\n    /* ... and more */\n};\n</code></pre> <p>This is only a few of the functions that the Core may see fit to pass to a provider.  We may also pass functions to help with logging, testing, instrumentation etc as the need comes up.</p> <p>Once the module is loaded and the well known entry point located, the init entry point can be invoked by the Core:</p> <pre><code>/*\n * NOTE: this code is meant as a simple demonstration of what could happen\n * in the core.  This is an area where the OSSL_PROVIDER type is not opaque.\n */\nOSSL_PROVIDER *provider = OSSL_PROVIDER_new();\nconst OSSL_DISPATCH *provider_callbacks;\n/*\n * The following are diverse parameters that the provider can get the values\n * of with ossl_get_params.\n */\n/* reference to the loaded module, or NULL if built in */\nprovider-&gt;module = dso;\n/* reference to the path of the loaded module */\nprovider-&gt;module_path = dso_path;\n/* reference to the NCONF structure used for this provider */\nprovider-&gt;conf_module = conf_module;\n\nif (!OSSL_provider_init(provider, core_callbacks, &amp;provider_callbacks))\n    goto err;\n\n/* populate |provider| with functions passed by the provider */\nwhile (provider_callbacks-&gt;func_num &gt; 0) {\n    switch (provider_callbacks-&gt;func_num) {\n    case OSSL_FUNC_PROVIDER_QUERY_OPERATION:\n        provider-&gt;query_operation = provider_callbacks-&gt;func;\n        break;\n    case OSSL_FUNC_PROVIDER_TEARDOWN:\n        provider-&gt;teardown = provider_callbacks-&gt;func;\n        break;\n    }\n    provider_callbacks++;\n}\n</code></pre> <p>The <code>OSSL_provider_init</code> entry point does not register any algorithms that will be needed, but it will return at least these two callbacks to enable this process:</p> <ol> <li><code>OSSL_FUNC_QUERY_OPERATION</code>, which is used to find out what     implementations of an operation are available.  This must return     an array of <code>OSSL_ALGORITHM</code> (see further down), which maps     algorithm names and property definition strings to implementation     dispatch tables.  This function must also be able to indicate if     the resulting array may be cached by the Core or not. This is     explained in further detail below.</li> <li><code>OSSL_FUNC_TEARDOWN</code>, which is used when the provider is unloaded.</li> </ol> <p>The provider register callback can only be run after the <code>OSSL_provider_init()</code> call succeeds.</p>"},{"location":"OpenSSL300Design/#provider-initialisation-and-algorithm-registration","title":"Provider Initialisation and Algorithm Registration","text":"<p>An algorithm offers a set of operations (capabilities, features, etc). The operations are invoked via functions. For example, the RSA algorithm offers signing and encryption (two operations) which are invoked via the init, update, final functions for signing and init, update, _final _ functions for encryption. The set of functions is determined by the implementation of the upper-level EVP code.</p> <p>Operations are identified by a unique number. For example:</p> <pre><code>#define OSSL_OP_DIGEST                     1\n#define OSSL_OP_SYM_ENCRYPT                2\n#define OSSL_OP_SEAL                       3\n#define OSSL_OP_DIGEST_SIGN                4\n#define OSSL_OP_SIGN                       5\n#define OSSL_OP_ASYM_KEYGEN                6\n#define OSSL_OP_ASYM_PARAMGEN              7\n#define OSSL_OP_ASYM_ENCRYPT               8\n#define OSSL_OP_ASYM_SIGN                  9\n#define OSSL_OP_ASYM_DERIVE               10\n</code></pre> <p>For a provider to make an algorithm usable by libcrypto, it must register an operation querying callback, which returns an array of implementation descriptors, given an operation identity:</p> <pre><code>&lt; algorithm name, property definition string, implementation `OSSL_DISPATCH*` &gt;\n</code></pre> <p>So for example, this query callback will return the list of all its digests if the given operation is <code>OSSL_OP_DIGEST</code>.</p> <p>Algorithms are identified by a string.</p> <p>The Core provides a set of services for the provider to use in the form of a function table.</p> <p>A provider will also offer a service for returning information (in the form of parameters as specified in Appendix 2 - Parameter Passing) via a callback provided by the provider, such as:</p> <ul> <li>version number</li> <li>Build strings - as per the current OpenSSL related build     information (only at the provider level)</li> <li>Provider name</li> </ul> <p>An individual operation may require multiple function callbacks to be defined in order to implement the operation. Each function will be identified by a numeric function identity. Each of the identities are unique for the combination of operation and function, i.e. the number assigned to the init function of the digest operation cannot be reused for init functions for other operations, those will have their own unique numbers. For example, for the digest operation, these functions are required:</p> <pre><code>#define OSSL_OP_DIGEST_NEWCTX_FUNC         1\n#define OSSL_OP_DIGEST_INIT_FUNC           2\n#define OSSL_OP_DIGEST_UPDATE_FUNC         3\n#define OSSL_OP_DIGEST_FINAL_FUNC          4\n#define OSSL_OP_DIGEST_FREECTX_FUNC        5\ntypedef void *(*OSSL_OP_digest_newctx_fn)(void *provctx);\ntypedef int (*OSSL_OP_digest_init_fn)(void *ctx);\ntypedef int (*OSSL_OP_digest_update_fn)(void *ctx, void *data, size_t len);\ntypedef int (*OSSL_OP_digest_final_fn)(void *ctx, void *md, size_t mdsize,\n                                       size_t *outlen);\ntypedef void (*OSSL_OP_digest_freectx_fn)(void *ctx);\n</code></pre> <p>An all in one version is also advisable for devices that cannot handle multi-part operations:</p> <pre><code>#define OSSL_OP_DIGEST_FUNC                6\ntypedef int (*OSSL_OP_digest)(void *provctx,\n                              const void *data, size_t len,\n                              unsigned char *md, size_t mdsize,\n                              size_t *outlen);\n</code></pre> <p>A provider then defines arrays containing the set of functions for each algorithm implementation and one array of algorithm descriptors for each operation.  The algorithm descriptor was mentioned higher up, and would be publically defined like this:</p> <pre><code>typedef struct ossl_algorithm_st {\n    const char *name;\n    const char *properties;\n    OSSL_DISPATCH *impl;\n} OSSL_ALGORITHM;\n</code></pre> <p>For example (and it is only an example, providers may arrange these things any way they want, the important thing is what the algorithm querying function such as <code>fips_query_operation</code> below returns) the FIPS module may define arrays like this for the SHA1 algorithm:</p> <pre><code>static OSSL_DISPATCH fips_sha1_callbacks[] = {\n    { OSSL_OP_DIGEST_NEWCTX_FUNC, fips_sha1_newctx },\n    { OSSL_OP_DIGEST_INIT_FUNC, fips_sha1_init },\n    { OSSL_OP_DIGEST_UPDATE_FUNC, fips_sha1_update },\n    { OSSL_OP_DIGEST_FINAL_FUNC, fips_sha1_final },\n    { OSSL_OP_DIGEST_FUNC, fips_sha1_digest },\n    { OSSL_OP_DIGEST_FREECTX_FUNC, fips_sha1_freectx },\n    { 0, NULL }\n};\nstatic const char prop_fips[] = \"fips\";\nstatic const OSSL_ALGORITHM fips_digests[] = {\n    { \"sha1\", prop_fips, fips_sha1_callbacks },\n    { \"SHA-1\", prop_fips, fips_sha1_callbacks }, /* alias for \"sha1\" */\n    { NULL, NULL, NULL }\n};\n</code></pre> <p>The FIPS provider init module entry point function might look like this:</p> <pre><code>static int fips_query_operation(void *provctx, int op_id,\n                                const OSSL_ALGORITHM **map)\n{\n    *map = NULL;\n    switch (op_id) {\n    case OSSL_OP_DIGEST:\n        *map = fips_digests;\n        break;\n    }\n    return *map != NULL;\n}\n\n#define param_set_string(o,s) do {                                  \\\n    (o)-&gt;buffer = (s);                                              \\\n    (o)-&gt;data_type = OSSL_PARAM_UTF8_STRING_PTR;                    \\\n    if ((o)-&gt;result_size != NULL) *(o)-&gt;result_size = sizeof(s);    \\\n} while(0)\nstatic int fips_get_params(void *provctx, OSSL_PARAM *outparams)\n{\n    while (outparams-&gt;key != NULL) {\n        if (strcmp(outparams-&gt;key, \"provider.name\") == 0) {\n            param_set_string(outparams, \"OPENSSL_FIPS\");\n        } else if if (strcmp(outparams-&gt;key, \"provider.build\") == 0) {\n            param_set_string(outparams, OSSL_FIPS_PROV_BUILD_STRING);\n        }\n    }\n    return 1;\n}\n\nOSSL_DISPATCH provider_dispatch[] = {\n    { OSSL_FUNC_PROVIDER_QUERY_OPERATION, fips_query_operation },\n    { OSSL_FUNC_PROVIDER_GET_PARAMS, fips_get_params },\n    { OSSL_FUNC_PROVIDER_STATUS, fips_get_status },\n    { OSSL_FUNC_PROVIDER_TEARDOWN, fips_teardown },\n    { 0, NULL }\n};\nstatic core_put_error_fn *core_put_error = NULL;\nstatic core_get_params_fn *core_get_params = NULL;\n\nint OSSL_provider_init(const OSSL_PROVIDER *provider,\n                       const OSSL_DISPATCH *in,\n                       const OSSL_DISPATCH **out\n                       void **provider_ctx)\n{\n    int ret = 0;\n\n    /*\n     * Start with collecting the functions provided by the core\n     * (we could write it more elegantly, but ...)\n     */\n    while (in-&gt;func_num &gt; 0) {\n        switch (in-&gt;func_num) {\n        case OSSL_FUNC_ERR_PUT_ERROR:\n            core_put_error = in-&gt;func;\n            break;\n        case OSSL_FUNC_GET_PARAMS:\n            core_get_params = in-&gt;func;\n            Break;\n        }\n        in++;\n    }\n\n    /* Get all parameters required for self tests */\n    {\n        /*\n         * All these parameters come from a configuration saying this:\n         *\n         * [provider]\n         * selftest_i = 4\n         * selftest_path = \"foo\"\n         * selftest_bool = true\n         * selftest_name = \"bar\"\n         */\n        OSSL_PARAM selftest_params[] = {\n            { \"provider.selftest_i\", OSSL_PARAM_NUMBER,\n              &amp;selftest_i, sizeof(selftest_i), NULL },\n            { \"provider.selftest_path\", OSSL_PARAM_STRING,\n              &amp;selftest_path, sizeof(selftest_path), &amp;selftest_path_ln },\n            { \"provider.selftest_bool\", OSSL_PARAM_BOOLEAN,\n              &amp;selftest_bool, sizeof(selftest_bool), NULL },\n            { \"provider.selftest_name\", OSSL_PARAM_STRING,\n              &amp;selftest_name, sizeof(selftest_name), &amp;selftest_name_ln },\n            { NULL, 0, NULL, 0, NULL }\n        }\n        core_get_params(provider, selftest_params);\n    }\n\n    /* Perform the FIPS self test - only return params if it succeeds. */\n    if (OSSL_FIPS_self_test()) {\n        *out = provider_dispatch;\n        return 1;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"OpenSSL300Design/#algorithm-selection","title":"Algorithm Selection","text":"<p>Multiple providers may be available at any one time. Existing application code re-compiled for this version should continue to work. At the same time it should be possible with minor code adjustments to be able to find and use algorithms using the new property based algorithm lookup capability.</p> <p>To illustrate how this might work, the code below is an example of how a simple AES-CBC-128 encryption might be done using OpenSSL 1.1.1. All error handling has been stripped out for simplicity.</p> <pre><code>EVP_CIPHER_CTX *ctx;\nEVP_CIPHER *ciph;\n\nctx = EVP_CIPHER_CTX_new();\nciph = EVP_aes_128_cbc();\nEVP_EncryptInit_ex(ctx, ciph, NULL, key, iv);\nEVP_EncryptUpdate(ctx, ciphertext, &amp;clen, plaintext, plen);\nEVP_EncryptFinal_ex(ctx, ciphertext + clen, &amp;clentmp);\nclen += clentmp;\n\nEVP_CIPHER_CTX_free(ctx);\n</code></pre> <p>In OpenSSL 3.0, such code would continue to work and would use algorithms from a provider (assuming nothing else has been configured, it will be the default provider). It could also be rewritten using explicit fetching as follows. Explicit fetching also enables the application to specify a non-default library context if required (<code>osslctx</code> in this example):</p> <pre><code>EVP_CIPHER_CTX *ctx;\nEVP_CIPHER *ciph;\n\nctx = EVP_CIPHER_CTX_new();\nciph = EVP_CIPHER_fetch(osslctx, \"aes-128-cbc\", NULL);                /* &lt;=== */\nEVP_EncryptInit_ex(ctx, ciph, NULL, key, iv);\nEVP_EncryptUpdate(ctx, ciphertext, &amp;clen, plaintext, plen);\nEVP_EncryptFinal_ex(ctx, ciphertext + clen, &amp;clentmp);\nclen += clentmp;\n\nEVP_CIPHER_CTX_free(ctx);\nEVP_CIPHER_free(ciph);                                                /* &lt;=== */\n</code></pre> <p>An application may wish to use algorithms from a different provider.</p> <p>For example, consider the scenario where an application wishes to use some algorithms from the FIPS provider, but still use the default algorithms in certain cases. This could be implemented in different ways, e.g.</p> <ol> <li>Only use FIPS algorithms.</li> <li>Default to using FIPS algorithms. Be able to override it on an \"as     needed\" basis to get access to a non FIPS algorithm.</li> <li>Default to not caring about FIPS algorithms. Be able to override     it on an \"as needed\" basis to get a FIPS algorithm.</li> </ol>"},{"location":"OpenSSL300Design/#only-fips","title":"Only FIPS","text":"<p>Compared to code written for pre-3.0.0 OpenSSL, all you need to do to only get FIPS implementations is something like this:</p> <pre><code>int main(void)\n{\n    EVP_set_default_alg_properties(NULL, \"fips=yes\");                 /* &lt;=== */\n    ...\n}\n</code></pre> <p>Then the above encryption code that uses <code>EVP_aes_128_cbc()</code>would continue to work as before. The <code>EVP_EncryptInit_ex()</code> call would use those default algorithm properties, and then look it up via the Core in order to get a handle to the FIPS implementation. This implementation would then be associated with the <code>EVP_CIPHER_CTX</code> object. If there isn't a suitable algorithm implementation available then the the <code>EVP_Encrypt_init_ex()</code> call will fail.</p> <p>The first parameter to <code>EVP_set_default_alg_properties</code> is the library context, NULL being the default internal one.</p>"},{"location":"OpenSSL300Design/#default-to-fips-but-allow-an-override","title":"Default to FIPS but allow an override","text":"<p>To default to using FIPS algorithms but override it on an as needed basis to non-FIPS algorithms, the application might instead do this, compared to code written for pre-3.0.0 OpenSSL:</p> <pre><code>int main(void)\n{\n    EVP_set_default_alg_properties(osslctx, \"fips=yes\");              /* &lt;=== */\n    ...\n}\n\nEVP_CIPHER_CTX *ctx;\nEVP_CIPHER *ciph;\n\nctx = EVP_CIPHER_CTX_new();\nciph = EVP_CIPHER_fetch(osslctx, \"aes-128-cbc\", \"fips!=yes\");         /* &lt;=== */\nEVP_EncryptInit_ex(ctx, ciph, NULL, key, iv);\nEVP_EncryptUpdate(ctx, ciphertext, &amp;clen, plaintext, plen);\nEVP_EncryptFinal_ex(ctx, ciphertext + clen, &amp;clentmp);\nclen += clentmp;\n\nEVP_CIPHER_CTX_free(ctx);\nEVP_CIPHER_free(ciph);                                                /* &lt;=== */\n</code></pre> <p>Here the <code>EVP_CIPHER_fetch()</code> call would combine properties from:</p> <ol> <li>The default algorithm properties</li> <li>The properties passed in as a parameter (with the passed in     properties taking precedence).</li> </ol> <p>Because the <code>EVP_CIPHER_fetch()</code> call overrides the default \"fips\" property it will look for an implementation of AES-CBC-128 that is not \"fips\".</p> <p>In this example, we see a non-default library context being used. This is only possible with explicitly fetched implementations.</p> <p>(note for the attentive: <code>\"fips!=yes\"</code> could as well be <code>\"fips=no\"</code>, but is provided here as an example of the \"not equal to\" operator)</p>"},{"location":"OpenSSL300Design/#default-to-not-caring-and-allow-override-for-fips","title":"Default to not caring and allow override for FIPS","text":"<p>To default to not using FIPS algorithms but override it on an as needed basis to use FIPS, the application code might look like this, compared to code written for pre-3.0.0 OpenSSL:</p> <pre><code>EVP_CIPHER_CTX *ctx;\nEVP_CIPHER *ciph;\n\nctx = EVP_CIPHER_CTX_new();\nciph = EVP_CIPHER_fetch(osslctx, \"aes-128-cbc\", \"fips=yes\");          /* &lt;=== */\nEVP_EncryptInit_ex(ctx, ciph, NULL, key, iv);\nEVP_EncryptUpdate(ctx, ciphertext, &amp;clen, plaintext, plen);\nEVP_EncryptFinal_ex(ctx, ciphertext + clen, &amp;clentmp);\nclen += clentmp;\n\nEVP_CIPHER_CTX_free(ctx);\nEVP_CIPHER_free(ciph);                                                /* &lt;=== */\n</code></pre> <p>In this version we have not overridden the default algorithm properties in \"main\", and therefore you get the standard out-of-the-box defaults which are to not mandate the use of FIPS. However we've explicitly set the \"fips\" property at the <code>EVP_CIPHER_fetch()</code> level, and so that overrides the default. When <code>EVP_CIPHER_fetch()</code> looks up the algorithm using the Core it will get a reference to the FIPS one (or fail if no such algorithm is available).</p>"},{"location":"OpenSSL300Design/#asymmetric-algorithm-selection","title":"Asymmetric algorithm selection","text":"<p>Note that for symmetric encryption/decryption and for message digests there are existing OpenSSL objects that can be used to represent an algorithm, i.e. <code>EVP_CIPHER</code> and <code>EVP_MD</code>. For asymmetric algorithms there is no equivalent object. The algorithm in use is inferred implicitly from the type of the <code>EVP_PKEY</code>.</p> <p>In order to solve this problem a new asymmetric algorithm object will be introduced. In the example below an ECDH key derivation is performed. We lookup a FIPS ECDH implementation (assuming we know that the given private key is an ECC one, of course) using a new algorithm object, <code>EVP_ASYM</code>:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new(privkey, NULL);\nEVP_ASYM *asym = EVP_ASYM_fetch(osslctx, EVP_PKEY_EC, \"fips=yes\");\nEVP_PKEY_CTX_set_alg(pctx, asym));\nEVP_PKEY_derive_init(pctx);\nEVP_PKEY_derive_set_peer(pctx, pubkey);\nEVP_PKEY_derive(pctx, out, &amp;outlen);\nEVP_PKEY_CTX_free(pctx);\n</code></pre>"},{"location":"OpenSSL300Design/#example-dynamic-views-of-algorithm-selection","title":"Example dynamic views of algorithm selection","text":"<p>The sequence diagram below shows an example of how the SHA256 algorithm might be selected and invoked from the default provider.</p> <p></p> <p>Note that each EVP layer call is implemented by thin wrappers in the EVP layer, which invoke similarly named functions within the provider on an algorithm by algorithm basis. The specific provider functions to be used will be looked up in the Core Dispatcher tables via an explicit <code>EVP_MD_fetch()</code> call that specifies the message digest name as a string and any other relevant properties. The returned \"md\" object contains function pointers to the implementation of the algorithm in the selected provider.</p> <p>The <code>EVP_MD_CTX</code> object is not passed through to the provider since we do not know whether any specific provider module is linked against libcrypto. Instead we simply pass through a black box handle (<code>void *</code> pointer), which the provider will associate with whatever structure it requires. This is allocated during an explicit <code>digestNewCtx()</code> call to the provider at the beginning of the operation, and freed at the end with a <code>digestFreeCtx()</code> call.</p> <p>The next diagram shows a slightly more complex scenario, i.e. an <code>EVP_DigestSign*</code> operation using RSA and SHA256. This diagram is drawn from the perspective of libcrypto with algorithms being provided by the FIPS module. A later section will examine this scenario from the perspective of the FIPS module.</p> <p></p> <p>An <code>EVP_DigestSign*</code> operation is more complicated because it involves two algorithms: a signing algorithm, and a digest algorithm. In general those two algorithms may come from different providers or the same one. In the case of the FIPS module the algorithms must both come from the same FIPS module provider. The operation will fail if an attempt is made to do otherwise.</p> <p>In spite of the added complexity of having two algorithms the same concepts apply as for the simpler <code>EVP_Digest*</code> operation shown in the earlier diagram. There are two contexts produced: an <code>EVP_MD_CTX</code> and an <code>EVP_PKEY_CTX</code>. Neither of these are passed through to the provider. Instead black box (<code>void *</code>) handles are created via explicit \"newCtx\" provider calls, and then those handles are passed through during subsequent \"init\", \"update\" and \"final\" operations.</p> <p>The algorithms are looked up in the Core dispatch tables using explicit <code>EVP_MD_fetch()</code> and <code>EVP_ASYM_fetch()</code> calls in advance.</p>"},{"location":"OpenSSL300Design/#fips-module","title":"FIPS Module","text":"<p>This is a FIPS 140-2 validated cryptographic module. It is a provider that contains FIPS validated/approved cryptographic algorithms only. Non FIPS algorithms will be supplied by the default provider  (not the FIPS module).</p> <p>The module is dynamically loadable - static linking is not supported.</p> <p>The FIPS Module will itself not have a \"FIPS mode\". The OpenSSL that can use the FIPS provider will have a \"mode\" concept that is compatible with the FIPS Module 2.0.0.</p>"},{"location":"OpenSSL300Design/#fips-module-version-numbering","title":"FIPS Module Version Numbering","text":"<p>The version will be FIPS module 3.0</p> <p>Any subsequent revisions will be labelled in a similar manner to previous releases i.e 3.0.x.</p> <p>For change letters or revalidations the version number of the FIPS Module will be updated to match the current version of the OpenSSL library.</p>"},{"location":"OpenSSL300Design/#detection-of-changes-inside-the-fips-boundary","title":"Detection of Changes inside the FIPS Boundary","text":"<p>For the sake of validation, we need to detect if any relevant source has changed.</p> <p>This can be done with a script that tokenizes the C sources the same way a C preprocessor does, but that is also taught to ignore certain parts of the source:</p> <ul> <li>System <code>#include</code> directives.</li> <li>Code that is conditioned away in FIPS mode (as described in     Conditional Code below).</li> </ul> <p>(reminder: a C preprocessor can, but doesn't not have to, collapse all non-newline whitespace and leave a standard single space between every token, and comments are considered to be whitespace for this purpose)</p> <p>The result of the tokenization process can then go through a checksum, which is stored in a file parallel to the source file and ultimately version controlled.</p> <p>The process will be something like this (not exactly, this is a code example to show the overall process):</p> <pre><code>    for f in $(FIPS_SOURCES); do\n        perl ./util/fips-tokenize $f | openssl sha256 -r\n    done | openssl sha256 -hex -out fips.checksum\n</code></pre> <p>There will also be some mechanism that alerts us of changes so we can take appropriate action.  For example:</p> <pre><code>    git diff --quiet fips.checksum || \\\n        (git rev-parse HEAD &gt; fips.commit; scream)\n</code></pre> <p>What <code>scream</code> should actually do is still to be determined.</p> <p>Updating <code>fips.checksum</code> should happen as part of a normal <code>make update</code>, which is the usual method to change and check changes on files that are version controlled.  OpenSSL's CIs already run this to see that nothing was forgotten, and breaks the build if something was changed by this command.  Running <code>make update</code> is also part of the normal OpenSSL release process.</p>"},{"location":"OpenSSL300Design/#how-to-react-to-a-change-of-the-signed-checksum","title":"How to react to a change of the signed checksum","text":"<p>In spite of <code>scream</code>, a changed checksum in our repo isn't very dramatic per se, it simply notifies us that we need to pay some extra attention to the FIPS source.</p> <p>Two possibilities:</p> <ol> <li>When it's soon time for a release and <code>fips.checksum</code> no longer     contains the checksum from the last validated source, send the     FIPS source to the lab and get the update validation process     started.</li> <li>At the same time as a release is made <code>fips.checksum</code> no longer     contains the checksum from the last validated source, send the     FIPS source to the lab (including diff files and a change list)     and get the appropriate update validation process started.</li> </ol> <p>The list of validated checksums will be listed somewhere else (to be specified later)</p>"},{"location":"OpenSSL300Design/#compiling","title":"Compiling","text":"<p>For each FIPS provider source file, we calculate that file's checksum and check it against the collected checksum in <code>fips.checksum</code>, and refuse to compile if there's a mismatch.</p>"},{"location":"OpenSSL300Design/#fips-mode","title":"FIPS Mode","text":"<p>The FIPS module only contains FIPS validated cryptographic algorithms. Any FIPS mode 'switching logic' will be outside the FIPS module boundary - this will be handled by the \"fips\" property.</p> <p>Conditional code related to FIPS mode is discussed in a separate section.</p> <p>The following FIPS API's will continue to be available for application use (for consistency the same names present in 1.1.1 are used):</p> <ul> <li> <p><code>int FIPS_mode_set(int on)</code></p> <p>Ensures that \"fips=yes\" is set (for <code>on != 0</code>) or \"fips\" is unset (for <code>on == 0</code>) in the current global property setting. This will also attempt to fetch the <code>HMAC-SHA256</code> algorithm with the property \"fips=yes\" and ensure that it successfully returns.</p> </li> <li> <p><code>int FIPS_mode(void)</code></p> <p>Returns 1 if the current global property string contains the property \"fips=yes\" (or \"fips\"), 0 otherwise.</p> <p>We could check if there is any provider available that offers a FIPS algorithm currently and handle this a little differently.</p> </li> <li> <p><code>int FIPS_self_test(void)</code></p> <p>If the <code>FIPS_mode()</code> returns true then this runs the KATs.</p> <p>The integrity test will not be covered. That will be a separate function if we decide to provide it.</p> <p>Returns 1 on success; 0 on failure or there being no OpenSSL FIPS provider.</p> </li> </ul> <p>Note: these functions will only operate in the context of the OpenSSL FIPS provider - not in the context of any other FIPS provider. These are legacy, deprecated interfaces. The <code>EVP_set_default_alg_properties()</code> function(s) should be used for non-legacy configuration.</p>"},{"location":"OpenSSL300Design/#roles-and-authentication","title":"Roles and Authentication","text":"<p>There are two implied roles - Cryptographic Officer (CO) and User. Both roles support all the same services. The only difference is that the CO installs the software. The module should not support user authentication (it is not required for level 1). This can all be explained in the security policy without any specific code.</p>"},{"location":"OpenSSL300Design/#finite-state-model-fips-140-2-section-44","title":"Finite State Model (FIPS 140-2 section 4.4)","text":"<p>A state machine needs to be defined.</p> <p>We will require the following:</p> <ul> <li>Self test states - initialisation, running, self test, error,     shutdown, (and potentially post_triggered)</li> <li> <p>Error States - If a self test fails the module should return an     error for that operation. It is permissible to try to clear the     error and repeat the operation.  If failure persists, the module     should enter an error state.  This can either be a hard error     state where all cryptographic operations fail or a reduced     functionality state where the failing components only return error     when used.</p> <p>Failing a self test can be triggered by:</p> <ol> <li>Continuous tests (key pair gen pairwise test (sign/verify) and     random number compare test from entropy source to verify     random number inputs into the DRBG are not the same).</li> <li>DRBG health tests - this can be made to cause an error always     just in the RNG (rather than setting a global error     state)<sup>1</sup>.</li> <li>POST Integrity test failure either at install, startup, or on     demand.</li> <li>POST KAT failure at startup, or on demand.</li> </ol> <p>An internal API will be supplied to set the failure state for the above cases.</p> </li> </ul>"},{"location":"OpenSSL300Design/#state-machine","title":"State Machine","text":"<p>States which are not present in the state machine are shown dotted. The edges into and out of the error state are dashed  to indicate that they are not expected to be traversed.</p> <p></p> <p>The state model consists of these states:</p> <ol> <li>Power Off: the FIPS module is not loaded into an application     and the shared library is not in memory.</li> <li>Power On: the FIPS module has been loaded by an application     and the shared library is in memory.  Default Entry Point     Constructors will be initiated.</li> <li>Initialisation: <code>OSSL_provider_init</code> is called.</li> <li> <p>Integrity Check (POST Integrity): the module checksums itself     and verifies that it hasn't been inadvertently altered.</p> <p>(This is run during the FIPS providers <code>OSSL_provider_init()</code>).</p> </li> <li> <p>Self Test (POST KAT): the FIPS module is performing its POST     during installation or the POST on demand from an API call.</p> </li> <li>Running: the FIPS module is in its normal operating state.     All APIs can be used and continuous testing is in force.</li> <li>Error: the FIPS module has entered an error state.  All     cryptographic APIs will return an error when called.</li> <li>Shutdown: the FIPS module is being terminated and unloaded     from the using application.</li> </ol> <p>The edges between states are:</p> <ol> <li>Power Off to Power On: this transition is performed by the     operating system when loading the shared library into an     application.</li> <li>Power On to Initialisation: this transition occurs when     the shared library constructor is called.</li> <li>Power On to Shutdown: this transition is triggered if the     constructor cannot be called or if it fails.</li> <li>Initialisation to Integrity Check: this transition occurs     when the initialisation code has completed.  The module integrity     checksum is computed and compared to the expected value.</li> <li>Initialisation to Error: this transition is triggered if     the initialisation code encounters an error before the self tests     are initiated.</li> <li>Integrity Check to Running: this transition occurs for all     startup where the integrity checks succeed after initial     installation.</li> <li>Integrity Check to Self Test: this transition occurs     during installation when the integrity checks succeed.</li> <li>Integrity Check to Error: this transition is triggered if     the integrity check fails.</li> <li>Running to Shutdown: this transition occurs when the FIPS     module is being finalised.</li> <li>Running to Error: this transition is triggered if one of      the continuous tests fail.</li> <li>Running to Self Test: this transition is triggered by the      application when it initiates the self tests manually.  The      integrity checks are not rerun.</li> <li>Self Test to Running: this transition occurs when the      self tests pass.</li> <li>Self Test to Error: this transition is triggered if the      self tests fail.</li> <li>Shutdown to Power Off: this transition occurs when the      FIPS module is unloaded from the memory of the application.</li> <li>Error to Shutdown: this transition occurs when the FIPS      module is being finalised.</li> </ol> <p>If possible, we should aim to have algorithms registered only in the running state.  Any transition into the running state should allow registration / caching of cryptographic algorithms and any transition into the error or shutdown states should flush all cached algorithms from libcrypto.  By taking this approach, we obviate the need to check the state in all the cryptographic factory functions.  This avoids special case access for the self tests (when started manually) while denying access to external callers.</p>"},{"location":"OpenSSL300Design/#services","title":"Services","text":"<p>The FIPS module provides the following services.</p> <ul> <li>Show status. This returns 1 if the 'Running' state is active     otherwise it returns 0.</li> <li>Cryptographic services such as HMAC, SHS, Encryption. See     Algorithms.</li> <li>Self Test (POST On Demand) - A public API FIPS_self_test() in     libcrypto will be used to access this method. The method used must     be the same one that is triggered during initialization. The     Security Policy will state that this may only be accessed while no     other cryptographic services are running.</li> <li>Key Zeroization. See CSP/Key Zeroization.</li> </ul> <p>Services are only operational in the running state. Any attempts to access services in any other state will result in an error being returned. If the POST fails then any attempt to access any service should result in an error being returned.</p>"},{"location":"OpenSSL300Design/#self-testing","title":"Self Testing","text":"<p>Self-testing consists of power-on self-tests (POST) and run-time tests (such as ensuring entropy isn't repeated as input to the RNG).</p> <p>The POST consists of a module integrity check (which runs each time a FIPS-using application runs) as well as algorithm KATs (which can be run once at installation time).</p> <p>The POST tests run during the call to the FIPS modules <code>OSSL_provider_init()</code> entry point.</p> <p>In order to implement the Integrity Test and KAT in the proper order, the module needs access to the following data items:</p> <ol> <li>Path to the library;</li> <li>HMAC-SHA256 of the library contents (or path to the file with     that);</li> <li>An indication that the library has been installed and the KAT has     passed; and</li> <li>HMAC-SHA256 of that indicator.</li> </ol> <p>These values will be part of the parameters that can be retrieved through the <code>OSSL_PROVIDER</code> object and associated <code>OSSL_PARAM</code> getter. A \"safer\" get-value function that doesn't expand environment variables, etc. will be used to fetch the values. In addition, functions to access and return the library contents (probably BIO-based by having the Core pass a select number of BIO functions in its dispatch table) will also have to be passed into the module so that it can generate its own digest of the library.</p> <p>A new OpenSSL \"fips\" application will provide install (run the KAT and output data for the config file) and check (see if the values in the config file are valid) capabilities.</p> <p>The module's Default Entry Point (DEP), the \".init\" function in Linux libraries, will set a module variable (probably the state variable). This variable will be checked in the OSSL_provider_init() and, if set (which it always will be), will verify the values in the file. This two-step process meets the FIPS requirement of having the DEP ensure the tests are run, but allows us to implement the tests when the rest of the module is being initialized during normal operation.</p> <p>As part of the build process the integrity checksum of the FIPS module must be saved to a file. This could be done as a script.  It is just a HMAC_SHA256  of the entire FIPS module file with a known fixed key. If the library is signed then the checksum would have to be calculated after the signature is applied.</p> <p>A fixed key of at least 112 bits will be embedded in the FIPS module for all HMAC integrity operation(s), this key will also be made available to the external build script.</p> <p>For testing purposes all active POST tests run even if one or more of them fail.</p>"},{"location":"OpenSSL300Design/#integrity-checksum-location","title":"Integrity Checksum Location","text":"<p>The integrity checksum will be saved into a seperate file during installation. This file will be in the same location as the FIPS module itself by default, but may be configured to be in a different location.</p>"},{"location":"OpenSSL300Design/#known-answer-tests","title":"Known Answer Tests","text":"<p>The purpose of a KAT is to perform a health-check of the cryptographic module to identify catastrophic failures or alterations of the module between power cycles and not that the implementation is correct.</p> <p>There are FIPS 140-2 IG's rules that specify that each supported algorithm (not each mode) need to be tested, and that if an algorithm is tested as a component of another test then it does not need separate tests. Here is the list of algorithms that 'need' to be tested.</p> <ul> <li>Cipher encrypt/decrypt<ul> <li>AES_128_GCM<sup>2</sup></li> <li>TDES_CBC</li> </ul> </li> <li>Digests<ul> <li>SHA1</li> <li>SHA256 is required but tested elsewhere</li> <li>SHA512</li> <li>SHA3-256</li> </ul> </li> <li>Sign/Verify tests<ul> <li>DSA_2048</li> <li>RSA_SHA256 (with PKCS #1 v1.5 padding)</li> <li>ECDSA P256</li> </ul> </li> <li>DRBG Health Tests for any supported DRBG mechanisms<ul> <li>CTR (AES_128_CTR)</li> <li>HASH - SHA256<sup>3</sup></li> <li>HMAC - SHA256</li> </ul> </li> <li>Derived Tests (Compute Z)<ul> <li>ECDSA P256</li> <li>ECDH</li> </ul> </li> <li>KDF's<ul> <li>KBKDF (HKDF for TLS)</li> </ul> </li> </ul> <p>Note: HMAC-SHA-256 is used by the integrity test, so there is no need for a seperate HMAC test.</p>"},{"location":"OpenSSL300Design/#api-access","title":"API access","text":"<p>In order to easily modify and change the self tests that are run - the self tests should be data driven. The POST tests are run before any methods are registered but the method tables can still be used indirectly. Lower level API's will still be required to set up keys (params, public/private)  - the key loading code should be isolated in a separate function.</p> <p>An init method  that sets up any required dependencies for the high level functions will be required i.e. <code>set_cpuid</code> may need to be called before doing primitive calls.</p> <p>API's for different types of self tests should be provided for digests, ciphers, signatures, DRBGs, KDFs, HMACs.</p> <p>The parameter passed into each of these tests is KAT data.</p>"},{"location":"OpenSSL300Design/#security-strength","title":"Security Strength","text":"<p>SP 800-131A rev2 disallows certain algorithms and key lengths after certain dates. Security strengths are associated with these items.</p> <p>Algorithms with at least 112 bits of security strength are allowed.</p> <p>For signature verification, security strengths of at least 80 and below 112 are allowed for legacy purposes.</p> <p>These two values could be defined and enforced in the FIPS module for keys, or it can be handled more simply in the Security Policy Document.</p> <p>They could be defined by public API's that allow setting of these minimum values.</p> <p>A concept of target security strength should also be added, this value would be used during key generation algorithms, which have an input target security strength parameter specified by their standards.</p>"},{"location":"OpenSSL300Design/#sp800-56a-56b","title":"SP800-56A &amp; 56B","text":"<p>These standards contain Key Agreement protocols. In order to test the protocols the following low level primitives would need to be in the cryptographic module.</p> <ul> <li>Compute key methods - These already exist. (e.g <code>DH_compute_key()</code>).</li> <li>Key Generation - (RSA     FIPS 186-4     Keygen is currently missing).</li> <li>Key Validation - (Mostly implemented).</li> </ul>"},{"location":"OpenSSL300Design/#fips-186-4-rsa-key-generation","title":"FIPS 186-4 RSA Key Generation","text":"<ul> <li> <p>Initial Code for RSA key generation has been written     (https://github.com/openssl/openssl/pull/6652)</p> <p>Outstanding work is to plumb this into the FIPS module. The OpenSSL FIPs provider will have the logic that enforces the key size limits. *   A pairwise consistency test (Conditional Self Test) is required for RSA, DSA &amp; ECDSA key pair generation. As the purpose of keys is not known during key generation, FIPS 140-2 IG states that the same pairwise tests can be used for both modes i.e Signatures and Encryption. *   1024 bit keys are not allowed for RSA key generation. *   The Key generation algorithms have the concept of a target_security_strength. i.e- the code in key generation needs the following check for RSA for example</p> <pre><code>if (target_strength &lt; 112\n    || target_strength &gt; 256\n    || BN_security_bits(nbits) &lt; target_strength)\n    return 0;\n</code></pre> </li> </ul>"},{"location":"OpenSSL300Design/#dh-key-generation","title":"DH Key Generation","text":"<ul> <li>DH Key generation - This could possibly be broken up so that it     matches the standard steps. It is currently a fairly complex     monolithic function that is also used for validation.</li> </ul>"},{"location":"OpenSSL300Design/#key-validation","title":"Key Validation","text":"<ul> <li>RSA     SP 800-56B     Key validation - public key, private key and key-pair checks that     conform to the standard have been added to     PR #6652.</li> <li>DH key validation checks need to be checked that they match the     standard.</li> <li>EC key validation matches the standards checks.</li> <li>AES-XTS mode requires a tweak key check.</li> </ul> <p>For KAS DH Params - two types are supported:</p> <ol> <li> <p>Approved Safe Prime groups given by the following:</p> <p>(where g=2, q=(p-1)/2, priv=[1, q-1], pub=[2, p-2])</p> <p>TLS:  (ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, ffdhe8192)</p> <p>IKE: (modp-2048, modp-3072, modp-4096, modp-6144, modp-8192)</p> <p>Only the above safe primes can be validated - any others should fail.</p> <p>Safe primes can be used for security strengths of at least 112 bits. FIPS specific checks to validate the group may be required.</p> </li> <li> <p>FIPS 186-4     param sets can be used for backwards compatibility with security     strength of 112 bits only. The groups are</p> <p>FB (2048, 224) &amp;</p> <p>FC (2048, 256).</p> <p>This requires the seed and counter to be saved for validation purposes.</p> </li> </ol> <p>If both types need to be supported then different key validation code will be required.</p> <p>The existing <code>DH_Check()</code> will require FIPS specific checks for the approved types.</p> <p>Keygen is the same for both (the security strength and max bitlen of private key are inputs).</p> <p>DSA = 'FFC' in FIPS 186-4. The DSA key generation/key validation could be reworked so that it matches the standard steps better. The key validation would benefit from this and can possibly be reused for the DH case if required.</p>"},{"location":"OpenSSL300Design/#gcm-iv-generation","title":"GCM IV Generation","text":"<p>For the FIPS module AES GCM has requirements related to unique key/IV pairs i.e.</p> <ul> <li>Key/IV pair's must be unique for encryption.</li> <li>The IV's must be generated inside the FIPS boundary.</li> <li>For TLS the counter portion of the IV must be set by the     module. The module must ensure that when the counter is exhausted     an error is returned.</li> <li>For a given key (for any IV length) the total number of     invocations of the authenticated encryption function must be less     than 2^32^.</li> <li>A loss of power to the module should not cause the repetition of IVs.</li> </ul> <p>The Random Construction method for IV generation (from SP 800-38D) will be used (except for TLS which will behave the same way it currently does). The Random Construction consists of a free field (which will be NULL) and a random field which will use a DRBG that can return at least 96 bits of entropy strength. This DRBG needs to be seeded by the module.</p> <p>The existing code needs to be modified so that an IV is generated if it is not set during the init() phase. The do_cipher() method can then be used to generate an iv if required..</p> <pre><code>int aes_gcm_cipher()\n{\n    ....\n    /* old code just returned -1 if iv_set was zero */\n    if (!gctx-&gt;iv_set) {\n        if (ctx-&gt;encrypt) {\n           if (!aes_gcm_iv_generate(gctx, 0))\n               return -1;\n           } else {\n               return -1;\n           }\n        }\n    }\n}\n</code></pre> <p>The generate code would look like the following:</p> <pre><code>#define AES_GCM_IV_GENERATE(gctx, offset)                   \\\n    if (!gctx-&gt;iv_set) {                                    \\\n        int sz = gctx-&gt;ivlen - offset;                      \\\n        if (sz &lt;= 0)                                        \\\n            return -1;                                      \\\n        /* Must be at least 96 bits */                      \\\n        if (gctx-&gt;ivlen &lt; 12)                               \\\n            return -1;                                      \\\n        /* Use DRBG to generate random iv */                \\\n        if (RAND_bytes(gctx-&gt;iv + offset, sz) &lt;= 0)         \\\n            return -1;                                      \\\n        gctx-&gt;iv_set = 1;                                   \\\n    }\n</code></pre> <p>The generated IV can be retrieved via <code>EVP_CIPHER_CTX_iv()</code> so a ctrl id should not be  needed.</p> <p>Ideally in FIPS mode trying to set the GCM IV parameter would result in an error. In practice there may be some applications that still require setting of the IV, so it is recommended  that this is specified as a security policy item.</p> <p>The security policy would also need to state the following: (See FIPS 140-2 IG A.5)</p> <ul> <li>When the power is lost and then restored, a new key for use with     AES GCM encryption shall be established.</li> <li>The total number of invocations using the same key must be less     than 2^32^.</li> <li>Scenario 1: IV gen is in compliance with the TLS protocol.</li> <li>Scenario 2: IV gen using     NIST SP 800-38D     (Section 8.2.2).</li> </ul>"},{"location":"OpenSSL300Design/#cspkey-zeroization","title":"CSP/Key Zeroization","text":"<p>We must set all Critical Security Parameters (CSPs) to zero when they are no longer needed. This might happen at different times dependent on the context:</p> <ul> <li>Temporary copies of CSPs may be stack or heap allocated, and will     be zeroized within the relevant function for the scope within     which they are used.</li> <li>Some CSPs will have a lifetime associated with an OpenSSL object     such as an <code>EVP_PKEY</code>, or an <code>EVP_CIPHER_CTX</code>. In this case the     CSPs will be zeroized at the point that these objects are     freed. In some cases objects may be reused (e.g. an     <code>EVP_CIPHER_CTX</code> can be reused for multiple encryption     operations), in which case any CSPs still present in the object     will be zeroized at the point that it is reinitialized for the new     operation.</li> <li>Some CSPs (e.g. internal DRBG state) may live for the entire time     that the OpenSSL FIPS Module is loaded. In this case the state     will be encapsulated within OpenSSL objects. All OpenSSL Providers     (including the FIPS Module Provider) will have the ability to     register an \"unload\" function which is to be called when OpenSSL     is closed down (or the module is unloaded for any other     reason). The objects containing CSPs will be freed (and hence     zeroized) by this unload function.</li> <li>According to     FIPS 140-2 IG     4.7: Cryptographic keys used by a cryptographic module ONLY to perform     FIPS 140-2     Section 4.9.1 Power-Up Tests are not considered CSPs and therefore     do not need to meet the     FIPS 140-2     Section 4.7.6 zeroization requirements.</li> </ul> <p>The OpenSSL FIPS Module will contain its own copy of the standard <code>OPENSSL_cleanse()</code> function to perform the zeroization. This is implemented using platform specific assembler.</p>"},{"location":"OpenSSL300Design/#drbg","title":"DRBG","text":"<p>The following API's existed in the old FIPS module and may need to be re-added:</p> <ul> <li>FIPS_drbg_health_check: runs the DRBG KAT tests on demand.  We     will need this available.</li> <li>FIPS_drbg_set_check_interval: sets the interval (number of     generate calls) between running the DRBG KATs.  This doesn't seem     like it is necessary, these tests are run at power up but are not     required to be run later, however this call is useful for failure     testing.</li> </ul>"},{"location":"OpenSSL300Design/#derivation-function","title":"Derivation Function","text":"<p>As per #2 in FIPS 140-2 IG 14.5, CTR DRBG will need to support the derivation function unconditionally. With the derivation function disabled, the current code has issues reseeding.  Moreover, without a derivation function, additional justification is required from the lab.</p>"},{"location":"OpenSSL300Design/#test-requirements","title":"Test Requirements","text":"<ul> <li>The <code>uninstantiate()</code> needs to demonstrate that the internal state     has been zeroized.</li> <li>Failure testing requires a function for DRBG's to always produce the same     output.</li> </ul>"},{"location":"OpenSSL300Design/#other-items-to-consider","title":"Other Items to Consider","text":"<p>In addition to entropy, described below, the following items need to be considered:</p> <ul> <li>The entropy expansion in     NIST SP 800-90C     10.1.2 should be considered for implementation.</li> <li>A better DRBG selection mechanism to choose between the available     DRBGs.</li> <li>Support for prediction resistance.  I.e. attempt to collect more     entropy from our sources when requested.</li> <li>We need to figure out what the DRBG layer is going to look like. A     fair portion of the code will need to sit inside the FIPS     module. This code currently accesses EVP functionality which might     not be exposed inside the module. e.g. <code>drbg_ctr_init()</code> resolves     the <code>EVP_CIPHER</code> from a NID, and then sets up an <code>EVP_CIPHER_CTX</code>.</li> </ul>"},{"location":"OpenSSL300Design/#entropy","title":"Entropy","text":"<p>For all platforms, the operating system will provide entropy.  For some platforms, built in hardware random number generators can also be used, although this introduces additional justification needs.</p> <p>For UNIX-like systems, one of the system calls <code>getrandom</code> or <code>getentropy</code> or the random device, <code>/dev/random</code>, will be used as entropy sources.  Preference to be given to the system calls.  Other strong random devices that can be used instead of <code>/dev/random</code> include: <code>/dev/srandom</code> and <code>/dev/hwrng</code>.  Note, <code>/dev/urandom</code>, <code>/dev/prandom</code>, <code>/dev/wrandom</code> and <code>/dev/arandom</code> are not useable for FIPS operations without additional justification.</p> <p>On Windows, <code>BCryptGenRandom</code> or <code>CryptGenRandom</code> will be used as entropy sources.</p> <p>On VMS, various pieces of system status information will be used as entropy sources.  Note, this will require justification and analysis to attest to the quality of the sources.</p> <p>For iOS, SecRandomCopyBytes which produces cryptographically secure random bytes.</p> <p>FIPS only allows one entropy source to be credited so the FIPS module will rely solely on the aforementioned operating system sources. Other sources, e.g. egd, hardware devices and the like, will not be used.</p>"},{"location":"OpenSSL300Design/#work-to-do-to-complete-the-entropy-solution","title":"Work to do to Complete the Entropy Solution","text":"<p>The DRBG health tests need to be added to the random framework so that the seed material being fed into the DRBGs is checked.  The check is for no two sequential blocks of seed material being identical.  The check is made after all entropy sources are coalesced together and if it fails, reseeding the DRBGs fails forever more.  We get to define the block size used: 64 bits.  This is a balance between the probability of accidentally receiving a duplicate block (2^-64^) and grabbing too much entropy from the operating system (since the first block is discarded).  Other obvious block sizes that could be used are 128 and 256 bits.</p> <p>The initial block of data must be zeroed and discarded after it is used.</p>"},{"location":"OpenSSL300Design/#gcm-iv","title":"GCM IV","text":"<p>A recent update to FIPS 140-2 IG A.5 states that justification is required if the module claims to generate a random IV for GCM.  We would need to substantiate that the module can obtain the required 96 bits of entropy from the operating system.  This should not be an insurmountable problem if the blocking calls to the operating system's randomness source are used and at least this amount is used as seed material for the DRBGs.</p>"},{"location":"OpenSSL300Design/#fips-module-boundary","title":"FIPS Module Boundary","text":"<p>Once in a FIPS module provided algorithm, we must remain within the FIPS module for any other cryptographic operations. It would be allowed by the FIPS rules for one FIPS module to use another FIPS module. However, for the purposes of the 3.0 design we are making the simplifying assumption that we will not allow this. For example an <code>EVP_DigestSign*</code> implementation uses both a signing algorithm and digest algorithm. We will not allow one of those algorithms to come from the FIPS module, and one to come from some other provider.</p> <p>All providers are assigned a unique <code>OSSL_PROVIDER</code> object when they are initialised. When the FIPS module is asked to use an algorithm it will verify that the implementation <code>OSSL_PROVIDER</code> object for that algorithm is the same as its own <code>OSSL_PROVIDER</code> object (i.e. the one that was passed to <code>OSSL_provider_init</code>). For example consider the case of an <code>EVP_DigestSign*</code> using RSA and SHA256. Both algorithms will be looked up externally to the FIPS module using the Core. The RSA signing algorithm is the first entry point and the \"init\" call will be passed references to the SHA256 algorithm to be used. The FIPS module implementation will check that the <code>OSSL_PROVIDER</code> object associated that the SHA256 implementation that it has been asked to use is also within the FIPS module boundary. If it is not then the \"init\" operation will fail. This is illustrated in the diagram below, which shows this operation from the perspective of the FIPS module.</p> <p></p> <p>Note that within the FIPS module we are using EVP concepts (EVP_MD_CTX, EVP_PKEY_CTX, etc) in order to implement this. These are copies of the EVP implementation found in libcrypto. The FIPS module is not linked against libcrypto. This is to ensure that the complete operation stays within the boundary of the FIPS module without calling code that is external to it.</p>"},{"location":"OpenSSL300Design/#asn1-code","title":"ASN.1 code","text":"<p>ASN.1 DER (distinguished encoding rules) is used to:</p> <ul> <li>serialize keys and parameters</li> <li>serialize DSA and ECDSA signatures, which consist of two     values, r and s</li> <li>encode the signature digest OBJECT IDENTIFIER (OID) that is placed     in RSA PKCS #1 padding</li> <li>serialize X.509 certificates and CRLs</li> <li>other PDUs, such as PKCS #7/CMS, OCSP, PKCS #12, etc.</li> </ul> <p>The FIPS module will not have a copy of the ASN.1 DER encoder/parser and there will be no requirement for any provider to perform ASN.1 serialization/deserialization for algorithms implemented by OpenSSL.</p> <p>All ASN.1 serialization/deserialization will be performed in libcrypto, with composite-value key, parameter and signature structures crossing the Core/provider boundary as an array of items, using the public data structure defined in Appendix 2 - OpenSSL parameter passing.</p> <p>The encoded digest OIDs used for RSA PKCS #1 padding will either be pre-generated (as was done in the old FIPS module using the SHA_DATA macro) or generated on demand using a simple function that only generates encoded OIDs for the small set of digests supported by PKCS #1 padding. These digest OIDs occur in the \"OID tree\" under a common node. Verifying the padding will include getting the encoded OID for the expected digest and comparing the bytes with what occurs in the padding; no DER parsing/decoding is required.</p>"},{"location":"OpenSSL300Design/#code-maintenance","title":"Code Maintenance","text":""},{"location":"OpenSSL300Design/#source-code-structuretree-clean-up","title":"Source code structure/tree clean-up","text":"<p>Cryptographic implementations (<code>crypto/evp/e_*.c</code> and most of <code>crypto/evp/m_*.c</code>; essentially any code that defines an <code>EVP_CIPHER</code>, <code>EVP_MD</code>, <code>EVP_PKEY_METHOD</code>, <code>EVP_MAC</code>, or <code>EVP_KDF</code>) must move out of the evp directory.  They will all end up being part of one or two providers, so they should end up in a provider specific sub-tree.</p> <p>There will be a new directory <code>providers/</code>, where provider specific code is moved. <code>providers/build.info</code> defines exactly what source is used in what provider module(s).</p>"},{"location":"OpenSSL300Design/#shared-source-code","title":"Shared source code","text":"<p>The FIPS provider module and the default provider will share the same source, under different conditions, such as different include paths or different macros being defined (the latter requires added support in the build system). An example <code>build.info</code> that does this:</p> <pre><code>PROVIDERS=p_fips p_default\n\nSOURCE[p_fips]=foo.c\nINCLUDE[p_fips]=include/fips\n\nSOURCE[p_default]=foo.c\nINCLUDE[p_default]=include/default\n</code></pre> <p>Or, using macros:</p> <pre><code>PROVIDERS=p_fips p_default\n\nSOURCE[p_fips]=foo.c\nDEFINE[p_fips]=FIPS_MODE\n\nSOURCE[p_default]=foo.c\n</code></pre> <p>Note: some keywords aren't yet part of the <code>build.info</code> language.</p>"},{"location":"OpenSSL300Design/#conditional-code","title":"Conditional Code","text":"<p>We need a consistent approach to the compile-time inclusion of FIPS-specific code, and in some cases the exclusion of code that FIPS does not permit.</p> <p>Compile-time controls will be done via <code>#ifdef FIPS_MODE</code>. This ensures that all relevant files are compiled explicitly for non-FIPS or for use within the FIPS module. Since every file will be compiled twice (in the default provider, and in the FIPS module), once with each setting, there is no benefit to using a run-time if statement with constant value. (Further, a runtime setting will not always work (such as when expanding macros like BLOCK_CIPHER_custom, which create a global variable of function pointers.)</p> <p>The build system will support this by building FIPS provider object files with <code>-DFIPS_MODE</code> and default provider object files, which come from the same source, without the command line define.</p> <p>For runtime checks, a test for a TLS connection being in FIPS mode will be required.  This can be done in a generic way by checking the property query string that is associated with a specific <code>SSL_CTX</code> or <code>SSL</code> object, to see if the \"fips\" property was set.</p>"},{"location":"OpenSSL300Design/#fips-testing","title":"FIPS Testing","text":"<p>The following types of tests are required:</p> <ul> <li>CAVS testing for CMVP validated algorithms</li> <li>FIPS Test Suite that can run all FIPS module algorithms.</li> <li>POST failure testing.</li> </ul> <p>Acumen will write applications that use libcrypto to gain access to the FIPS provider via the EVP layer.</p> <p>Any special case code needed to return intermediate values (say for CAVS key generation), to display info (self test states), or change the normal flow of FIPS module code (e.g - self test failure or failing a keygen loop that supplies fixed rand values) will be controlled by embedding callbacks into the FIPS module code.</p> <p>It is recommended that this callback code would be conditionally compiled into the module, since some of the values should not be returned (e.g- intermediate values in keygen are not supposed to be output by the FIPS module).</p> <p>rand_bytes() will be overridden for tests that require fixed rand_bytes to be used.</p>"},{"location":"OpenSSL300Design/#fips-test-callbacks","title":"FIPS Test callbacks","text":"<p>The application can optionally supply a single callback function that can be used to process values received from the FIPS module. (Multiple callbacks could be registered if this is required).</p> <p>The optional application callback would be of the form:</p> <pre><code>static int fips_test_callback(const char *type, void *arg)\n{\n    return 1;\n}\n</code></pre> <p>The return value can be used to control flow in special cases inside the FIPS module code.</p> <p>The type is passed in from the FIPS module hook. Each different hook in the FIPS module should have  a unique type. The type determines what the arg param contains (either a struct (e.g- intermediate values), a name, or int.</p> <p>The callback in the FIPS module will be of the form</p> <pre><code>MY_STRUCT  data;   /* values that need to be returned to the application */\ndata.i = 1;\n.....\nif (FIPS_test_cb != NULL)\n    FIPS_test_cb(FIPS_TEST_CB_RSA_KEYGEN_GET, (void *)&amp;data);\n</code></pre>"},{"location":"OpenSSL300Design/#post-failure-testing-and-logging","title":"POST Failure Testing and Logging.","text":"<p>In order to support the failure of multiple tests all tests will always be run without early exiting (the failure is just flagged).  A failure status will be returned after all the tests have completed.</p> <p>For logging or failure, the args would be:</p> <pre><code>struct {\n    const char *desc;\n    const char *state;\n    const char *fail_reason;\n};\n</code></pre> <p>Where:</p> <ul> <li>type is one of \"post_integrity\", \"post_cipher\", \"post_digest\",     \"post_signature\", \"post_drbg\", ..</li> <li>desc is the identifying name: e.g AES_128_CBC</li> <li>state is one of</li> <li>\"start\"  - indicates the test is starting</li> <li>\"corrupt\" - if this returns 0 then the test will fail</li> <li>\"pass\" - indicates the test passed</li> <li>\"fail\" - indicates the test failed</li> <li>fail_reason - is the specific reason for failure (e.g- unable to     read the integrity module file, or integrity checksum file.)</li> </ul>"},{"location":"OpenSSL300Design/#cavs-testing","title":"CAVS Testing","text":"<p>CAVS testing will be performed by the lab.</p> <p>However each CAVS tests file could also be sampled and added to the unit tests. This would mean converting the file data of a single test into binary data inside a unit test.</p> <p>(DRBG_ctr is an example that does this already).</p> <p>This will ensure the following:</p> <ul> <li>The required interfaces will be available to the CAVS tests (some     CAVS tests require access to internals, that are not normally     needed).</li> <li>That the algorithm works.</li> <li>Coverage.</li> </ul> <p>We could skip doing this if there is good communication with the lab, but there may be some extra callback hooks required in the code if the labs finds missing accessors for internals.</p>"},{"location":"OpenSSL300Design/#legacy","title":"Legacy","text":""},{"location":"OpenSSL300Design/#evp-to-low-level-api-bridges","title":"EVP to low level API bridges","text":"<p>There are places where low level API structures are assigned to an <code>EVP_PKEY</code> object. The impact on the public <code>EVP_PKEY</code> is that it will have to keep a pointer to a possible low level structure and the type of that low level structure must be known internally in <code>libcrypto</code>.  Any time the <code>EVP_PKEY</code> with such a pointer is used for any computation, it must check if the low level structure has changed and convert its data to parameters that can be used with the new providers.</p> <p>The exact mechanism to check if the contents of a low level structure has changed is to be determined.  One possibility would be to have a dirty counter in the low level structure and a copy in the <code>EVP_PKEY</code> structure.  The dirty counter gets incremented any time the low level structure is changed (functions such as <code>RSA_set0_key</code> would have to do the increment), and any time the <code>EVP_PKEY</code> is used for computations, its copy of the counter get checked against the low level dirty counter, and if they differ, the <code>EVP_PKEY</code> provider parameters get modified with data from the low level structure.</p> <p>(yet another idea is to have a callback function placed in the <code>EVP_PKEY</code> by the legacy functions, which does the update of parameters if it detects that low level changes have been made)</p>"},{"location":"OpenSSL300Design/#evp-method-creators","title":"EVP method creators","text":"<p>There is functionality to create diverse EVP method structures in OpenSSL 1.1.x, easily found like this:</p> <pre><code>grep EVP_CIPHER_meth util/libcrypto.num\ngrep EVP_MD_meth util/libcrypto.num\ngrep EVP_PKEY_meth util/libcrypto.num\n</code></pre>"},{"location":"OpenSSL300Design/#associated-types","title":"Associated types","text":"<p>The low level APIs are fairly standalone, so all low level API types will remain unchanged apart from an added dirty flag in some of the types.  Associated <code>EVP_CIPHER</code>, <code>EVP_MD</code>, <code>EVP_PKEY_METHOD</code>, <code>EVP_MAC</code>, or <code>EVP_KDF</code> instances are handled separately through the implementation of dispatch tables in the Legacy provider module (see below).</p>"},{"location":"OpenSSL300Design/#legacy-provider-module","title":"Legacy Provider Module","text":"<p>Some algorithms that are considered \"legacy\" (an example could be IDEA) and that have current <code>EVP_CIPHER</code>, <code>EVP_MD</code>, <code>EVP_PKEY_METHOD</code>, <code>EVP_MAC</code>, or <code>EVP_KDF</code> implementations will move to a Legacy provider module rather than our default provider module.</p> <p>The methods for the following algorithms will become dispatch tables in the Legacy provider module:</p> <ol> <li>Blowfish</li> <li>CAST</li> <li>DES (but not 3DES)</li> <li>DSA</li> <li>IDEA</li> <li>MD2</li> <li>MD4</li> <li>MDC2</li> <li>RC2</li> <li>RC4</li> <li>RC5</li> <li>RIPEMD160</li> <li>SEED</li> <li>Whirlpool</li> </ol> <p>(note: this is not meant to be an exhaustive list, even though fairly complete for the moment)</p>"},{"location":"OpenSSL300Design/#the-engine-api","title":"The ENGINE API","text":"<p>The whole ENGINE API will be deprecated and removed in the major release after this one.  By then, people will have to have learned how to create provider modules instead. In the meantime, it will be transformed into a tool to help implementers to transition from an ENGINE module implementation to a provider module implementation.</p> <p>Because algorithm constructors will be changed to construct dispatch tables, the ENGINE type will change into a collection of dispatch tables, and the ENGINE constructor functionality will change to collect the dispatch tables they get into the given ENGINE.</p> <p>Dispatch tables registered this way will get the added property engine with the ENGINE identity as provider name property.  That will make it possible for <code>ENGINE_by_id</code> and similar functionality to find the correct provider.</p> <p>The ENGINE module entry point <code>bind_engine</code> will be replaced with the provider module entry point, and the macro <code>IMPLEMENT_DYNAMIC_BIND_FN</code> will be changed to construct such an entry point.  This entry point will create a provider style ENGINE structure, call the binding function which will fill it up with dispatch tables using the same method creation functions it has always used, then register all those dispatch tables collected in the ENGINE structure just like any provider module would, using the same method setting functions as before.</p> <p>As with the rest of this release, our goal is source-level compatibility.</p> <p>With OpenSSL 1.1.x and older, it's possible to hook in ENGINE provided methods to be used instead of the functions built into <code>libcrypto</code>, using functions like <code>ENGINE_get_default_RSA</code> and <code>ENGINE_get_RSA</code>. The first of the two needs no modification, while the latter will be changed to create the old-style methods (such as <code>RSA_METHOD</code>) from the corresponding dispatch table attached to the engine.</p>"},{"location":"OpenSSL300Design/#appendix-1-property-syntax","title":"Appendix 1 - Property Syntax","text":"<p>Property definitions and queries have a well defined syntax.  This section presents this in both eBNF and as railroad diagrams.  Okay, almost eBNF but using regular expression extensions in places.</p> <p>Definition</p> <p></p> <pre><code>Definition\n      ::= SingleDefinition ( ',' SingleDefinition )*\n\nSingleDefinition\n      ::= PropertyName ( '=' Value )?\n</code></pre> <p>Query</p> <p></p> <pre><code>Query ::= SingleQuery ( ',' SingleQuery )*\n\nSingleQuery\n      ::= '-'? PropertyName\n        | PropertyName ( '=' | '!=' ) Value )\n</code></pre> <p>Value</p> <p></p> <pre><code>Value ::= NumberLiteral\n        | StringLiteral\n</code></pre> <p>StringLiteral</p> <p></p> <pre><code>StringLiteral\n      ::= QuotedString\n        | UnquotedString\n</code></pre> <p>QuotedString<sup>4</sup></p> <p></p> <pre><code>QuotedString\n      ::= '\"' [^\"]* '\"'\n        | \"'\" [^']* \"'\"\n</code></pre> <p>UnquotedString<sup>5</sup></p> <p></p> <pre><code>UnquotedString\n      ::= [^{space},]+\n</code></pre> <p>NumberLiteral</p> <p></p> <pre><code>NumberLiteral\n      ::= '0' ( [0-7]+ | 'x' [0-9A-Fa-f]+ )\n        | '-'? [1-9] [0-9]+\n</code></pre> <p>PropertyName<sup>6</sup></p> <p></p> <pre><code>PropertyName\n      ::= [A-Z] [A-Z0-9_]* ( '.' [A-Z] [A-Z0-9_]* )*\n</code></pre>"},{"location":"OpenSSL300Design/#appendix-2-parameter-passing","title":"Appendix 2 - Parameter Passing","text":"<p>Core or provider objects are supposed to be opaque to everything outside, and yet, we will need to be able to get parameters from them, or to pass parameters to them in a uniform way.  We therefore need an intermediary non-opaque structure to support this.</p> <p>The types of data passed need to remain simple:</p> <ul> <li>Numbers (integers of arbitrary size)</li> <li>Character strings (assume UTF-8 encoding)</li> <li>Octet strings (byte arrays of arbitrary size)</li> </ul> <p>Any parameter that's passing values to a module will need the following items:</p> <ul> <li>An identifier, to indicate what parameter is being passed</li> <li>The type of the value (from the list above)</li> <li>The size of the value</li> <li>The value itself</li> </ul> <p>Any parameters that are used to request values from a module will need the following items:</p> <ul> <li>An identifier to indicate what is being requested</li> <li>The type of the value (from the list above)</li> <li>The size of the buffer</li> <li>A buffer where the values get filled in</li> <li>The resultant output size, to be filled in by the function we ask     for parameters from</li> </ul> <p>These two structure are similar enough to be expressed as one and the same:</p> <pre><code>typedef struct ossl_param_st {\n    const char *key;\n    unsigned char data_type;    /* declare what kind of content is sent or\n                                   expected */\n    void *buffer;               /* value being passed in\n                                   or out */\n    size_t buffer_size;         /* buffer size */\n    size_t *return_size;        /* OPTIONAL: address to\n                                   content size */\n} OSSL_PARAM;\n</code></pre> <p>Usage examples:</p> <pre><code>    /* passing parameters to a module */\n    unsigned char *rsa_n = /* memory allocation */\n#if __BYTE_ORDER == __LITTLE_ENDIAN\n    size_t rsa_n_size = BN_bn2lebinpad(N, rsa_n, BN_num_bytes(rsa_n));\n#else\n    size_t rsa_n_size = BN_bn2bin(N, rsa_n);\n#endif\n    struct OSSL_PARAM rsa_params[] = {\n        { RSA_N, OSSL_PARAM_INTEGER, rsa_n, rsa_n_size, NULL },\n        { 0, 0, 0, 0, 0 },\n    };\n\n    EVP_set_params(pkey, rsa_params);\n\n    /* requesting parameters from a module */\n    size_t rsa_n_buffer_size = BITS / 2 / 8 + 1;\n    unsigned char *rsa_n_buffer =\n       OPENSSL_malloc(rsa_n_size);\n    size_t rsa_n_size = 0;\n    OSSL_PARAM rsa_params[] = {\n        { RSA_N, OSSL_PARAM_INTEGER, rsa_n_buffer, rsa_n_buffer_size,\n          &amp;rsa_n_size },\n        { 0, 0, 0, 0, 0 },\n    };\n\n    EVP_get_params(pkey, rsa_params);\n\n    /*\n     * Note: we could also have a ctrl functionality:\n     * EVP_ctrl(pkey, EVP_CTRL_SET_PARAMS, rsa_params);\n     * EVP_ctrl(pkey, EVP_CTRL_GET_PARAMS, rsa_params);\n     *\n     * This would allow other controls using the same API.\n     * For added flexibility, the signature could be something like:\n     *\n     * int EVP_ctrl(EVP_CTX *ctx, int cmd, ...);\n     */\n</code></pre>"},{"location":"OpenSSL300Design/#data-types","title":"Data types","text":"<p>This specification supports the following parameter types:</p> <ul> <li><code>INTEGER</code></li> <li><code>UNSIGNED_INTEGER</code><ul> <li>These are arbitrary length and may therefore require an     arbitrarily sized buffer.</li> <li>The number is stored in native form, i.e. MSB first on big     endian systems and LSB first on little endian systems.  This     means that arbitrary native integers can be stored in the     buffer, just make sure that the buffer size is correct and     properly aligned.</li> </ul> </li> <li><code>REAL</code><ul> <li>These store C binary floating point values in their native     format and alignment.</li> </ul> </li> <li><code>UTF8_STRING</code><ul> <li>This type of string is expected to be printable as is.</li> </ul> </li> <li><code>OCTET_STRING</code><ul> <li>When printed, this is expected to become a hexdump.</li> </ul> </li> </ul> <p>We also support pointer variants of the same types (which means that the <code>OSSL_PARAM</code> <code>buffer</code> only has to have space for a <code>void *</code>). This use is fragile unless the pointed at values are constant over time.</p> <p>We have macros to declare the type of content in <code>data_type</code>:</p> <pre><code>#define OSSL_PARAM_INTEGER              1\n#define OSSL_PARAM_UNSIGNED_INTEGER     2\n#define OSSL_PARAM_UTF8_STRING          3\n#define OSSL_PARAM_OCTET_STRING         4\n/*\n * This one is combined with one of the above, i.e. to get a string pointer:\n * OSSL_PARAM_POINTER | OSSL_PARAM_UTF8_STRING\n */\n#define OSSL_PARAM_POINTER           0x80\n</code></pre>"},{"location":"OpenSSL300Design/#implementation-details","title":"Implementation details","text":""},{"location":"OpenSSL300Design/#determining-the-size-of-the-buffer","title":"Determining the size of the buffer","text":"<p>When requesting parameter values, the caller may choose to assign <code>NULL</code> to <code>buffer</code> in one or more parameter structures.  The called getter should answer such a request by filling in the size pointed at by <code>return_size</code> and return, at which point the caller can allocate appropriately sized buffers and make a second call, at which point the getter can fill in the buffer with no problem.</p> <p>If the programmer wants,  <code>return_size</code> could be made to point at <code>buffer_size</code> in the same <code>OSSL_PARAM</code>.</p>"},{"location":"OpenSSL300Design/#uses-beyond-the-immediately-obvious","title":"Uses beyond the immediately obvious","text":""},{"location":"OpenSSL300Design/#conf-nconf-values-as-parameters","title":"CONF / NCONF values as parameters","text":"<p>Configuration values are interesting to providers!  And yet, just passing a CONF pointer between the Core and the provider may not be feasible, even though it's currently a non-opaque structure.</p> <p>Another method could be to make the CONF / NCONF values into parameters, with a bit of inspiration from git config value names.</p> <p>Let's start with imagining a provider configuration along the same lines as the what the current ENGINE configuration module supports:</p> <pre><code>[provider_section]\n# Configure provider named \"foo\"\nfoo = foo_section\n# Configure provider named \"bar\"\nbar = bar_section\n\n[foo_section]\nprovider_id = myfoo\nmodule_path = /usr/lib/openssl/providers/foo.so\nselftests = foo_selftest_section\nalgorithms = RSA, DSA, DH\n\n[foo_selftest_section]\ndoodah = 1\ncookie = 0\n</code></pre> <p>The Core side provider structure for the provider \"foo\" could then answer to these requested parameter keys:</p> <ul> <li><code>\"provider_id\"</code> (value is <code>\"myfoo\"</code>)</li> <li><code>\"module_path\"</code> (value is <code>\"/usr/lib/openssl/providers/foo.so\"</code>)</li> <li><code>\"selftests.doodah\"</code> (value is <code>1</code>)</li> <li><code>\"selftests.cookie\"</code> (value is <code>0</code>)</li> <li><code>\"algorithms\"</code> (value is <code>\"RSA, DSA, DH\"</code>)</li> </ul> <p>Note that the section names themselves never appear in the parameter key, but that the key that lead to the section does instead.  This is suggested because OpenSSL allows arbitrarily named section names.</p>"},{"location":"OpenSSL300Design/#the-tooth-of-time","title":"The tooth of time","text":"<p>The parameter structure defined above isn't something that's been invented on the spot.  It's highly inspired from OpenVMS programming paradigms that have proven stable over time.  The actual inspiring structure is called \"item_list_3\", which is documented here: OpenVMS Programming Concepts Manual, Volume I</p>"},{"location":"OpenSSL300Design/#appendix-3-algorithms","title":"Appendix 3 - Algorithms","text":"<p>The algorithms which are to be included in the FIPS module are:</p> Requirement Standard Notes TDES CBC FIPS 81          Refer also to SP 800-67rev2.         TDES support being decryption only (from 2020) and banned (from 2025).      ECB FIPS 81        Limits to data length imposed. Security Policy statement regarding the       SP 800-67rev1       transition and limitations will be required.      AES CBC SP 800-38A All AES cipher modes supporting 128, 192 and 256 bits. CBC CTS CCM SP 800-38C CFB SP 800-38A CTR SP 800-38A ECB SP 800-38A GCM SP 800-38D GMAC SP 800-38D OFB SP 800-38A XTS SP 800-38E        See FIPS 140-2 I.G.       A.9. Needs key check added. This mode does not support 192 bits. Check added by #7120.      KW SP 800-38F Differences from standard but within it. KWP SP 800-38F Hash SHA-1 FIPS 180-4 SHA-2 FIPS 180-4 224, 256, 384, 512, 512/224, 512/256. SHA-3 FIPS 202 224, 256, 384, 512. HMAC SHA-1 FIPS 198-1 SHA-2 FIPS 198-1 224, 256, 384, 512. SHA-3 FIPS 198-1 CMAC GMAC KMAC DRBG AES CTR SP 800-90A        Issues with SP 800-90C.       All comply with SP 800-90A.      Hash SP 800-90A HMAC SP 800-90A RSA FIPS 186-4        Refer also to SP 800-56B.       PKCS#1.5, PSS, Key pair generation. Modulus size changes.      Key wrap (transport) SP 800-56B OAEP.  Update to SP 800-56B rev-1 standard. DH KAS SP 800-56A Update to SP 800-56A rev-3 standard. KAS KASVS Additional testing to meet ZZonly. CVL/KAS. DSA FIPS 186-4 PQG generation &amp; verification, signature generation &amp; verification, key pair generation. ECDSA FIPS 186-4 Key pair generation, public key generation, signature generation &amp; verification. ECC KAS SP 800-56A        B-233, 283, 409, 571; K-233, 283, 409, 571; P-224, 256, 384, 521.       Update to SP 800-56A rev-3 standard.      KAS KASVS Additional testing to meet ZZonly. CVL/KAS. KDF PBKDF2 SP 800-132 Verify conformance with standards.  See #6674. HKDF SSKDF SSHKDF X9.42 KDF X9.63 KDF KBKDF TLS PRF TLS PRF For TLS 1.2 and 1.3."},{"location":"OpenSSL300Design/#notes","title":"Notes","text":"<ol> <li> <p>The output of the DRBGs are not required to be tested because of FIPS 140-2 IG 9.8.  However, the seed material being fed into the master DRBG still requires the RCT or stuck bit testing.\u00a0\u21a9</p> </li> <li> <p>The draft guidance has changed. The alternatives are: AES_GMAC, AES_128_CCM, AES_256_GCM and AES_256_CCM.  GMAC is arguably the simplest of the three and thus might be preferable.\u00a0\u21a9</p> </li> <li> <p>Using a different digest algorithm for HASH and HMAC DRBGs would obviate the need to test the digest independently.\u00a0\u21a9</p> </li> <li> <p>Quoted strings can contain UTF-8 characters.\u00a0\u21a9</p> </li> <li> <p>Unquoted strings are passed through a lower case conversion and can only contain ASCII characters.\u00a0\u21a9</p> </li> <li> <p>Property names are case insensitive even though only upper case is depicted here.\u00a0\u21a9</p> </li> </ol>"},{"location":"OpenSSLStrategicArchitecture/","title":"OpenSSL Strategic Architecture","text":""},{"location":"OpenSSLStrategicArchitecture/#introduction","title":"Introduction","text":"<p>This document outlines the OpenSSL strategic architecture. It will take multiple releases, starting from 3.0.0, to move the architecture from the current \"as-is\" (1.1.1), to the future \"to-be\" architecture.</p> <p>Numerous changes are anticipated in the to-be architecture. A migration path for handling the eventual transition will be provided. The OpenSSL 3.0.0 release will have minimal impact to the vast majority of existing applications, almost all well-behaved applications will just need to be recompiled.</p> <p>The current functionality provided by the engine interface will be replaced over time via a provider interface. OpenSSL 3.0.0 will continue to support engines. The to-be architecture will not be fully realised until OpenSSL 4.0.0 at the earliest.</p>"},{"location":"OpenSSLStrategicArchitecture/#as-is-architecture","title":"As-is architecture","text":"<p>Currently, OpenSSL is split into four principal components:</p> <ol> <li> <p>libcrypto. This is the core library for providing implementations of     numerous cryptographic primitives. In addition it provides a set of     supporting services which are used by libssl and libcrypto, as well     as implementations of protocols such as CMS and OCSP.</p> </li> <li> <p>Engine. The functionality of libcrypto can be extended through the     Engine API.</p> <p>Typically engines are dynamically loadable modules that are registered with libcrypto and use the available hooks to provide cryptographic algorithm implementations. Usually these are alternative implementations of algorithms already provided by libcrypto (e.g. to enable hardware acceleration of the algorithm), but they may also include algorithms not implemented in default OpenSSL (e.g. the GOST engine implements the GOST algorithm family). Some engines are provided as part of the OpenSSL distribution, and some are provided by external third parties (again, GOST).</p> </li> <li> <p>libssl. This library depends on libcrypto and implements the TLS and     DTLS protocols.</p> </li> <li> <p>Applications. The applications are a set of command line tools that     use the underlying libssl and libcrypto components to provide a set     of cryptographic and other features such as:     a.  Key and parameter generation and inspection     b.  Certificate generation and inspection     c.  SSL/TLS test tools     d.  ASN.1 inspection     e.  Etc</p> </li> </ol> <p>Currently, OpenSSL has the following characteristics:</p> <ol> <li> <p>EVP. The EVP (envelope) API level provides the high-level abstract     interface to cryptographic functionality separate from the concrete     implementation binding. Direct use of concrete cryptographic     algorithm implementations via interfaces other than the EVP layer is     discouraged. The EVP layer also provides composite operations, such     as signing and verifying. Certain composite operations are also     provided as an EVP-level operation (such as HMAC-SHA256). EVP also     allow use of cryptographic algorithms in an algorithm-agnostic     manner (e.g. EVP_DigestSign works for both RSA and ECDSA     algorithms).</p> </li> <li> <p>FIPS140 is not supported. FIPS140 it is only available in     OpenSSL-1.0.2 which predates the as-is architecture and is not API     or ABI compatible.</p> </li> </ol>"},{"location":"OpenSSLStrategicArchitecture/#conceptual-component-view","title":"Conceptual Component View","text":"<p>The existing architecture is a simple 4 level layering with the crypto layer at the bottom. The TLS layer depends on the crypto layer, and the applications depend on both the TLS and crypto layers.</p> <p>Note: the existence of a component in the diagram does not indicate that the component is a public API or intended for end-user direct access or usage.</p> <p></p>"},{"location":"OpenSSLStrategicArchitecture/#packaging-view","title":"Packaging View","text":"<p>The components described above are packaged into libraries (libcrypto and libssl) and associated engine interfaces as well as an \"openssl\" command line executable for running the various applications. This is illustrated in the diagram below.</p> <p></p>"},{"location":"OpenSSLStrategicArchitecture/#to-be-architecture","title":"To-be Architecture","text":"<p>The to-be architecture has the following features:</p> <ul> <li> <p>Core Services form the building blocks usable by applications and     providers. (e.g. BIO, X509, SECMEM, ASN1, etc).</p> </li> <li> <p>Providers implement cryptographic algorithms and supporting     services. A provider has implementations of one or more of the     following:</p> <ul> <li>The cryptographic primitives for an algorithm, e.g. how to     encrypt/decrypt/sign/hash etc.</li> <li>Serialisation for an algorithm, e.g. how to convert a private     key into a PEM file. Serialisation could be to or from formats     that are not currently supported.</li> <li>Store loader back ends. OpenSSL currently has a store loader     that reads keys, parameters and other items from files.     Providers could have a loader to load from another location     (e.g. LDAP directory).</li> </ul> <p>A Provider may be entirely self-contained or it may use services that are provided by different providers or the Core Services. For example, an application may use the cryptographic primitives for an algorithm implemented by a hardware accelerated provider, but use the serialisation services of a different provider in order to export keys into PKCS#12 format.</p> <p>A default provider (which contains the core of the current OpenSSL cryptographic algorithm implementations) will be \"built-in\" but other providers will be able to be dynamically loadable at runtime.</p> <p>Legacy provider module(s) will provide cryptographic implementations for older algorithms (e.g., DES, MDC2, MD2, Blowfish, CAST). The OMC will publish a policy for how and when algorithms are transitioned from the default provider to the legacy provider.</p> <p>A FIPS provider that embodies the OpenSSL FIPS Cryptographic Module will be able to be dynamically loaded at runtime.</p> </li> <li> <p>The Core enables access to the services offered by providers to     applications (and other providers). Providers make methods available     to the Core. The Core is the mechanism via which concrete     implementations of where things such as algorithms are located.</p> <p>The Core will implement a property based look-up feature for finding algorithms, e.g. it might allow you find an algorithm where \"fips=true\", or \"keysize=128, constant_time=true\". The details of this will be determined in later design documents.</p> </li> <li> <p>Protocol implementations. E.g. TLS, DTLS.</p> </li> </ul> <p>The to-be architecture has the following characteristics:</p> <ul> <li> <p>The EVP layer becomes a thin wrapper for services implemented in the     providers. Most calls are passed straight through with little/no     pre- or post-processing.</p> </li> <li> <p>New EVP APIs will be provided to find the implementation of an     algorithm in the Core to be used for any given EVP call.</p> </li> <li> <p>Information will be passed between the core library and the     providers in an implementation agnostic way.</p> </li> <li> <p>Legacy APIs (e.g. low level cryptographic APIs that do not go via     the EVP layer) will be deprecated. Note that there are legacy APIs     to non legacy algorithms (e.g. AES is a non-legacy algorithm but     AES_encrypt is a legacy API).</p> </li> <li> <p>The OpenSSL FIPS Cryptographic Module will be implemented as a     dynamically loaded provider. It will be self-contained (i.e. can     only depend on system runtime libraries and services provided by the     Core).</p> </li> <li> <p>Other interfaces may also be transitioned to use the Core over time     (for example OSSL_STORE might be considered for this).</p> </li> <li> <p>Engine usage will evolve to providers. \"Bye-bye-Engines,     Hello-Providers\".</p> </li> </ul>"},{"location":"OpenSSLStrategicArchitecture/#conceptual-component-view_1","title":"Conceptual Component View","text":"<p>An overview of the conceptual components in the OpenSSL to-be architecture is as shown in the (pink nirvana) diagram below.</p> <p>Note: the existence of a component in the diagram does not indicate that the component is a public API or intended for end-user direct access or usage.</p> <p></p> <p>The components shown here are as follows:</p> <ul> <li> <p>Applications: Command line applications, e.g. ca, ciphers, cms, dgst     etc</p> </li> <li> <p>Protocols: Provides capabilities for communicating between endpoints     according to standard protocols</p> <ul> <li>TLS Protocols: An implementation of all supported TLS/DTLS     protocols and supporting infrastructure such as:<ul> <li>SSL BIO: A BIO for communication using TLS</li> <li>Statem: The TLS state machine</li> <li>Record: The TLS record layer</li> </ul> </li> <li>Other Protocols<ul> <li>CMS: An implementation of the Cryptographic Message Syntax     standard</li> <li>OCSP: An implementation of Online Certificate Status     Protocol</li> <li>TS: An implementation of the Timestamp Protocol</li> </ul> </li> <li>Supporting Services: Components specifically designed to support     the implementation of protocol code<ul> <li>Packet: Internal component for reading protocol messages</li> <li>Wpacket: Internal component for writing protocol messages</li> </ul> </li> </ul> </li> <li> <p>Core: This is a fundamental component that connects requests for a     service (such as encryption) to a provider of that service. It     implements the ability for providers to register their services     along with the properties of those services. It also provides the     ability to locate a service given a set of properties that the     service must fulfil. For example, properties of an encryption     service might include \"aead\", \"aes-gcm\", \"fips\",     \"security-bits=128\", etc.</p> </li> <li> <p>Default Provider: Implements a set of default services that are     registered with the Core.</p> <ul> <li>Supporting Services<ul> <li>Low Level Implementations: This is the set of components     that actually implement the cryptographic primitives.</li> </ul> </li> </ul> </li> <li> <p>FIPS Provider: Implements a set of services that are FIPS validated     and made available to the Core. This includes the following     supporting services:</p> <ul> <li>POST: Power On Self Test</li> <li>KAT: Known Answer Tests</li> <li>Integrity Check</li> <li>Low Level Implementations: This is the set of components that     actually implement the cryptographic primitives (to meet the     FIPS-mandated self-contained requirement).</li> </ul> </li> <li> <p>Legacy Provider: Provides implementations of older algorithms that     will be exposed via EVP-level APIs.</p> </li> <li> <p>Third-Party Provider: Not part of the OpenSSL distribution. Third     Parties may implement their own providers.</p> </li> <li> <p>Common Services: these form the building blocks usable by     applications and providers. (e.g. BIO, X509, SECMEM, ASN1, etc).</p> </li> <li> <p>Legacy APIs. The \"low-level\" APIs. The \"legacy\" here refers to the     API, not the algorithm itself. For example, AES is not a legacy     algorithm but it has a legacy API (e.g. AES_encrypt).</p> </li> </ul>"},{"location":"OpenSSLStrategicArchitecture/#packaging-view_1","title":"Packaging View","text":"<p>The various components described in the conceptual component view above are physically packaged into:</p> <ul> <li> <p>Executable application(s) for use by users</p> </li> <li> <p>Libraries for use by application(s)</p> </li> <li> <p>Dynamically loadable module(s) for use by the Core.</p> </li> </ul> <p></p> <p>The physical packages shown here are:</p> <ul> <li> <p>Openssl executable. The command line application.</p> </li> <li> <p>Libssl. This contains everything directly related to TLS and DTLS.     Its contents will be largely the same as libssl in the as-is     architecture. Note that some supporting services will be moved to     libcrypto.</p> </li> <li> <p>Libcrypto. This library contains the following components:</p> <ul> <li>Implementations of the core services such as: X509, ASN1, EVP,     OSSL_STORE etc</li> <li>The Core</li> <li>Protocols not related to TLS or DTLS</li> <li>Protocol supporting services (e.g. Packet and Wpacket)</li> <li>The default provider containing implementations of all the     default algorithms</li> </ul> </li> <li> <p>Libcrypto-legacy. Provides the legacy \"low-level\" APIs.     Implementations of the algorithms for these APIS may come from any     provider.</p> </li> <li> <p>FIPS module. This contains the FIPS Provider that implements a set     of services that are FIPS validated and are registered with the     Core.</p> </li> <li> <p>Legacy module. This contains the legacy provider.</p> </li> </ul>"},{"location":"man1/CA.pl/","title":"CA.pl","text":""},{"location":"man1/CA.pl/#name","title":"NAME","text":"<p>CA.pl - friendlier interface for OpenSSL certificate programs</p>"},{"location":"man1/CA.pl/#synopsis","title":"SYNOPSIS","text":"<p>CA.pl -? | -h | -help</p> <p>CA.pl -newcert | -newreq | -newreq-nodes | -xsign | -sign | -signCA | -signcert | -crl | -newca [-extra-cmd extra-params]</p> <p>CA.pl -pkcs12 [-extra-pkcs12 extra-params] [certname]</p> <p>CA.pl -verify [-extra-verify extra-params] certfile...</p> <p>CA.pl -revoke [-extra-ca extra-params] certfile [reason]</p>"},{"location":"man1/CA.pl/#description","title":"DESCRIPTION","text":"<p>The CA.pl script is a perl script that supplies the relevant command line arguments to the openssl command for some common certificate operations. It is intended to simplify the process of certificate creation and management by the use of some simple options.</p>"},{"location":"man1/CA.pl/#options","title":"OPTIONS","text":"<ul> <li> <p>?, -h, -help</p> <p>Prints a usage message.</p> </li> <li> <p>-newcert</p> <p>Creates a new self signed certificate. The private key is written to the file \"newkey.pem\" and the request written to the file \"newreq.pem\". This argument invokes openssl req command.</p> </li> <li> <p>-newreq</p> <p>Creates a new certificate request. The private key is written to the file \"newkey.pem\" and the request written to the file \"newreq.pem\". Executes openssl req command below the hood.</p> </li> <li> <p>-newreq-nodes</p> <p>Is like -newreq except that the private key will not be encrypted. Uses openssl req command.</p> </li> <li> <p>-newca</p> <p>Creates a new CA hierarchy for use with the ca program (or the -signcert and -xsign options). The user is prompted to enter the filename of the CA certificates (which should also contain the private key) or by hitting ENTER details of the CA will be prompted for. The relevant files and directories are created in a directory called \"demoCA\" in the current directory. openssl req and openssl ca commands are get invoked.</p> </li> <li> <p>-pkcs12</p> <p>Create a PKCS#12 file containing the user certificate, private key and CA certificate. It expects the user certificate and private key to be in the file \"newcert.pem\" and the CA certificate to be in the file demoCA/cacert.pem, it creates a file \"newcert.p12\". This command can thus be called after the -sign option. The PKCS#12 file can be imported directly into a browser. If there is an additional argument on the command line it will be used as the \"friendly name\" for the certificate (which is typically displayed in the browser list box), otherwise the name \"My Certificate\" is used. Delegates work to openssl pkcs12 command.</p> </li> <li> <p>-sign, -signcert, -xsign</p> <p>Calls the ca program to sign a certificate request. It expects the request to be in the file \"newreq.pem\". The new certificate is written to the file \"newcert.pem\" except in the case of the -xsign option when it is written to standard output. Leverages openssl ca command.</p> </li> <li> <p>-signCA</p> <p>This option is the same as the -sign option except it uses the configuration file section v3_ca and so makes the signed request a valid CA certificate. This is useful when creating intermediate CA from a root CA.  Extra params are passed on to openssl ca command.</p> </li> <li> <p>-signcert</p> <p>This option is the same as -sign except it expects a self signed certificate to be present in the file \"newreq.pem\". Extra params are passed on to openssl x509 and openssl ca commands.</p> </li> <li> <p>-crl</p> <p>Generate a CRL. Executes openssl ca command.</p> </li> <li> <p>-revoke certfile [reason]</p> <p>Revoke the certificate contained in the specified certfile. An optional reason may be specified, and must be one of: unspecified, keyCompromise, CACompromise, affiliationChanged, superseded, cessationOfOperation, certificateHold, or removeFromCRL. Leverages openssl ca command.</p> </li> <li> <p>-verify</p> <p>Verifies certificates against the CA certificate for \"demoCA\". If no certificates are specified on the command line it tries to verify the file \"newcert.pem\".  Invokes openssl verify command.</p> </li> <li> <p>-extra-req | -extra-ca | -extra-pkcs12 | -extra-x509 | -extra-verify &lt;extra-params&gt;</p> <p>The purpose of these parameters is to allow optional parameters to be supplied to openssl that this command executes. The -extra-cmd are specific to the option being used and the openssl command getting invoked. For example when this command invokes openssl req extra parameters can be passed on with the -extra-req parameter. The openssl commands being invoked per option are documented below. Users should consult openssl command documentation for more information.</p> </li> </ul>"},{"location":"man1/CA.pl/#examples","title":"EXAMPLES","text":"<p>Create a CA hierarchy:</p> <pre><code>CA.pl -newca\n</code></pre> <p>Complete certificate creation example: create a CA, create a request, sign the request and finally create a PKCS#12 file containing it.</p> <pre><code>CA.pl -newca\nCA.pl -newreq\nCA.pl -sign\nCA.pl -pkcs12 \"My Test Certificate\"\n</code></pre>"},{"location":"man1/CA.pl/#dsa-certificates","title":"DSA CERTIFICATES","text":"<p>Although the CA.pl creates RSA CAs and requests it is still possible to use it with DSA certificates and requests using the req(1) command directly. The following example shows the steps that would typically be taken.</p> <p>Create some DSA parameters:</p> <pre><code>openssl dsaparam -out dsap.pem 1024\n</code></pre> <p>Create a DSA CA certificate and private key:</p> <pre><code>openssl req -x509 -newkey dsa:dsap.pem -keyout cacert.pem -out cacert.pem\n</code></pre> <p>Create the CA directories and files:</p> <pre><code>CA.pl -newca\n</code></pre> <p>enter cacert.pem when prompted for the CA filename.</p> <p>Create a DSA certificate request and private key (a different set of parameters can optionally be created first):</p> <pre><code>openssl req -out newreq.pem -newkey dsa:dsap.pem\n</code></pre> <p>Sign the request:</p> <pre><code>CA.pl -sign\n</code></pre>"},{"location":"man1/CA.pl/#notes","title":"NOTES","text":"<p>Most of the filenames mentioned can be modified by editing the CA.pl script.</p> <p>If the demoCA directory already exists then the -newca command will not overwrite it and will do nothing. This can happen if a previous call using the -newca option terminated abnormally. To get the correct behaviour delete the demoCA directory if it already exists.</p> <p>Under some environments it may not be possible to run the CA.pl script directly (for example Win32) and the default configuration file location may be wrong. In this case the command:</p> <pre><code>perl -S CA.pl\n</code></pre> <p>can be used and the OPENSSL_CONF environment variable changed to point to the correct path of the configuration file.</p> <p>The script is intended as a simple front end for the openssl program for use by a beginner. Its behaviour isn't always what is wanted. For more control over the behaviour of the certificate commands call the openssl command directly.</p>"},{"location":"man1/CA.pl/#see-also","title":"SEE ALSO","text":"<p>x509(1), ca(1), req(1), pkcs12(1), config(5)</p>"},{"location":"man1/CA.pl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/asn1parse/","title":"asn1parse","text":""},{"location":"man1/asn1parse/#name","title":"NAME","text":"<p>openssl-asn1parse, asn1parse - ASN.1 parsing tool</p>"},{"location":"man1/asn1parse/#synopsis","title":"SYNOPSIS","text":"<p>openssl asn1parse [-help] [-inform PEM|DER] [-in filename] [-out filename] [-noout] [-offset number] [-length number] [-i] [-oid filename] [-dump] [-dlimit num] [-strparse offset] [-genstr string] [-genconf file] [-strictpem] [-item name]</p>"},{"location":"man1/asn1parse/#description","title":"DESCRIPTION","text":"<p>The asn1parse command is a diagnostic utility that can parse ASN.1 structures. It can also be used to extract data from ASN.1 formatted data.</p>"},{"location":"man1/asn1parse/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>The input format. DER is binary format and PEM (the default) is base64 encoded.</p> </li> <li> <p>-in filename</p> <p>The input file, default is standard input.</p> </li> <li> <p>-out filename</p> <p>Output file to place the DER encoded data into. If this option is not present then no data will be output. This is most useful when combined with the -strparse option.</p> </li> <li> <p>-noout</p> <p>Don't output the parsed version of the input file.</p> </li> <li> <p>-offset number</p> <p>Starting offset to begin parsing, default is start of file.</p> </li> <li> <p>-length number</p> <p>Number of bytes to parse, default is until end of file.</p> </li> <li> <p>-i</p> <p>Indents the output according to the \"depth\" of the structures.</p> </li> <li> <p>-oid filename</p> <p>A file containing additional OBJECT IDENTIFIERs (OIDs). The format of this file is described in the NOTES section below.</p> </li> <li> <p>-dump</p> <p>Dump unknown data in hex format.</p> </li> <li> <p>-dlimit num</p> <p>Like -dump, but only the first num bytes are output.</p> </li> <li> <p>-strparse offset</p> <p>Parse the contents octets of the ASN.1 object starting at offset. This option can be used multiple times to \"drill down\" into a nested structure.</p> </li> <li> <p>-genstr string, -genconf file</p> <p>Generate encoded data based on string, file or both using ASN1_generate_nconf(3) format. If file only is present then the string is obtained from the default section using the name asn1. The encoded data is passed through the ASN1 parser and printed out as though it came from a file, the contents can thus be examined and written to a file using the out option.</p> </li> <li> <p>-strictpem</p> <p>If this option is used then -inform will be ignored. Without this option any data in a PEM format input file will be treated as being base64 encoded and processed whether it has the normal PEM BEGIN and END markers or not. This option will ignore any data prior to the start of the BEGIN marker, or after an END marker in a PEM file.</p> </li> <li> <p>-item name</p> <p>Attempt to decode and print the data as ASN1_ITEM name. This can be used to print out the fields of any supported ASN.1 structure if the type is known.</p> </li> </ul>"},{"location":"man1/asn1parse/#output","title":"Output","text":"<p>The output will typically contain lines like this:</p> <pre><code>0:d=0  hl=4 l= 681 cons: SEQUENCE\n</code></pre> <p>.....</p> <pre><code>229:d=3  hl=3 l= 141 prim: BIT STRING\n373:d=2  hl=3 l= 162 cons: cont [ 3 ]\n376:d=3  hl=3 l= 159 cons: SEQUENCE\n379:d=4  hl=2 l=  29 cons: SEQUENCE\n381:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier\n386:d=5  hl=2 l=  22 prim: OCTET STRING\n410:d=4  hl=2 l= 112 cons: SEQUENCE\n412:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier\n417:d=5  hl=2 l= 105 prim: OCTET STRING\n524:d=4  hl=2 l=  12 cons: SEQUENCE\n</code></pre> <p>.....</p> <p>This example is part of a self-signed certificate. Each line starts with the offset in decimal. d=XX specifies the current depth. The depth is increased within the scope of any SET or SEQUENCE. hl=XX gives the header length (tag and length octets) of the current type. l=XX gives the length of the contents octets.</p> <p>The -i option can be used to make the output more readable.</p> <p>Some knowledge of the ASN.1 structure is needed to interpret the output.</p> <p>In this example the BIT STRING at offset 229 is the certificate public key. The contents octets of this will contain the public key information. This can be examined using the option -strparse 229 to yield:</p> <pre><code>  0:d=0  hl=3 l= 137 cons: SEQUENCE\n  3:d=1  hl=3 l= 129 prim: INTEGER           :E5D21E1F5C8D208EA7A2166C7FAF9F6BDF2059669C60876DDB70840F1A5AAFA59699FE471F379F1DD6A487E7D5409AB6A88D4A9746E24B91D8CF55DB3521015460C8EDE44EE8A4189F7A7BE77D6CD3A9AF2696F486855CF58BF0EDF2B4068058C7A947F52548DDF7E15E96B385F86422BEA9064A3EE9E1158A56E4A6F47E5897\n135:d=1  hl=2 l=   3 prim: INTEGER           :010001\n</code></pre>"},{"location":"man1/asn1parse/#notes","title":"NOTES","text":"<p>If an OID is not part of OpenSSL's internal table it will be represented in numerical form (for example 1.2.3.4). The file passed to the -oid option allows additional OIDs to be included. Each line consists of three columns, the first column is the OID in numerical format and should be followed by white space. The second column is the \"short name\" which is a single word followed by white space. The final column is the rest of the line and is the \"long name\". asn1parse displays the long name. Example:</p> <p><code>1.2.3.4       shortName       A long name</code></p>"},{"location":"man1/asn1parse/#examples","title":"EXAMPLES","text":"<p>Parse a file:</p> <pre><code>openssl asn1parse -in file.pem\n</code></pre> <p>Parse a DER file:</p> <pre><code>openssl asn1parse -inform DER -in file.der\n</code></pre> <p>Generate a simple UTF8String:</p> <pre><code>openssl asn1parse -genstr 'UTF8:Hello World'\n</code></pre> <p>Generate and write out a UTF8String, don't print parsed output:</p> <pre><code>openssl asn1parse -genstr 'UTF8:Hello World' -noout -out utf8.der\n</code></pre> <p>Generate using a config file:</p> <pre><code>openssl asn1parse -genconf asn1.cnf -noout -out asn1.der\n</code></pre> <p>Example config file:</p> <pre><code>asn1=SEQUENCE:seq_sect\n\n[seq_sect]\n\nfield1=BOOL:TRUE\nfield2=EXP:0, UTF8:some random string\n</code></pre>"},{"location":"man1/asn1parse/#bugs","title":"BUGS","text":"<p>There should be options to change the format of output lines. The output of some ASN.1 types is not well handled (if at all).</p>"},{"location":"man1/asn1parse/#see-also","title":"SEE ALSO","text":"<p>ASN1_generate_nconf(3)</p>"},{"location":"man1/asn1parse/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/ca/","title":"ca","text":""},{"location":"man1/ca/#name","title":"NAME","text":"<p>openssl-ca, ca - sample minimal CA application</p>"},{"location":"man1/ca/#synopsis","title":"SYNOPSIS","text":"<p>openssl ca [-help] [-verbose] [-config filename] [-name section] [-gencrl] [-revoke file] [-valid file] [-status serial] [-updatedb] [-crl_reason reason] [-crl_hold instruction] [-crl_compromise time] [-crl_CA_compromise time] [-crldays days] [-crlhours hours] [-crlexts section] [-startdate date] [-enddate date] [-days arg] [-md arg] [-policy arg] [-keyfile arg] [-keyform PEM|DER] [-key arg] [-passin arg] [-cert file] [-selfsign] [-in file] [-out file] [-notext] [-outdir dir] [-infiles] [-spkac file] [-ss_cert file] [-preserveDN] [-noemailDN] [-batch] [-msie_hack] [-extensions section] [-extfile section] [-engine id] [-subj arg] [-utf8] [-sigopt nm:v] [-create_serial] [-rand_serial] [-multivalue-rdn] [-rand file...] [-writerand file]</p>"},{"location":"man1/ca/#description","title":"DESCRIPTION","text":"<p>The ca command is a minimal CA application. It can be used to sign certificate requests in a variety of forms and generate CRLs it also maintains a text database of issued certificates and their status.</p> <p>The options descriptions will be divided into each purpose.</p>"},{"location":"man1/ca/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-verbose</p> <p>This prints extra details about the operations being performed.</p> </li> <li> <p>-config filename</p> <p>Specifies the configuration file to use. Optional; for a description of the default value, see \"COMMAND SUMMARY\" in openssl(1).</p> </li> <li> <p>-name section</p> <p>Specifies the configuration file section to use (overrides default_ca in the ca section).</p> </li> <li> <p>-in filename</p> <p>An input filename containing a single certificate request to be signed by the CA.</p> </li> <li> <p>-ss_cert filename</p> <p>A single self-signed certificate to be signed by the CA.</p> </li> <li> <p>-spkac filename</p> <p>A file containing a single Netscape signed public key and challenge and additional field values to be signed by the CA. See the SPKAC FORMAT section for information on the required input and output format.</p> </li> <li> <p>-infiles</p> <p>If present this should be the last option, all subsequent arguments are taken as the names of files containing certificate requests.</p> </li> <li> <p>-out filename</p> <p>The output file to output certificates to. The default is standard output. The certificate details will also be printed out to this file in PEM format (except that -spkac outputs DER format).</p> </li> <li> <p>-outdir directory</p> <p>The directory to output certificates to. The certificate will be written to a filename consisting of the serial number in hex with \".pem\" appended.</p> </li> <li> <p>-cert</p> <p>The CA certificate file.</p> </li> <li> <p>-keyfile filename</p> <p>The private key to sign requests with.</p> </li> <li> <p>-keyform PEM|DER</p> <p>The format of the data in the private key file. The default is PEM.</p> </li> <li> <p>-sigopt nm:v</p> <p>Pass options to the signature algorithm during sign or verify operations. Names and values of these options are algorithm-specific.</p> </li> <li> <p>-key password</p> <p>The password used to encrypt the private key. Since on some systems the command line arguments are visible (e.g. Unix with the 'ps' utility) this option should be used with caution.</p> </li> <li> <p>-selfsign</p> <p>Indicates the issued certificates are to be signed with the key the certificate requests were signed with (given with -keyfile). Certificate requests signed with a different key are ignored.  If -spkac, -ss_cert or -gencrl are given, -selfsign is ignored.</p> <p>A consequence of using -selfsign is that the self-signed certificate appears among the entries in the certificate database (see the configuration option database), and uses the same serial number counter as all other certificates sign with the self-signed certificate.</p> </li> <li> <p>-passin arg</p> <p>The key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-notext</p> <p>Don't output the text form of a certificate to the output file.</p> </li> <li> <p>-startdate date</p> <p>This allows the start date to be explicitly set. The format of the date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure), or YYYYMMDDHHMMSSZ (the same as an ASN1 GeneralizedTime structure). In both formats, seconds SS and timezone Z must be present.</p> </li> <li> <p>-enddate date</p> <p>This allows the expiry date to be explicitly set. The format of the date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure), or YYYYMMDDHHMMSSZ (the same as an ASN1 GeneralizedTime structure). In both formats, seconds SS and timezone Z must be present.</p> </li> <li> <p>-days arg</p> <p>The number of days to certify the certificate for.</p> </li> <li> <p>-md alg</p> <p>The message digest to use. Any digest supported by the OpenSSL dgst command can be used. For signing algorithms that do not support a digest (i.e. Ed25519 and Ed448) any message digest that is set is ignored. This option also applies to CRLs.</p> </li> <li> <p>-policy arg</p> <p>This option defines the CA \"policy\" to use. This is a section in the configuration file which decides which fields should be mandatory or match the CA certificate. Check out the POLICY FORMAT section for more information.</p> </li> <li> <p>-msie_hack</p> <p>This is a deprecated option to make ca work with very old versions of the IE certificate enrollment control \"certenr3\". It used UniversalStrings for almost everything. Since the old control has various security bugs its use is strongly discouraged.</p> </li> <li> <p>-preserveDN</p> <p>Normally the DN order of a certificate is the same as the order of the fields in the relevant policy section. When this option is set the order is the same as the request. This is largely for compatibility with the older IE enrollment control which would only accept certificates if their DNs match the order of the request. This is not needed for Xenroll.</p> </li> <li> <p>-noemailDN</p> <p>The DN of a certificate can contain the EMAIL field if present in the request DN, however, it is good policy just having the e-mail set into the altName extension of the certificate. When this option is set the EMAIL field is removed from the certificate' subject and set only in the, eventually present, extensions. The email_in_dn keyword can be used in the configuration file to enable this behaviour.</p> </li> <li> <p>-batch</p> <p>This sets the batch mode. In this mode no questions will be asked and all certificates will be certified automatically.</p> </li> <li> <p>-extensions section</p> <p>The section of the configuration file containing certificate extensions to be added when a certificate is issued (defaults to x509_extensions unless the -extfile option is used). If no extension section is present then, a V1 certificate is created. If the extension section is present (even if it is empty), then a V3 certificate is created. See the x509v3_config(5) manual page for details of the extension section format.</p> </li> <li> <p>-extfile file</p> <p>An additional configuration file to read certificate extensions from (using the default section unless the -extensions option is also used).</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause ca to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-subj arg</p> <p>Supersedes subject name given in the request. The arg must be formatted as /type0=value0/type1=value1/type2=.... Keyword characters may be escaped by \\ (backslash), and whitespace is retained. Empty values are permitted, but the corresponding type will not be included in the resulting certificate.</p> </li> <li> <p>-utf8</p> <p>This option causes field values to be interpreted as UTF8 strings, by default they are interpreted as ASCII. This means that the field values, whether prompted from a terminal or obtained from a configuration file, must be valid UTF8 strings.</p> </li> <li> <p>-create_serial</p> <p>If reading serial from the text file as specified in the configuration fails, specifying this option creates a new random serial to be used as next serial number. To get random serial numbers, use the -rand_serial flag instead; this should only be used for simple error-recovery.</p> </li> <li> <p>-rand_serial</p> <p>Generate a large random number to use as the serial number. This overrides any option or configuration to use a serial number file.</p> </li> <li> <p>-multivalue-rdn</p> <p>This option causes the -subj argument to be interpreted with full support for multivalued RDNs. Example:</p> <p>/DC=org/DC=OpenSSL/DC=users/UID=123456+CN=John Doe</p> <p>If -multi-rdn is not used then the UID value is 123456+CN=John Doe.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> </ul>"},{"location":"man1/ca/#crl-options","title":"CRL OPTIONS","text":"<ul> <li> <p>-gencrl</p> <p>This option generates a CRL based on information in the index file.</p> </li> <li> <p>-crldays num</p> <p>The number of days before the next CRL is due. That is the days from now to place in the CRL nextUpdate field.</p> </li> <li> <p>-crlhours num</p> <p>The number of hours before the next CRL is due.</p> </li> <li> <p>-revoke filename</p> <p>A filename containing a certificate to revoke.</p> </li> <li> <p>-valid filename</p> <p>A filename containing a certificate to add a Valid certificate entry.</p> </li> <li> <p>-status serial</p> <p>Displays the revocation status of the certificate with the specified serial number and exits.</p> </li> <li> <p>-updatedb</p> <p>Updates the database index to purge expired certificates.</p> </li> <li> <p>-crl_reason reason</p> <p>Revocation reason, where reason is one of: unspecified, keyCompromise, CACompromise, affiliationChanged, superseded, cessationOfOperation, certificateHold or removeFromCRL. The matching of reason is case insensitive. Setting any revocation reason will make the CRL v2.</p> <p>In practice removeFromCRL is not particularly useful because it is only used in delta CRLs which are not currently implemented.</p> </li> <li> <p>-crl_hold instruction</p> <p>This sets the CRL revocation reason code to certificateHold and the hold instruction to instruction which must be an OID. Although any OID can be used only holdInstructionNone (the use of which is discouraged by RFC2459) holdInstructionCallIssuer or holdInstructionReject will normally be used.</p> </li> <li> <p>-crl_compromise time</p> <p>This sets the revocation reason to keyCompromise and the compromise time to time. time should be in GeneralizedTime format that is YYYYMMDDHHMMSSZ.</p> </li> <li> <p>-crl_CA_compromise time</p> <p>This is the same as crl_compromise except the revocation reason is set to CACompromise.</p> </li> <li> <p>-crlexts section</p> <p>The section of the configuration file containing CRL extensions to include. If no CRL extension section is present then a V1 CRL is created, if the CRL extension section is present (even if it is empty) then a V2 CRL is created. The CRL extensions specified are CRL extensions and not CRL entry extensions.  It should be noted that some software (for example Netscape) can't handle V2 CRLs. See x509v3_config(5) manual page for details of the extension section format.</p> </li> </ul>"},{"location":"man1/ca/#configuration-file-options","title":"CONFIGURATION FILE OPTIONS","text":"<p>The section of the configuration file containing options for ca is found as follows: If the -name command line option is used, then it names the section to be used. Otherwise the section to be used must be named in the default_ca option of the ca section of the configuration file (or in the default section of the configuration file). Besides default_ca, the following options are read directly from the ca section:  RANDFILE  preserve  msie_hack With the exception of RANDFILE, this is probably a bug and may change in future releases.</p> <p>Many of the configuration file options are identical to command line options. Where the option is present in the configuration file and the command line the command line value is used. Where an option is described as mandatory then it must be present in the configuration file or the command line equivalent (if any) used.</p> <ul> <li> <p>oid_file</p> <p>This specifies a file containing additional OBJECT IDENTIFIERS. Each line of the file should consist of the numerical form of the object identifier followed by white space then the short name followed by white space and finally the long name.</p> </li> <li> <p>oid_section</p> <p>This specifies a section in the configuration file containing extra object identifiers. Each line should consist of the short name of the object identifier followed by = and the numerical form. The short and long names are the same when this option is used.</p> </li> <li> <p>new_certs_dir</p> <p>The same as the -outdir command line option. It specifies the directory where new certificates will be placed. Mandatory.</p> </li> <li> <p>certificate</p> <p>The same as -cert. It gives the file containing the CA certificate. Mandatory.</p> </li> <li> <p>private_key</p> <p>Same as the -keyfile option. The file containing the CA private key. Mandatory.</p> </li> <li> <p>RANDFILE</p> <p>At startup the specified file is loaded into the random number generator, and at exit 256 bytes will be written to it.</p> </li> <li> <p>default_days</p> <p>The same as the -days option. The number of days to certify a certificate for.</p> </li> <li> <p>default_startdate</p> <p>The same as the -startdate option. The start date to certify a certificate for. If not set the current time is used.</p> </li> <li> <p>default_enddate</p> <p>The same as the -enddate option. Either this option or default_days (or the command line equivalents) must be present.</p> </li> <li> <p>default_crl_hours default_crl_days</p> <p>The same as the -crlhours and the -crldays options. These will only be used if neither command line option is present. At least one of these must be present to generate a CRL.</p> </li> <li> <p>default_md</p> <p>The same as the -md option. Mandatory except where the signing algorithm does not require a digest (i.e. Ed25519 and Ed448).</p> </li> <li> <p>database</p> <p>The text database file to use. Mandatory. This file must be present though initially it will be empty.</p> </li> <li> <p>unique_subject</p> <p>If the value yes is given, the valid certificate entries in the database must have unique subjects.  if the value no is given, several valid certificate entries may have the exact same subject. The default value is yes, to be compatible with older (pre 0.9.8) versions of OpenSSL.  However, to make CA certificate roll-over easier, it's recommended to use the value no, especially if combined with the -selfsign command line option.</p> <p>Note that it is valid in some circumstances for certificates to be created without any subject. In the case where there are multiple certificates without subjects this does not count as a duplicate.</p> </li> <li> <p>serial</p> <p>A text file containing the next serial number to use in hex. Mandatory. This file must be present and contain a valid serial number.</p> </li> <li> <p>crlnumber</p> <p>A text file containing the next CRL number to use in hex. The crl number will be inserted in the CRLs only if this file exists. If this file is present, it must contain a valid CRL number.</p> </li> <li> <p>x509_extensions</p> <p>The same as -extensions.</p> </li> <li> <p>crl_extensions</p> <p>The same as -crlexts.</p> </li> <li> <p>preserve</p> <p>The same as -preserveDN</p> </li> <li> <p>email_in_dn</p> <p>The same as -noemailDN. If you want the EMAIL field to be removed from the DN of the certificate simply set this to 'no'. If not present the default is to allow for the EMAIL filed in the certificate's DN.</p> </li> <li> <p>msie_hack</p> <p>The same as -msie_hack</p> </li> <li> <p>policy</p> <p>The same as -policy. Mandatory. See the POLICY FORMAT section for more information.</p> </li> <li> <p>name_opt, cert_opt</p> <p>These options allow the format used to display the certificate details when asking the user to confirm signing. All the options supported by the x509 utilities -nameopt and -certopt switches can be used here, except the no_signame and no_sigdump are permanently set and cannot be disabled (this is because the certificate signature cannot be displayed because the certificate has not been signed at this point).</p> <p>For convenience the values ca_default are accepted by both to produce a reasonable output.</p> <p>If neither option is present the format used in earlier versions of OpenSSL is used. Use of the old format is strongly discouraged because it only displays fields mentioned in the policy section, mishandles multicharacter string types and does not display extensions.</p> </li> <li> <p>copy_extensions</p> <p>Determines how extensions in certificate requests should be handled. If set to none or this option is not present then extensions are ignored and not copied to the certificate. If set to copy then any extensions present in the request that are not already present are copied to the certificate. If set to copyall then all extensions in the request are copied to the certificate: if the extension is already present in the certificate it is deleted first. See the WARNINGS section before using this option.</p> <p>The main use of this option is to allow a certificate request to supply values for certain extensions such as subjectAltName.</p> </li> </ul>"},{"location":"man1/ca/#policy-format","title":"POLICY FORMAT","text":"<p>The policy section consists of a set of variables corresponding to certificate DN fields. If the value is \"match\" then the field value must match the same field in the CA certificate. If the value is \"supplied\" then it must be present. If the value is \"optional\" then it may be present. Any fields not mentioned in the policy section are silently deleted, unless the -preserveDN option is set but this can be regarded more of a quirk than intended behaviour.</p>"},{"location":"man1/ca/#spkac-format","title":"SPKAC FORMAT","text":"<p>The input to the -spkac command line option is a Netscape signed public key and challenge. This will usually come from the KEYGEN tag in an HTML form to create a new private key. It is however possible to create SPKACs using the spkac utility.</p> <p>The file should contain the variable SPKAC set to the value of the SPKAC and also the required DN components as name value pairs. If you need to include the same component twice then it can be preceded by a number and a '.'.</p> <p>When processing SPKAC format, the output is DER if the -out flag is used, but PEM format if sending to stdout or the -outdir flag is used.</p>"},{"location":"man1/ca/#examples","title":"EXAMPLES","text":"<p>Note: these examples assume that the ca directory structure is already set up and the relevant files already exist. This usually involves creating a CA certificate and private key with req, a serial number file and an empty index file and placing them in the relevant directories.</p> <p>To use the sample configuration file below the directories demoCA, demoCA/private and demoCA/newcerts would be created. The CA certificate would be copied to demoCA/cacert.pem and its private key to demoCA/private/cakey.pem. A file demoCA/serial would be created containing for example \"01\" and the empty index file demoCA/index.txt.</p> <p>Sign a certificate request:</p> <pre><code>openssl ca -in req.pem -out newcert.pem\n</code></pre> <p>Sign a certificate request, using CA extensions:</p> <pre><code>openssl ca -in req.pem -extensions v3_ca -out newcert.pem\n</code></pre> <p>Generate a CRL</p> <pre><code>openssl ca -gencrl -out crl.pem\n</code></pre> <p>Sign several requests:</p> <pre><code>openssl ca -infiles req1.pem req2.pem req3.pem\n</code></pre> <p>Certify a Netscape SPKAC:</p> <pre><code>openssl ca -spkac spkac.txt\n</code></pre> <p>A sample SPKAC file (the SPKAC line has been truncated for clarity):</p> <pre><code>SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK2A5\nCN=Steve Test\nemailAddress=steve@openssl.org\n0.OU=OpenSSL Group\n1.OU=Another Group\n</code></pre> <p>A sample configuration file with the relevant sections for ca:</p> <pre><code>[ ca ]\ndefault_ca      = CA_default            # The default ca section\n\n[ CA_default ]\n\ndir            = ./demoCA              # top dir\ndatabase       = $dir/index.txt        # index file.\nnew_certs_dir  = $dir/newcerts         # new certs dir\n\ncertificate    = $dir/cacert.pem       # The CA cert\nserial         = $dir/serial           # serial no file\n#rand_serial    = yes                  # for random serial#'s\nprivate_key    = $dir/private/cakey.pem# CA private key\nRANDFILE       = $dir/private/.rand    # random number file\n\ndefault_days   = 365                   # how long to certify for\ndefault_crl_days= 30                   # how long before next CRL\ndefault_md     = md5                   # md to use\n\npolicy         = policy_any            # default policy\nemail_in_dn    = no                    # Don't add the email into cert DN\n\nname_opt       = ca_default            # Subject name display option\ncert_opt       = ca_default            # Certificate display option\ncopy_extensions = none                 # Don't copy extensions from request\n\n[ policy_any ]\ncountryName            = supplied\nstateOrProvinceName    = optional\norganizationName       = optional\norganizationalUnitName = optional\ncommonName             = supplied\nemailAddress           = optional\n</code></pre>"},{"location":"man1/ca/#files","title":"FILES","text":"<p>Note: the location of all files can change either by compile time options, configuration file entries, environment variables or command line options. The values below reflect the default values.</p> <pre><code>/usr/local/ssl/lib/openssl.cnf - master configuration file\n./demoCA                       - main CA directory\n./demoCA/cacert.pem            - CA certificate\n./demoCA/private/cakey.pem     - CA private key\n./demoCA/serial                - CA serial number file\n./demoCA/serial.old            - CA serial number backup file\n./demoCA/index.txt             - CA text database file\n./demoCA/index.txt.old         - CA text database backup file\n./demoCA/certs                 - certificate output file\n./demoCA/.rnd                  - CA random seed information\n</code></pre>"},{"location":"man1/ca/#restrictions","title":"RESTRICTIONS","text":"<p>The text database index file is a critical part of the process and if corrupted it can be difficult to fix. It is theoretically possible to rebuild the index file from all the issued certificates and a current CRL: however there is no option to do this.</p> <p>V2 CRL features like delta CRLs are not currently supported.</p> <p>Although several requests can be input and handled at once it is only possible to include one SPKAC or self-signed certificate.</p>"},{"location":"man1/ca/#bugs","title":"BUGS","text":"<p>The use of an in-memory text database can cause problems when large numbers of certificates are present because, as the name implies the database has to be kept in memory.</p> <p>The ca command really needs rewriting or the required functionality exposed at either a command or interface level so a more friendly utility (perl script or GUI) can handle things properly. The script CA.pl helps a little but not very much.</p> <p>Any fields in a request that are not present in a policy are silently deleted. This does not happen if the -preserveDN option is used. To enforce the absence of the EMAIL field within the DN, as suggested by RFCs, regardless the contents of the request' subject the -noemailDN option can be used. The behaviour should be more friendly and configurable.</p> <p>Canceling some commands by refusing to certify a certificate can create an empty file.</p>"},{"location":"man1/ca/#warnings","title":"WARNINGS","text":"<p>The ca command is quirky and at times downright unfriendly.</p> <p>The ca utility was originally meant as an example of how to do things in a CA. It was not supposed to be used as a full blown CA itself: nevertheless some people are using it for this purpose.</p> <p>The ca command is effectively a single user command: no locking is done on the various files and attempts to run more than one ca command on the same database can have unpredictable results.</p> <p>The copy_extensions option should be used with caution. If care is not taken then it can be a security risk. For example if a certificate request contains a basicConstraints extension with CA:TRUE and the copy_extensions value is set to copyall and the user does not spot this when the certificate is displayed then this will hand the requester a valid CA certificate.</p> <p>This situation can be avoided by setting copy_extensions to copy and including basicConstraints with CA:FALSE in the configuration file. Then if the request contains a basicConstraints extension it will be ignored.</p> <p>It is advisable to also include values for other extensions such as keyUsage to prevent a request supplying its own values.</p> <p>Additional restrictions can be placed on the CA certificate itself. For example if the CA certificate has:</p> <pre><code>basicConstraints = CA:TRUE, pathlen:0\n</code></pre> <p>then even if a certificate is issued with CA:TRUE it will not be valid.</p>"},{"location":"man1/ca/#history","title":"HISTORY","text":"<p>Since OpenSSL 1.1.1, the program follows RFC5280. Specifically, certificate validity period (specified by any of -startdate, -enddate and -days) will be encoded as UTCTime if the dates are earlier than year 2049 (included), and as GeneralizedTime if the dates are in year 2050 or later.</p>"},{"location":"man1/ca/#see-also","title":"SEE ALSO","text":"<p>req(1), spkac(1), x509(1), CA.pl(1), config(5), x509v3_config(5)</p>"},{"location":"man1/ca/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/ciphers/","title":"ciphers","text":""},{"location":"man1/ciphers/#name","title":"NAME","text":"<p>openssl-ciphers, ciphers - SSL cipher display and cipher list tool</p>"},{"location":"man1/ciphers/#synopsis","title":"SYNOPSIS","text":"<p>openssl ciphers [-help] [-s] [-v] [-V] [-ssl3] [-tls1] [-tls1_1] [-tls1_2] [-tls1_3] [-s] [-psk] [-srp] [-stdname] [-convert name] [-ciphersuites val] [cipherlist]</p>"},{"location":"man1/ciphers/#description","title":"DESCRIPTION","text":"<p>The ciphers command converts textual OpenSSL cipher lists into ordered SSL cipher preference lists. It can be used as a test tool to determine the appropriate cipherlist.</p>"},{"location":"man1/ciphers/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print a usage message.</p> </li> <li> <p>-s</p> <p>Only list supported ciphers: those consistent with the security level, and minimum and maximum protocol version.  This is closer to the actual cipher list an application will support.</p> <p>PSK and SRP ciphers are not enabled by default: they require -psk or -srp to enable them.</p> <p>It also does not change the default list of supported signature algorithms.</p> <p>On a server the list of supported ciphers might also exclude other ciphers depending on the configured certificates and presence of DH parameters.</p> <p>If this option is not used then all ciphers that match the cipherlist will be listed.</p> </li> <li> <p>-psk</p> <p>When combined with -s includes cipher suites which require PSK.</p> </li> <li> <p>-srp</p> <p>When combined with -s includes cipher suites which require SRP.</p> </li> <li> <p>-v</p> <p>Verbose output: For each cipher suite, list details as provided by SSL_CIPHER_description(3).</p> </li> <li> <p>-V</p> <p>Like -v, but include the official cipher suite values in hex.</p> </li> <li> <p>-tls1_3, -tls1_2, -tls1_1, -tls1, -ssl3</p> <p>In combination with the -s option, list the ciphers which could be used if the specified protocol were negotiated. Note that not all protocols and flags may be available, depending on how OpenSSL was built.</p> </li> <li> <p>-stdname</p> <p>Precede each cipher suite by its standard name.</p> </li> <li> <p>-convert name</p> <p>Convert a standard cipher name to its OpenSSL name.</p> </li> <li> <p>-ciphersuites val</p> <p>Sets the list of TLSv1.3 ciphersuites. This list will be combined with any TLSv1.2 and below ciphersuites that have been configured. The format for this list is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names. By default this value is:</p> <pre><code>TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256\n</code></pre> </li> <li> <p>cipherlist</p> <p>A cipher list of TLSv1.2 and below ciphersuites to convert to a cipher preference list. This list will be combined with any TLSv1.3 ciphersuites that have been configured. If it is not included then the default cipher list will be used. The format is described below.</p> </li> </ul>"},{"location":"man1/ciphers/#cipher-list-format","title":"CIPHER LIST FORMAT","text":"<p>The cipher list consists of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.</p> <p>The actual cipher string can take several different forms.</p> <p>It can consist of a single cipher suite such as RC4-SHA.</p> <p>It can represent a list of cipher suites containing a certain algorithm, or cipher suites of a certain type. For example SHA1 represents all ciphers suites using the digest algorithm SHA1 and SSLv3 represents all SSL v3 algorithms.</p> <p>Lists of cipher suites can be combined in a single cipher string using the + character. This is used as a logical and operation. For example SHA1+DES represents all cipher suites containing the SHA1 and the DES algorithms.</p> <p>Each cipher string can be optionally preceded by the characters !, - or +.</p> <p>If ! is used then the ciphers are permanently deleted from the list. The ciphers deleted can never reappear in the list even if they are explicitly stated.</p> <p>If - is used then the ciphers are deleted from the list, but some or all of the ciphers can be added again by later options.</p> <p>If + is used then the ciphers are moved to the end of the list. This option doesn't add any new ciphers it just moves matching existing ones.</p> <p>If none of these characters is present then the string is just interpreted as a list of ciphers to be appended to the current preference list. If the list includes any ciphers already present they will be ignored: that is they will not moved to the end of the list.</p> <p>The cipher string @STRENGTH can be used at any point to sort the current cipher list in order of encryption algorithm key length.</p> <p>The cipher string @SECLEVEL=n can be used at any point to set the security level to n, which should be a number between zero and five, inclusive. See SSL_CTX_set_security_level for a description of what each level means.</p> <p>The cipher list can be prefixed with the DEFAULT keyword, which enables the default cipher list as defined below.  Unlike cipher strings, this prefix may not be combined with other strings using + character. For example, DEFAULT+DES is not valid.</p> <p>The content of the default list is determined at compile time and normally corresponds to ALL:!COMPLEMENTOFDEFAULT:!eNULL.</p>"},{"location":"man1/ciphers/#cipher-strings","title":"CIPHER STRINGS","text":"<p>The following is a list of all permitted cipher strings and their meanings.</p> <ul> <li> <p>COMPLEMENTOFDEFAULT</p> <p>The ciphers included in ALL, but not enabled by default. Currently this includes all RC4 and anonymous ciphers. Note that this rule does not cover eNULL, which is not included by ALL (use COMPLEMENTOFALL if necessary). Note that RC4 based cipher suites are not built into OpenSSL by default (see the enable-weak-ssl-ciphers option to Configure).</p> </li> <li> <p>ALL</p> <p>All cipher suites except the eNULL ciphers (which must be explicitly enabled if needed). As of OpenSSL 1.0.0, the ALL cipher suites are sensibly ordered by default.</p> </li> <li> <p>COMPLEMENTOFALL</p> <p>The cipher suites not enabled by ALL, currently eNULL.</p> </li> <li> <p>HIGH</p> <p>\"High\" encryption cipher suites. This currently means those with key lengths larger than 128 bits, and some cipher suites with 128-bit keys.</p> </li> <li> <p>MEDIUM</p> <p>\"Medium\" encryption cipher suites, currently some of those using 128 bit encryption.</p> </li> <li> <p>LOW</p> <p>\"Low\" encryption cipher suites, currently those using 64 or 56 bit encryption algorithms but excluding export cipher suites.  All these cipher suites have been removed as of OpenSSL 1.1.0.</p> </li> <li> <p>eNULL, NULL</p> <p>The \"NULL\" ciphers that is those offering no encryption. Because these offer no encryption at all and are a security risk they are not enabled via either the DEFAULT or ALL cipher strings. Be careful when building cipherlists out of lower-level primitives such as kRSA or aECDSA as these do overlap with the eNULL ciphers.  When in doubt, include !eNULL in your cipherlist.</p> </li> <li> <p>aNULL</p> <p>The cipher suites offering no authentication. This is currently the anonymous DH algorithms and anonymous ECDH algorithms. These cipher suites are vulnerable to \"man in the middle\" attacks and so their use is discouraged. These are excluded from the DEFAULT ciphers, but included in the ALL ciphers. Be careful when building cipherlists out of lower-level primitives such as kDHE or AES as these do overlap with the aNULL ciphers. When in doubt, include !aNULL in your cipherlist.</p> </li> <li> <p>kRSA, aRSA, RSA</p> <p>Cipher suites using RSA key exchange or authentication. RSA is an alias for kRSA.</p> </li> <li> <p>kDHr, kDHd, kDH</p> <p>Cipher suites using static DH key agreement and DH certificates signed by CAs with RSA and DSS keys or either respectively. All these cipher suites have been removed in OpenSSL 1.1.0.</p> </li> <li> <p>kDHE, kEDH, DH</p> <p>Cipher suites using ephemeral DH key agreement, including anonymous cipher suites.</p> </li> <li> <p>DHE, EDH</p> <p>Cipher suites using authenticated ephemeral DH key agreement.</p> </li> <li> <p>ADH</p> <p>Anonymous DH cipher suites, note that this does not include anonymous Elliptic Curve DH (ECDH) cipher suites.</p> </li> <li> <p>kEECDH, kECDHE, ECDH</p> <p>Cipher suites using ephemeral ECDH key agreement, including anonymous cipher suites.</p> </li> <li> <p>ECDHE, EECDH</p> <p>Cipher suites using authenticated ephemeral ECDH key agreement.</p> </li> <li> <p>AECDH</p> <p>Anonymous Elliptic Curve Diffie-Hellman cipher suites.</p> </li> <li> <p>aDSS, DSS</p> <p>Cipher suites using DSS authentication, i.e. the certificates carry DSS keys.</p> </li> <li> <p>aDH</p> <p>Cipher suites effectively using DH authentication, i.e. the certificates carry DH keys. All these cipher suites have been removed in OpenSSL 1.1.0.</p> </li> <li> <p>aECDSA, ECDSA</p> <p>Cipher suites using ECDSA authentication, i.e. the certificates carry ECDSA keys.</p> </li> <li> <p>TLSv1.2, TLSv1.0, SSLv3</p> <p>Lists cipher suites which are only supported in at least TLS v1.2, TLS v1.0 or SSL v3.0 respectively. Note: there are no cipher suites specific to TLS v1.1. Since this is only the minimum version, if, for example, TLSv1.0 is negotiated then both TLSv1.0 and SSLv3.0 cipher suites are available.</p> <p>Note: these cipher strings do not change the negotiated version of SSL or TLS, they only affect the list of available cipher suites.</p> </li> <li> <p>AES128, AES256, AES</p> <p>cipher suites using 128 bit AES, 256 bit AES or either 128 or 256 bit AES.</p> </li> <li> <p>AESGCM</p> <p>AES in Galois Counter Mode (GCM): these cipher suites are only supported in TLS v1.2.</p> </li> <li> <p>AESCCM, AESCCM8</p> <p>AES in Cipher Block Chaining - Message Authentication Mode (CCM): these cipher suites are only supported in TLS v1.2. AESCCM references CCM cipher suites using both 16 and 8 octet Integrity Check Value (ICV) while AESCCM8 only references 8 octet ICV.</p> </li> <li> <p>ARIA128, ARIA256, ARIA</p> <p>Cipher suites using 128 bit ARIA, 256 bit ARIA or either 128 or 256 bit ARIA.</p> </li> <li> <p>CAMELLIA128, CAMELLIA256, CAMELLIA</p> <p>Cipher suites using 128 bit CAMELLIA, 256 bit CAMELLIA or either 128 or 256 bit CAMELLIA.</p> </li> <li> <p>CHACHA20</p> <p>Cipher suites using ChaCha20.</p> </li> <li> <p>3DES</p> <p>Cipher suites using triple DES.</p> </li> <li> <p>DES</p> <p>Cipher suites using DES (not triple DES). All these cipher suites have been removed in OpenSSL 1.1.0.</p> </li> <li> <p>RC4</p> <p>Cipher suites using RC4.</p> </li> <li> <p>RC2</p> <p>Cipher suites using RC2.</p> </li> <li> <p>IDEA</p> <p>Cipher suites using IDEA.</p> </li> <li> <p>SEED</p> <p>Cipher suites using SEED.</p> </li> <li> <p>MD5</p> <p>Cipher suites using MD5.</p> </li> <li> <p>SHA1, SHA</p> <p>Cipher suites using SHA1.</p> </li> <li> <p>SHA256, SHA384</p> <p>Cipher suites using SHA256 or SHA384.</p> </li> <li> <p>aGOST</p> <p>Cipher suites using GOST R 34.10 (either 2001 or 94) for authentication (needs an engine supporting GOST algorithms).</p> </li> <li> <p>aGOST01</p> <p>Cipher suites using GOST R 34.10-2001 authentication.</p> </li> <li> <p>kGOST</p> <p>Cipher suites, using VKO 34.10 key exchange, specified in the RFC 4357.</p> </li> <li> <p>GOST94</p> <p>Cipher suites, using HMAC based on GOST R 34.11-94.</p> </li> <li> <p>GOST89MAC</p> <p>Cipher suites using GOST 28147-89 MAC instead of HMAC.</p> </li> <li> <p>PSK</p> <p>All cipher suites using pre-shared keys (PSK).</p> </li> <li> <p>kPSK, kECDHEPSK, kDHEPSK, kRSAPSK</p> <p>Cipher suites using PSK key exchange, ECDHE_PSK, DHE_PSK or RSA_PSK.</p> </li> <li> <p>aPSK</p> <p>Cipher suites using PSK authentication (currently all PSK modes apart from RSA_PSK).</p> </li> <li> <p>SUITEB128, SUITEB128ONLY, SUITEB192</p> <p>Enables suite B mode of operation using 128 (permitting 192 bit mode by peer) 128 bit (not permitting 192 bit by peer) or 192 bit level of security respectively. If used these cipherstrings should appear first in the cipher list and anything after them is ignored. Setting Suite B mode has additional consequences required to comply with RFC6460. In particular the supported signature algorithms is reduced to support only ECDSA and SHA256 or SHA384, only the elliptic curves P-256 and P-384 can be used and only the two suite B compliant cipher suites (ECDHE-ECDSA-AES128-GCM-SHA256 and ECDHE-ECDSA-AES256-GCM-SHA384) are permissible.</p> </li> </ul>"},{"location":"man1/ciphers/#cipher-suite-names","title":"CIPHER SUITE NAMES","text":"<p>The following lists give the SSL or TLS cipher suites names from the relevant specification and their OpenSSL equivalents. It should be noted, that several cipher suite names do not include the authentication used, e.g. DES-CBC3-SHA. In these cases, RSA authentication is used.</p>"},{"location":"man1/ciphers/#ssl-v30-cipher-suites","title":"SSL v3.0 cipher suites","text":"<pre><code>SSL_RSA_WITH_NULL_MD5                   NULL-MD5\nSSL_RSA_WITH_NULL_SHA                   NULL-SHA\nSSL_RSA_WITH_RC4_128_MD5                RC4-MD5\nSSL_RSA_WITH_RC4_128_SHA                RC4-SHA\nSSL_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA\nSSL_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA\n\nSSL_DH_DSS_WITH_3DES_EDE_CBC_SHA        DH-DSS-DES-CBC3-SHA\nSSL_DH_RSA_WITH_3DES_EDE_CBC_SHA        DH-RSA-DES-CBC3-SHA\nSSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA       DHE-DSS-DES-CBC3-SHA\nSSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA       DHE-RSA-DES-CBC3-SHA\n\nSSL_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5\nSSL_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA\n\nSSL_FORTEZZA_KEA_WITH_NULL_SHA          Not implemented.\nSSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA  Not implemented.\nSSL_FORTEZZA_KEA_WITH_RC4_128_SHA       Not implemented.\n</code></pre>"},{"location":"man1/ciphers/#tls-v10-cipher-suites","title":"TLS v1.0 cipher suites","text":"<pre><code>TLS_RSA_WITH_NULL_MD5                   NULL-MD5\nTLS_RSA_WITH_NULL_SHA                   NULL-SHA\nTLS_RSA_WITH_RC4_128_MD5                RC4-MD5\nTLS_RSA_WITH_RC4_128_SHA                RC4-SHA\nTLS_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA\nTLS_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA\n\nTLS_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.\nTLS_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.\nTLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       DHE-DSS-DES-CBC3-SHA\nTLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA       DHE-RSA-DES-CBC3-SHA\n\nTLS_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5\nTLS_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA\n</code></pre>"},{"location":"man1/ciphers/#aes-cipher-suites-from-rfc3268-extending-tls-v10","title":"AES cipher suites from RFC3268, extending TLS v1.0","text":"<pre><code>TLS_RSA_WITH_AES_128_CBC_SHA            AES128-SHA\nTLS_RSA_WITH_AES_256_CBC_SHA            AES256-SHA\n\nTLS_DH_DSS_WITH_AES_128_CBC_SHA         DH-DSS-AES128-SHA\nTLS_DH_DSS_WITH_AES_256_CBC_SHA         DH-DSS-AES256-SHA\nTLS_DH_RSA_WITH_AES_128_CBC_SHA         DH-RSA-AES128-SHA\nTLS_DH_RSA_WITH_AES_256_CBC_SHA         DH-RSA-AES256-SHA\n\nTLS_DHE_DSS_WITH_AES_128_CBC_SHA        DHE-DSS-AES128-SHA\nTLS_DHE_DSS_WITH_AES_256_CBC_SHA        DHE-DSS-AES256-SHA\nTLS_DHE_RSA_WITH_AES_128_CBC_SHA        DHE-RSA-AES128-SHA\nTLS_DHE_RSA_WITH_AES_256_CBC_SHA        DHE-RSA-AES256-SHA\n\nTLS_DH_anon_WITH_AES_128_CBC_SHA        ADH-AES128-SHA\nTLS_DH_anon_WITH_AES_256_CBC_SHA        ADH-AES256-SHA\n</code></pre>"},{"location":"man1/ciphers/#camellia-cipher-suites-from-rfc4132-extending-tls-v10","title":"Camellia cipher suites from RFC4132, extending TLS v1.0","text":"<pre><code>TLS_RSA_WITH_CAMELLIA_128_CBC_SHA      CAMELLIA128-SHA\nTLS_RSA_WITH_CAMELLIA_256_CBC_SHA      CAMELLIA256-SHA\n\nTLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA   DH-DSS-CAMELLIA128-SHA\nTLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA   DH-DSS-CAMELLIA256-SHA\nTLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA   DH-RSA-CAMELLIA128-SHA\nTLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA   DH-RSA-CAMELLIA256-SHA\n\nTLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA  DHE-DSS-CAMELLIA128-SHA\nTLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA  DHE-DSS-CAMELLIA256-SHA\nTLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA  DHE-RSA-CAMELLIA128-SHA\nTLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA  DHE-RSA-CAMELLIA256-SHA\n\nTLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA  ADH-CAMELLIA128-SHA\nTLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA  ADH-CAMELLIA256-SHA\n</code></pre>"},{"location":"man1/ciphers/#seed-cipher-suites-from-rfc4162-extending-tls-v10","title":"SEED cipher suites from RFC4162, extending TLS v1.0","text":"<pre><code>TLS_RSA_WITH_SEED_CBC_SHA              SEED-SHA\n\nTLS_DH_DSS_WITH_SEED_CBC_SHA           DH-DSS-SEED-SHA\nTLS_DH_RSA_WITH_SEED_CBC_SHA           DH-RSA-SEED-SHA\n\nTLS_DHE_DSS_WITH_SEED_CBC_SHA          DHE-DSS-SEED-SHA\nTLS_DHE_RSA_WITH_SEED_CBC_SHA          DHE-RSA-SEED-SHA\n\nTLS_DH_anon_WITH_SEED_CBC_SHA          ADH-SEED-SHA\n</code></pre>"},{"location":"man1/ciphers/#gost-cipher-suites-from-draft-chudov-cryptopro-cptls-extending-tls-v10","title":"GOST cipher suites from draft-chudov-cryptopro-cptls, extending TLS v1.0","text":"<p>Note: these ciphers require an engine which including GOST cryptographic algorithms, such as the ccgost engine, included in the OpenSSL distribution.</p> <pre><code>TLS_GOSTR341094_WITH_28147_CNT_IMIT GOST94-GOST89-GOST89\nTLS_GOSTR341001_WITH_28147_CNT_IMIT GOST2001-GOST89-GOST89\nTLS_GOSTR341094_WITH_NULL_GOSTR3411 GOST94-NULL-GOST94\nTLS_GOSTR341001_WITH_NULL_GOSTR3411 GOST2001-NULL-GOST94\n</code></pre>"},{"location":"man1/ciphers/#additional-export-1024-and-other-cipher-suites","title":"Additional Export 1024 and other cipher suites","text":"<p>Note: these ciphers can also be used in SSL v3.</p> <pre><code>TLS_DHE_DSS_WITH_RC4_128_SHA            DHE-DSS-RC4-SHA\n</code></pre>"},{"location":"man1/ciphers/#elliptic-curve-cipher-suites","title":"Elliptic curve cipher suites.","text":"<pre><code>TLS_ECDHE_RSA_WITH_NULL_SHA             ECDHE-RSA-NULL-SHA\nTLS_ECDHE_RSA_WITH_RC4_128_SHA          ECDHE-RSA-RC4-SHA\nTLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA     ECDHE-RSA-DES-CBC3-SHA\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA      ECDHE-RSA-AES128-SHA\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA      ECDHE-RSA-AES256-SHA\n\nTLS_ECDHE_ECDSA_WITH_NULL_SHA           ECDHE-ECDSA-NULL-SHA\nTLS_ECDHE_ECDSA_WITH_RC4_128_SHA        ECDHE-ECDSA-RC4-SHA\nTLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA   ECDHE-ECDSA-DES-CBC3-SHA\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA    ECDHE-ECDSA-AES128-SHA\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA    ECDHE-ECDSA-AES256-SHA\n\nTLS_ECDH_anon_WITH_NULL_SHA             AECDH-NULL-SHA\nTLS_ECDH_anon_WITH_RC4_128_SHA          AECDH-RC4-SHA\nTLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA     AECDH-DES-CBC3-SHA\nTLS_ECDH_anon_WITH_AES_128_CBC_SHA      AECDH-AES128-SHA\nTLS_ECDH_anon_WITH_AES_256_CBC_SHA      AECDH-AES256-SHA\n</code></pre>"},{"location":"man1/ciphers/#tls-v12-cipher-suites","title":"TLS v1.2 cipher suites","text":"<pre><code>TLS_RSA_WITH_NULL_SHA256                  NULL-SHA256\n\nTLS_RSA_WITH_AES_128_CBC_SHA256           AES128-SHA256\nTLS_RSA_WITH_AES_256_CBC_SHA256           AES256-SHA256\nTLS_RSA_WITH_AES_128_GCM_SHA256           AES128-GCM-SHA256\nTLS_RSA_WITH_AES_256_GCM_SHA384           AES256-GCM-SHA384\n\nTLS_DH_RSA_WITH_AES_128_CBC_SHA256        DH-RSA-AES128-SHA256\nTLS_DH_RSA_WITH_AES_256_CBC_SHA256        DH-RSA-AES256-SHA256\nTLS_DH_RSA_WITH_AES_128_GCM_SHA256        DH-RSA-AES128-GCM-SHA256\nTLS_DH_RSA_WITH_AES_256_GCM_SHA384        DH-RSA-AES256-GCM-SHA384\n\nTLS_DH_DSS_WITH_AES_128_CBC_SHA256        DH-DSS-AES128-SHA256\nTLS_DH_DSS_WITH_AES_256_CBC_SHA256        DH-DSS-AES256-SHA256\nTLS_DH_DSS_WITH_AES_128_GCM_SHA256        DH-DSS-AES128-GCM-SHA256\nTLS_DH_DSS_WITH_AES_256_GCM_SHA384        DH-DSS-AES256-GCM-SHA384\n\nTLS_DHE_RSA_WITH_AES_128_CBC_SHA256       DHE-RSA-AES128-SHA256\nTLS_DHE_RSA_WITH_AES_256_CBC_SHA256       DHE-RSA-AES256-SHA256\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256       DHE-RSA-AES128-GCM-SHA256\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384       DHE-RSA-AES256-GCM-SHA384\n\nTLS_DHE_DSS_WITH_AES_128_CBC_SHA256       DHE-DSS-AES128-SHA256\nTLS_DHE_DSS_WITH_AES_256_CBC_SHA256       DHE-DSS-AES256-SHA256\nTLS_DHE_DSS_WITH_AES_128_GCM_SHA256       DHE-DSS-AES128-GCM-SHA256\nTLS_DHE_DSS_WITH_AES_256_GCM_SHA384       DHE-DSS-AES256-GCM-SHA384\n\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256     ECDHE-RSA-AES128-SHA256\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384     ECDHE-RSA-AES256-SHA384\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256     ECDHE-RSA-AES128-GCM-SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384     ECDHE-RSA-AES256-GCM-SHA384\n\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256   ECDHE-ECDSA-AES128-SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384   ECDHE-ECDSA-AES256-SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256   ECDHE-ECDSA-AES128-GCM-SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384   ECDHE-ECDSA-AES256-GCM-SHA384\n\nTLS_DH_anon_WITH_AES_128_CBC_SHA256       ADH-AES128-SHA256\nTLS_DH_anon_WITH_AES_256_CBC_SHA256       ADH-AES256-SHA256\nTLS_DH_anon_WITH_AES_128_GCM_SHA256       ADH-AES128-GCM-SHA256\nTLS_DH_anon_WITH_AES_256_GCM_SHA384       ADH-AES256-GCM-SHA384\n\nRSA_WITH_AES_128_CCM                      AES128-CCM\nRSA_WITH_AES_256_CCM                      AES256-CCM\nDHE_RSA_WITH_AES_128_CCM                  DHE-RSA-AES128-CCM\nDHE_RSA_WITH_AES_256_CCM                  DHE-RSA-AES256-CCM\nRSA_WITH_AES_128_CCM_8                    AES128-CCM8\nRSA_WITH_AES_256_CCM_8                    AES256-CCM8\nDHE_RSA_WITH_AES_128_CCM_8                DHE-RSA-AES128-CCM8\nDHE_RSA_WITH_AES_256_CCM_8                DHE-RSA-AES256-CCM8\nECDHE_ECDSA_WITH_AES_128_CCM              ECDHE-ECDSA-AES128-CCM\nECDHE_ECDSA_WITH_AES_256_CCM              ECDHE-ECDSA-AES256-CCM\nECDHE_ECDSA_WITH_AES_128_CCM_8            ECDHE-ECDSA-AES128-CCM8\nECDHE_ECDSA_WITH_AES_256_CCM_8            ECDHE-ECDSA-AES256-CCM8\n</code></pre>"},{"location":"man1/ciphers/#aria-cipher-suites-from-rfc6209-extending-tls-v12","title":"ARIA cipher suites from RFC6209, extending TLS v1.2","text":"<p>Note: the CBC modes mentioned in this RFC are not supported.</p> <pre><code>TLS_RSA_WITH_ARIA_128_GCM_SHA256          ARIA128-GCM-SHA256\nTLS_RSA_WITH_ARIA_256_GCM_SHA384          ARIA256-GCM-SHA384\nTLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256      DHE-RSA-ARIA128-GCM-SHA256\nTLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384      DHE-RSA-ARIA256-GCM-SHA384\nTLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256      DHE-DSS-ARIA128-GCM-SHA256\nTLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384      DHE-DSS-ARIA256-GCM-SHA384\nTLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256  ECDHE-ECDSA-ARIA128-GCM-SHA256\nTLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384  ECDHE-ECDSA-ARIA256-GCM-SHA384\nTLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256    ECDHE-ARIA128-GCM-SHA256\nTLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384    ECDHE-ARIA256-GCM-SHA384\nTLS_PSK_WITH_ARIA_128_GCM_SHA256          PSK-ARIA128-GCM-SHA256\nTLS_PSK_WITH_ARIA_256_GCM_SHA384          PSK-ARIA256-GCM-SHA384\nTLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256      DHE-PSK-ARIA128-GCM-SHA256\nTLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384      DHE-PSK-ARIA256-GCM-SHA384\nTLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256      RSA-PSK-ARIA128-GCM-SHA256\nTLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384      RSA-PSK-ARIA256-GCM-SHA384\n</code></pre>"},{"location":"man1/ciphers/#camellia-hmac-based-cipher-suites-from-rfc6367-extending-tls-v12","title":"Camellia HMAC-Based cipher suites from RFC6367, extending TLS v1.2","text":"<pre><code>TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 ECDHE-ECDSA-CAMELLIA128-SHA256\nTLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 ECDHE-ECDSA-CAMELLIA256-SHA384\nTLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   ECDHE-RSA-CAMELLIA128-SHA256\nTLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   ECDHE-RSA-CAMELLIA256-SHA384\n</code></pre>"},{"location":"man1/ciphers/#pre-shared-keying-psk-cipher-suites","title":"Pre-shared keying (PSK) cipher suites","text":"<pre><code>PSK_WITH_NULL_SHA                         PSK-NULL-SHA\nDHE_PSK_WITH_NULL_SHA                     DHE-PSK-NULL-SHA\nRSA_PSK_WITH_NULL_SHA                     RSA-PSK-NULL-SHA\n\nPSK_WITH_RC4_128_SHA                      PSK-RC4-SHA\nPSK_WITH_3DES_EDE_CBC_SHA                 PSK-3DES-EDE-CBC-SHA\nPSK_WITH_AES_128_CBC_SHA                  PSK-AES128-CBC-SHA\nPSK_WITH_AES_256_CBC_SHA                  PSK-AES256-CBC-SHA\n\nDHE_PSK_WITH_RC4_128_SHA                  DHE-PSK-RC4-SHA\nDHE_PSK_WITH_3DES_EDE_CBC_SHA             DHE-PSK-3DES-EDE-CBC-SHA\nDHE_PSK_WITH_AES_128_CBC_SHA              DHE-PSK-AES128-CBC-SHA\nDHE_PSK_WITH_AES_256_CBC_SHA              DHE-PSK-AES256-CBC-SHA\n\nRSA_PSK_WITH_RC4_128_SHA                  RSA-PSK-RC4-SHA\nRSA_PSK_WITH_3DES_EDE_CBC_SHA             RSA-PSK-3DES-EDE-CBC-SHA\nRSA_PSK_WITH_AES_128_CBC_SHA              RSA-PSK-AES128-CBC-SHA\nRSA_PSK_WITH_AES_256_CBC_SHA              RSA-PSK-AES256-CBC-SHA\n\nPSK_WITH_AES_128_GCM_SHA256               PSK-AES128-GCM-SHA256\nPSK_WITH_AES_256_GCM_SHA384               PSK-AES256-GCM-SHA384\nDHE_PSK_WITH_AES_128_GCM_SHA256           DHE-PSK-AES128-GCM-SHA256\nDHE_PSK_WITH_AES_256_GCM_SHA384           DHE-PSK-AES256-GCM-SHA384\nRSA_PSK_WITH_AES_128_GCM_SHA256           RSA-PSK-AES128-GCM-SHA256\nRSA_PSK_WITH_AES_256_GCM_SHA384           RSA-PSK-AES256-GCM-SHA384\n\nPSK_WITH_AES_128_CBC_SHA256               PSK-AES128-CBC-SHA256\nPSK_WITH_AES_256_CBC_SHA384               PSK-AES256-CBC-SHA384\nPSK_WITH_NULL_SHA256                      PSK-NULL-SHA256\nPSK_WITH_NULL_SHA384                      PSK-NULL-SHA384\nDHE_PSK_WITH_AES_128_CBC_SHA256           DHE-PSK-AES128-CBC-SHA256\nDHE_PSK_WITH_AES_256_CBC_SHA384           DHE-PSK-AES256-CBC-SHA384\nDHE_PSK_WITH_NULL_SHA256                  DHE-PSK-NULL-SHA256\nDHE_PSK_WITH_NULL_SHA384                  DHE-PSK-NULL-SHA384\nRSA_PSK_WITH_AES_128_CBC_SHA256           RSA-PSK-AES128-CBC-SHA256\nRSA_PSK_WITH_AES_256_CBC_SHA384           RSA-PSK-AES256-CBC-SHA384\nRSA_PSK_WITH_NULL_SHA256                  RSA-PSK-NULL-SHA256\nRSA_PSK_WITH_NULL_SHA384                  RSA-PSK-NULL-SHA384\nPSK_WITH_AES_128_GCM_SHA256               PSK-AES128-GCM-SHA256\nPSK_WITH_AES_256_GCM_SHA384               PSK-AES256-GCM-SHA384\n\nECDHE_PSK_WITH_RC4_128_SHA                ECDHE-PSK-RC4-SHA\nECDHE_PSK_WITH_3DES_EDE_CBC_SHA           ECDHE-PSK-3DES-EDE-CBC-SHA\nECDHE_PSK_WITH_AES_128_CBC_SHA            ECDHE-PSK-AES128-CBC-SHA\nECDHE_PSK_WITH_AES_256_CBC_SHA            ECDHE-PSK-AES256-CBC-SHA\nECDHE_PSK_WITH_AES_128_CBC_SHA256         ECDHE-PSK-AES128-CBC-SHA256\nECDHE_PSK_WITH_AES_256_CBC_SHA384         ECDHE-PSK-AES256-CBC-SHA384\nECDHE_PSK_WITH_NULL_SHA                   ECDHE-PSK-NULL-SHA\nECDHE_PSK_WITH_NULL_SHA256                ECDHE-PSK-NULL-SHA256\nECDHE_PSK_WITH_NULL_SHA384                ECDHE-PSK-NULL-SHA384\n\nPSK_WITH_CAMELLIA_128_CBC_SHA256          PSK-CAMELLIA128-SHA256\nPSK_WITH_CAMELLIA_256_CBC_SHA384          PSK-CAMELLIA256-SHA384\n\nDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256      DHE-PSK-CAMELLIA128-SHA256\nDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384      DHE-PSK-CAMELLIA256-SHA384\n\nRSA_PSK_WITH_CAMELLIA_128_CBC_SHA256      RSA-PSK-CAMELLIA128-SHA256\nRSA_PSK_WITH_CAMELLIA_256_CBC_SHA384      RSA-PSK-CAMELLIA256-SHA384\n\nECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256    ECDHE-PSK-CAMELLIA128-SHA256\nECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384    ECDHE-PSK-CAMELLIA256-SHA384\n\nPSK_WITH_AES_128_CCM                      PSK-AES128-CCM\nPSK_WITH_AES_256_CCM                      PSK-AES256-CCM\nDHE_PSK_WITH_AES_128_CCM                  DHE-PSK-AES128-CCM\nDHE_PSK_WITH_AES_256_CCM                  DHE-PSK-AES256-CCM\nPSK_WITH_AES_128_CCM_8                    PSK-AES128-CCM8\nPSK_WITH_AES_256_CCM_8                    PSK-AES256-CCM8\nDHE_PSK_WITH_AES_128_CCM_8                DHE-PSK-AES128-CCM8\nDHE_PSK_WITH_AES_256_CCM_8                DHE-PSK-AES256-CCM8\n</code></pre>"},{"location":"man1/ciphers/#chacha20-poly1305-cipher-suites-extending-tls-v12","title":"ChaCha20-Poly1305 cipher suites, extending TLS v1.2","text":"<pre><code>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256      ECDHE-RSA-CHACHA20-POLY1305\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256    ECDHE-ECDSA-CHACHA20-POLY1305\nTLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256        DHE-RSA-CHACHA20-POLY1305\nTLS_PSK_WITH_CHACHA20_POLY1305_SHA256            PSK-CHACHA20-POLY1305\nTLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256      ECDHE-PSK-CHACHA20-POLY1305\nTLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256        DHE-PSK-CHACHA20-POLY1305\nTLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256        RSA-PSK-CHACHA20-POLY1305\n</code></pre>"},{"location":"man1/ciphers/#tls-v13-cipher-suites","title":"TLS v1.3 cipher suites","text":"<pre><code>TLS_AES_128_GCM_SHA256                     TLS_AES_128_GCM_SHA256\nTLS_AES_256_GCM_SHA384                     TLS_AES_256_GCM_SHA384\nTLS_CHACHA20_POLY1305_SHA256               TLS_CHACHA20_POLY1305_SHA256\nTLS_AES_128_CCM_SHA256                     TLS_AES_128_CCM_SHA256\nTLS_AES_128_CCM_8_SHA256                   TLS_AES_128_CCM_8_SHA256\n</code></pre>"},{"location":"man1/ciphers/#older-names-used-by-openssl","title":"Older names used by OpenSSL","text":"<p>The following names are accepted by older releases:</p> <pre><code>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA    EDH-RSA-DES-CBC3-SHA (DHE-RSA-DES-CBC3-SHA)\nSSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA    EDH-DSS-DES-CBC3-SHA (DHE-DSS-DES-CBC3-SHA)\n</code></pre>"},{"location":"man1/ciphers/#notes","title":"NOTES","text":"<p>Some compiled versions of OpenSSL may not include all the ciphers listed here because some ciphers were excluded at compile time.</p>"},{"location":"man1/ciphers/#examples","title":"EXAMPLES","text":"<p>Verbose listing of all OpenSSL ciphers including NULL ciphers:</p> <pre><code>openssl ciphers -v 'ALL:eNULL'\n</code></pre> <p>Include all ciphers except NULL and anonymous DH then sort by strength:</p> <pre><code>openssl ciphers -v 'ALL:!ADH:@STRENGTH'\n</code></pre> <p>Include all ciphers except ones with no encryption (eNULL) or no authentication (aNULL):</p> <pre><code>openssl ciphers -v 'ALL:!aNULL'\n</code></pre> <p>Include only 3DES ciphers and then place RSA ciphers last:</p> <pre><code>openssl ciphers -v '3DES:+RSA'\n</code></pre> <p>Include all RC4 ciphers but leave out those without authentication:</p> <pre><code>openssl ciphers -v 'RC4:!COMPLEMENTOFDEFAULT'\n</code></pre> <p>Include all ciphers with RSA authentication but leave out ciphers without encryption.</p> <pre><code>openssl ciphers -v 'RSA:!COMPLEMENTOFALL'\n</code></pre> <p>Set security level to 2 and display all ciphers consistent with level 2:</p> <pre><code>openssl ciphers -s -v 'ALL:@SECLEVEL=2'\n</code></pre>"},{"location":"man1/ciphers/#see-also","title":"SEE ALSO","text":"<p>s_client(1), s_server(1), ssl(7)</p>"},{"location":"man1/ciphers/#history","title":"HISTORY","text":"<p>The -V option for the ciphers command was added in OpenSSL 1.0.0.</p> <p>The -stdname is only available if OpenSSL is built with tracing enabled (enable-ssl-trace argument to Configure) before OpenSSL 1.1.1.</p> <p>The -convert option was added in OpenSSL 1.1.1.</p>"},{"location":"man1/ciphers/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/cms/","title":"cms","text":""},{"location":"man1/cms/#name","title":"NAME","text":"<p>openssl-cms, cms - CMS utility</p>"},{"location":"man1/cms/#synopsis","title":"SYNOPSIS","text":"<p>openssl cms [-help] [-encrypt] [-decrypt] [-sign] [-verify] [-cmsout] [-resign] [-data_create] [-data_out] [-digest_create] [-digest_verify] [-compress] [-uncompress] [-EncryptedData_encrypt] [-sign_receipt] [-verify_receipt receipt] [-in filename] [-inform SMIME|PEM|DER] [-rctform SMIME|PEM|DER] [-out filename] [-outform SMIME|PEM|DER] [-stream -indef -noindef] [-noindef] [-content filename] [-text] [-noout] [-print] [-CAfile file] [-CApath dir] [-no-CAfile] [-no-CApath] [-attime timestamp] [-check_ss_sig] [-crl_check] [-crl_check_all] [-explicit_policy] [-extended_crl] [-ignore_critical] [-inhibit_any] [-inhibit_map] [-no_check_time] [-partial_chain] [-policy arg] [-policy_check] [-policy_print] [-purpose purpose] [-suiteB_128] [-suiteB_128_only] [-suiteB_192] [-trusted_first] [-no_alt_chains] [-use_deltas] [-auth_level num] [-verify_depth num] [-verify_email email] [-verify_hostname hostname] [-verify_ip ip] [-verify_name name] [-x509_strict] [-md digest] [-cipher] [-nointern] [-noverify] [-nocerts] [-noattr] [-nosmimecap] [-binary] [-crlfeol] [-asciicrlf] [-nodetach] [-certfile file] [-certsout file] [-signer file] [-recip file] [-keyid] [-receipt_request_all] [-receipt_request_first] [-receipt_request_from emailaddress] [-receipt_request_to emailaddress] [-receipt_request_print] [-secretkey key] [-secretkeyid id] [-econtent_type type] [-inkey file] [-keyopt name:parameter] [-passin arg] [-rand file...] [-writerand file] [cert.pem...] [-to addr] [-from addr] [-subject subj] [cert.pem]...</p>"},{"location":"man1/cms/#description","title":"DESCRIPTION","text":"<p>The cms command handles S/MIME v3.1 mail. It can encrypt, decrypt, sign and verify, compress and uncompress S/MIME messages.</p>"},{"location":"man1/cms/#options","title":"OPTIONS","text":"<p>There are fourteen operation options that set the type of operation to be performed. The meaning of the other options varies according to the operation type.</p> <ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-encrypt</p> <p>Encrypt mail for the given recipient certificates. Input file is the message to be encrypted. The output file is the encrypted mail in MIME format. The actual CMS type is &lt;B&gt;EnvelopedData&lt;B&gt;.</p> <p>Note that no revocation check is done for the recipient cert, so if that key has been compromised, others may be able to decrypt the text.</p> </li> <li> <p>-decrypt</p> <p>Decrypt mail using the supplied certificate and private key. Expects an encrypted mail message in MIME format for the input file. The decrypted mail is written to the output file.</p> </li> <li> <p>-debug_decrypt</p> <p>This option sets the CMS_DEBUG_DECRYPT flag. This option should be used with caution: see the notes section below.</p> </li> <li> <p>-sign</p> <p>Sign mail using the supplied certificate and private key. Input file is the message to be signed. The signed message in MIME format is written to the output file.</p> </li> <li> <p>-verify</p> <p>Verify signed mail. Expects a signed mail message on input and outputs the signed data. Both clear text and opaque signing is supported.</p> </li> <li> <p>-cmsout</p> <p>Takes an input message and writes out a PEM encoded CMS structure.</p> </li> <li> <p>-resign</p> <p>Resign a message: take an existing message and one or more new signers.</p> </li> <li> <p>-data_create</p> <p>Create a CMS Data type.</p> </li> <li> <p>-data_out</p> <p>Data type and output the content.</p> </li> <li> <p>-digest_create</p> <p>Create a CMS DigestedData type.</p> </li> <li> <p>-digest_verify</p> <p>Verify a CMS DigestedData type and output the content.</p> </li> <li> <p>-compress</p> <p>Create a CMS CompressedData type. OpenSSL must be compiled with zlib support for this option to work, otherwise it will output an error.</p> </li> <li> <p>-uncompress</p> <p>Uncompress a CMS CompressedData type and output the content. OpenSSL must be compiled with zlib support for this option to work, otherwise it will output an error.</p> </li> <li> <p>-EncryptedData_encrypt</p> <p>Encrypt content using supplied symmetric key and algorithm using a CMS EncryptedData type and output the content.</p> </li> <li> <p>-sign_receipt</p> <p>Generate and output a signed receipt for the supplied message. The input message must contain a signed receipt request. Functionality is otherwise similar to the -sign operation.</p> </li> <li> <p>-verify_receipt receipt</p> <p>Verify a signed receipt in filename receipt. The input message must contain the original receipt request. Functionality is otherwise similar to the -verify operation.</p> </li> <li> <p>-in filename</p> <p>The input message to be encrypted or signed or the message to be decrypted or verified.</p> </li> <li> <p>-inform SMIME|PEM|DER</p> <p>This specifies the input format for the CMS structure. The default is SMIME which reads an S/MIME format message. PEM and DER format change this to expect PEM and DER format CMS structures instead. This currently only affects the input format of the CMS structure, if no CMS structure is being input (for example with -encrypt or -sign) this option has no effect.</p> </li> <li> <p>-rctform SMIME|PEM|DER</p> <p>Specify the format for a signed receipt for use with the -receipt_verify operation.</p> </li> <li> <p>-out filename</p> <p>The message text that has been decrypted or verified or the output MIME format message that has been signed or verified.</p> </li> <li> <p>-outform SMIME|PEM|DER</p> <p>This specifies the output format for the CMS structure. The default is SMIME which writes an S/MIME format message. PEM and DER format change this to write PEM and DER format CMS structures instead. This currently only affects the output format of the CMS structure, if no CMS structure is being output (for example with -verify or -decrypt) this option has no effect.</p> </li> <li> <p>-stream -indef -noindef</p> <p>The -stream and -indef options are equivalent and enable streaming I/O for encoding operations. This permits single pass processing of data without the need to hold the entire contents in memory, potentially supporting very large files. Streaming is automatically set for S/MIME signing with detached data if the output format is SMIME it is currently off by default for all other operations.</p> </li> <li> <p>-noindef</p> <p>Disable streaming I/O where it would produce and indefinite length constructed encoding. This option currently has no effect. In future streaming will be enabled by default on all relevant operations and this option will disable it.</p> </li> <li> <p>-content filename</p> <p>This specifies a file containing the detached content, this is only useful with the -verify command. This is only usable if the CMS structure is using the detached signature form where the content is not included. This option will override any content if the input format is S/MIME and it uses the multipart/signed MIME content type.</p> </li> <li> <p>-text</p> <p>This option adds plain text (text/plain) MIME headers to the supplied message if encrypting or signing. If decrypting or verifying it strips off text headers: if the decrypted or verified message is not of MIME type text/plain then an error occurs.</p> </li> <li> <p>-noout</p> <p>For the -cmsout operation do not output the parsed CMS structure. This is useful when combined with the -print option or if the syntax of the CMS structure is being checked.</p> </li> <li> <p>-print</p> <p>For the -cmsout operation print out all fields of the CMS structure. This is mainly useful for testing purposes.</p> </li> <li> <p>-CAfile file</p> <p>A file containing trusted CA certificates, only used with -verify.</p> </li> <li> <p>-CApath dir</p> <p>A directory containing trusted CA certificates, only used with -verify. This directory must be a standard certificate directory: that is a hash of each subject name (using x509 -hash) should be linked to each certificate.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location</p> </li> <li> <p>-md digest</p> <p>Digest algorithm to use when signing or resigning. If not present then the default digest algorithm for the signing key will be used (usually SHA1).</p> </li> <li> <p>-cipher</p> <p>The encryption algorithm to use. For example triple DES (168 bits) - -des3 or 256 bit AES - -aes256. Any standard algorithm name (as used by the EVP_get_cipherbyname() function) can also be used preceded by a dash, for example -aes-128-cbc. See enc(1) for a list of ciphers supported by your version of OpenSSL.</p> <p>If not specified triple DES is used. Only used with -encrypt and -EncryptedData_create commands.</p> </li> <li> <p>-nointern</p> <p>When verifying a message normally certificates (if any) included in the message are searched for the signing certificate. With this option only the certificates specified in the -certfile option are used. The supplied certificates can still be used as untrusted CAs however.</p> </li> <li> <p>-noverify</p> <p>Do not verify the signers certificate of a signed message.</p> </li> <li> <p>-nocerts</p> <p>When signing a message the signer's certificate is normally included with this option it is excluded. This will reduce the size of the signed message but the verifier must have a copy of the signers certificate available locally (passed using the -certfile option for example).</p> </li> <li> <p>-noattr</p> <p>Normally when a message is signed a set of attributes are included which include the signing time and supported symmetric algorithms. With this option they are not included.</p> </li> <li> <p>-nosmimecap</p> <p>Exclude the list of supported algorithms from signed attributes, other options such as signing time and content type are still included.</p> </li> <li> <p>-binary</p> <p>Normally the input message is converted to \"canonical\" format which is effectively using CR and LF as end of line: as required by the S/MIME specification. When this option is present no translation occurs. This is useful when handling binary data which may not be in MIME format.</p> </li> <li> <p>-crlfeol</p> <p>Normally the output file uses a single LF as end of line. When this option is present CRLF is used instead.</p> </li> <li> <p>-asciicrlf</p> <p>When signing use ASCII CRLF format canonicalisation. This strips trailing whitespace from all lines, deletes trailing blank lines at EOF and sets the encapsulated content type. This option is normally used with detached content and an output signature format of DER. This option is not normally needed when verifying as it is enabled automatically if the encapsulated content format is detected.</p> </li> <li> <p>-nodetach</p> <p>When signing a message use opaque signing: this form is more resistant to translation by mail relays but it cannot be read by mail agents that do not support S/MIME.  Without this option cleartext signing with the MIME type multipart/signed is used.</p> </li> <li> <p>-certfile file</p> <p>Allows additional certificates to be specified. When signing these will be included with the message. When verifying these will be searched for the signers certificates. The certificates should be in PEM format.</p> </li> <li> <p>-certsout file</p> <p>Any certificates contained in the message are written to file.</p> </li> <li> <p>-signer file</p> <p>A signing certificate when signing or resigning a message, this option can be used multiple times if more than one signer is required. If a message is being verified then the signers certificates will be written to this file if the verification was successful.</p> </li> <li> <p>-recip file</p> <p>When decrypting a message this specifies the recipients certificate. The certificate must match one of the recipients of the message or an error occurs.</p> <p>When encrypting a message this option may be used multiple times to specify each recipient. This form must be used if customised parameters are required (for example to specify RSA-OAEP).</p> <p>Only certificates carrying RSA, Diffie-Hellman or EC keys are supported by this option.</p> </li> <li> <p>-keyid</p> <p>Use subject key identifier to identify certificates instead of issuer name and serial number. The supplied certificate must include a subject key identifier extension. Supported by -sign and -encrypt options.</p> </li> <li> <p>-receipt_request_all, -receipt_request_first</p> <p>For -sign option include a signed receipt request. Indicate requests should be provided by all recipient or first tier recipients (those mailed directly and not from a mailing list). Ignored it -receipt_request_from is included.</p> </li> <li> <p>-receipt_request_from emailaddress</p> <p>For -sign option include a signed receipt request. Add an explicit email address where receipts should be supplied.</p> </li> <li> <p>-receipt_request_to emailaddress</p> <p>Add an explicit email address where signed receipts should be sent to. This option must but supplied if a signed receipt it requested.</p> </li> <li> <p>-receipt_request_print</p> <p>For the -verify operation print out the contents of any signed receipt requests.</p> </li> <li> <p>-secretkey key</p> <p>Specify symmetric key to use. The key must be supplied in hex format and be consistent with the algorithm used. Supported by the -EncryptedData_encrypt -EncryptedData_decrypt, -encrypt and -decrypt options. When used with -encrypt or -decrypt the supplied key is used to wrap or unwrap the content encryption key using an AES key in the KEKRecipientInfo type.</p> </li> <li> <p>-secretkeyid id</p> <p>The key identifier for the supplied symmetric key for KEKRecipientInfo type. This option must be present if the -secretkey option is used with -encrypt. With -decrypt operations the id is used to locate the relevant key if it is not supplied then an attempt is used to decrypt any KEKRecipientInfo structures.</p> </li> <li> <p>-econtent_type type</p> <p>Set the encapsulated content type to type if not supplied the Data type is used. The type argument can be any valid OID name in either text or numerical format.</p> </li> <li> <p>-inkey file</p> <p>The private key to use when signing or decrypting. This must match the corresponding certificate. If this option is not specified then the private key must be included in the certificate file specified with the -recip or -signer file. When signing this option can be used multiple times to specify successive keys.</p> </li> <li> <p>-keyopt name:opt</p> <p>For signing and encryption this option can be used multiple times to set customised parameters for the preceding key or certificate. It can currently be used to set RSA-PSS for signing, RSA-OAEP for encryption or to modify default parameters for ECDH.</p> </li> <li> <p>-passin arg</p> <p>The private key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>cert.pem...</p> <p>One or more certificates of message recipients: used when encrypting a message.</p> </li> <li> <p>-to, -from, -subject</p> <p>The relevant mail headers. These are included outside the signed portion of a message so they may be included manually. If signing then many S/MIME mail clients check the signers certificate's email address matches that specified in the From: address.</p> </li> <li> <p>-attime, -check_ss_sig, -crl_check, -crl_check_all, -explicit_policy, -extended_crl, -ignore_critical, -inhibit_any, -inhibit_map, -no_alt_chains, -no_check_time, -partial_chain, -policy, -policy_check, -policy_print, -purpose, -suiteB_128, -suiteB_128_only, -suiteB_192, -trusted_first, -use_deltas, -auth_level, -verify_depth, -verify_email, -verify_hostname, -verify_ip, -verify_name, -x509_strict</p> <p>Set various certificate chain validation options. See the verify(1) manual page for details.</p> </li> </ul>"},{"location":"man1/cms/#notes","title":"NOTES","text":"<p>The MIME message must be sent without any blank lines between the headers and the output. Some mail programs will automatically add a blank line. Piping the mail directly to sendmail is one way to achieve the correct format.</p> <p>The supplied message to be signed or encrypted must include the necessary MIME headers or many S/MIME clients won't display it properly (if at all). You can use the -text option to automatically add plain text headers.</p> <p>A \"signed and encrypted\" message is one where a signed message is then encrypted. This can be produced by encrypting an already signed message: see the examples section.</p> <p>This version of the program only allows one signer per message but it will verify multiple signers on received messages. Some S/MIME clients choke if a message contains multiple signers. It is possible to sign messages \"in parallel\" by signing an already signed message.</p> <p>The options -encrypt and -decrypt reflect common usage in S/MIME clients. Strictly speaking these process CMS enveloped data: CMS encrypted data is used for other purposes.</p> <p>The -resign option uses an existing message digest when adding a new signer. This means that attributes must be present in at least one existing signer using the same message digest or this operation will fail.</p> <p>The -stream and -indef options enable streaming I/O support. As a result the encoding is BER using indefinite length constructed encoding and no longer DER. Streaming is supported for the -encrypt operation and the -sign operation if the content is not detached.</p> <p>Streaming is always used for the -sign operation with detached data but since the content is no longer part of the CMS structure the encoding remains DER.</p> <p>If the -decrypt option is used without a recipient certificate then an attempt is made to locate the recipient by trying each potential recipient in turn using the supplied private key. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not and if no recipients match the message is \"decrypted\" using a random key which will typically output garbage. The -debug_decrypt option can be used to disable the MMA attack protection and return an error if no recipient can be found: this option should be used with caution. For a fuller description see CMS_decrypt(3)).</p>"},{"location":"man1/cms/#exit-codes","title":"EXIT CODES","text":"<ul> <li> <p>0</p> <p>The operation was completely successfully.</p> </li> <li> <p>1</p> <p>An error occurred parsing the command options.</p> </li> <li> <p>2</p> <p>One of the input files could not be read.</p> </li> <li> <p>3</p> <p>An error occurred creating the CMS file or when reading the MIME message.</p> </li> <li> <p>4</p> <p>An error occurred decrypting or verifying the message.</p> </li> <li> <p>5</p> <p>The message was verified correctly but an error occurred writing out the signers certificates.</p> </li> </ul>"},{"location":"man1/cms/#compatibility-with-pkcs7-format","title":"COMPATIBILITY WITH PKCS#7 format.","text":"<p>The smime utility can only process the older PKCS#7 format. The cms utility supports Cryptographic Message Syntax format. Use of some features will result in messages which cannot be processed by applications which only support the older format. These are detailed below.</p> <p>The use of the -keyid option with -sign or -encrypt.</p> <p>The -outform PEM option uses different headers.</p> <p>The -compress option.</p> <p>The -secretkey option when used with -encrypt.</p> <p>The use of PSS with -sign.</p> <p>The use of OAEP or non-RSA keys with -encrypt.</p> <p>Additionally the -EncryptedData_create and -data_create type cannot be processed by the older smime command.</p>"},{"location":"man1/cms/#examples","title":"EXAMPLES","text":"<p>Create a cleartext signed message:</p> <pre><code>openssl cms -sign -in message.txt -text -out mail.msg \\\n       -signer mycert.pem\n</code></pre> <p>Create an opaque signed message</p> <pre><code>openssl cms -sign -in message.txt -text -out mail.msg -nodetach \\\n       -signer mycert.pem\n</code></pre> <p>Create a signed message, include some additional certificates and read the private key from another file:</p> <pre><code>openssl cms -sign -in in.txt -text -out mail.msg \\\n       -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem\n</code></pre> <p>Create a signed message with two signers, use key identifier:</p> <pre><code>openssl cms -sign -in message.txt -text -out mail.msg \\\n       -signer mycert.pem -signer othercert.pem -keyid\n</code></pre> <p>Send a signed message under Unix directly to sendmail, including headers:</p> <pre><code>openssl cms -sign -in in.txt -text -signer mycert.pem \\\n       -from steve@openssl.org -to someone@somewhere \\\n       -subject \"Signed message\" | sendmail someone@somewhere\n</code></pre> <p>Verify a message and extract the signer's certificate if successful:</p> <pre><code>openssl cms -verify -in mail.msg -signer user.pem -out signedtext.txt\n</code></pre> <p>Send encrypted mail using triple DES:</p> <pre><code>openssl cms -encrypt -in in.txt -from steve@openssl.org \\\n       -to someone@somewhere -subject \"Encrypted message\" \\\n       -des3 user.pem -out mail.msg\n</code></pre> <p>Sign and encrypt mail:</p> <pre><code>openssl cms -sign -in ml.txt -signer my.pem -text \\\n       | openssl cms -encrypt -out mail.msg \\\n       -from steve@openssl.org -to someone@somewhere \\\n       -subject \"Signed and Encrypted message\" -des3 user.pem\n</code></pre> <p>Note: the encryption command does not include the -text option because the message being encrypted already has MIME headers.</p> <p>Decrypt mail:</p> <pre><code>openssl cms -decrypt -in mail.msg -recip mycert.pem -inkey key.pem\n</code></pre> <p>The output from Netscape form signing is a PKCS#7 structure with the detached signature format. You can use this program to verify the signature by line wrapping the base64 encoded structure and surrounding it with:</p> <pre><code>-----BEGIN PKCS7-----\n-----END PKCS7-----\n</code></pre> <p>and using the command,</p> <pre><code>openssl cms -verify -inform PEM -in signature.pem -content content.txt\n</code></pre> <p>alternatively you can base64 decode the signature and use</p> <pre><code>openssl cms -verify -inform DER -in signature.der -content content.txt\n</code></pre> <p>Create an encrypted message using 128 bit Camellia:</p> <pre><code>openssl cms -encrypt -in plain.txt -camellia128 -out mail.msg cert.pem\n</code></pre> <p>Add a signer to an existing message:</p> <pre><code>openssl cms -resign -in mail.msg -signer newsign.pem -out mail2.msg\n</code></pre> <p>Sign mail using RSA-PSS:</p> <pre><code>openssl cms -sign -in message.txt -text -out mail.msg \\\n       -signer mycert.pem -keyopt rsa_padding_mode:pss\n</code></pre> <p>Create encrypted mail using RSA-OAEP:</p> <pre><code>openssl cms -encrypt -in plain.txt -out mail.msg \\\n       -recip cert.pem -keyopt rsa_padding_mode:oaep\n</code></pre> <p>Use SHA256 KDF with an ECDH certificate:</p> <pre><code>openssl cms -encrypt -in plain.txt -out mail.msg \\\n       -recip ecdhcert.pem -keyopt ecdh_kdf_md:sha256\n</code></pre>"},{"location":"man1/cms/#bugs","title":"BUGS","text":"<p>The MIME parser isn't very clever: it seems to handle most messages that I've thrown at it but it may choke on others.</p> <p>The code currently will only write out the signer's certificate to a file: if the signer has a separate encryption certificate this must be manually extracted. There should be some heuristic that determines the correct encryption certificate.</p> <p>Ideally a database should be maintained of a certificates for each email address.</p> <p>The code doesn't currently take note of the permitted symmetric encryption algorithms as supplied in the SMIMECapabilities signed attribute. this means the user has to manually include the correct encryption algorithm. It should store the list of permitted ciphers in a database and only use those.</p> <p>No revocation checking is done on the signer's certificate.</p> <p>The -binary option does not work correctly when processing text input which (contrary to the S/MIME specification) uses LF rather than CRLF line endings.</p>"},{"location":"man1/cms/#history","title":"HISTORY","text":"<p>The use of multiple -signer options and the -resign command were first added in OpenSSL 1.0.0.</p> <p>The keyopt option was added in OpenSSL 1.0.2.</p> <p>Support for RSA-OAEP and RSA-PSS was added in OpenSSL 1.0.2.</p> <p>The use of non-RSA keys with -encrypt and -decrypt was added in OpenSSL 1.0.2.</p> <p>The -no_alt_chains option was added in OpenSSL 1.0.2b.</p>"},{"location":"man1/cms/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/crl/","title":"crl","text":""},{"location":"man1/crl/#name","title":"NAME","text":"<p>openssl-crl, crl - CRL utility</p>"},{"location":"man1/crl/#synopsis","title":"SYNOPSIS","text":"<p>openssl crl [-help] [-inform PEM|DER] [-outform PEM|DER] [-text] [-in filename] [-out filename] [-nameopt option] [-noout] [-hash] [-issuer] [-lastupdate] [-nextupdate] [-CAfile file] [-CApath dir]</p>"},{"location":"man1/crl/#description","title":"DESCRIPTION","text":"<p>The crl command processes CRL files in DER or PEM format.</p>"},{"location":"man1/crl/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. DER format is DER encoded CRL structure. PEM (the default) is a base64 encoded version of the DER form with header and footer lines.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-text</p> <p>Print out the CRL in text form.</p> </li> <li> <p>-nameopt option</p> <p>Option which determines how the subject or issuer names are displayed. See the description of -nameopt in x509(1).</p> </li> <li> <p>-noout</p> <p>Don't output the encoded version of the CRL.</p> </li> <li> <p>-hash</p> <p>Output a hash of the issuer name. This can be use to lookup CRLs in a directory by issuer name.</p> </li> <li> <p>-hash_old</p> <p>Outputs the \"hash\" of the CRL issuer name using the older algorithm as used by OpenSSL before version 1.0.0.</p> </li> <li> <p>-issuer</p> <p>Output the issuer name.</p> </li> <li> <p>-lastupdate</p> <p>Output the lastUpdate field.</p> </li> <li> <p>-nextupdate</p> <p>Output the nextUpdate field.</p> </li> <li> <p>-CAfile file</p> <p>Verify the signature on a CRL by looking up the issuing certificate in file.</p> </li> <li> <p>-CApath dir</p> <p>Verify the signature on a CRL by looking up the issuing certificate in dir. This directory must be a standard certificate directory: that is a hash of each subject name (using x509 -hash) should be linked to each certificate.</p> </li> </ul>"},{"location":"man1/crl/#notes","title":"NOTES","text":"<p>The PEM CRL format uses the header and footer lines:</p> <pre><code>-----BEGIN X509 CRL-----\n-----END X509 CRL-----\n</code></pre>"},{"location":"man1/crl/#examples","title":"EXAMPLES","text":"<p>Convert a CRL file from PEM to DER:</p> <pre><code>openssl crl -in crl.pem -outform DER -out crl.der\n</code></pre> <p>Output the text form of a DER encoded certificate:</p> <pre><code>openssl crl -in crl.der -inform DER -text -noout\n</code></pre>"},{"location":"man1/crl/#bugs","title":"BUGS","text":"<p>Ideally it should be possible to create a CRL using appropriate options and files too.</p>"},{"location":"man1/crl/#see-also","title":"SEE ALSO","text":"<p>crl2pkcs7(1), ca(1), x509(1)</p>"},{"location":"man1/crl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/crl2pkcs7/","title":"crl2pkcs7","text":""},{"location":"man1/crl2pkcs7/#name","title":"NAME","text":"<p>openssl-crl2pkcs7, crl2pkcs7 - Create a PKCS#7 structure from a CRL and certificates</p>"},{"location":"man1/crl2pkcs7/#synopsis","title":"SYNOPSIS","text":"<p>openssl crl2pkcs7 [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-out filename] [-certfile filename] [-nocrl]</p>"},{"location":"man1/crl2pkcs7/#description","title":"DESCRIPTION","text":"<p>The crl2pkcs7 command takes an optional CRL and one or more certificates and converts them into a PKCS#7 degenerate \"certificates only\" structure.</p>"},{"location":"man1/crl2pkcs7/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the CRL input format. DER format is DER encoded CRL structure.PEM (the default) is a base64 encoded version of the DER form with header and footer lines. The default format is PEM.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the PKCS#7 structure output format. DER format is DER encoded PKCS#7 structure.PEM (the default) is a base64 encoded version of the DER form with header and footer lines. The default format is PEM.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a CRL from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename to write the PKCS#7 structure to or standard output by default.</p> </li> <li> <p>-certfile filename</p> <p>Specifies a filename containing one or more certificates in PEM format. All certificates in the file will be added to the PKCS#7 structure. This option can be used more than once to read certificates from multiple files.</p> </li> <li> <p>-nocrl</p> <p>Normally a CRL is included in the output file. With this option no CRL is included in the output file and a CRL is not read from the input file.</p> </li> </ul>"},{"location":"man1/crl2pkcs7/#examples","title":"EXAMPLES","text":"<p>Create a PKCS#7 structure from a certificate and CRL:</p> <pre><code>openssl crl2pkcs7 -in crl.pem -certfile cert.pem -out p7.pem\n</code></pre> <p>Creates a PKCS#7 structure in DER format with no CRL from several different certificates:</p> <pre><code>openssl crl2pkcs7 -nocrl -certfile newcert.pem\n       -certfile demoCA/cacert.pem -outform DER -out p7.der\n</code></pre>"},{"location":"man1/crl2pkcs7/#notes","title":"NOTES","text":"<p>The output file is a PKCS#7 signed data structure containing no signers and just certificates and an optional CRL.</p> <p>This utility can be used to send certificates and CAs to Netscape as part of the certificate enrollment process. This involves sending the DER encoded output as MIME type application/x-x509-user-cert.</p> <p>The PEM encoded form with the header and footer lines removed can be used to install user certificates and CAs in MSIE using the Xenroll control.</p>"},{"location":"man1/crl2pkcs7/#see-also","title":"SEE ALSO","text":"<p>pkcs7(1)</p>"},{"location":"man1/crl2pkcs7/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/dgst/","title":"dgst","text":""},{"location":"man1/dgst/#name","title":"NAME","text":"<p>openssl-dgst, dgst - perform digest operations</p>"},{"location":"man1/dgst/#synopsis","title":"SYNOPSIS","text":"<p>openssl dgst [-digest] [-help] [-c] [-d] [-list] [-hex] [-binary] [-r] [-out filename] [-sign filename] [-keyform arg] [-passin arg] [-verify filename] [-prverify filename] [-signature filename] [-sigopt nm:v] [-hmac key] [-fips-fingerprint] [-rand file...] [-engine id] [-engine_impl] [file...]</p> <p>openssl digest [...]</p>"},{"location":"man1/dgst/#description","title":"DESCRIPTION","text":"<p>The digest functions output the message digest of a supplied file or files in hexadecimal.  The digest functions also generate and verify digital signatures using message digests.</p> <p>The generic name, dgst, may be used with an option specifying the algorithm to be used. The default digest is sha256. A supported digest name may also be used as the command name. To see the list of supported algorithms, use the list --digest-commands command.</p>"},{"location":"man1/dgst/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-digest</p> <p>Specifies name of a supported digest to be used. To see the list of supported digests, use the command list --digest-commands.</p> </li> <li> <p>-c</p> <p>Print out the digest in two digit groups separated by colons, only relevant if hex format output is used.</p> </li> <li> <p>-d</p> <p>Print out BIO debugging information.</p> </li> <li> <p>-list</p> <p>Prints out a list of supported message digests.</p> </li> <li> <p>-hex</p> <p>Digest is to be output as a hex dump. This is the default case for a \"normal\" digest as opposed to a digital signature.  See NOTES below for digital signatures using -hex.</p> </li> <li> <p>-binary</p> <p>Output the digest or signature in binary form.</p> </li> <li> <p>-r</p> <p>Output the digest in the \"coreutils\" format, including newlines. Used by programs like sha1sum.</p> </li> <li> <p>-out filename</p> <p>Filename to output to, or standard output by default.</p> </li> <li> <p>-sign filename</p> <p>Digitally sign the digest using the private key in \"filename\". Note this option does not support Ed25519 or Ed448 private keys.</p> </li> <li> <p>-keyform arg</p> <p>Specifies the key format to sign digest with. The DER, PEM, P12, and ENGINE formats are supported.</p> </li> <li> <p>-sigopt nm:v</p> <p>Pass options to the signature algorithm during sign or verify operations. Names and values of these options are algorithm-specific.</p> </li> <li> <p>-passin arg</p> <p>The private key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-verify filename</p> <p>Verify the signature using the public key in \"filename\". The output is either \"Verification OK\" or \"Verification Failure\".</p> </li> <li> <p>-prverify filename</p> <p>Verify the signature using the private key in \"filename\".</p> </li> <li> <p>-signature filename</p> <p>The actual signature to verify.</p> </li> <li> <p>-hmac key</p> <p>Create a hashed MAC using \"key\".</p> </li> <li> <p>-mac alg</p> <p>Create MAC (keyed Message Authentication Code). The most popular MAC algorithm is HMAC (hash-based MAC), but there are other MAC algorithms which are not based on hash, for instance gost-mac algorithm, supported by ccgost engine. MAC keys and other options should be set via -macopt parameter.</p> </li> <li> <p>-macopt nm:v</p> <p>Passes options to MAC algorithm, specified by -mac key. Following options are supported by both by HMAC and gost-mac:</p> <ul> <li> <p>key:string</p> <p>Specifies MAC key as alphanumeric string (use if key contain printable characters only). String length must conform to any restrictions of the MAC algorithm for example exactly 32 chars for gost-mac.</p> </li> <li> <p>hexkey:string</p> <p>Specifies MAC key in hexadecimal form (two hex digits per byte). Key length must conform to any restrictions of the MAC algorithm for example exactly 32 chars for gost-mac.</p> </li> </ul> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-fips-fingerprint</p> <p>Compute HMAC using a specific key for certain OpenSSL-FIPS operations.</p> </li> <li> <p>-engine id</p> <p>Use engine id for operations (including private key storage). This engine is not used as source for digest algorithms, unless it is also specified in the configuration file or -engine_impl is also specified.</p> </li> <li> <p>-engine_impl</p> <p>When used with the -engine option, it specifies to also use engine id for digest operations.</p> </li> <li> <p>file...</p> <p>File or files to digest. If no files are specified then standard input is used.</p> </li> </ul>"},{"location":"man1/dgst/#examples","title":"EXAMPLES","text":"<p>To create a hex-encoded message digest of a file:  openssl dgst -md5 -hex file.txt</p> <p>To sign a file using SHA-256 with binary file output:  openssl dgst -sha256 -sign privatekey.pem -out signature.sign file.txt</p> <p>To verify a signature:  openssl dgst -sha256 -verify publickey.pem \\  -signature signature.sign \\  file.txt</p>"},{"location":"man1/dgst/#notes","title":"NOTES","text":"<p>The digest mechanisms that are available will depend on the options used when building OpenSSL. The list digest-commands command can be used to list them.</p> <p>New or agile applications should use probably use SHA-256. Other digests, particularly SHA-1 and MD5, are still widely used for interoperating with existing formats and protocols.</p> <p>When signing a file, dgst will automatically determine the algorithm (RSA, ECC, etc) to use for signing based on the private key's ASN.1 info. When verifying signatures, it only handles the RSA, DSA, or ECDSA signature itself, not the related data to identify the signer and algorithm used in formats such as x.509, CMS, and S/MIME.</p> <p>A source of random numbers is required for certain signing algorithms, in particular ECDSA and DSA.</p> <p>The signing and verify options should only be used if a single file is being signed or verified.</p> <p>Hex signatures cannot be verified using openssl.  Instead, use \"xxd -r\" or similar program to transform the hex signature into a binary signature prior to verification.</p>"},{"location":"man1/dgst/#history","title":"HISTORY","text":"<p>The default digest was changed from MD5 to SHA256 in OpenSSL 1.1.0. The FIPS-related options were removed in OpenSSL 1.1.0.</p>"},{"location":"man1/dgst/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/dhparam/","title":"dhparam","text":""},{"location":"man1/dhparam/#name","title":"NAME","text":"<p>openssl-dhparam, dhparam - DH parameter manipulation and generation</p>"},{"location":"man1/dhparam/#synopsis","title":"SYNOPSIS","text":"<p>openssl dhparam [-help] [-inform DER|PEM] [-outform DER|PEM] [-in filename] [-out filename] [-dsaparam] [-check] [-noout] [-text] [-C] [-2] [-5] [-rand file...] [-writerand file] [-engine id] [numbits]</p>"},{"location":"man1/dhparam/#description","title":"DESCRIPTION","text":"<p>This command is used to manipulate DH parameter files.</p>"},{"location":"man1/dhparam/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option uses an ASN1 DER encoded form compatible with the PKCS#3 DHparameter structure. The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read parameters from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename parameters to. Standard output is used if this option is not present. The output filename should not be the same as the input filename.</p> </li> <li> <p>-dsaparam</p> <p>If this option is used, DSA rather than DH parameters are read or created; they are converted to DH format.  Otherwise, \"strong\" primes (such that (p-1)/2 is also prime) will be used for DH parameter generation.</p> <p>DH parameter generation with the -dsaparam option is much faster, and the recommended exponent length is shorter, which makes DH key exchange more efficient.  Beware that with such DSA-style DH parameters, a fresh DH key should be created for each use to avoid small-subgroup attacks that may be possible otherwise.</p> </li> <li> <p>-check</p> <p>Performs numerous checks to see if the supplied parameters are valid and displays a warning if not.</p> </li> <li> <p>-2, -5</p> <p>The generator to use, either 2 or 5. If present then the input file is ignored and parameters are generated instead. If not present but numbits is present, parameters are generated with the default generator 2.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>numbits</p> <p>This option specifies that a parameter set should be generated of size numbits. It must be the last option. If this option is present then the input file is ignored and parameters are generated instead. If this option is not present but a generator (-2 or -5) is present, parameters are generated with a default length of 2048 bits.</p> </li> <li> <p>-noout</p> <p>This option inhibits the output of the encoded version of the parameters.</p> </li> <li> <p>-text</p> <p>This option prints out the DH parameters in human readable form.</p> </li> <li> <p>-C</p> <p>This option converts the parameters into C code. The parameters can then be loaded by calling the get_dhNNNN() function.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause dhparam to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/dhparam/#warnings","title":"WARNINGS","text":"<p>The program dhparam combines the functionality of the programs dh and gendh in previous versions of OpenSSL. The dh and gendh programs are retained for now but may have different purposes in future versions of OpenSSL.</p>"},{"location":"man1/dhparam/#notes","title":"NOTES","text":"<p>PEM format DH parameters use the header and footer lines:</p> <pre><code>-----BEGIN DH PARAMETERS-----\n-----END DH PARAMETERS-----\n</code></pre> <p>OpenSSL currently only supports the older PKCS#3 DH, not the newer X9.42 DH.</p> <p>This program manipulates DH parameters not keys.</p>"},{"location":"man1/dhparam/#bugs","title":"BUGS","text":"<p>There should be a way to generate and manipulate DH keys.</p>"},{"location":"man1/dhparam/#see-also","title":"SEE ALSO","text":"<p>dsaparam(1)</p>"},{"location":"man1/dhparam/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/dsa/","title":"dsa","text":""},{"location":"man1/dsa/#name","title":"NAME","text":"<p>openssl-dsa, dsa - DSA key processing</p>"},{"location":"man1/dsa/#synopsis","title":"SYNOPSIS","text":"<p>openssl dsa [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-aes128] [-aes192] [-aes256] [-aria128] [-aria192] [-aria256] [-camellia128] [-camellia192] [-camellia256] [-des] [-des3] [-idea] [-text] [-noout] [-modulus] [-pubin] [-pubout] [-engine id]</p>"},{"location":"man1/dsa/#description","title":"DESCRIPTION","text":"<p>The dsa command processes DSA keys. They can be converted between various forms and their components printed out. Note This command uses the traditional SSLeay compatible format for private key encryption: newer applications should use the more secure PKCS#8 format using the pkcs8</p>"},{"location":"man1/dsa/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option with a private key uses an ASN1 DER encoded form of an ASN.1 SEQUENCE consisting of the values of version (currently zero), p, q, g, the public and private key components respectively as ASN.1 INTEGERs. When used with a public key it uses a SubjectPublicKeyInfo structure: it is an error if the key is not DSA.</p> <p>The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines. In the case of a private key PKCS#8 format is also accepted.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.</p> </li> <li> <p>-passin arg</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write a key to or standard output by is not specified. If any encryption options are set then a pass phrase will be prompted for. The output filename should not be the same as the input filename.</p> </li> <li> <p>-passout arg</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-aes128, -aes192, -aes256, -aria128, -aria192, -aria256, -camellia128, -camellia192, -camellia256, -des, -des3, -idea</p> <p>These options encrypt the private key with the specified cipher before outputting it. A pass phrase is prompted for. If none of these options is specified the key is written in plain text. This means that using the dsa utility to read in an encrypted key with no encryption option can be used to remove the pass phrase from a key, or by setting the encryption options it can be use to add or change the pass phrase. These options can only be used with PEM format output files.</p> </li> <li> <p>-text</p> <p>Prints out the public, private key components and parameters.</p> </li> <li> <p>-noout</p> <p>This option prevents output of the encoded version of the key.</p> </li> <li> <p>-modulus</p> <p>This option prints out the value of the public key component of the key.</p> </li> <li> <p>-pubin</p> <p>By default, a private key is read from the input file. With this option a public key is read instead.</p> </li> <li> <p>-pubout</p> <p>By default, a private key is output. With this option a public key will be output instead. This option is automatically set if the input is a public key.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause dsa to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/dsa/#notes","title":"NOTES","text":"<p>The PEM private key format uses the header and footer lines:</p> <pre><code>-----BEGIN DSA PRIVATE KEY-----\n-----END DSA PRIVATE KEY-----\n</code></pre> <p>The PEM public key format uses the header and footer lines:</p> <pre><code>-----BEGIN PUBLIC KEY-----\n-----END PUBLIC KEY-----\n</code></pre>"},{"location":"man1/dsa/#examples","title":"EXAMPLES","text":"<p>To remove the pass phrase on a DSA private key:</p> <pre><code>openssl dsa -in key.pem -out keyout.pem\n</code></pre> <p>To encrypt a private key using triple DES:</p> <pre><code>openssl dsa -in key.pem -des3 -out keyout.pem\n</code></pre> <p>To convert a private key from PEM to DER format:</p> <pre><code>openssl dsa -in key.pem -outform DER -out keyout.der\n</code></pre> <p>To print out the components of a private key to standard output:</p> <pre><code>openssl dsa -in key.pem -text -noout\n</code></pre> <p>To just output the public part of a private key:</p> <pre><code>openssl dsa -in key.pem -pubout -out pubkey.pem\n</code></pre>"},{"location":"man1/dsa/#see-also","title":"SEE ALSO","text":"<p>dsaparam(1), gendsa(1), rsa(1), genrsa(1)</p>"},{"location":"man1/dsa/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/dsaparam/","title":"dsaparam","text":""},{"location":"man1/dsaparam/#name","title":"NAME","text":"<p>openssl-dsaparam, dsaparam - DSA parameter manipulation and generation</p>"},{"location":"man1/dsaparam/#synopsis","title":"SYNOPSIS","text":"<p>openssl dsaparam [-help] [-inform DER|PEM] [-outform DER|PEM] [-in filename] [-out filename] [-noout] [-text] [-C] [-rand file...] [-writerand file] [-genkey] [-engine id] [numbits]</p>"},{"location":"man1/dsaparam/#description","title":"DESCRIPTION","text":"<p>This command is used to manipulate or generate DSA parameter files.</p>"},{"location":"man1/dsaparam/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option uses an ASN1 DER encoded form compatible with RFC2459 (PKIX) DSS-Parms that is a SEQUENCE consisting of p, q and g respectively. The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read parameters from or standard input if this option is not specified. If the numbits parameter is included then this option will be ignored.</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename parameters to. Standard output is used if this option is not present. The output filename should not be the same as the input filename.</p> </li> <li> <p>-noout</p> <p>This option inhibits the output of the encoded version of the parameters.</p> </li> <li> <p>-text</p> <p>This option prints out the DSA parameters in human readable form.</p> </li> <li> <p>-C</p> <p>This option converts the parameters into C code. The parameters can then be loaded by calling the get_dsaXXX() function.</p> </li> <li> <p>-genkey</p> <p>This option will generate a DSA either using the specified or generated parameters.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>numbits</p> <p>This option specifies that a parameter set should be generated of size numbits. It must be the last option. If this option is included then the input file (if any) is ignored.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause dsaparam to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/dsaparam/#notes","title":"NOTES","text":"<p>PEM format DSA parameters use the header and footer lines:</p> <pre><code>-----BEGIN DSA PARAMETERS-----\n-----END DSA PARAMETERS-----\n</code></pre> <p>DSA parameter generation is a slow process and as a result the same set of DSA parameters is often used to generate several distinct keys.</p>"},{"location":"man1/dsaparam/#see-also","title":"SEE ALSO","text":"<p>gendsa(1), dsa(1), genrsa(1), rsa(1)</p>"},{"location":"man1/dsaparam/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/ec/","title":"ec","text":""},{"location":"man1/ec/#name","title":"NAME","text":"<p>openssl-ec, ec - EC key processing</p>"},{"location":"man1/ec/#synopsis","title":"SYNOPSIS","text":"<p>openssl ec [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-des] [-des3] [-idea] [-text] [-noout] [-param_out] [-pubin] [-pubout] [-conv_form arg] [-param_enc arg] [-no_public] [-check] [-engine id]</p>"},{"location":"man1/ec/#description","title":"DESCRIPTION","text":"<p>The ec command processes EC keys. They can be converted between various forms and their components printed out. Note OpenSSL uses the private key format specified in 'SEC 1: Elliptic Curve Cryptography' (http://www.secg.org/). To convert an OpenSSL EC private key into the PKCS#8 private key format use the pkcs8 command.</p>"},{"location":"man1/ec/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option with a private key uses an ASN.1 DER encoded SEC1 private key. When used with a public key it uses the SubjectPublicKeyInfo structure as specified in RFC 3280. The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines. In the case of a private key PKCS#8 format is also accepted.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.</p> </li> <li> <p>-passin arg</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write a key to or standard output by is not specified. If any encryption options are set then a pass phrase will be prompted for. The output filename should not be the same as the input filename.</p> </li> <li> <p>-passout arg</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-des|-des3|-idea</p> <p>These options encrypt the private key with the DES, triple DES, IDEA or any other cipher supported by OpenSSL before outputting it. A pass phrase is prompted for. If none of these options is specified the key is written in plain text. This means that using the ec utility to read in an encrypted key with no encryption option can be used to remove the pass phrase from a key, or by setting the encryption options it can be use to add or change the pass phrase. These options can only be used with PEM format output files.</p> </li> <li> <p>-text</p> <p>Prints out the public, private key components and parameters.</p> </li> <li> <p>-noout</p> <p>This option prevents output of the encoded version of the key.</p> </li> <li> <p>-pubin</p> <p>By default, a private key is read from the input file. With this option a public key is read instead.</p> </li> <li> <p>-pubout</p> <p>By default a private key is output. With this option a public key will be output instead. This option is automatically set if the input is a public key.</p> </li> <li> <p>-conv_form</p> <p>This specifies how the points on the elliptic curve are converted into octet strings. Possible values are: compressed (the default value), uncompressed and hybrid. For more information regarding the point conversion forms please read the X9.62 standard. Note Due to patent issues the compressed option is disabled by default for binary curves and can be enabled by defining the preprocessor macro OPENSSL_EC_BIN_PT_COMP at compile time.</p> </li> <li> <p>-param_enc arg</p> <p>This specifies how the elliptic curve parameters are encoded. Possible value are: named_curve, i.e. the ec parameters are specified by an OID, or explicit where the ec parameters are explicitly given (see RFC 3279 for the definition of the EC parameters structures). The default value is named_curve. Note the implicitlyCA alternative, as specified in RFC 3279, is currently not implemented in OpenSSL.</p> </li> <li> <p>-no_public</p> <p>This option omits the public key components from the private key output.</p> </li> <li> <p>-check</p> <p>This option checks the consistency of an EC private or public key.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause ec to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/ec/#notes","title":"NOTES","text":"<p>The PEM private key format uses the header and footer lines:</p> <pre><code>-----BEGIN EC PRIVATE KEY-----\n-----END EC PRIVATE KEY-----\n</code></pre> <p>The PEM public key format uses the header and footer lines:</p> <pre><code>-----BEGIN PUBLIC KEY-----\n-----END PUBLIC KEY-----\n</code></pre>"},{"location":"man1/ec/#examples","title":"EXAMPLES","text":"<p>To encrypt a private key using triple DES:</p> <pre><code>openssl ec -in key.pem -des3 -out keyout.pem\n</code></pre> <p>To convert a private key from PEM to DER format:</p> <pre><code>openssl ec -in key.pem -outform DER -out keyout.der\n</code></pre> <p>To print out the components of a private key to standard output:</p> <pre><code>openssl ec -in key.pem -text -noout\n</code></pre> <p>To just output the public part of a private key:</p> <pre><code>openssl ec -in key.pem -pubout -out pubkey.pem\n</code></pre> <p>To change the parameters encoding to explicit:</p> <pre><code>openssl ec -in key.pem -param_enc explicit -out keyout.pem\n</code></pre> <p>To change the point conversion form to compressed:</p> <pre><code>openssl ec -in key.pem -conv_form compressed -out keyout.pem\n</code></pre>"},{"location":"man1/ec/#see-also","title":"SEE ALSO","text":"<p>ecparam(1), dsa(1), rsa(1)</p>"},{"location":"man1/ec/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2003-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/ecparam/","title":"ecparam","text":""},{"location":"man1/ecparam/#name","title":"NAME","text":"<p>openssl-ecparam, ecparam - EC parameter manipulation and generation</p>"},{"location":"man1/ecparam/#synopsis","title":"SYNOPSIS","text":"<p>openssl ecparam [-help] [-inform DER|PEM] [-outform DER|PEM] [-in filename] [-out filename] [-noout] [-text] [-C] [-check] [-name arg] [-list_curves] [-conv_form arg] [-param_enc arg] [-no_seed] [-rand file...] [-writerand file] [-genkey] [-engine id]</p>"},{"location":"man1/ecparam/#description","title":"DESCRIPTION","text":"<p>This command is used to manipulate or generate EC parameter files.</p>"},{"location":"man1/ecparam/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option uses an ASN.1 DER encoded form compatible with RFC 3279 EcpkParameters. The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read parameters from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename parameters to. Standard output is used if this option is not present. The output filename should not be the same as the input filename.</p> </li> <li> <p>-noout</p> <p>This option inhibits the output of the encoded version of the parameters.</p> </li> <li> <p>-text</p> <p>This option prints out the EC parameters in human readable form.</p> </li> <li> <p>-C</p> <p>This option converts the EC parameters into C code. The parameters can then be loaded by calling the get_ec_group_XXX() function.</p> </li> <li> <p>-check</p> <p>Validate the elliptic curve parameters.</p> </li> <li> <p>-name arg</p> <p>Use the EC parameters with the specified 'short' name. Use -list_curves to get a list of all currently implemented EC parameters.</p> </li> <li> <p>-list_curves</p> <p>If this options is specified ecparam will print out a list of all currently implemented EC parameters names and exit.</p> </li> <li> <p>-conv_form</p> <p>This specifies how the points on the elliptic curve are converted into octet strings. Possible values are: compressed, uncompressed (the default value) and hybrid. For more information regarding the point conversion forms please read the X9.62 standard. Note Due to patent issues the compressed option is disabled by default for binary curves and can be enabled by defining the preprocessor macro OPENSSL_EC_BIN_PT_COMP at compile time.</p> </li> <li> <p>-param_enc arg</p> <p>This specifies how the elliptic curve parameters are encoded. Possible value are: named_curve, i.e. the ec parameters are specified by an OID, or explicit where the ec parameters are explicitly given (see RFC 3279 for the definition of the EC parameters structures). The default value is named_curve. Note the implicitlyCA alternative, as specified in RFC 3279, is currently not implemented in OpenSSL.</p> </li> <li> <p>-no_seed</p> <p>This option inhibits that the 'seed' for the parameter generation is included in the ECParameters structure (see RFC 3279).</p> </li> <li> <p>-genkey</p> <p>This option will generate an EC private key using the specified parameters.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause ecparam to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/ecparam/#notes","title":"NOTES","text":"<p>PEM format EC parameters use the header and footer lines:</p> <pre><code>-----BEGIN EC PARAMETERS-----\n-----END EC PARAMETERS-----\n</code></pre> <p>OpenSSL is currently not able to generate new groups and therefore ecparam can only create EC parameters from known (named) curves.</p>"},{"location":"man1/ecparam/#examples","title":"EXAMPLES","text":"<p>To create EC parameters with the group 'prime192v1':</p> <pre><code>openssl ecparam -out ec_param.pem -name prime192v1\n</code></pre> <p>To create EC parameters with explicit parameters:</p> <pre><code>openssl ecparam -out ec_param.pem -name prime192v1 -param_enc explicit\n</code></pre> <p>To validate given EC parameters:</p> <pre><code>openssl ecparam -in ec_param.pem -check\n</code></pre> <p>To create EC parameters and a private key:</p> <pre><code>openssl ecparam -out ec_key.pem -name prime192v1 -genkey\n</code></pre> <p>To change the point encoding to 'compressed':</p> <pre><code>openssl ecparam -in ec_in.pem -out ec_out.pem -conv_form compressed\n</code></pre> <p>To print out the EC parameters to standard output:</p> <pre><code>openssl ecparam -in ec_param.pem -noout -text\n</code></pre>"},{"location":"man1/ecparam/#see-also","title":"SEE ALSO","text":"<p>ec(1), dsaparam(1)</p>"},{"location":"man1/ecparam/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2003-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/enc/","title":"enc","text":""},{"location":"man1/enc/#name","title":"NAME","text":"<p>openssl-enc, enc - symmetric cipher routines</p>"},{"location":"man1/enc/#synopsis","title":"SYNOPSIS","text":"<p>openssl enc -cipher [-help] [-list] [-ciphers] [-in filename] [-out filename] [-pass arg] [-e] [-d] [-a] [-base64] [-A] [-k password] [-kfile filename] [-K key] [-iv IV] [-S salt] [-salt] [-nosalt] [-z] [-md digest] [-iter count] [-pbkdf2] [-p] [-P] [-bufsize number] [-nopad] [-debug] [-none] [-rand file...] [-writerand file] [-engine id]</p> <p>openssl [cipher] [...]</p>"},{"location":"man1/enc/#description","title":"DESCRIPTION","text":"<p>The symmetric cipher commands allow data to be encrypted or decrypted using various block and stream ciphers using keys based on passwords or explicitly provided. Base64 encoding or decoding can also be performed either by itself or in addition to the encryption or decryption.</p>"},{"location":"man1/enc/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-list</p> <p>List all supported ciphers.</p> </li> <li> <p>-ciphers</p> <p>Alias of -list to display all supported ciphers.</p> </li> <li> <p>-in filename</p> <p>The input filename, standard input by default.</p> </li> <li> <p>-out filename</p> <p>The output filename, standard output by default.</p> </li> <li> <p>-pass arg</p> <p>The password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-e</p> <p>Encrypt the input data: this is the default.</p> </li> <li> <p>-d</p> <p>Decrypt the input data.</p> </li> <li> <p>-a</p> <p>Base64 process the data. This means that if encryption is taking place the data is base64 encoded after encryption. If decryption is set then the input data is base64 decoded before being decrypted.</p> </li> <li> <p>-base64</p> <p>Same as -a</p> </li> <li> <p>-A</p> <p>If the -a option is set then base64 process the data on one line.</p> </li> <li> <p>-k password</p> <p>The password to derive the key from. This is for compatibility with previous versions of OpenSSL. Superseded by the -pass argument.</p> </li> <li> <p>-kfile filename</p> <p>Read the password to derive the key from the first line of filename. This is for compatibility with previous versions of OpenSSL. Superseded by the -pass argument.</p> </li> <li> <p>-md digest</p> <p>Use the specified digest to create the key from the passphrase. The default algorithm is sha-256.</p> </li> <li> <p>-iter count</p> <p>Use a given number of iterations on the password in deriving the encryption key. High values increase the time required to brute-force the resulting file. This option enables the use of PBKDF2 algorithm to derive the key.</p> </li> <li> <p>-pbkdf2</p> <p>Use PBKDF2 algorithm with default iteration count unless otherwise specified.</p> </li> <li> <p>-nosalt</p> <p>Don't use a salt in the key derivation routines. This option SHOULD NOT be used except for test purposes or compatibility with ancient versions of OpenSSL.</p> </li> <li> <p>-salt</p> <p>Use salt (randomly generated or provide with -S option) when encrypting, this is the default.</p> </li> <li> <p>-S salt</p> <p>The actual salt to use: this must be represented as a string of hex digits.</p> </li> <li> <p>-K key</p> <p>The actual key to use: this must be represented as a string comprised only of hex digits. If only the key is specified, the IV must additionally specified using the -iv option. When both a key and a password are specified, the key given with the -K option will be used and the IV generated from the password will be taken. It does not make much sense to specify both key and password.</p> </li> <li> <p>-iv IV</p> <p>The actual IV to use: this must be represented as a string comprised only of hex digits. When only the key is specified using the -K option, the IV must explicitly be defined. When a password is being specified using one of the other options, the IV is generated from this password.</p> </li> <li> <p>-p</p> <p>Print out the key and IV used.</p> </li> <li> <p>-P</p> <p>Print out the key and IV used then immediately exit: don't do any encryption or decryption.</p> </li> <li> <p>-bufsize number</p> <p>Set the buffer size for I/O.</p> </li> <li> <p>-nopad</p> <p>Disable standard block padding.</p> </li> <li> <p>-debug</p> <p>Debug the BIOs used for I/O.</p> </li> <li> <p>-z</p> <p>Compress or decompress encrypted data using zlib after encryption or before decryption. This option exists only if OpenSSL was compiled with the zlib or zlib-dynamic option.</p> </li> <li> <p>-none</p> <p>Use NULL cipher (no encryption or decryption of input).</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> </ul>"},{"location":"man1/enc/#notes","title":"NOTES","text":"<p>The program can be called either as openssl cipher or openssl enc -cipher. The first form doesn't work with engine-provided ciphers, because this form is processed before the configuration file is read and any ENGINEs loaded. Use the list command to get a list of supported ciphers.</p> <p>Engines which provide entirely new encryption algorithms (such as the ccgost engine which provides gost89 algorithm) should be configured in the configuration file. Engines specified on the command line using -engine options can only be used for hardware-assisted implementations of ciphers which are supported by the OpenSSL core or another engine specified in the configuration file.</p> <p>When the enc command lists supported ciphers, ciphers provided by engines, specified in the configuration files are listed too.</p> <p>A password will be prompted for to derive the key and IV if necessary.</p> <p>The -salt option should ALWAYS be used if the key is being derived from a password unless you want compatibility with previous versions of OpenSSL.</p> <p>Without the -salt option it is possible to perform efficient dictionary attacks on the password and to attack stream cipher encrypted data. The reason for this is that without the salt the same password always generates the same encryption key. When the salt is being used the first eight bytes of the encrypted data are reserved for the salt: it is generated at random when encrypting a file and read from the encrypted file when it is decrypted.</p> <p>Some of the ciphers do not have large keys and others have security implications if not used correctly. A beginner is advised to just use a strong block cipher, such as AES, in CBC mode.</p> <p>All the block ciphers normally use PKCS#5 padding, also known as standard block padding. This allows a rudimentary integrity or password check to be performed. However, since the chance of random data passing the test is better than 1 in 256 it isn't a very good test.</p> <p>If padding is disabled then the input data must be a multiple of the cipher block length.</p> <p>All RC2 ciphers have the same key and effective key length.</p> <p>Blowfish and RC5 algorithms use a 128 bit key.</p>"},{"location":"man1/enc/#supported-ciphers","title":"SUPPORTED CIPHERS","text":"<p>Note that some of these ciphers can be disabled at compile time and some are available only if an appropriate engine is configured in the configuration file. The output of the enc command run with the -ciphers option (that is openssl enc -ciphers) produces a list of ciphers, supported by your version of OpenSSL, including ones provided by configured engines.</p> <p>The enc program does not support authenticated encryption modes like CCM and GCM, and will not support such modes in the future. The enc interface by necessity must begin streaming output (e.g., to standard output when -out is not used) before the authentication tag could be validated, leading to the usage of enc in pipelines that begin processing untrusted data and are not capable of rolling back upon authentication failure.  The AEAD modes currently in common use also suffer from catastrophic failure of confidentiality and/or integrity upon reuse of key/iv/nonce, and since enc places the entire burden of key/iv/nonce management upon the user, the risk of exposing AEAD modes is too great to allow.  These key/iv/nonce management issues also affect other modes currently exposed in enc, but the failure modes are less extreme in these cases, and the functionality cannot be removed with a stable release branch. For bulk encryption of data, whether using authenticated encryption modes or other modes, cms(1) is recommended, as it provides a standard data format and performs the needed key/iv/nonce management.</p> <pre><code>base64             Base 64\n\nbf-cbc             Blowfish in CBC mode\nbf                 Alias for bf-cbc\nblowfish           Alias for bf-cbc\nbf-cfb             Blowfish in CFB mode\nbf-ecb             Blowfish in ECB mode\nbf-ofb             Blowfish in OFB mode\n\ncast-cbc           CAST in CBC mode\ncast               Alias for cast-cbc\ncast5-cbc          CAST5 in CBC mode\ncast5-cfb          CAST5 in CFB mode\ncast5-ecb          CAST5 in ECB mode\ncast5-ofb          CAST5 in OFB mode\n\nchacha20           ChaCha20 algorithm\n\ndes-cbc            DES in CBC mode\ndes                Alias for des-cbc\ndes-cfb            DES in CFB mode\ndes-ofb            DES in OFB mode\ndes-ecb            DES in ECB mode\n\ndes-ede-cbc        Two key triple DES EDE in CBC mode\ndes-ede            Two key triple DES EDE in ECB mode\ndes-ede-cfb        Two key triple DES EDE in CFB mode\ndes-ede-ofb        Two key triple DES EDE in OFB mode\n\ndes-ede3-cbc       Three key triple DES EDE in CBC mode\ndes-ede3           Three key triple DES EDE in ECB mode\ndes3               Alias for des-ede3-cbc\ndes-ede3-cfb       Three key triple DES EDE CFB mode\ndes-ede3-ofb       Three key triple DES EDE in OFB mode\n\ndesx               DESX algorithm.\n\ngost89             GOST 28147-89 in CFB mode (provided by ccgost engine)\ngost89-cnt        `GOST 28147-89 in CNT mode (provided by ccgost engine)\n\nidea-cbc           IDEA algorithm in CBC mode\nidea               same as idea-cbc\nidea-cfb           IDEA in CFB mode\nidea-ecb           IDEA in ECB mode\nidea-ofb           IDEA in OFB mode\n\nrc2-cbc            128 bit RC2 in CBC mode\nrc2                Alias for rc2-cbc\nrc2-cfb            128 bit RC2 in CFB mode\nrc2-ecb            128 bit RC2 in ECB mode\nrc2-ofb            128 bit RC2 in OFB mode\nrc2-64-cbc         64 bit RC2 in CBC mode\nrc2-40-cbc         40 bit RC2 in CBC mode\n\nrc4                128 bit RC4\nrc4-64             64 bit RC4\nrc4-40             40 bit RC4\n\nrc5-cbc            RC5 cipher in CBC mode\nrc5                Alias for rc5-cbc\nrc5-cfb            RC5 cipher in CFB mode\nrc5-ecb            RC5 cipher in ECB mode\nrc5-ofb            RC5 cipher in OFB mode\n\nseed-cbc           SEED cipher in CBC mode\nseed               Alias for seed-cbc\nseed-cfb           SEED cipher in CFB mode\nseed-ecb           SEED cipher in ECB mode\nseed-ofb           SEED cipher in OFB mode\n\nsm4-cbc            SM4 cipher in CBC mode\nsm4                Alias for sm4-cbc\nsm4-cfb            SM4 cipher in CFB mode\nsm4-ctr            SM4 cipher in CTR mode\nsm4-ecb            SM4 cipher in ECB mode\nsm4-ofb            SM4 cipher in OFB mode\n\naes-[128|192|256]-cbc  128/192/256 bit AES in CBC mode\naes[128|192|256]       Alias for aes-[128|192|256]-cbc\naes-[128|192|256]-cfb  128/192/256 bit AES in 128 bit CFB mode\naes-[128|192|256]-cfb1 128/192/256 bit AES in 1 bit CFB mode\naes-[128|192|256]-cfb8 128/192/256 bit AES in 8 bit CFB mode\naes-[128|192|256]-ctr  128/192/256 bit AES in CTR mode\naes-[128|192|256]-ecb  128/192/256 bit AES in ECB mode\naes-[128|192|256]-ofb  128/192/256 bit AES in OFB mode\n\naria-[128|192|256]-cbc  128/192/256 bit ARIA in CBC mode\naria[128|192|256]       Alias for aria-[128|192|256]-cbc\naria-[128|192|256]-cfb  128/192/256 bit ARIA in 128 bit CFB mode\naria-[128|192|256]-cfb1 128/192/256 bit ARIA in 1 bit CFB mode\naria-[128|192|256]-cfb8 128/192/256 bit ARIA in 8 bit CFB mode\naria-[128|192|256]-ctr  128/192/256 bit ARIA in CTR mode\naria-[128|192|256]-ecb  128/192/256 bit ARIA in ECB mode\naria-[128|192|256]-ofb  128/192/256 bit ARIA in OFB mode\n\ncamellia-[128|192|256]-cbc  128/192/256 bit Camellia in CBC mode\ncamellia[128|192|256]       Alias for camellia-[128|192|256]-cbc\ncamellia-[128|192|256]-cfb  128/192/256 bit Camellia in 128 bit CFB mode\ncamellia-[128|192|256]-cfb1 128/192/256 bit Camellia in 1 bit CFB mode\ncamellia-[128|192|256]-cfb8 128/192/256 bit Camellia in 8 bit CFB mode\ncamellia-[128|192|256]-ctr  128/192/256 bit Camellia in CTR mode\ncamellia-[128|192|256]-ecb  128/192/256 bit Camellia in ECB mode\ncamellia-[128|192|256]-ofb  128/192/256 bit Camellia in OFB mode\n</code></pre>"},{"location":"man1/enc/#examples","title":"EXAMPLES","text":"<p>Just base64 encode a binary file:</p> <pre><code>openssl base64 -in file.bin -out file.b64\n</code></pre> <p>Decode the same file</p> <pre><code>openssl base64 -d -in file.b64 -out file.bin\n</code></pre> <p>Encrypt a file using AES-128 using a prompted password and PBKDF2 key derivation:</p> <pre><code>openssl enc -aes128 -pbkdf2 -in file.txt -out file.aes128\n</code></pre> <p>Decrypt a file using a supplied password:</p> <pre><code>openssl enc -aes128 -pbkdf2 -d -in file.aes128 -out file.txt \\\n   -pass pass:&lt;password&gt;\n</code></pre> <p>Encrypt a file then base64 encode it (so it can be sent via mail for example) using AES-256 in CTR mode and PBKDF2 key derivation:</p> <pre><code>openssl enc -aes-256-ctr -pbkdf2 -a -in file.txt -out file.aes256\n</code></pre> <p>Base64 decode a file then decrypt it using a password supplied in a file:</p> <pre><code>openssl enc -aes-256-ctr -pbkdf2 -d -a -in file.aes256 -out file.txt \\\n   -pass file:&lt;passfile&gt;\n</code></pre>"},{"location":"man1/enc/#bugs","title":"BUGS","text":"<p>The -A option when used with large files doesn't work properly.</p> <p>The enc program only supports a fixed number of algorithms with certain parameters. So if, for example, you want to use RC2 with a 76 bit key or RC4 with an 84 bit key you can't use this program.</p>"},{"location":"man1/enc/#history","title":"HISTORY","text":"<p>The default digest was changed from MD5 to SHA256 in OpenSSL 1.1.0.</p> <p>The -list option was added in OpenSSL 1.1.1e.</p>"},{"location":"man1/enc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/engine/","title":"engine","text":""},{"location":"man1/engine/#name","title":"NAME","text":"<p>openssl-engine, engine - load and query engines</p>"},{"location":"man1/engine/#synopsis","title":"SYNOPSIS","text":"<p>openssl engine [ engine... ] [-v] [-vv] [-vvv] [-vvv] [-vvv] [-c] [-t] [-tt] [-pre command] [-post command] [ engine... ]</p>"},{"location":"man1/engine/#description","title":"DESCRIPTION","text":"<p>The engine command is used to query the status and capabilities of the specified engine's. Engines may be specified before and after all other command-line flags. Only those specified are queried.</p>"},{"location":"man1/engine/#options","title":"OPTIONS","text":"<ul> <li> <p>-v -vv -vvv -vvvv</p> <p>Provides information about each specified engine. The first flag lists all the possible run-time control commands; the second adds a description of each command; the third adds the input flags, and the final option adds the internal input flags.</p> </li> <li> <p>-c</p> <p>Lists the capabilities of each engine.</p> </li> <li> <p>-t</p> <p>Tests if each specified engine is available, and displays the answer.</p> </li> <li> <p>-tt</p> <p>Displays an error trace for any unavailable engine.</p> </li> <li> <p>-pre command</p> </li> <li> <p>-post command</p> <p>Command-line configuration of engines. The -pre command is given to the engine before it is loaded and the -post command is given after the engine is loaded. The command is of the form cmd:val where cmd is the command, and val is the value for the command. See the example below.</p> </li> </ul>"},{"location":"man1/engine/#examples","title":"EXAMPLES","text":"<p>To list all the commands available to a dynamic engine:</p> <pre><code>$ openssl engine -t -tt -vvvv dynamic\n(dynamic) Dynamic engine loading support\n     [ unavailable ]\n     SO_PATH: Specifies the path to the new ENGINE shared library\n          (input flags): STRING\n     NO_VCHECK: Specifies to continue even if version checking fails (boolean)\n          (input flags): NUMERIC\n     ID: Specifies an ENGINE id name for loading\n          (input flags): STRING\n     LIST_ADD: Whether to add a loaded ENGINE to the internal list (0=no,1=yes,2=mandatory)\n          (input flags): NUMERIC\n     DIR_LOAD: Specifies whether to load from 'DIR_ADD' directories (0=no,1=yes,2=mandatory)\n          (input flags): NUMERIC\n     DIR_ADD: Adds a directory from which ENGINEs can be loaded\n          (input flags): STRING\n     LOAD: Load up the ENGINE specified by other settings\n          (input flags): NO_INPUT\n</code></pre> <p>To list the capabilities of the rsax engine:</p> <pre><code>$ openssl engine -c\n(rsax) RSAX engine support\n [RSA]\n(dynamic) Dynamic engine loading support\n</code></pre>"},{"location":"man1/engine/#environment","title":"ENVIRONMENT","text":"<ul> <li> <p>OPENSSL_ENGINES</p> <p>The path to the engines directory.</p> </li> </ul>"},{"location":"man1/engine/#see-also","title":"SEE ALSO","text":"<p>config(5)</p>"},{"location":"man1/engine/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/errstr/","title":"errstr","text":""},{"location":"man1/errstr/#name","title":"NAME","text":"<p>openssl-errstr, errstr - lookup error codes</p>"},{"location":"man1/errstr/#synopsis","title":"SYNOPSIS","text":"<p>openssl errstr error_code</p>"},{"location":"man1/errstr/#description","title":"DESCRIPTION","text":"<p>Sometimes an application will not load error message and only numerical forms will be available. The errstr utility can be used to display the meaning of the hex code. The hex code is the hex digits after the second colon.</p>"},{"location":"man1/errstr/#options","title":"OPTIONS","text":"<p>None.</p>"},{"location":"man1/errstr/#examples","title":"EXAMPLES","text":"<p>The error code:</p> <pre><code>27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:\n</code></pre> <p>can be displayed with:</p> <pre><code>openssl errstr 2006D080\n</code></pre> <p>to produce the error message:</p> <pre><code>error:2006D080:BIO routines:BIO_new_file:no such file\n</code></pre>"},{"location":"man1/errstr/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/gendsa/","title":"gendsa","text":""},{"location":"man1/gendsa/#name","title":"NAME","text":"<p>openssl-gendsa, gendsa - generate a DSA private key from a set of parameters</p>"},{"location":"man1/gendsa/#synopsis","title":"SYNOPSIS","text":"<p>openssl gendsa [-help] [-out filename] [-aes128] [-aes192] [-aes256] [-aria128] [-aria192] [-aria256] [-camellia128] [-camellia192] [-camellia256] [-des] [-des3] [-idea] [-rand file...] [-writerand file] [-engine id] [paramfile]</p>"},{"location":"man1/gendsa/#description","title":"DESCRIPTION","text":"<p>The gendsa command generates a DSA private key from a DSA parameter file (which will be typically generated by the openssl dsaparam command).</p>"},{"location":"man1/gendsa/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-out filename</p> <p>Output the key to the specified file. If this argument is not specified then standard output is used.</p> </li> <li> <p>-aes128, -aes192, -aes256, -aria128, -aria192, -aria256, -camellia128, -camellia192, -camellia256, -des, -des3, -idea</p> <p>These options encrypt the private key with specified cipher before outputting it. A pass phrase is prompted for. If none of these options is specified no encryption is used.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause gendsa to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>paramfile</p> <p>This option specifies the DSA parameter file to use. The parameters in this file determine the size of the private key. DSA parameters can be generated and examined using the openssl dsaparam command.</p> </li> </ul>"},{"location":"man1/gendsa/#notes","title":"NOTES","text":"<p>DSA key generation is little more than random number generation so it is much quicker that RSA key generation for example.</p>"},{"location":"man1/gendsa/#see-also","title":"SEE ALSO","text":"<p>dsaparam(1), dsa(1), genrsa(1), rsa(1)</p>"},{"location":"man1/gendsa/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/genpkey/","title":"genpkey","text":""},{"location":"man1/genpkey/#name","title":"NAME","text":"<p>openssl-genpkey, genpkey - generate a private key</p>"},{"location":"man1/genpkey/#synopsis","title":"SYNOPSIS","text":"<p>openssl genpkey [-help] [-out filename] [-outform PEM|DER] [-pass arg] [-cipher] [-engine id] [-paramfile file] [-algorithm alg] [-pkeyopt opt:value] [-genparam] [-text]</p>"},{"location":"man1/genpkey/#description","title":"DESCRIPTION","text":"<p>The genpkey command generates a private key.</p>"},{"location":"man1/genpkey/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-out filename</p> <p>Output the key to the specified file. If this argument is not specified then standard output is used.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format DER or PEM. The default format is PEM.</p> </li> <li> <p>-pass arg</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-cipher</p> <p>This option encrypts the private key with the supplied cipher. Any algorithm name accepted by EVP_get_cipherbyname() is acceptable such as des3.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause genpkey to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms. If used this option should precede all other options.</p> </li> <li> <p>-algorithm alg</p> <p>Public key algorithm to use such as RSA, DSA or DH. If used this option must precede any -pkeyopt options. The options -paramfile and -algorithm are mutually exclusive. Engines may add algorithms in addition to the standard built-in ones.</p> <p>Valid built-in algorithm names for private key generation are RSA, RSA-PSS, EC, X25519, X448, ED25519 and ED448.</p> <p>Valid built-in algorithm names for parameter generation (see the -genparam option) are DH, DSA and EC.</p> <p>Note that the algorithm name X9.42 DH may be used as a synonym for the DH algorithm. These are identical and do not indicate the type of parameters that will be generated. Use the dh_paramgen_type option to indicate whether PKCS#3 or X9.42 DH parameters are required. See \"DH Parameter Generation Options\" below for more details.</p> </li> <li> <p>-pkeyopt opt:value</p> <p>Set the public key algorithm option opt to value. The precise set of options supported depends on the public key algorithm used and its implementation. See \"KEY GENERATION OPTIONS\" and \"PARAMETER GENERATION OPTIONS\" below for more details.</p> </li> <li> <p>-genparam</p> <p>Generate a set of parameters instead of a private key. If used this option must precede any -algorithm, -paramfile or -pkeyopt options.</p> </li> <li> <p>-paramfile filename</p> <p>Some public key algorithms generate a private key based on a set of parameters. They can be supplied using this option. If this option is used the public key algorithm used is determined by the parameters. If used this option must precede any -pkeyopt options. The options -paramfile and -algorithm are mutually exclusive.</p> </li> <li> <p>-text</p> <p>Print an (unencrypted) text representation of private and public keys and parameters along with the PEM or DER structure.</p> </li> </ul>"},{"location":"man1/genpkey/#key-generation-options","title":"KEY GENERATION OPTIONS","text":"<p>The options supported by each algorithm and indeed each implementation of an algorithm can vary. The options for the OpenSSL implementations are detailed below. There are no key generation options defined for the X25519, X448, ED25519 or ED448 algorithms.</p>"},{"location":"man1/genpkey/#rsa-key-generation-options","title":"RSA Key Generation Options","text":"<ul> <li> <p>rsa_keygen_bits:numbits</p> <p>The number of bits in the generated key. If not specified 2048 is used.</p> </li> <li> <p>rsa_keygen_primes:numprimes</p> <p>The number of primes in the generated key. If not specified 2 is used.</p> </li> <li> <p>rsa_keygen_pubexp:value</p> <p>The RSA public exponent value. This can be a large decimal or hexadecimal value if preceded by 0x. Default value is 65537.</p> </li> </ul>"},{"location":"man1/genpkey/#rsa-pss-key-generation-options","title":"RSA-PSS Key Generation Options","text":"<p>Note: by default an RSA-PSS key has no parameter restrictions.</p> <ul> <li> <p>rsa_keygen_bits:numbits, rsa_keygen_primes:numprimes,  rsa_keygen_pubexp:value</p> <p>These options have the same meaning as the RSA algorithm.</p> </li> <li> <p>rsa_pss_keygen_md:digest</p> <p>If set the key is restricted and can only use digest for signing.</p> </li> <li> <p>rsa_pss_keygen_mgf1_md:digest</p> <p>If set the key is restricted and can only use digest as it's MGF1 parameter.</p> </li> <li> <p>rsa_pss_keygen_saltlen:len</p> <p>If set the key is restricted and len specifies the minimum salt length.</p> </li> </ul>"},{"location":"man1/genpkey/#ec-key-generation-options","title":"EC Key Generation Options","text":"<p>The EC key generation options can also be used for parameter generation.</p> <ul> <li> <p>ec_paramgen_curve:curve</p> <p>The EC curve to use. OpenSSL supports NIST curve names such as \"P-256\".</p> </li> <li> <p>ec_param_enc:encoding</p> <p>The encoding to use for parameters. The \"encoding\" parameter must be either \"named_curve\" or \"explicit\". The default value is \"named_curve\".</p> </li> </ul>"},{"location":"man1/genpkey/#parameter-generation-options","title":"PARAMETER GENERATION OPTIONS","text":"<p>The options supported by each algorithm and indeed each implementation of an algorithm can vary. The options for the OpenSSL implementations are detailed below.</p>"},{"location":"man1/genpkey/#dsa-parameter-generation-options","title":"DSA Parameter Generation Options","text":"<ul> <li> <p>dsa_paramgen_bits:numbits</p> <p>The number of bits in the generated prime. If not specified 2048 is used.</p> </li> <li> <p>dsa_paramgen_q_bits:numbits</p> <p>The number of bits in the q parameter. Must be one of 160, 224 or 256. If not specified 224 is used.</p> </li> <li> <p>dsa_paramgen_md:digest</p> <p>The digest to use during parameter generation. Must be one of sha1, sha224 or sha256. If set, then the number of bits in q will match the output size of the specified digest and the dsa_paramgen_q_bits parameter will be ignored. If not set, then a digest will be used that gives an output matching the number of bits in q, i.e. sha1 if q length is 160, sha224 if it 224 or sha256 if it is 256.</p> </li> </ul>"},{"location":"man1/genpkey/#dh-parameter-generation-options","title":"DH Parameter Generation Options","text":"<ul> <li> <p>dh_paramgen_prime_len:numbits</p> <p>The number of bits in the prime parameter p. The default is 2048.</p> </li> <li> <p>dh_paramgen_subprime_len:numbits</p> <p>The number of bits in the sub prime parameter q. The default is 256 if the prime is at least 2048 bits long or 160 otherwise. Only relevant if used in conjunction with the dh_paramgen_type option to generate X9.42 DH parameters.</p> </li> <li> <p>dh_paramgen_generator:value</p> <p>The value to use for the generator g. The default is 2.</p> </li> <li> <p>dh_paramgen_type:value</p> <p>The type of DH parameters to generate. Use 0 for PKCS#3 DH and 1 for X9.42 DH. The default is 0.</p> </li> <li> <p>dh_rfc5114:num</p> <p>If this option is set, then the appropriate RFC5114 parameters are used instead of generating new parameters. The value num can take the values 1, 2 or 3 corresponding to RFC5114 DH parameters consisting of 1024 bit group with 160 bit subgroup, 2048 bit group with 224 bit subgroup and 2048 bit group with 256 bit subgroup as mentioned in RFC5114 sections 2.1, 2.2 and 2.3 respectively. If present this overrides all other DH parameter options.</p> </li> </ul>"},{"location":"man1/genpkey/#ec-parameter-generation-options","title":"EC Parameter Generation Options","text":"<p>The EC parameter generation options are the same as for key generation. See \"EC Key Generation Options\" above.</p>"},{"location":"man1/genpkey/#notes","title":"NOTES","text":"<p>The use of the genpkey program is encouraged over the algorithm specific utilities because additional algorithm options and ENGINE provided algorithms can be used.</p>"},{"location":"man1/genpkey/#examples","title":"EXAMPLES","text":"<p>Generate an RSA private key using default parameters:</p> <pre><code>openssl genpkey -algorithm RSA -out key.pem\n</code></pre> <p>Encrypt output private key using 128 bit AES and the passphrase \"hello\":</p> <pre><code>openssl genpkey -algorithm RSA -out key.pem -aes-128-cbc -pass pass:hello\n</code></pre> <p>Generate a 2048 bit RSA key using 3 as the public exponent:</p> <pre><code>openssl genpkey -algorithm RSA -out key.pem \\\n    -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:3\n</code></pre> <p>Generate 2048 bit DSA parameters:</p> <pre><code>openssl genpkey -genparam -algorithm DSA -out dsap.pem \\\n    -pkeyopt dsa_paramgen_bits:2048\n</code></pre> <p>Generate DSA key from parameters:</p> <pre><code>openssl genpkey -paramfile dsap.pem -out dsakey.pem\n</code></pre> <p>Generate 2048 bit DH parameters:</p> <pre><code>openssl genpkey -genparam -algorithm DH -out dhp.pem \\\n    -pkeyopt dh_paramgen_prime_len:2048\n</code></pre> <p>Generate 2048 bit X9.42 DH parameters:</p> <pre><code>openssl genpkey -genparam -algorithm DH -out dhpx.pem \\\n    -pkeyopt dh_paramgen_prime_len:2048 \\\n    -pkeyopt dh_paramgen_type:1\n</code></pre> <p>Output RFC5114 2048 bit DH parameters with 224 bit subgroup:</p> <pre><code>openssl genpkey -genparam -algorithm DH -out dhp.pem -pkeyopt dh_rfc5114:2\n</code></pre> <p>Generate DH key from parameters:</p> <pre><code>openssl genpkey -paramfile dhp.pem -out dhkey.pem\n</code></pre> <p>Generate EC parameters:</p> <pre><code>openssl genpkey -genparam -algorithm EC -out ecp.pem \\\n       -pkeyopt ec_paramgen_curve:secp384r1 \\\n       -pkeyopt ec_param_enc:named_curve\n</code></pre> <p>Generate EC key from parameters:</p> <pre><code>openssl genpkey -paramfile ecp.pem -out eckey.pem\n</code></pre> <p>Generate EC key directly:</p> <pre><code>openssl genpkey -algorithm EC -out eckey.pem \\\n       -pkeyopt ec_paramgen_curve:P-384 \\\n       -pkeyopt ec_param_enc:named_curve\n</code></pre> <p>Generate an X25519 private key:</p> <pre><code>openssl genpkey -algorithm X25519 -out xkey.pem\n</code></pre> <p>Generate an ED448 private key:</p> <pre><code>openssl genpkey -algorithm ED448 -out xkey.pem\n</code></pre>"},{"location":"man1/genpkey/#history","title":"HISTORY","text":"<p>The ability to use NIST curve names, and to generate an EC key directly, were added in OpenSSL 1.0.2. The ability to generate X25519 keys was added in OpenSSL 1.1.0. The ability to generate X448, ED25519 and ED448 keys was added in OpenSSL 1.1.1.</p>"},{"location":"man1/genpkey/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/genrsa/","title":"genrsa","text":""},{"location":"man1/genrsa/#name","title":"NAME","text":"<p>openssl-genrsa, genrsa - generate an RSA private key</p>"},{"location":"man1/genrsa/#synopsis","title":"SYNOPSIS","text":"<p>openssl genrsa [-help] [-out filename] [-passout arg] [-aes128] [-aes192] [-aes256] [-aria128] [-aria192] [-aria256] [-camellia128] [-camellia192] [-camellia256] [-des] [-des3] [-idea] [-f4] [-3] [-rand file...] [-writerand file] [-engine id] [-primes num] [numbits]</p>"},{"location":"man1/genrsa/#description","title":"DESCRIPTION","text":"<p>The genrsa command generates an RSA private key.</p>"},{"location":"man1/genrsa/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-out filename</p> <p>Output the key to the specified file. If this argument is not specified then standard output is used.</p> </li> <li> <p>-passout arg</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-aes128, -aes192, -aes256, -aria128, -aria192, -aria256, -camellia128, -camellia192, -camellia256, -des, -des3, -idea</p> <p>These options encrypt the private key with specified cipher before outputting it. If none of these options is specified no encryption is used. If encryption is used a pass phrase is prompted for if it is not supplied via the -passout argument.</p> </li> <li> <p>-F4|-3</p> <p>The public exponent to use, either 65537 or 3. The default is 65537.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause genrsa to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-primes num</p> <p>Specify the number of primes to use while generating the RSA key. The num parameter must be a positive integer that is greater than 1 and less than 16. If num is greater than 2, then the generated key is called a 'multi-prime' RSA key, which is defined in RFC 8017.</p> </li> <li> <p>numbits</p> <p>The size of the private key to generate in bits. This must be the last option specified. The default is 2048 and values less than 512 are not allowed.</p> </li> </ul>"},{"location":"man1/genrsa/#notes","title":"NOTES","text":"<p>RSA private key generation essentially involves the generation of two or more prime numbers. When generating a private key various symbols will be output to indicate the progress of the generation. A . represents each number which has passed an initial sieve test, + means a number has passed a single round of the Miller-Rabin primality test, * means the current prime starts a regenerating progress due to some failed tests. A newline means that the number has passed all the prime tests (the actual number depends on the key size).</p> <p>Because key generation is a random process the time taken to generate a key may vary somewhat. But in general, more primes lead to less generation time of a key.</p>"},{"location":"man1/genrsa/#see-also","title":"SEE ALSO","text":"<p>gendsa(1)</p>"},{"location":"man1/genrsa/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/list/","title":"list","text":""},{"location":"man1/list/#name","title":"NAME","text":"<p>openssl-list, list - list algorithms and features</p>"},{"location":"man1/list/#synopsis","title":"SYNOPSIS","text":"<p>openssl list [-help] [-1] [-commands] [-digest-commands] [-digest-algorithms] [-cipher-commands] [-cipher-algorithms] [-public-key-algorithms] [-public-key-methods] [-disabled]</p>"},{"location":"man1/list/#description","title":"DESCRIPTION","text":"<p>This command is used to generate list of algorithms or disabled features.</p>"},{"location":"man1/list/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Display a usage message.</p> </li> <li> <p>-1</p> <p>List the commands, digest-commands, or cipher-commands in a single column. If used, this option must be given first.</p> </li> <li> <p>-commands</p> <p>Display a list of standard commands.</p> </li> <li> <p>-digest-commands</p> <p>Display a list of message digest commands, which are typically used as input to the dgst(1) or speed(1) commands.</p> </li> <li> <p>-digest-algorithms</p> <p>Display a list of message digest algorithms. If a line is of the form   foo =&gt; bar then foo is an alias for the official algorithm name, bar.</p> </li> <li> <p>-cipher-commands</p> <p>Display a list of cipher commands, which are typically used as input to the dgst(1) or speed(1) commands.</p> </li> <li> <p>-cipher-algorithms</p> <p>Display a list of cipher algorithms. If a line is of the form   foo =&gt; bar then foo is an alias for the official algorithm name, bar.</p> </li> <li> <p>-public-key-algorithms</p> <p>Display a list of public key algorithms, with each algorithm as a block of multiple lines, all but the first are indented.</p> </li> <li> <p>-public-key-methods</p> <p>Display a list of public key method OIDs: this also includes public key methods without an associated ASN.1 method, for example, KDF algorithms.</p> </li> <li> <p>-disabled</p> <p>Display a list of disabled features, those that were compiled out of the installation.</p> </li> </ul>"},{"location":"man1/list/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/nseq/","title":"nseq","text":""},{"location":"man1/nseq/#name","title":"NAME","text":"<p>openssl-nseq, nseq - create or examine a Netscape certificate sequence</p>"},{"location":"man1/nseq/#synopsis","title":"SYNOPSIS","text":"<p>openssl nseq [-help] [-in filename] [-out filename] [-toseq]</p>"},{"location":"man1/nseq/#description","title":"DESCRIPTION","text":"<p>The nseq command takes a file containing a Netscape certificate sequence and prints out the certificates contained in it or takes a file of certificates and converts it into a Netscape certificate sequence.</p>"},{"location":"man1/nseq/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename or standard output by default.</p> </li> <li> <p>-toseq</p> <p>Normally a Netscape certificate sequence will be input and the output is the certificates contained in it. With the -toseq option the situation is reversed: a Netscape certificate sequence is created from a file of certificates.</p> </li> </ul>"},{"location":"man1/nseq/#examples","title":"EXAMPLES","text":"<p>Output the certificates in a Netscape certificate sequence</p> <pre><code>openssl nseq -in nseq.pem -out certs.pem\n</code></pre> <p>Create a Netscape certificate sequence</p> <pre><code>openssl nseq -in certs.pem -toseq -out nseq.pem\n</code></pre>"},{"location":"man1/nseq/#notes","title":"NOTES","text":"<p>The PEM encoded form uses the same headers and footers as a certificate:</p> <pre><code>-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n</code></pre> <p>A Netscape certificate sequence is a Netscape specific format that can be sent to browsers as an alternative to the standard PKCS#7 format when several certificates are sent to the browser: for example during certificate enrollment. It is used by Netscape certificate server for example.</p>"},{"location":"man1/nseq/#bugs","title":"BUGS","text":"<p>This program needs a few more options: like allowing DER or PEM input and output files and allowing multiple certificate files to be used.</p>"},{"location":"man1/nseq/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/ocsp/","title":"ocsp","text":""},{"location":"man1/ocsp/#name","title":"NAME","text":"<p>openssl-ocsp, ocsp - Online Certificate Status Protocol utility</p>"},{"location":"man1/ocsp/#synopsis","title":"SYNOPSIS","text":"<p>openssl ocsp [-help] [-out file] [-issuer file] [-cert file] [-serial n] [-signer file] [-signkey file] [-sign_other file] [-no_certs] [-req_text] [-resp_text] [-text] [-reqout file] [-respout file] [-reqin file] [-respin file] [-nonce] [-no_nonce] [-url URL] [-host host:port] [-multi process-count] [-header] [-path] [-CApath dir] [-CAfile file] [-no-CAfile] [-no-CApath] [-attime timestamp] [-check_ss_sig] [-crl_check] [-crl_check_all] [-explicit_policy] [-extended_crl] [-ignore_critical] [-inhibit_any] [-inhibit_map] [-no_check_time] [-partial_chain] [-policy arg] [-policy_check] [-policy_print] [-purpose purpose] [-suiteB_128] [-suiteB_128_only] [-suiteB_192] [-trusted_first] [-no_alt_chains] [-use_deltas] [-auth_level num] [-verify_depth num] [-verify_email email] [-verify_hostname hostname] [-verify_ip ip] [-verify_name name] [-x509_strict] [-VAfile file] [-validity_period n] [-status_age n] [-noverify] [-verify_other file] [-trust_other] [-no_intern] [-no_signature_verify] [-no_cert_verify] [-no_chain] [-no_cert_checks] [-no_explicit] [-port num] [-ignore_err] [-index file] [-CA file] [-rsigner file] [-rkey file] [-rother file] [-rsigopt nm:v] [-resp_no_certs] [-nmin n] [-ndays n] [-resp_key_id] [-nrequest n] [-digest]</p>"},{"location":"man1/ocsp/#description","title":"DESCRIPTION","text":"<p>The Online Certificate Status Protocol (OCSP) enables applications to determine the (revocation) state of an identified certificate (RFC 2560).</p> <p>The ocsp command performs many common OCSP tasks. It can be used to print out requests and responses, create requests and send queries to an OCSP responder and behave like a mini OCSP server itself.</p>"},{"location":"man1/ocsp/#options","title":"OPTIONS","text":"<p>This command operates as either a client or a server. The options are described below, divided into those two modes.</p>"},{"location":"man1/ocsp/#ocsp-client-options","title":"OCSP Client Options","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-out filename</p> <p>specify output filename, default is standard output.</p> </li> <li> <p>-issuer filename</p> <p>This specifies the current issuer certificate. This option can be used multiple times. The certificate specified in filename must be in PEM format. This option MUST come before any -cert options.</p> </li> <li> <p>-cert filename</p> <p>Add the certificate filename to the request. The issuer certificate is taken from the previous issuer option, or an error occurs if no issuer certificate is specified.</p> </li> <li> <p>-serial num</p> <p>Same as the cert option except the certificate with serial number num is added to the request. The serial number is interpreted as a decimal integer unless preceded by 0x. Negative integers can also be specified by preceding the value by a - sign.</p> </li> <li> <p>-signer filename, -signkey filename</p> <p>Sign the OCSP request using the certificate specified in the signer option and the private key specified by the signkey option. If the signkey option is not present then the private key is read from the same file as the certificate. If neither option is specified then the OCSP request is not signed.</p> </li> <li> <p>-sign_other filename</p> <p>Additional certificates to include in the signed request.</p> </li> <li> <p>-nonce, -no_nonce</p> <p>Add an OCSP nonce extension to a request or disable OCSP nonce addition. Normally if an OCSP request is input using the reqin option no nonce is added: using the nonce option will force addition of a nonce. If an OCSP request is being created (using cert and serial options) a nonce is automatically added specifying no_nonce overrides this.</p> </li> <li> <p>-req_text, -resp_text, -text</p> <p>Print out the text form of the OCSP request, response or both respectively.</p> </li> <li> <p>-reqout file, -respout file</p> <p>Write out the DER encoded certificate request or response to file.</p> </li> <li> <p>-reqin file, -respin file</p> <p>Read OCSP request or response file from file. These option are ignored if OCSP request or response creation is implied by other options (for example with serial, cert and host options).</p> </li> <li> <p>-url responder_url</p> <p>Specify the responder URL. Both HTTP and HTTPS (SSL/TLS) URLs can be specified.</p> </li> <li> <p>-host hostname:port, -path pathname</p> <p>If the host option is present then the OCSP request is sent to the host hostname on port port. path specifies the HTTP pathname to use or \"/\" by default.  This is equivalent to specifying -url with scheme http:// and the given hostname, port, and pathname.</p> </li> <li> <p>-header name=value</p> <p>Adds the header name with the specified value to the OCSP request that is sent to the responder. This may be repeated.</p> </li> <li> <p>-timeout seconds</p> <p>Connection timeout to the OCSP responder in seconds. On POSIX systems, when running as an OCSP responder, this option also limits the time that the responder is willing to wait for the client request. This time is measured from the time the responder accepts the connection until the complete request is received.</p> </li> <li> <p>-multi process-count</p> <p>Run the specified number of OCSP responder child processes, with the parent process respawning child processes as needed. Child processes will detect changes in the CA index file and automatically reload it. When running as a responder -timeout option is recommended to limit the time each child is willing to wait for the client's OCSP response. This option is available on POSIX systems (that support the fork() and other required unix system-calls).</p> </li> <li> <p>-CAfile file, -CApath pathname</p> <p>File or pathname containing trusted CA certificates. These are used to verify the signature on the OCSP response.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location</p> </li> <li> <p>-attime, -check_ss_sig, -crl_check, -crl_check_all, -explicit_policy, -extended_crl, -ignore_critical, -inhibit_any, -inhibit_map, -no_alt_chains, -no_check_time, -partial_chain, -policy, -policy_check, -policy_print, -purpose, -suiteB_128, -suiteB_128_only, -suiteB_192, -trusted_first, -use_deltas, -auth_level, -verify_depth, -verify_email, -verify_hostname, -verify_ip, -verify_name, -x509_strict</p> <p>Set different certificate verification options. See verify(1) manual page for details.</p> </li> <li> <p>-verify_other file</p> <p>File containing additional certificates to search when attempting to locate the OCSP response signing certificate. Some responders omit the actual signer's certificate from the response: this option can be used to supply the necessary certificate in such cases.</p> </li> <li> <p>-trust_other</p> <p>The certificates specified by the -verify_other option should be explicitly trusted and no additional checks will be performed on them. This is useful when the complete responder certificate chain is not available or trusting a root CA is not appropriate.</p> </li> <li> <p>-VAfile file</p> <p>File containing explicitly trusted responder certificates. Equivalent to the -verify_other and -trust_other options.</p> </li> <li> <p>-noverify</p> <p>Don't attempt to verify the OCSP response signature or the nonce values. This option will normally only be used for debugging since it disables all verification of the responders certificate.</p> </li> <li> <p>-no_intern</p> <p>Ignore certificates contained in the OCSP response when searching for the signers certificate. With this option the signers certificate must be specified with either the -verify_other or -VAfile options.</p> </li> <li> <p>-no_signature_verify</p> <p>Don't check the signature on the OCSP response. Since this option tolerates invalid signatures on OCSP responses it will normally only be used for testing purposes.</p> </li> <li> <p>-no_cert_verify</p> <p>Don't verify the OCSP response signers certificate at all. Since this option allows the OCSP response to be signed by any certificate it should only be used for testing purposes.</p> </li> <li> <p>-no_chain</p> <p>Do not use certificates in the response as additional untrusted CA certificates.</p> </li> <li> <p>-no_explicit</p> <p>Do not explicitly trust the root CA if it is set to be trusted for OCSP signing.</p> </li> <li> <p>-no_cert_checks</p> <p>Don't perform any additional checks on the OCSP response signers certificate. That is do not make any checks to see if the signers certificate is authorised to provide the necessary status information: as a result this option should only be used for testing purposes.</p> </li> <li> <p>-validity_period nsec, -status_age age</p> <p>These options specify the range of times, in seconds, which will be tolerated in an OCSP response. Each certificate status response includes a notBefore time and an optional notAfter time. The current time should fall between these two values, but the interval between the two times may be only a few seconds. In practice the OCSP responder and clients clocks may not be precisely synchronised and so such a check may fail. To avoid this the -validity_period option can be used to specify an acceptable error range in seconds, the default value is 5 minutes.</p> <p>If the notAfter time is omitted from a response then this means that new status information is immediately available. In this case the age of the notBefore field is checked to see it is not older than age seconds old. By default this additional check is not performed.</p> </li> <li> <p>-digest</p> <p>This option sets digest algorithm to use for certificate identification in the OCSP request. Any digest supported by the OpenSSL dgst command can be used. The default is SHA-1. This option may be used multiple times to specify the digest used by subsequent certificate identifiers.</p> </li> </ul>"},{"location":"man1/ocsp/#ocsp-server-options","title":"OCSP Server Options","text":"<ul> <li> <p>-index indexfile</p> <p>The indexfile parameter is the name of a text index file in ca format containing certificate revocation information.</p> <p>If the index option is specified the ocsp utility is in responder mode, otherwise it is in client mode. The request(s) the responder processes can be either specified on the command line (using issuer and serial options), supplied in a file (using the reqin option) or via external OCSP clients (if port or url is specified).</p> <p>If the index option is present then the CA and rsigner options must also be present.</p> </li> <li> <p>-CA file</p> <p>CA certificate corresponding to the revocation information in indexfile.</p> </li> <li> <p>-rsigner file</p> <p>The certificate to sign OCSP responses with.</p> </li> <li> <p>-rother file</p> <p>Additional certificates to include in the OCSP response.</p> </li> <li> <p>-resp_no_certs</p> <p>Don't include any certificates in the OCSP response.</p> </li> <li> <p>-resp_key_id</p> <p>Identify the signer certificate using the key ID, default is to use the subject name.</p> </li> <li> <p>-rkey file</p> <p>The private key to sign OCSP responses with: if not present the file specified in the rsigner option is used.</p> </li> <li> <p>-rsigopt nm:v</p> <p>Pass options to the signature algorithm when signing OCSP responses. Names and values of these options are algorithm-specific.</p> </li> <li> <p>-port portnum</p> <p>Port to listen for OCSP requests on. The port may also be specified using the url option.</p> </li> <li> <p>-ignore_err</p> <p>Ignore malformed requests or responses: When acting as an OCSP client, retry if a malformed response is received. When acting as an OCSP responder, continue running instead of terminating upon receiving a malformed request.</p> </li> <li> <p>-nrequest number</p> <p>The OCSP server will exit after receiving number requests, default unlimited.</p> </li> <li> <p>-nmin minutes, -ndays days</p> <p>Number of minutes or days when fresh revocation information is available: used in the nextUpdate field. If neither option is present then the nextUpdate field is omitted meaning fresh revocation information is immediately available.</p> </li> </ul>"},{"location":"man1/ocsp/#ocsp-response-verification","title":"OCSP Response verification.","text":"<p>OCSP Response follows the rules specified in RFC2560.</p> <p>Initially the OCSP responder certificate is located and the signature on the OCSP request checked using the responder certificate's public key.</p> <p>Then a normal certificate verify is performed on the OCSP responder certificate building up a certificate chain in the process. The locations of the trusted certificates used to build the chain can be specified by the CAfile and CApath options or they will be looked for in the standard OpenSSL certificates directory.</p> <p>If the initial verify fails then the OCSP verify process halts with an error.</p> <p>Otherwise the issuing CA certificate in the request is compared to the OCSP responder certificate: if there is a match then the OCSP verify succeeds.</p> <p>Otherwise the OCSP responder certificate's CA is checked against the issuing CA certificate in the request. If there is a match and the OCSPSigning extended key usage is present in the OCSP responder certificate then the OCSP verify succeeds.</p> <p>Otherwise, if -no_explicit is not set the root CA of the OCSP responders CA is checked to see if it is trusted for OCSP signing. If it is the OCSP verify succeeds.</p> <p>If none of these checks is successful then the OCSP verify fails.</p> <p>What this effectively means if that if the OCSP responder certificate is authorised directly by the CA it is issuing revocation information about (and it is correctly configured) then verification will succeed.</p> <p>If the OCSP responder is a \"global responder\" which can give details about multiple CAs and has its own separate certificate chain then its root CA can be trusted for OCSP signing. For example:</p> <pre><code>openssl x509 -in ocspCA.pem -addtrust OCSPSigning -out trustedCA.pem\n</code></pre> <p>Alternatively the responder certificate itself can be explicitly trusted with the -VAfile option.</p>"},{"location":"man1/ocsp/#notes","title":"NOTES","text":"<p>As noted, most of the verify options are for testing or debugging purposes. Normally only the -CApath, -CAfile and (if the responder is a 'global VA') -VAfile options need to be used.</p> <p>The OCSP server is only useful for test and demonstration purposes: it is not really usable as a full OCSP responder. It contains only a very simple HTTP request handling and can only handle the POST form of OCSP queries. It also handles requests serially meaning it cannot respond to new requests until it has processed the current one. The text index file format of revocation is also inefficient for large quantities of revocation data.</p> <p>It is possible to run the ocsp application in responder mode via a CGI script using the reqin and respout options.</p>"},{"location":"man1/ocsp/#examples","title":"EXAMPLES","text":"<p>Create an OCSP request and write it to a file:</p> <pre><code>openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem -reqout req.der\n</code></pre> <p>Send a query to an OCSP responder with URL http://ocsp.myhost.com/ save the response to a file, print it out in text form, and verify the response:</p> <pre><code>openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \\\n    -url http://ocsp.myhost.com/ -resp_text -respout resp.der\n</code></pre> <p>Read in an OCSP response and print out text form:</p> <pre><code>openssl ocsp -respin resp.der -text -noverify\n</code></pre> <p>OCSP server on port 8888 using a standard ca configuration, and a separate responder certificate. All requests and responses are printed to a file.</p> <pre><code>openssl ocsp -index demoCA/index.txt -port 8888 -rsigner rcert.pem -CA demoCA/cacert.pem\n       -text -out log.txt\n</code></pre> <p>As above but exit after processing one request:</p> <pre><code>openssl ocsp -index demoCA/index.txt -port 8888 -rsigner rcert.pem -CA demoCA/cacert.pem\n    -nrequest 1\n</code></pre> <p>Query status information using an internally generated request:</p> <pre><code>openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA demoCA/cacert.pem\n    -issuer demoCA/cacert.pem -serial 1\n</code></pre> <p>Query status information using request read from a file, and write the response to a second file.</p> <pre><code>openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA demoCA/cacert.pem\n    -reqin req.der -respout resp.der\n</code></pre>"},{"location":"man1/ocsp/#history","title":"HISTORY","text":"<p>The -no_alt_chains option was added in OpenSSL 1.1.0.</p>"},{"location":"man1/ocsp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/openssl/","title":"openssl","text":""},{"location":"man1/openssl/#name","title":"NAME","text":"<p>openssl - OpenSSL command line tool</p>"},{"location":"man1/openssl/#synopsis","title":"SYNOPSIS","text":"<p>openssl command [ command_opts ] [ command_args ]</p> <p>openssl list [ standard-commands | digest-commands | cipher-commands | cipher-algorithms | digest-algorithms | public-key-algorithms]</p> <p>openssl no-XXX [ arbitrary options ]</p>"},{"location":"man1/openssl/#description","title":"DESCRIPTION","text":"<p>OpenSSL is a cryptography toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) network protocols and related cryptography standards required by them.</p> <p>The openssl program is a command line tool for using the various cryptography functions of OpenSSL's crypto library from the shell. It can be used for</p> <pre><code>o  Creation and management of private keys, public keys and parameters\no  Public key cryptographic operations\no  Creation of X.509 certificates, CSRs and CRLs\no  Calculation of Message Digests\no  Encryption and Decryption with Ciphers\no  SSL/TLS Client and Server Tests\no  Handling of S/MIME signed or encrypted mail\no  Time Stamp requests, generation and verification\n</code></pre>"},{"location":"man1/openssl/#command-summary","title":"COMMAND SUMMARY","text":"<p>The openssl program provides a rich variety of commands (command in the SYNOPSIS above), each of which often has a wealth of options and arguments (command_opts and command_args in the SYNOPSIS).</p> <p>Detailed documentation and use cases for most standard subcommands are available (e.g., x509(1) or openssl-x509(1)).</p> <p>Many commands use an external configuration file for some or all of their arguments and have a -config option to specify that file. The environment variable OPENSSL_CONF can be used to specify the location of the file. If the environment variable is not specified, then the file is named openssl.cnf in the default certificate storage area, whose value depends on the configuration flags specified when the OpenSSL was built.</p> <p>The list parameters standard-commands, digest-commands, and cipher-commands output a list (one entry per line) of the names of all standard commands, message digest commands, or cipher commands, respectively, that are available in the present openssl utility.</p> <p>The list parameters cipher-algorithms and digest-algorithms list all cipher and message digest names, one entry per line. Aliases are listed as:</p> <pre><code>from =&gt; to\n</code></pre> <p>The list parameter public-key-algorithms lists all supported public key algorithms.</p> <p>The command no-XXX tests whether a command of the specified name is available.  If no command named XXX exists, it returns 0 (success) and prints no-XXX; otherwise it returns 1 and prints XXX.  In both cases, the output goes to stdout and nothing is printed to stderr.  Additional command line arguments are always ignored.  Since for each cipher there is a command of the same name, this provides an easy way for shell scripts to test for the availability of ciphers in the openssl program.  (no-XXX is not able to detect pseudo-commands such as quit, list, or no-XXX itself.)</p>"},{"location":"man1/openssl/#standard-commands","title":"Standard Commands","text":"<ul> <li> <p>asn1parse</p> <p>Parse an ASN.1 sequence.</p> </li> <li> <p>ca</p> <p>Certificate Authority (CA) Management.</p> </li> <li> <p>ciphers</p> <p>Cipher Suite Description Determination.</p> </li> <li> <p>cms</p> <p>CMS (Cryptographic Message Syntax) utility.</p> </li> <li> <p>crl</p> <p>Certificate Revocation List (CRL) Management.</p> </li> <li> <p>crl2pkcs7</p> <p>CRL to PKCS#7 Conversion.</p> </li> <li> <p>dgst</p> <p>Message Digest Calculation.</p> </li> <li> <p>dh</p> <p>Diffie-Hellman Parameter Management. Obsoleted by dhparam(1).</p> </li> <li> <p>dhparam</p> <p>Generation and Management of Diffie-Hellman Parameters. Superseded by genpkey(1) and pkeyparam(1).</p> </li> <li> <p>dsa</p> <p>DSA Data Management.</p> </li> <li> <p>dsaparam</p> <p>DSA Parameter Generation and Management. Superseded by genpkey(1) and pkeyparam(1).</p> </li> <li> <p>ec</p> <p>EC (Elliptic curve) key processing.</p> </li> <li> <p>ecparam</p> <p>EC parameter manipulation and generation.</p> </li> <li> <p>enc</p> <p>Encoding with Ciphers.</p> </li> <li> <p>engine</p> <p>Engine (loadable module) information and manipulation.</p> </li> <li> <p>errstr</p> <p>Error Number to Error String Conversion.</p> </li> <li> <p>gendh</p> <p>Generation of Diffie-Hellman Parameters. Obsoleted by dhparam(1).</p> </li> <li> <p>gendsa</p> <p>Generation of DSA Private Key from Parameters. Superseded by genpkey(1) and pkey(1).</p> </li> <li> <p>genpkey</p> <p>Generation of Private Key or Parameters.</p> </li> <li> <p>genrsa</p> <p>Generation of RSA Private Key. Superseded by genpkey(1).</p> </li> <li> <p>nseq</p> <p>Create or examine a Netscape certificate sequence.</p> </li> <li> <p>ocsp</p> <p>Online Certificate Status Protocol utility.</p> </li> <li> <p>passwd</p> <p>Generation of hashed passwords.</p> </li> <li> <p>pkcs12</p> <p>PKCS#12 Data Management.</p> </li> <li> <p>pkcs7</p> <p>PKCS#7 Data Management.</p> </li> <li> <p>pkcs8</p> <p>PKCS#8 format private key conversion tool.</p> </li> <li> <p>pkey</p> <p>Public and private key management.</p> </li> <li> <p>pkeyparam</p> <p>Public key algorithm parameter management.</p> </li> <li> <p>pkeyutl</p> <p>Public key algorithm cryptographic operation utility.</p> </li> <li> <p>prime</p> <p>Compute prime numbers.</p> </li> <li> <p>rand</p> <p>Generate pseudo-random bytes.</p> </li> <li> <p>rehash</p> <p>Create symbolic links to certificate and CRL files named by the hash values.</p> </li> <li> <p>req</p> <p>PKCS#10 X.509 Certificate Signing Request (CSR) Management.</p> </li> <li> <p>rsa</p> <p>RSA key management.</p> </li> <li> <p>rsautl</p> <p>RSA utility for signing, verification, encryption, and decryption. Superseded by  pkeyutl(1).</p> </li> <li> <p>s_client</p> <p>This implements a generic SSL/TLS client which can establish a transparent connection to a remote server speaking SSL/TLS. It's intended for testing purposes only and provides only rudimentary interface functionality but internally uses mostly all functionality of the OpenSSL ssl library.</p> </li> <li> <p>s_server</p> <p>This implements a generic SSL/TLS server which accepts connections from remote clients speaking SSL/TLS. It's intended for testing purposes only and provides only rudimentary interface functionality but internally uses mostly all functionality of the OpenSSL ssl library.  It provides both an own command line oriented protocol for testing SSL functions and a simple HTTP response facility to emulate an SSL/TLS-aware webserver.</p> </li> <li> <p>s_time</p> <p>SSL Connection Timer.</p> </li> <li> <p>sess_id</p> <p>SSL Session Data Management.</p> </li> <li> <p>smime</p> <p>S/MIME mail processing.</p> </li> <li> <p>speed</p> <p>Algorithm Speed Measurement.</p> </li> <li> <p>spkac</p> <p>SPKAC printing and generating utility.</p> </li> <li> <p>srp</p> <p>Maintain SRP password file.</p> </li> <li> <p>storeutl</p> <p>Utility to list and display certificates, keys, CRLs, etc.</p> </li> <li> <p>ts</p> <p>Time Stamping Authority tool (client/server).</p> </li> <li> <p>verify</p> <p>X.509 Certificate Verification.</p> </li> <li> <p>version</p> <p>OpenSSL Version Information.</p> </li> <li> <p>x509</p> <p>X.509 Certificate Data Management.</p> </li> </ul>"},{"location":"man1/openssl/#message-digest-commands","title":"Message Digest Commands","text":"<ul> <li> <p>blake2b512</p> <p>BLAKE2b-512 Digest</p> </li> <li> <p>blake2s256</p> <p>BLAKE2s-256 Digest</p> </li> <li> <p>md2</p> <p>MD2 Digest</p> </li> <li> <p>md4</p> <p>MD4 Digest</p> </li> <li> <p>md5</p> <p>MD5 Digest</p> </li> <li> <p>mdc2</p> <p>MDC2 Digest</p> </li> <li> <p>rmd160</p> <p>RMD-160 Digest</p> </li> <li> <p>sha1</p> <p>SHA-1 Digest</p> </li> <li> <p>sha224</p> <p>SHA-2 224 Digest</p> </li> <li> <p>sha256</p> <p>SHA-2 256 Digest</p> </li> <li> <p>sha384</p> <p>SHA-2 384 Digest</p> </li> <li> <p>sha512</p> <p>SHA-2 512 Digest</p> </li> <li> <p>sha3-224</p> <p>SHA-3 224 Digest</p> </li> <li> <p>sha3-256</p> <p>SHA-3 256 Digest</p> </li> <li> <p>sha3-384</p> <p>SHA-3 384 Digest</p> </li> <li> <p>sha3-512</p> <p>SHA-3 512 Digest</p> </li> <li> <p>shake128</p> <p>SHA-3 SHAKE128 Digest</p> </li> <li> <p>shake256</p> <p>SHA-3 SHAKE256 Digest</p> </li> <li> <p>sm3</p> <p>SM3 Digest</p> </li> </ul>"},{"location":"man1/openssl/#encoding-and-cipher-commands","title":"Encoding and Cipher Commands","text":"<p>The following aliases provide convenient access to the most used encodings and ciphers.</p> <p>Depending on how OpenSSL was configured and built, not all ciphers listed here may be present. See enc(1) for more information and command usage.</p> <ul> <li> <p>aes128, aes-128-cbc, aes-128-cfb, aes-128-ctr, aes-128-ecb, aes-128-ofb</p> <p>AES-128 Cipher</p> </li> <li> <p>aes192, aes-192-cbc, aes-192-cfb, aes-192-ctr, aes-192-ecb, aes-192-ofb</p> <p>AES-192 Cipher</p> </li> <li> <p>aes256, aes-256-cbc, aes-256-cfb, aes-256-ctr, aes-256-ecb, aes-256-ofb</p> <p>AES-256 Cipher</p> </li> <li> <p>aria128, aria-128-cbc, aria-128-cfb, aria-128-ctr, aria-128-ecb, aria-128-ofb</p> <p>Aria-128 Cipher</p> </li> <li> <p>aria192, aria-192-cbc, aria-192-cfb, aria-192-ctr, aria-192-ecb, aria-192-ofb</p> <p>Aria-192 Cipher</p> </li> <li> <p>aria256, aria-256-cbc, aria-256-cfb, aria-256-ctr, aria-256-ecb, aria-256-ofb</p> <p>Aria-256 Cipher</p> </li> <li> <p>base64</p> <p>Base64 Encoding</p> </li> <li> <p>bf, bf-cbc, bf-cfb, bf-ecb, bf-ofb</p> <p>Blowfish Cipher</p> </li> <li> <p>camellia128, camellia-128-cbc, camellia-128-cfb, camellia-128-ctr, camellia-128-ecb, camellia-128-ofb</p> <p>Camellia-128 Cipher</p> </li> <li> <p>camellia192, camellia-192-cbc, camellia-192-cfb, camellia-192-ctr, camellia-192-ecb, camellia-192-ofb</p> <p>Camellia-192 Cipher</p> </li> <li> <p>camellia256, camellia-256-cbc, camellia-256-cfb, camellia-256-ctr, camellia-256-ecb, camellia-256-ofb</p> <p>Camellia-256 Cipher</p> </li> <li> <p>cast, cast-cbc</p> <p>CAST Cipher</p> </li> <li> <p>cast5-cbc, cast5-cfb, cast5-ecb, cast5-ofb</p> <p>CAST5 Cipher</p> </li> <li> <p>chacha20</p> <p>Chacha20 Cipher</p> </li> <li> <p>des, des-cbc, des-cfb, des-ecb, des-ede, des-ede-cbc, des-ede-cfb, des-ede-ofb, des-ofb</p> <p>DES Cipher</p> </li> <li> <p>des3, desx, des-ede3, des-ede3-cbc, des-ede3-cfb, des-ede3-ofb</p> <p>Triple-DES Cipher</p> </li> <li> <p>idea, idea-cbc, idea-cfb, idea-ecb, idea-ofb</p> <p>IDEA Cipher</p> </li> <li> <p>rc2, rc2-cbc, rc2-cfb, rc2-ecb, rc2-ofb</p> <p>RC2 Cipher</p> </li> <li> <p>rc4</p> <p>RC4 Cipher</p> </li> <li> <p>rc5, rc5-cbc, rc5-cfb, rc5-ecb, rc5-ofb</p> <p>RC5 Cipher</p> </li> <li> <p>seed, seed-cbc, seed-cfb, seed-ecb, seed-ofb</p> <p>SEED Cipher</p> </li> <li> <p>sm4, sm4-cbc, sm4-cfb, sm4-ctr, sm4-ecb, sm4-ofb</p> <p>SM4 Cipher</p> </li> </ul>"},{"location":"man1/openssl/#options","title":"OPTIONS","text":"<p>Details of which options are available depend on the specific command. This section describes some common options with common behavior.</p>"},{"location":"man1/openssl/#common-options","title":"Common Options","text":"<ul> <li> <p>-help</p> <p>Provides a terse summary of all options.</p> </li> </ul>"},{"location":"man1/openssl/#pass-phrase-options","title":"Pass Phrase Options","text":"<p>Several commands accept password arguments, typically using -passin and -passout for input and output passwords respectively. These allow the password to be obtained from a variety of sources. Both of these options take a single argument whose format is described below. If no password argument is given and a password is required then the user is prompted to enter one: this will typically be read from the current terminal with echoing turned off.</p> <p>Note that character encoding may be relevant, please see passphrase-encoding(7).</p> <ul> <li> <p>pass:password</p> <p>The actual password is password. Since the password is visible to utilities (like 'ps' under Unix) this form should only be used where security is not important.</p> </li> <li> <p>env:var</p> <p>Obtain the password from the environment variable var. Since the environment of other processes is visible on certain platforms (e.g. ps under certain Unix OSes) this option should be used with caution.</p> </li> <li> <p>file:pathname</p> <p>The first line of pathname is the password. If the same pathname argument is supplied to -passin and -passout arguments then the first line will be used for the input password and the next line for the output password. pathname need not refer to a regular file: it could for example refer to a device or named pipe.</p> </li> <li> <p>fd:number</p> <p>Read the password from the file descriptor number. This can be used to send the data via a pipe for example.</p> </li> <li> <p>stdin</p> <p>Read the password from standard input.</p> </li> </ul>"},{"location":"man1/openssl/#see-also","title":"SEE ALSO","text":"<p>asn1parse(1), ca(1), ciphers(1), cms(1), config(5), crl(1), crl2pkcs7(1), dgst(1), dhparam(1), dsa(1), dsaparam(1), ec(1), ecparam(1), enc(1), engine(1), errstr(1), gendsa(1), genpkey(1), genrsa(1), nseq(1), ocsp(1), passwd(1), pkcs12(1), pkcs7(1), pkcs8(1), pkey(1), pkeyparam(1), pkeyutl(1), prime(1), rand(1), rehash(1), req(1), rsa(1), rsautl(1), s_client(1), s_server(1), s_time(1), sess_id(1), smime(1), speed(1), spkac(1), srp(1), storeutl(1), ts(1), verify(1), version(1), x509(1), crypto(7), ssl(7), x509v3_config(5)</p>"},{"location":"man1/openssl/#history","title":"HISTORY","text":"<p>The list-XXX-algorithms pseudo-commands were added in OpenSSL 1.0.0; For notes on the availability of other commands, see their individual manual pages.</p>"},{"location":"man1/openssl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/passwd/","title":"passwd","text":""},{"location":"man1/passwd/#name","title":"NAME","text":"<p>openssl-passwd, passwd - compute password hashes</p>"},{"location":"man1/passwd/#synopsis","title":"SYNOPSIS","text":"<p>openssl passwd [-help] [-crypt] [-1] [-apr1] [-aixmd5] [-5] [-6] [-salt string] [-in file] [-stdin] [-noverify] [-quiet] [-table] [-rand file...] [-writerand file] {password}</p>"},{"location":"man1/passwd/#description","title":"DESCRIPTION","text":"<p>The passwd command computes the hash of a password typed at run-time or the hash of each password in a list.  The password list is taken from the named file for option -in file, from stdin for option -stdin, or from the command line, or from the terminal otherwise.</p>"},{"location":"man1/passwd/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-crypt</p> <p>Use the crypt algorithm (default).</p> </li> <li> <p>-1</p> <p>Use the MD5 based BSD password algorithm 1.</p> </li> <li> <p>-apr1</p> <p>Use the apr1 algorithm (Apache variant of the BSD algorithm).</p> </li> <li> <p>-aixmd5</p> <p>Use the AIX MD5 algorithm (AIX variant of the BSD algorithm).</p> </li> <li> <p>-5</p> </li> <li> <p>-6</p> <p>Use the SHA256 / SHA512 based algorithms defined by Ulrich Drepper. See https://www.akkadia.org/drepper/SHA-crypt.txt.</p> </li> <li> <p>-salt string</p> <p>Use the specified salt. When reading a password from the terminal, this implies -noverify.</p> </li> <li> <p>-in file</p> <p>Read passwords from file.</p> </li> <li> <p>-stdin</p> <p>Read passwords from stdin.</p> </li> <li> <p>-noverify</p> <p>Don't verify when reading a password from the terminal.</p> </li> <li> <p>-quiet</p> <p>Don't output warnings when passwords given at the command line are truncated.</p> </li> <li> <p>-table</p> <p>In the output list, prepend the cleartext password and a TAB character to each password hash.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> </ul>"},{"location":"man1/passwd/#examples","title":"EXAMPLES","text":"<pre><code>% openssl passwd -crypt -salt xx password\nxxj31ZMTZzkVA\n\n% openssl passwd -1 -salt xxxxxxxx password\n$1$xxxxxxxx$UYCIxa628.9qXjpQCjM4a.\n\n% openssl passwd -apr1 -salt xxxxxxxx password\n$apr1$xxxxxxxx$dxHfLAsjHkDRmG83UXe8K0\n\n% openssl passwd -aixmd5 -salt xxxxxxxx password\nxxxxxxxx$8Oaipk/GPKhC64w/YVeFD/\n</code></pre>"},{"location":"man1/passwd/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/pkcs12/","title":"pkcs12","text":""},{"location":"man1/pkcs12/#name","title":"NAME","text":"<p>openssl-pkcs12, pkcs12 - PKCS#12 file utility</p>"},{"location":"man1/pkcs12/#synopsis","title":"SYNOPSIS","text":"<p>openssl pkcs12 [-help] [-export] [-chain] [-inkey file_or_id] [-certfile filename] [-name name] [-caname name] [-in filename] [-out filename] [-noout] [-nomacver] [-nocerts] [-clcerts] [-cacerts] [-nokeys] [-info] [-des | -des3 | -idea | -aes128 | -aes192 | -aes256 | -aria128 | -aria192 | -aria256 | -camellia128 | -camellia192 | -camellia256 | -nodes] [-noiter] [-maciter | -nomaciter | -nomac] [-twopass] [-descert] [-certpbe cipher] [-keypbe cipher] [-macalg digest] [-keyex] [-keysig] [-password arg] [-passin arg] [-passout arg] [-rand file...] [-writerand file] [-CAfile file] [-CApath dir] [-no-CAfile] [-no-CApath] [-CSP name]</p>"},{"location":"man1/pkcs12/#description","title":"DESCRIPTION","text":"<p>The pkcs12 command allows PKCS#12 files (sometimes referred to as PFX files) to be created and parsed. PKCS#12 files are used by several programs including Netscape, MSIE and MS Outlook.</p>"},{"location":"man1/pkcs12/#options","title":"OPTIONS","text":"<p>There are a lot of options the meaning of some depends of whether a PKCS#12 file is being created or parsed. By default a PKCS#12 file is parsed. A PKCS#12 file can be created by using the -export option (see below).</p>"},{"location":"man1/pkcs12/#parsing-options","title":"PARSING OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-in filename</p> <p>This specifies filename of the PKCS#12 file to be parsed. Standard input is used by default.</p> </li> <li> <p>-out filename</p> <p>The filename to write certificates and private keys to, standard output by default.  They are all written in PEM format.</p> </li> <li> <p>-passin arg</p> <p>The PKCS#12 file (i.e. input file) password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-passout arg</p> <p>Pass phrase source to encrypt any outputted private keys with. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-password arg</p> <p>With -export, -password is equivalent to -passout. Otherwise, -password is equivalent to -passin.</p> </li> <li> <p>-noout</p> <p>This option inhibits output of the keys and certificates to the output file version of the PKCS#12 file.</p> </li> <li> <p>-clcerts</p> <p>Only output client certificates (not CA certificates).</p> </li> <li> <p>-cacerts</p> <p>Only output CA certificates (not client certificates).</p> </li> <li> <p>-nocerts</p> <p>No certificates at all will be output.</p> </li> <li> <p>-nokeys</p> <p>No private keys will be output.</p> </li> <li> <p>-info</p> <p>Output additional information about the PKCS#12 file structure, algorithms used and iteration counts.</p> </li> <li> <p>-des</p> <p>Use DES to encrypt private keys before outputting.</p> </li> <li> <p>-des3</p> <p>Use triple DES to encrypt private keys before outputting, this is the default.</p> </li> <li> <p>-idea</p> <p>Use IDEA to encrypt private keys before outputting.</p> </li> <li> <p>-aes128, -aes192, -aes256</p> <p>Use AES to encrypt private keys before outputting.</p> </li> <li> <p>-aria128, -aria192, -aria256</p> <p>Use ARIA to encrypt private keys before outputting.</p> </li> <li> <p>-camellia128, -camellia192, -camellia256</p> <p>Use Camellia to encrypt private keys before outputting.</p> </li> <li> <p>-nodes</p> <p>Don't encrypt the private keys at all.</p> </li> <li> <p>-nomacver</p> <p>Don't attempt to verify the integrity MAC before reading the file.</p> </li> <li> <p>-twopass</p> <p>Prompt for separate integrity and encryption passwords: most software always assumes these are the same so this option will render such PKCS#12 files unreadable. Cannot be used in combination with the options -password, -passin (if importing) or -passout (if exporting).</p> </li> </ul>"},{"location":"man1/pkcs12/#file-creation-options","title":"FILE CREATION OPTIONS","text":"<ul> <li> <p>-export</p> <p>This option specifies that a PKCS#12 file will be created rather than parsed.</p> </li> <li> <p>-out filename</p> <p>This specifies filename to write the PKCS#12 file to. Standard output is used by default.</p> </li> <li> <p>-in filename</p> <p>The filename to read certificates and private keys from, standard input by default.  They must all be in PEM format. The order doesn't matter but one private key and its corresponding certificate should be present. If additional certificates are present they will also be included in the PKCS#12 file.</p> </li> <li> <p>-inkey file_or_id</p> <p>File to read private key from. If not present then a private key must be present in the input file. If no engine is used, the argument is taken as a file; if an engine is specified, the argument is given to the engine as a key identifier.</p> </li> <li> <p>-name friendlyname</p> <p>This specifies the \"friendly name\" for the certificate and private key. This name is typically displayed in list boxes by software importing the file.</p> </li> <li> <p>-certfile filename</p> <p>A filename to read additional certificates from.</p> </li> <li> <p>-caname friendlyname</p> <p>This specifies the \"friendly name\" for other certificates. This option may be used multiple times to specify names for all certificates in the order they appear. Netscape ignores friendly names on other certificates whereas MSIE displays them.</p> </li> <li> <p>-pass arg, -passout arg</p> <p>The PKCS#12 file (i.e. output file) password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-passin password</p> <p>Pass phrase source to decrypt any input private keys with. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-chain</p> <p>If this option is present then an attempt is made to include the entire certificate chain of the user certificate. The standard CA store is used for this search. If the search fails it is considered a fatal error.</p> </li> <li> <p>-descert</p> <p>Encrypt the certificate using triple DES, this may render the PKCS#12 file unreadable by some \"export grade\" software. By default the private key is encrypted using triple DES and the certificate using 40 bit RC2 unless RC2 is disabled in which case triple DES is used.</p> </li> <li> <p>-keypbe alg, -certpbe alg</p> <p>These options allow the algorithm used to encrypt the private key and certificates to be selected. Any PKCS#5 v1.5 or PKCS#12 PBE algorithm name can be used (see NOTES section for more information). If a cipher name (as output by the list-cipher-algorithms command is specified then it is used with PKCS#5 v2.0. For interoperability reasons it is advisable to only use PKCS#12 algorithms.</p> </li> <li> <p>-keyex|-keysig</p> <p>Specifies that the private key is to be used for key exchange or just signing. This option is only interpreted by MSIE and similar MS software. Normally \"export grade\" software will only allow 512 bit RSA keys to be used for encryption purposes but arbitrary length keys for signing. The -keysig option marks the key for signing only. Signing only keys can be used for S/MIME signing, authenticode (ActiveX control signing)  and SSL client authentication, however, due to a bug only MSIE 5.0 and later support the use of signing only keys for SSL client authentication.</p> </li> <li> <p>-macalg digest</p> <p>Specify the MAC digest algorithm. If not included them SHA1 will be used.</p> </li> <li> <p>-nomaciter, -noiter</p> <p>These options affect the iteration counts on the MAC and key algorithms. Unless you wish to produce files compatible with MSIE 4.0 you should leave these options alone.</p> <p>To discourage attacks by using large dictionaries of common passwords the algorithm that derives keys from passwords can have an iteration count applied to it: this causes a certain part of the algorithm to be repeated and slows it down. The MAC is used to check the file integrity but since it will normally have the same password as the keys and certificates it could also be attacked. By default both MAC and encryption iteration counts are set to 2048, using these options the MAC and encryption iteration counts can be set to 1, since this reduces the file security you should not use these options unless you really have to. Most software supports both MAC and key iteration counts. MSIE 4.0 doesn't support MAC iteration counts so it needs the -nomaciter option.</p> </li> <li> <p>-maciter</p> <p>This option is included for compatibility with previous versions, it used to be needed to use MAC iterations counts but they are now used by default.</p> </li> <li> <p>-nomac</p> <p>Don't attempt to provide the MAC integrity.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-CAfile file</p> <p>CA storage as a file.</p> </li> <li> <p>-CApath dir</p> <p>CA storage as a directory. This directory must be a standard certificate directory: that is a hash of each subject name (using x509 -hash) should be linked to each certificate.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location.</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location.</p> </li> <li> <p>-CSP name</p> <p>Write name as a Microsoft CSP name.</p> </li> </ul>"},{"location":"man1/pkcs12/#notes","title":"NOTES","text":"<p>Although there are a large number of options most of them are very rarely used. For PKCS#12 file parsing only -in and -out need to be used for PKCS#12 file creation -export and -name are also used.</p> <p>If none of the -clcerts, -cacerts or -nocerts options are present then all certificates will be output in the order they appear in the input PKCS#12 files. There is no guarantee that the first certificate present is the one corresponding to the private key. Certain software which requires a private key and certificate and assumes the first certificate in the file is the one corresponding to the private key: this may not always be the case. Using the -clcerts option will solve this problem by only outputting the certificate corresponding to the private key. If the CA certificates are required then they can be output to a separate file using the -nokeys -cacerts options to just output CA certificates.</p> <p>The -keypbe and -certpbe algorithms allow the precise encryption algorithms for private keys and certificates to be specified. Normally the defaults are fine but occasionally software can't handle triple DES encrypted private keys, then the option -keypbe PBE-SHA1-RC2-40 can be used to reduce the private key encryption to 40 bit RC2. A complete description of all algorithms is contained in the pkcs8 manual page.</p> <p>Prior 1.1 release passwords containing non-ASCII characters were encoded in non-compliant manner, which limited interoperability, in first hand with Windows. But switching to standard-compliant password encoding poses problem accessing old data protected with broken encoding. For this reason even legacy encodings is attempted when reading the data. If you use PKCS#12 files in production application you are advised to convert the data, because implemented heuristic approach is not MT-safe, its sole goal is to facilitate the data upgrade with this utility.</p>"},{"location":"man1/pkcs12/#examples","title":"EXAMPLES","text":"<p>Parse a PKCS#12 file and output it to a file:</p> <pre><code>openssl pkcs12 -in file.p12 -out file.pem\n</code></pre> <p>Output only client certificates to a file:</p> <pre><code>openssl pkcs12 -in file.p12 -clcerts -out file.pem\n</code></pre> <p>Don't encrypt the private key:</p> <pre><code>openssl pkcs12 -in file.p12 -out file.pem -nodes\n</code></pre> <p>Print some info about a PKCS#12 file:</p> <pre><code>openssl pkcs12 -in file.p12 -info -noout\n</code></pre> <p>Create a PKCS#12 file:</p> <pre><code>openssl pkcs12 -export -in file.pem -out file.p12 -name \"My Certificate\"\n</code></pre> <p>Include some extra certificates:</p> <pre><code>openssl pkcs12 -export -in file.pem -out file.p12 -name \"My Certificate\" \\\n -certfile othercerts.pem\n</code></pre>"},{"location":"man1/pkcs12/#see-also","title":"SEE ALSO","text":"<p>pkcs8(1)</p>"},{"location":"man1/pkcs12/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/pkcs7/","title":"pkcs7","text":""},{"location":"man1/pkcs7/#name","title":"NAME","text":"<p>openssl-pkcs7, pkcs7 - PKCS#7 utility</p>"},{"location":"man1/pkcs7/#synopsis","title":"SYNOPSIS","text":"<p>openssl pkcs7 [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-out filename] [-print_certs] [-text] [-noout] [-engine id]</p>"},{"location":"man1/pkcs7/#description","title":"DESCRIPTION","text":"<p>The pkcs7 command processes PKCS#7 files in DER or PEM format.</p>"},{"location":"man1/pkcs7/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. DER format is DER encoded PKCS#7 v1.5 structure.PEM (the default) is a base64 encoded version of the DER form with header and footer lines.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-print_certs</p> <p>Prints out any certificates or CRLs contained in the file. They are preceded by their subject and issuer names in one line format.</p> </li> <li> <p>-text</p> <p>Prints out certificates details in full rather than just subject and issuer names.</p> </li> <li> <p>-noout</p> <p>Don't output the encoded version of the PKCS#7 structure (or certificates is -print_certs is set).</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause pkcs7 to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/pkcs7/#examples","title":"EXAMPLES","text":"<p>Convert a PKCS#7 file from PEM to DER:</p> <pre><code>openssl pkcs7 -in file.pem -outform DER -out file.der\n</code></pre> <p>Output all certificates in a file:</p> <pre><code>openssl pkcs7 -in file.pem -print_certs -out certs.pem\n</code></pre>"},{"location":"man1/pkcs7/#notes","title":"NOTES","text":"<p>The PEM PKCS#7 format uses the header and footer lines:</p> <pre><code>-----BEGIN PKCS7-----\n-----END PKCS7-----\n</code></pre> <p>For compatibility with some CAs it will also accept:</p> <pre><code>-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n</code></pre>"},{"location":"man1/pkcs7/#restrictions","title":"RESTRICTIONS","text":"<p>There is no option to print out all the fields of a PKCS#7 file.</p> <p>This PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC2315 they cannot currently parse, for example, the new CMS as described in RFC2630.</p>"},{"location":"man1/pkcs7/#see-also","title":"SEE ALSO","text":"<p>crl2pkcs7(1)</p>"},{"location":"man1/pkcs7/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/pkcs8/","title":"pkcs8","text":""},{"location":"man1/pkcs8/#name","title":"NAME","text":"<p>openssl-pkcs8, pkcs8 - PKCS#8 format private key conversion tool</p>"},{"location":"man1/pkcs8/#synopsis","title":"SYNOPSIS","text":"<p>openssl pkcs8 [-help] [-topk8] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-iter count] [-noiter] [-rand file...] [-writerand file] [-nocrypt] [-traditional] [-v2 alg] [-v2prf alg] [-v1 alg] [-engine id] [-scrypt] [-scrypt_N N] [-scrypt_r r] [-scrypt_p p]</p>"},{"location":"man1/pkcs8/#description","title":"DESCRIPTION","text":"<p>The pkcs8 command processes private keys in PKCS#8 format. It can handle both unencrypted PKCS#8 PrivateKeyInfo format and EncryptedPrivateKeyInfo format with a variety of PKCS#5 (v1.5 and v2.0) and PKCS#12 algorithms.</p>"},{"location":"man1/pkcs8/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-topk8</p> <p>Normally a PKCS#8 private key is expected on input and a private key will be written to the output file. With the -topk8 option the situation is reversed: it reads a private key and writes a PKCS#8 format key.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format: see \"KEY FORMATS\" for more details. The default format is PEM.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format: see \"KEY FORMATS\" for more details. The default format is PEM.</p> </li> <li> <p>-traditional</p> <p>When this option is present and -topk8 is not a traditional format private key is written.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.</p> </li> <li> <p>-passin arg</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write a key to or standard output by default. If any encryption options are set then a pass phrase will be prompted for. The output filename should not be the same as the input filename.</p> </li> <li> <p>-passout arg</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-iter count</p> <p>When creating new PKCS#8 containers, use a given number of iterations on the password in deriving the encryption key for the PKCS#8 output. High values increase the time required to brute-force a PKCS#8 container.</p> </li> <li> <p>-nocrypt</p> <p>PKCS#8 keys generated or input are normally PKCS#8 EncryptedPrivateKeyInfo structures using an appropriate password based encryption algorithm. With this option an unencrypted PrivateKeyInfo structure is expected or output. This option does not encrypt private keys at all and should only be used when absolutely necessary. Certain software such as some versions of Java code signing software used unencrypted private keys.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-v2 alg</p> <p>This option sets the PKCS#5 v2.0 algorithm.</p> <p>The alg argument is the encryption algorithm to use, valid values include aes128, aes256 and des3. If this option isn't specified then aes256 is used.</p> </li> <li> <p>-v2prf alg</p> <p>This option sets the PRF algorithm to use with PKCS#5 v2.0. A typical value value would be hmacWithSHA256. If this option isn't set then the default for the cipher is used or hmacWithSHA256 if there is no default.</p> <p>Some implementations may not support custom PRF algorithms and may require the hmacWithSHA1 option to work.</p> </li> <li> <p>-v1 alg</p> <p>This option indicates a PKCS#5 v1.5 or PKCS#12 algorithm should be used.  Some older implementations may not support PKCS#5 v2.0 and may require this option. If not specified PKCS#5 v2.0 form is used.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause pkcs8 to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-scrypt</p> <p>Uses the scrypt algorithm for private key encryption using default parameters: currently N=16384, r=8 and p=1 and AES in CBC mode with a 256 bit key. These parameters can be modified using the -scrypt_N, -scrypt_r, -scrypt_p and -v2 options.</p> </li> <li> <p>-scrypt_N N -scrypt_r r -scrypt_p p</p> <p>Sets the scrypt N, r or p parameters.</p> </li> </ul>"},{"location":"man1/pkcs8/#key-formats","title":"KEY FORMATS","text":"<p>Various different formats are used by the pkcs8 utility. These are detailed below.</p> <p>If a key is being converted from PKCS#8 form (i.e. the -topk8 option is not used) then the input file must be in PKCS#8 format. An encrypted key is expected unless -nocrypt is included.</p> <p>If -topk8 is not used and PEM mode is set the output file will be an unencrypted private key in PKCS#8 format. If the -traditional option is used then a traditional format private key is written instead.</p> <p>If -topk8 is not used and DER mode is set the output file will be an unencrypted private key in traditional DER format.</p> <p>If -topk8 is used then any supported private key can be used for the input file in a format specified by -inform. The output file will be encrypted PKCS#8 format using the specified encryption parameters unless -nocrypt is included.</p>"},{"location":"man1/pkcs8/#notes","title":"NOTES","text":"<p>By default, when converting a key to PKCS#8 format, PKCS#5 v2.0 using 256 bit AES with HMAC and SHA256 is used.</p> <p>Some older implementations do not support PKCS#5 v2.0 format and require the older PKCS#5 v1.5 form instead, possibly also requiring insecure weak encryption algorithms such as 56 bit DES.</p> <p>The encrypted form of a PEM encode PKCS#8 files uses the following headers and footers:</p> <pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----\n-----END ENCRYPTED PRIVATE KEY-----\n</code></pre> <p>The unencrypted form uses:</p> <pre><code>-----BEGIN PRIVATE KEY-----\n-----END PRIVATE KEY-----\n</code></pre> <p>Private keys encrypted using PKCS#5 v2.0 algorithms and high iteration counts are more secure that those encrypted using the traditional SSLeay compatible formats. So if additional security is considered important the keys should be converted.</p> <p>It is possible to write out DER encoded encrypted private keys in PKCS#8 format because the encryption details are included at an ASN1 level whereas the traditional format includes them at a PEM level.</p>"},{"location":"man1/pkcs8/#pkcs5-v15-and-pkcs12-algorithms","title":"PKCS#5 v1.5 and PKCS#12 algorithms.","text":"<p>Various algorithms can be used with the -v1 command line option, including PKCS#5 v1.5 and PKCS#12. These are described in more detail below.</p> <ul> <li> <p>PBE-MD2-DES PBE-MD5-DES</p> <p>These algorithms were included in the original PKCS#5 v1.5 specification. They only offer 56 bits of protection since they both use DES.</p> </li> <li> <p>PBE-SHA1-RC2-64, PBE-MD2-RC2-64, PBE-MD5-RC2-64, PBE-SHA1-DES</p> <p>These algorithms are not mentioned in the original PKCS#5 v1.5 specification but they use the same key derivation algorithm and are supported by some software. They are mentioned in PKCS#5 v2.0. They use either 64 bit RC2 or 56 bit DES.</p> </li> <li> <p>PBE-SHA1-RC4-128, PBE-SHA1-RC4-40, PBE-SHA1-3DES, PBE-SHA1-2DES, PBE-SHA1-RC2-128, PBE-SHA1-RC2-40</p> <p>These algorithms use the PKCS#12 password based encryption algorithm and allow strong encryption algorithms like triple DES or 128 bit RC2 to be used.</p> </li> </ul>"},{"location":"man1/pkcs8/#examples","title":"EXAMPLES","text":"<p>Convert a private key to PKCS#8 format using default parameters (AES with 256 bit key and hmacWithSHA256):</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -out enckey.pem\n</code></pre> <p>Convert a private key to PKCS#8 unencrypted format:</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -nocrypt -out enckey.pem\n</code></pre> <p>Convert a private key to PKCS#5 v2.0 format using triple DES:</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem\n</code></pre> <p>Convert a private key to PKCS#5 v2.0 format using AES with 256 bits in CBC mode and hmacWithSHA512 PRF:</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -v2 aes-256-cbc -v2prf hmacWithSHA512 -out enckey.pem\n</code></pre> <p>Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible algorithm (DES):</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -v1 PBE-MD5-DES -out enckey.pem\n</code></pre> <p>Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm (3DES):</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -out enckey.pem -v1 PBE-SHA1-3DES\n</code></pre> <p>Read a DER unencrypted PKCS#8 format private key:</p> <pre><code>openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem\n</code></pre> <p>Convert a private key from any PKCS#8 encrypted format to traditional format:</p> <pre><code>openssl pkcs8 -in pk8.pem -traditional -out key.pem\n</code></pre> <p>Convert a private key to PKCS#8 format, encrypting with AES-256 and with one million iterations of the password:</p> <pre><code>openssl pkcs8 -in key.pem -topk8 -v2 aes-256-cbc -iter 1000000 -out pk8.pem\n</code></pre>"},{"location":"man1/pkcs8/#standards","title":"STANDARDS","text":"<p>Test vectors from this PKCS#5 v2.0 implementation were posted to the pkcs-tng mailing list using triple DES, DES and RC2 with high iteration counts, several people confirmed that they could decrypt the private keys produced and therefore, it can be assumed that the PKCS#5 v2.0 implementation is reasonably accurate at least as far as these algorithms are concerned.</p> <p>The format of PKCS#8 DSA (and other) private keys is not well documented: it is hidden away in PKCS#11 v2.01, section 11.9. OpenSSL's default DSA PKCS#8 private key format complies with this standard.</p>"},{"location":"man1/pkcs8/#bugs","title":"BUGS","text":"<p>There should be an option that prints out the encryption algorithm in use and other details such as the iteration count.</p>"},{"location":"man1/pkcs8/#see-also","title":"SEE ALSO","text":"<p>dsa(1), rsa(1), genrsa(1), gendsa(1)</p>"},{"location":"man1/pkcs8/#history","title":"HISTORY","text":"<p>The -iter option was added in OpenSSL 1.1.0.</p>"},{"location":"man1/pkcs8/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/pkey/","title":"pkey","text":""},{"location":"man1/pkey/#name","title":"NAME","text":"<p>openssl-pkey, pkey - public or private key processing tool</p>"},{"location":"man1/pkey/#synopsis","title":"SYNOPSIS","text":"<p>openssl pkey [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-traditional] [-cipher] [-text] [-text_pub] [-noout] [-pubin] [-pubout] [-engine id] [-check] [-pubcheck]</p>"},{"location":"man1/pkey/#description","title":"DESCRIPTION","text":"<p>The pkey command processes public or private keys. They can be converted between various forms and their components printed out.</p>"},{"location":"man1/pkey/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format DER or PEM. The default format is PEM.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.</p> </li> <li> <p>-passin arg</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write a key to or standard output if this option is not specified. If any encryption options are set then a pass phrase will be prompted for. The output filename should not be the same as the input filename.</p> </li> <li> <p>-passout password</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-traditional</p> <p>Normally a private key is written using standard format: this is PKCS#8 form with the appropriate encryption algorithm (if any). If the -traditional option is specified then the older \"traditional\" format is used instead.</p> </li> <li> <p>-cipher</p> <p>These options encrypt the private key with the supplied cipher. Any algorithm name accepted by EVP_get_cipherbyname() is acceptable such as des3.</p> </li> <li> <p>-text</p> <p>Prints out the various public or private key components in plain text in addition to the encoded version.</p> </li> <li> <p>-text_pub</p> <p>Print out only public key components even if a private key is being processed.</p> </li> <li> <p>-noout</p> <p>Do not output the encoded version of the key.</p> </li> <li> <p>-pubin</p> <p>By default a private key is read from the input file: with this option a public key is read instead.</p> </li> <li> <p>-pubout</p> <p>By default a private key is output: with this option a public key will be output instead. This option is automatically set if the input is a public key.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause pkey to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-check</p> <p>This option checks the consistency of a key pair for both public and private components.</p> </li> <li> <p>-pubcheck</p> <p>This option checks the correctness of either a public key or the public component of a key pair.</p> </li> </ul>"},{"location":"man1/pkey/#examples","title":"EXAMPLES","text":"<p>To remove the pass phrase on an RSA private key:</p> <pre><code>openssl pkey -in key.pem -out keyout.pem\n</code></pre> <p>To encrypt a private key using triple DES:</p> <pre><code>openssl pkey -in key.pem -des3 -out keyout.pem\n</code></pre> <p>To convert a private key from PEM to DER format:</p> <pre><code>openssl pkey -in key.pem -outform DER -out keyout.der\n</code></pre> <p>To print out the components of a private key to standard output:</p> <pre><code>openssl pkey -in key.pem -text -noout\n</code></pre> <p>To print out the public components of a private key to standard output:</p> <pre><code>openssl pkey -in key.pem -text_pub -noout\n</code></pre> <p>To just output the public part of a private key:</p> <pre><code>openssl pkey -in key.pem -pubout -out pubkey.pem\n</code></pre>"},{"location":"man1/pkey/#see-also","title":"SEE ALSO","text":"<p>genpkey(1), rsa(1), pkcs8(1), dsa(1), genrsa(1), gendsa(1)</p>"},{"location":"man1/pkey/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/pkeyparam/","title":"pkeyparam","text":""},{"location":"man1/pkeyparam/#name","title":"NAME","text":"<p>openssl-pkeyparam, pkeyparam - public key algorithm parameter processing tool</p>"},{"location":"man1/pkeyparam/#synopsis","title":"SYNOPSIS","text":"<p>openssl pkeyparam [-help] [-in filename] [-out filename] [-text] [-noout] [-engine id] [-check]</p>"},{"location":"man1/pkeyparam/#description","title":"DESCRIPTION","text":"<p>The pkeyparam command processes public key algorithm parameters. They can be checked for correctness and their components printed out.</p>"},{"location":"man1/pkeyparam/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read parameters from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write parameters to or standard output if this option is not specified.</p> </li> <li> <p>-text</p> <p>Prints out the parameters in plain text in addition to the encoded version.</p> </li> <li> <p>-noout</p> <p>Do not output the encoded version of the parameters.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause pkeyparam to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-check</p> <p>This option checks the correctness of parameters.</p> </li> </ul>"},{"location":"man1/pkeyparam/#examples","title":"EXAMPLES","text":"<p>Print out text version of parameters:</p> <pre><code>openssl pkeyparam -in param.pem -text\n</code></pre>"},{"location":"man1/pkeyparam/#notes","title":"NOTES","text":"<p>There are no -inform or -outform options for this command because only PEM format is supported because the key type is determined by the PEM headers.</p>"},{"location":"man1/pkeyparam/#see-also","title":"SEE ALSO","text":"<p>genpkey(1), rsa(1), pkcs8(1), dsa(1), genrsa(1), gendsa(1)</p>"},{"location":"man1/pkeyparam/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/pkeyutl/","title":"pkeyutl","text":""},{"location":"man1/pkeyutl/#name","title":"NAME","text":"<p>openssl-pkeyutl, pkeyutl - public key algorithm utility</p>"},{"location":"man1/pkeyutl/#synopsis","title":"SYNOPSIS","text":"<p>openssl pkeyutl [-help] [-in file] [-out file] [-sigfile file] [-inkey file] [-keyform PEM|DER|ENGINE] [-passin arg] [-peerkey file] [-peerform PEM|DER|ENGINE] [-pubin] [-certin] [-rev] [-sign] [-verify] [-verifyrecover] [-encrypt] [-decrypt] [-derive] [-kdf algorithm] [-kdflen length] [-pkeyopt opt:value] [-hexdump] [-asn1parse] [-rand file...] [-writerand file] [-engine id] [-engine_impl]</p>"},{"location":"man1/pkeyutl/#description","title":"DESCRIPTION","text":"<p>The pkeyutl command can be used to perform low-level public key operations using any supported algorithm.</p>"},{"location":"man1/pkeyutl/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read data from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-sigfile file</p> <p>Signature file, required for verify operations only</p> </li> <li> <p>-inkey file</p> <p>The input key file, by default it should be a private key.</p> </li> <li> <p>-keyform PEM|DER|ENGINE</p> <p>The key format PEM, DER or ENGINE. Default is PEM.</p> </li> <li> <p>-passin arg</p> <p>The input key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-peerkey file</p> <p>The peer key file, used by key derivation (agreement) operations.</p> </li> <li> <p>-peerform PEM|DER|ENGINE</p> <p>The peer key format PEM, DER or ENGINE. Default is PEM.</p> </li> <li> <p>-pubin</p> <p>The input file is a public key.</p> </li> <li> <p>-certin</p> <p>The input is a certificate containing a public key.</p> </li> <li> <p>-rev</p> <p>Reverse the order of the input buffer. This is useful for some libraries (such as CryptoAPI) which represent the buffer in little endian format.</p> </li> <li> <p>-sign</p> <p>Sign the input data (which must be a hash) and output the signed result. This requires a private key.</p> </li> <li> <p>-verify</p> <p>Verify the input data (which must be a hash) against the signature file and indicate if the verification succeeded or failed.</p> </li> <li> <p>-verifyrecover</p> <p>Verify the input data (which must be a hash) and output the recovered data.</p> </li> <li> <p>-encrypt</p> <p>Encrypt the input data using a public key.</p> </li> <li> <p>-decrypt</p> <p>Decrypt the input data using a private key.</p> </li> <li> <p>-derive</p> <p>Derive a shared secret using the peer key.</p> </li> <li> <p>-kdf algorithm</p> <p>Use key derivation function algorithm.  The supported algorithms are at present TLS1-PRF and HKDF. Note: additional parameters and the KDF output length will normally have to be set for this to work. See EVP_PKEY_CTX_set_hkdf_md(3) and EVP_PKEY_CTX_set_tls1_prf_md(3) for the supported string parameters of each algorithm.</p> </li> <li> <p>-kdflen length</p> <p>Set the output length for KDF.</p> </li> <li> <p>-pkeyopt opt:value</p> <p>Public key options specified as opt:value. See NOTES below for more details.</p> </li> <li> <p>-hexdump</p> <p>hex dump the output data.</p> </li> <li> <p>-asn1parse</p> <p>Parse the ASN.1 output data, this is useful when combined with the -verifyrecover option when an ASN1 structure is signed.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause pkeyutl to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-engine_impl</p> <p>When used with the -engine option, it specifies to also use engine id for crypto operations.</p> </li> </ul>"},{"location":"man1/pkeyutl/#notes","title":"NOTES","text":"<p>The operations and options supported vary according to the key algorithm and its implementation. The OpenSSL operations and options are indicated below.</p> <p>Unless otherwise mentioned all algorithms support the digest:alg option which specifies the digest in use for sign, verify and verifyrecover operations. The value alg should represent a digest name as used in the EVP_get_digestbyname() function for example sha1. This value is not used to hash the input data. It is used (by some algorithms) for sanity-checking the lengths of data passed in to the pkeyutl and for creating the structures that make up the signature (e.g. DigestInfo in RSASSA PKCS#1 v1.5 signatures).</p> <p>This utility does not hash the input data but rather it will use the data directly as input to the signature algorithm. Depending on the key type, signature type, and mode of padding, the maximum acceptable lengths of input data differ. The signed data can't be longer than the key modulus with RSA. In case of ECDSA and DSA the data shouldn't be longer than the field size, otherwise it will be silently truncated to the field size. In any event the input size must not be larger than the largest supported digest size.</p> <p>In other words, if the value of digest is sha1 the input should be the 20 bytes long binary encoding of the SHA-1 hash function output.</p> <p>The Ed25519 and Ed448 signature algorithms are not supported by this utility. They accept non-hashed input, but this utility can only be used to sign hashed input.</p>"},{"location":"man1/pkeyutl/#rsa-algorithm","title":"RSA ALGORITHM","text":"<p>The RSA algorithm generally supports the encrypt, decrypt, sign, verify and verifyrecover operations. However, some padding modes support only a subset of these operations. The following additional pkeyopt values are supported:</p> <ul> <li> <p>rsa_padding_mode:mode</p> <p>This sets the RSA padding mode. Acceptable values for mode are pkcs1 for PKCS#1 padding, sslv23 for SSLv23 padding, none for no padding, oaep for OAEP mode, x931 for X9.31 mode and pss for PSS.</p> <p>In PKCS#1 padding if the message digest is not set then the supplied data is signed or verified directly instead of using a DigestInfo structure. If a digest is set then the a DigestInfo structure is used and its the length must correspond to the digest type.</p> <p>For oaep mode only encryption and decryption is supported.</p> <p>For x931 if the digest type is set it is used to format the block data otherwise the first byte is used to specify the X9.31 digest ID. Sign, verify and verifyrecover are can be performed in this mode.</p> <p>For pss mode only sign and verify are supported and the digest type must be specified.</p> </li> <li> <p>rsa_pss_saltlen:len</p> <p>For pss mode only this option specifies the salt length. Three special values are supported: \"digest\" sets the salt length to the digest length, \"max\" sets the salt length to the maximum permissible value. When verifying \"auto\" causes the salt length to be automatically determined based on the PSS block structure.</p> </li> <li> <p>rsa_mgf1_md:digest</p> <p>For PSS and OAEP padding sets the MGF1 digest. If the MGF1 digest is not explicitly set in PSS mode then the signing digest is used.</p> </li> <li> <p>rsa_oaep_md:digest</p> <p>Sets the digest used for the OAEP hash function. If not explicitly set then SHA1 is used.</p> </li> </ul>"},{"location":"man1/pkeyutl/#rsa-pss-algorithm","title":"RSA-PSS ALGORITHM","text":"<p>The RSA-PSS algorithm is a restricted version of the RSA algorithm which only supports the sign and verify operations with PSS padding. The following additional pkeyopt values are supported:</p> <ul> <li> <p>rsa_padding_mode:mode, rsa_pss_saltlen:len, rsa_mgf1_md:digest</p> <p>These have the same meaning as the RSA algorithm with some additional restrictions. The padding mode can only be set to pss which is the default value.</p> <p>If the key has parameter restrictions than the digest, MGF1 digest and salt length are set to the values specified in the parameters. The digest and MG cannot be changed and the salt length cannot be set to a value less than the minimum restriction.</p> </li> </ul>"},{"location":"man1/pkeyutl/#dsa-algorithm","title":"DSA ALGORITHM","text":"<p>The DSA algorithm supports signing and verification operations only. Currently there are no additional -pkeyopt options other than digest. The SHA1 digest is assumed by default.</p>"},{"location":"man1/pkeyutl/#dh-algorithm","title":"DH ALGORITHM","text":"<p>The DH algorithm only supports the derivation operation and no additional -pkeyopt options.</p>"},{"location":"man1/pkeyutl/#ec-algorithm","title":"EC ALGORITHM","text":"<p>The EC algorithm supports sign, verify and derive operations. The sign and verify operations use ECDSA and derive uses ECDH. SHA1 is assumed by default for the -pkeyopt digest option.</p>"},{"location":"man1/pkeyutl/#x25519-and-x448-algorithms","title":"X25519 and X448 ALGORITHMS","text":"<p>The X25519 and X448 algorithms support key derivation only. Currently there are no additional options.</p>"},{"location":"man1/pkeyutl/#examples","title":"EXAMPLES","text":"<p>Sign some data using a private key:</p> <pre><code>openssl pkeyutl -sign -in file -inkey key.pem -out sig\n</code></pre> <p>Recover the signed data (e.g. if an RSA key is used):</p> <pre><code>openssl pkeyutl -verifyrecover -in sig -inkey key.pem\n</code></pre> <p>Verify the signature (e.g. a DSA key):</p> <pre><code>openssl pkeyutl -verify -in file -sigfile sig -inkey key.pem\n</code></pre> <p>Sign data using a message digest value (this is currently only valid for RSA):</p> <pre><code>openssl pkeyutl -sign -in file -inkey key.pem -out sig -pkeyopt digest:sha256\n</code></pre> <p>Derive a shared secret value:</p> <pre><code>openssl pkeyutl -derive -inkey key.pem -peerkey pubkey.pem -out secret\n</code></pre> <p>Hexdump 48 bytes of TLS1 PRF using digest SHA256 and shared secret and seed consisting of the single byte 0xFF:</p> <pre><code>openssl pkeyutl -kdf TLS1-PRF -kdflen 48 -pkeyopt md:SHA256 \\\n   -pkeyopt hexsecret:ff -pkeyopt hexseed:ff -hexdump\n</code></pre> <p>Decrypt some data using a private key with OAEP padding using SHA256:</p> <pre><code>openssl pkeyutl -decrypt -in file -inkey key.pem -out secret \\\n   -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256\n</code></pre>"},{"location":"man1/pkeyutl/#see-also","title":"SEE ALSO","text":"<p>genpkey(1), pkey(1), rsautl(1) dgst(1), rsa(1), genrsa(1), EVP_PKEY_CTX_set_hkdf_md(3), EVP_PKEY_CTX_set_tls1_prf_md(3)</p>"},{"location":"man1/pkeyutl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/prime/","title":"prime","text":""},{"location":"man1/prime/#name","title":"NAME","text":"<p>openssl-prime, prime - compute prime numbers</p>"},{"location":"man1/prime/#synopsis","title":"SYNOPSIS","text":"<p>openssl prime [-help] [-hex] [-generate] [-bits] [-safe] [-checks] [number...]</p>"},{"location":"man1/prime/#description","title":"DESCRIPTION","text":"<p>The prime command checks if the specified numbers are prime.</p> <p>If no numbers are given on the command line, the -generate flag should be used to generate primes according to the requirements specified by the rest of the flags.</p>"},{"location":"man1/prime/#options","title":"OPTIONS","text":"<ul> <li> <p>[-help]</p> <p>Display an option summary.</p> </li> <li> <p>[-hex]</p> <p>Generate hex output.</p> </li> <li> <p>[-generate]</p> <p>Generate a prime number.</p> </li> <li> <p>[-bits num]</p> <p>Generate a prime with num bits.</p> </li> <li> <p>[-safe]</p> <p>When used with -generate, generates a \"safe\" prime. If the number generated is n, then check that (n-1)/2 is also prime.</p> </li> <li> <p>[-checks num]</p> <p>Perform the checks num times to see that the generated number is prime.  The default is 20.</p> </li> </ul>"},{"location":"man1/prime/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/rand/","title":"rand","text":""},{"location":"man1/rand/#name","title":"NAME","text":"<p>openssl-rand, rand - generate pseudo-random bytes</p>"},{"location":"man1/rand/#synopsis","title":"SYNOPSIS","text":"<p>openssl rand [-help] [-out file] [-rand file...] [-writerand file] [-base64] [-hex] num</p>"},{"location":"man1/rand/#description","title":"DESCRIPTION","text":"<p>This command generates num random bytes using a cryptographically secure pseudo random number generator (CSPRNG).</p> <p>The random bytes are generated using the RAND_bytes(3) function, which provides a security level of 256 bits, provided it managed to seed itself successfully from a trusted operating system entropy source. Otherwise, the command will fail with a nonzero error code. For more details, see RAND_bytes(3), RAND(7), and RAND_DRBG(7).</p>"},{"location":"man1/rand/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-out file</p> <p>Write to file instead of standard output.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others. Explicitly specifying a seed file is in general not necessary, see the \"NOTES\" section for more information.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-base64</p> <p>Perform base64 encoding on the output.</p> </li> <li> <p>-hex</p> <p>Show the output as a hex string.</p> </li> </ul>"},{"location":"man1/rand/#notes","title":"NOTES","text":"<p>Prior to OpenSSL 1.1.1, it was common for applications to store information about the state of the random-number generator in a file that was loaded at startup and rewritten upon exit. On modern operating systems, this is generally no longer necessary as OpenSSL will seed itself from a trusted entropy source provided by the operating system. The -rand  and -writerand  flags are still supported for special platforms or circumstances that might require them.</p> <p>It is generally an error to use the same seed file more than once and every use of -rand should be paired with -writerand.</p>"},{"location":"man1/rand/#see-also","title":"SEE ALSO","text":"<p>RAND_bytes(3), RAND(7), RAND_DRBG(7)</p>"},{"location":"man1/rand/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/rehash/","title":"rehash","text":""},{"location":"man1/rehash/#name","title":"NAME","text":"<p>openssl-c_rehash, openssl-rehash, c_rehash, rehash - Create symbolic links to files named by the hash values</p>"},{"location":"man1/rehash/#synopsis","title":"SYNOPSIS","text":"<p>openssl rehash [-h] [-help] [-old] [-n] [-v] [ directory...]</p> <p>c_rehash flags...</p>"},{"location":"man1/rehash/#description","title":"DESCRIPTION","text":"<p>On some platforms, the OpenSSL rehash command is available as an external script called c_rehash.  They are functionally equivalent, except for minor differences noted below.</p> <p>rehash scans directories and calculates a hash value of each <code>.pem</code>, <code>.crt</code>, <code>.cer</code>, or <code>.crl</code> file in the specified directory list and creates symbolic links for each file, where the name of the link is the hash value. (If the platform does not support symbolic links, a copy is made.) This utility is useful as many programs that use OpenSSL require directories to be set up like this in order to find certificates.</p> <p>If any directories are named on the command line, then those are processed in turn. If not, then the SSL_CERT_DIR environment variable is consulted; this should be a colon-separated list of directories, like the Unix PATH variable. If that is not set then the default directory (installation-specific but often /usr/local/ssl/certs) is processed.</p> <p>In order for a directory to be processed, the user must have write permissions on that directory, otherwise an error will be generated.</p> <p>The links created are of the form <code>HHHHHHHH.D</code>, where each H is a hexadecimal character and D is a single decimal digit. When processing a directory, rehash will first remove all links that have a name in that syntax, even if they are being used for some other purpose. To skip the removal step, use the -n flag. Hashes for CRL's look similar except the letter r appears after the period, like this: <code>HHHHHHHH.rD</code>.</p> <p>Multiple objects may have the same hash; they will be indicated by incrementing the D value. Duplicates are found by comparing the full SHA-1 fingerprint. A warning will be displayed if a duplicate is found.</p> <p>A warning will also be displayed if there are files that cannot be parsed as either a certificate or a CRL or if more than one such object appears in the file.</p>"},{"location":"man1/rehash/#script-configuration","title":"Script Configuration","text":"<p>The c_rehash script uses the openssl program to compute the hashes and fingerprints. If not found in the user's PATH, then set the OPENSSL environment variable to the full pathname. Any program can be used, it will be invoked as follows for either a certificate or CRL:</p> <pre><code>$OPENSSL x509 -hash -fingerprint -noout -in FILENAME\n$OPENSSL crl -hash -fingerprint -noout -in FILENAME\n</code></pre> <p>where FILENAME is the filename. It must output the hash of the file on the first line, and the fingerprint on the second, optionally prefixed with some text and an equals sign.</p>"},{"location":"man1/rehash/#options","title":"OPTIONS","text":"<ul> <li> <p>-help -h</p> <p>Display a brief usage message.</p> </li> <li> <p>-old</p> <p>Use old-style hashing (MD5, as opposed to SHA-1) for generating links to be used for releases before 1.0.0. Note that current versions will not use the old style.</p> </li> <li> <p>-n</p> <p>Do not remove existing links. This is needed when keeping new and old-style links in the same directory.</p> </li> <li> <p>-compat</p> <p>Generate links for both old-style (MD5) and new-style (SHA1) hashing. This allows releases before 1.0.0 to use these links along-side newer releases.</p> </li> <li> <p>-v</p> <p>Print messages about old links removed and new links created. By default, rehash only lists each directory as it is processed.</p> </li> </ul>"},{"location":"man1/rehash/#environment","title":"ENVIRONMENT","text":"<ul> <li> <p>OPENSSL</p> <p>The path to an executable to use to generate hashes and fingerprints (see above).</p> </li> <li> <p>SSL_CERT_DIR</p> <p>Colon separated list of directories to operate on. Ignored if directories are listed on the command line.</p> </li> </ul>"},{"location":"man1/rehash/#see-also","title":"SEE ALSO","text":"<p>openssl(1), crl(1). x509(1).</p>"},{"location":"man1/rehash/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/req/","title":"req","text":""},{"location":"man1/req/#name","title":"NAME","text":"<p>openssl-req, req - PKCS#10 certificate request and certificate generating utility</p>"},{"location":"man1/req/#synopsis","title":"SYNOPSIS","text":"<p>openssl req [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-text] [-pubkey] [-noout] [-verify] [-modulus] [-new] [-rand file...] [-writerand file] [-newkey rsa:bits] [-newkey alg:file] [-nodes] [-key filename] [-keyform PEM|DER] [-keyout filename] [-keygen_engine id] [-digest] [-config filename] [-multivalue-rdn] [-x509] [-days n] [-set_serial n] [-newhdr] [-addext ext] [-extensions section] [-reqexts section] [-precert] [-utf8] [-nameopt] [-reqopt] [-subject] [-subj arg] [-sigopt nm:v] [-batch] [-verbose] [-engine id]</p>"},{"location":"man1/req/#description","title":"DESCRIPTION","text":"<p>The req command primarily creates and processes certificate requests in PKCS#10 format. It can additionally create self signed certificates for use as root CAs for example.</p>"},{"location":"man1/req/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option uses an ASN1 DER encoded form compatible with the PKCS#10. The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a request from or standard input if this option is not specified. A request is only read if the creation options (-new and -newkey) are not specified.</p> </li> <li> <p>-sigopt nm:v</p> <p>Pass options to the signature algorithm during sign or verify operations. Names and values of these options are algorithm-specific.</p> </li> <li> <p>-passin arg</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-passout arg</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-text</p> <p>Prints out the certificate request in text form.</p> </li> <li> <p>-subject</p> <p>Prints out the request subject (or certificate subject if -x509 is specified)</p> </li> <li> <p>-pubkey</p> <p>Outputs the public key.</p> </li> <li> <p>-noout</p> <p>This option prevents output of the encoded version of the request.</p> </li> <li> <p>-modulus</p> <p>This option prints out the value of the modulus of the public key contained in the request.</p> </li> <li> <p>-verify</p> <p>Verifies the signature on the request.</p> </li> <li> <p>-new</p> <p>This option generates a new certificate request. It will prompt the user for the relevant field values. The actual fields prompted for and their maximum and minimum sizes are specified in the configuration file and any requested extensions.</p> <p>If the -key option is not used it will generate a new RSA private key using information specified in the configuration file.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-newkey arg</p> <p>This option creates a new certificate request and a new private key. The argument takes one of several forms. rsa:nbits, where nbits is the number of bits, generates an RSA key nbits in size. If nbits is omitted, i.e. -newkey rsa specified, the default key size, specified in the configuration file is used.</p> <p>All other algorithms support the -newkey alg:file form, where file may be an algorithm parameter file, created by the genpkey -genparam command or and X.509 certificate for a key with appropriate algorithm.</p> <p>param:file generates a key using the parameter file or certificate file, the algorithm is determined by the parameters. algname:file use algorithm algname and parameter file file: the two algorithms must match or an error occurs. algname just uses algorithm algname, and parameters, if necessary should be specified via -pkeyopt parameter.</p> <p>dsa:filename generates a DSA key using the parameters in the file filename. ec:filename generates EC key (usable both with ECDSA or ECDH algorithms), gost2001:filename generates GOST R 34.10-2001 key (requires ccgost engine configured in the configuration file). If just gost2001 is specified a parameter set should be specified by -pkeyopt paramset:X</p> </li> <li> <p>-pkeyopt opt:value</p> <p>Set the public key algorithm option opt to value. The precise set of options supported depends on the public key algorithm used and its implementation. See KEY GENERATION OPTIONS in the genpkey manual page for more details.</p> </li> <li> <p>-key filename</p> <p>This specifies the file to read the private key from. It also accepts PKCS#8 format private keys for PEM format files.</p> </li> <li> <p>-keyform PEM|DER</p> <p>The format of the private key file specified in the -key argument. PEM is the default.</p> </li> <li> <p>-keyout filename</p> <p>This gives the filename to write the newly created private key to. If this option is not specified then the filename present in the configuration file is used.</p> </li> <li> <p>-nodes</p> <p>If this option is specified then if a private key is created it will not be encrypted.</p> </li> <li> <p>-digest</p> <p>This specifies the message digest to sign the request. Any digest supported by the OpenSSL dgst command can be used. This overrides the digest algorithm specified in the configuration file.</p> <p>Some public key algorithms may override this choice. For instance, DSA signatures always use SHA1, GOST R 34.10 signatures always use GOST R 34.11-94 (-md_gost94), Ed25519 and Ed448 never use any digest.</p> </li> <li> <p>-config filename</p> <p>This allows an alternative configuration file to be specified. Optional; for a description of the default value, see \"COMMAND SUMMARY\" in openssl(1).</p> </li> <li> <p>-subj arg</p> <p>Sets subject name for new request or supersedes the subject name when processing a request. The arg must be formatted as /type0=value0/type1=value1/type2=.... Keyword characters may be escaped by \\ (backslash), and whitespace is retained. Empty values are permitted, but the corresponding type will not be included in the request.</p> </li> <li> <p>-multivalue-rdn</p> <p>This option causes the -subj argument to be interpreted with full support for multivalued RDNs. Example:</p> <p>/DC=org/DC=OpenSSL/DC=users/UID=123456+CN=John Doe</p> <p>If -multi-rdn is not used then the UID value is 123456+CN=John Doe.</p> </li> <li> <p>-x509</p> <p>This option outputs a self signed certificate instead of a certificate request. This is typically used to generate a test certificate or a self signed root CA. The extensions added to the certificate (if any) are specified in the configuration file. Unless specified using the set_serial option, a large random number will be used for the serial number.</p> <p>If existing request is specified with the -in option, it is converted to the self signed certificate otherwise new request is created.</p> </li> <li> <p>-days n</p> <p>When the -x509 option is being used this specifies the number of days to certify the certificate for, otherwise it is ignored. n should be a positive integer. The default is 30 days.</p> </li> <li> <p>-set_serial n</p> <p>Serial number to use when outputting a self signed certificate. This may be specified as a decimal value or a hex value if preceded by 0x.</p> </li> <li> <p>-addext ext</p> <p>Add a specific extension to the certificate (if the -x509 option is present) or certificate request.  The argument must have the form of a key=value pair as it would appear in a config file.</p> <p>This option can be given multiple times.</p> </li> <li> <p>-extensions section</p> </li> <li> <p>-reqexts section</p> <p>These options specify alternative sections to include certificate extensions (if the -x509 option is present) or certificate request extensions. This allows several different sections to be used in the same configuration file to specify requests for a variety of purposes.</p> </li> <li> <p>-precert</p> <p>A poison extension will be added to the certificate, making it a \"pre-certificate\" (see RFC6962). This can be submitted to Certificate Transparency logs in order to obtain signed certificate timestamps (SCTs). These SCTs can then be embedded into the pre-certificate as an extension, before removing the poison and signing the certificate.</p> <p>This implies the -new flag.</p> </li> <li> <p>-utf8</p> <p>This option causes field values to be interpreted as UTF8 strings, by default they are interpreted as ASCII. This means that the field values, whether prompted from a terminal or obtained from a configuration file, must be valid UTF8 strings.</p> </li> <li> <p>-nameopt option</p> <p>Option which determines how the subject or issuer names are displayed. The option argument can be a single option or multiple options separated by commas.  Alternatively the -nameopt switch may be used more than once to set multiple options. See the x509(1) manual page for details.</p> </li> <li> <p>-reqopt</p> <p>Customise the output format used with -text. The option argument can be a single option or multiple options separated by commas.</p> <p>See discussion of the  -certopt parameter in the x509(1) command.</p> </li> <li> <p>-newhdr</p> <p>Adds the word NEW to the PEM file header and footer lines on the outputted request. Some software (Netscape certificate server) and some CAs need this.</p> </li> <li> <p>-batch</p> <p>Non-interactive mode.</p> </li> <li> <p>-verbose</p> <p>Print extra details about the operations being performed.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause req to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-keygen_engine id</p> <p>Specifies an engine (by its unique id string) which would be used for key generation operations.</p> </li> </ul>"},{"location":"man1/req/#configuration-file-format","title":"CONFIGURATION FILE FORMAT","text":"<p>The configuration options are specified in the req section of the configuration file. As with all configuration files if no value is specified in the specific section (i.e. req) then the initial unnamed or default section is searched too.</p> <p>The options available are described in detail below.</p> <ul> <li> <p>input_password output_password</p> <p>The passwords for the input private key file (if present) and the output private key file (if one will be created). The command line options passin and passout override the configuration file values.</p> </li> <li> <p>default_bits</p> <p>Specifies the default key size in bits.</p> <p>This option is used in conjunction with the -new option to generate a new key. It can be overridden by specifying an explicit key size in the -newkey option. The smallest accepted key size is 512 bits. If no key size is specified then 2048 bits is used.</p> </li> <li> <p>default_keyfile</p> <p>This is the default filename to write a private key to. If not specified the key is written to standard output. This can be overridden by the -keyout option.</p> </li> <li> <p>oid_file</p> <p>This specifies a file containing additional OBJECT IDENTIFIERS. Each line of the file should consist of the numerical form of the object identifier followed by white space then the short name followed by white space and finally the long name.</p> </li> <li> <p>oid_section</p> <p>This specifies a section in the configuration file containing extra object identifiers. Each line should consist of the short name of the object identifier followed by = and the numerical form. The short and long names are the same when this option is used.</p> </li> <li> <p>RANDFILE</p> <p>At startup the specified file is loaded into the random number generator, and at exit 256 bytes will be written to it. It is used for private key generation.</p> </li> <li> <p>encrypt_key</p> <p>If this is set to no then if a private key is generated it is not encrypted. This is equivalent to the -nodes command line option. For compatibility encrypt_rsa_key is an equivalent option.</p> </li> <li> <p>default_md</p> <p>This option specifies the digest algorithm to use. Any digest supported by the OpenSSL dgst command can be used. This option can be overridden on the command line. Certain signing algorithms (i.e. Ed25519 and Ed448) will ignore any digest that has been set.</p> </li> <li> <p>string_mask</p> <p>This option masks out the use of certain string types in certain fields. Most users will not need to change this option.</p> <p>It can be set to several values default which is also the default option uses PrintableStrings, T61Strings and BMPStrings if the pkix value is used then only PrintableStrings and BMPStrings will be used. This follows the PKIX recommendation in RFC2459. If the utf8only option is used then only UTF8Strings will be used: this is the PKIX recommendation in RFC2459 after 2003. Finally the nombstr option just uses PrintableStrings and T61Strings: certain software has problems with BMPStrings and UTF8Strings: in particular Netscape.</p> </li> <li> <p>req_extensions</p> <p>This specifies the configuration file section containing a list of extensions to add to the certificate request. It can be overridden by the -reqexts command line switch. See the x509v3_config(5) manual page for details of the extension section format.</p> </li> <li> <p>x509_extensions</p> <p>This specifies the configuration file section containing a list of extensions to add to certificate generated when the -x509 switch is used. It can be overridden by the -extensions command line switch.</p> </li> <li> <p>prompt</p> <p>If set to the value no this disables prompting of certificate fields and just takes values from the config file directly. It also changes the expected format of the distinguished_name and attributes sections.</p> </li> <li> <p>utf8</p> <p>If set to the value yes then field values to be interpreted as UTF8 strings, by default they are interpreted as ASCII. This means that the field values, whether prompted from a terminal or obtained from a configuration file, must be valid UTF8 strings.</p> </li> <li> <p>attributes</p> <p>This specifies the section containing any request attributes: its format is the same as distinguished_name. Typically these may contain the challengePassword or unstructuredName types. They are currently ignored by OpenSSL's request signing utilities but some CAs might want them.</p> </li> <li> <p>distinguished_name</p> <p>This specifies the section containing the distinguished name fields to prompt for when generating a certificate or certificate request. The format is described in the next section.</p> </li> </ul>"},{"location":"man1/req/#distinguished-name-and-attribute-section-format","title":"DISTINGUISHED NAME AND ATTRIBUTE SECTION FORMAT","text":"<p>There are two separate formats for the distinguished name and attribute sections. If the prompt option is set to no then these sections just consist of field names and values: for example,</p> <pre><code>CN=My Name\nOU=My Organization\nemailAddress=someone@somewhere.org\n</code></pre> <p>This allows external programs (e.g. GUI based) to generate a template file with all the field names and values and just pass it to req. An example of this kind of configuration file is contained in the EXAMPLES section.</p> <p>Alternatively if the prompt option is absent or not set to no then the file contains field prompting information. It consists of lines of the form:</p> <pre><code>fieldName=\"prompt\"\nfieldName_default=\"default field value\"\nfieldName_min= 2\nfieldName_max= 4\n</code></pre> <p>\"fieldName\" is the field name being used, for example commonName (or CN). The \"prompt\" string is used to ask the user to enter the relevant details. If the user enters nothing then the default value is used if no default value is present then the field is omitted. A field can still be omitted if a default value is present if the user just enters the '.' character.</p> <p>The number of characters entered must be between the fieldName_min and fieldName_max limits: there may be additional restrictions based on the field being used (for example countryName can only ever be two characters long and must fit in a PrintableString).</p> <p>Some fields (such as organizationName) can be used more than once in a DN. This presents a problem because configuration files will not recognize the same name occurring twice. To avoid this problem if the fieldName contains some characters followed by a full stop they will be ignored. So for example a second organizationName can be input by calling it \"1.organizationName\".</p> <p>The actual permitted field names are any object identifier short or long names. These are compiled into OpenSSL and include the usual values such as commonName, countryName, localityName, organizationName, organizationalUnitName, stateOrProvinceName. Additionally emailAddress is included as well as name, surname, givenName, initials, and dnQualifier.</p> <p>Additional object identifiers can be defined with the oid_file or oid_section options in the configuration file. Any additional fields will be treated as though they were a DirectoryString.</p>"},{"location":"man1/req/#examples","title":"EXAMPLES","text":"<p>Examine and verify certificate request:</p> <pre><code>openssl req -in req.pem -text -verify -noout\n</code></pre> <p>Create a private key and then generate a certificate request from it:</p> <pre><code>openssl genrsa -out key.pem 2048\nopenssl req -new -key key.pem -out req.pem\n</code></pre> <p>The same but just using req:</p> <pre><code>openssl req -newkey rsa:2048 -keyout key.pem -out req.pem\n</code></pre> <p>Generate a self signed root certificate:</p> <pre><code>openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem\n</code></pre> <p>Example of a file pointed to by the oid_file option:</p> <pre><code>1.2.3.4        shortName       A longer Name\n1.2.3.6        otherName       Other longer Name\n</code></pre> <p>Example of a section pointed to by oid_section making use of variable expansion:</p> <pre><code>testoid1=1.2.3.5\ntestoid2=${testoid1}.6\n</code></pre> <p>Sample configuration file prompting for field values:</p> <pre><code>[ req ]\ndefault_bits           = 2048\ndefault_keyfile        = privkey.pem\ndistinguished_name     = req_distinguished_name\nattributes             = req_attributes\nreq_extensions         = v3_ca\n\ndirstring_type = nobmp\n\n[ req_distinguished_name ]\ncountryName                    = Country Name (2 letter code)\ncountryName_default            = AU\ncountryName_min                = 2\ncountryName_max                = 2\n\nlocalityName                   = Locality Name (eg, city)\n\norganizationalUnitName         = Organizational Unit Name (eg, section)\n\ncommonName                     = Common Name (eg, YOUR name)\ncommonName_max                 = 64\n\nemailAddress                   = Email Address\nemailAddress_max               = 40\n\n[ req_attributes ]\nchallengePassword              = A challenge password\nchallengePassword_min          = 4\nchallengePassword_max          = 20\n\n[ v3_ca ]\n\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid:always,issuer:always\nbasicConstraints = critical, CA:true\n</code></pre> <p>Sample configuration containing all field values:</p> <pre><code>RANDFILE               = $ENV::HOME/.rnd\n\n[ req ]\ndefault_bits           = 2048\ndefault_keyfile        = keyfile.pem\ndistinguished_name     = req_distinguished_name\nattributes             = req_attributes\nprompt                 = no\noutput_password        = mypass\n\n[ req_distinguished_name ]\nC                      = GB\nST                     = Test State or Province\nL                      = Test Locality\nO                      = Organization Name\nOU                     = Organizational Unit Name\nCN                     = Common Name\nemailAddress           = test@email.address\n\n[ req_attributes ]\nchallengePassword              = A challenge password\n</code></pre> <p>Example of giving the most common attributes (subject and extensions) on the command line:</p> <pre><code>openssl req -new -subj \"/C=GB/CN=foo\" \\\n                 -addext \"subjectAltName = DNS:foo.co.uk\" \\\n                 -addext \"certificatePolicies = 1.2.3.4\" \\\n                 -newkey rsa:2048 -keyout key.pem -out req.pem\n</code></pre>"},{"location":"man1/req/#notes","title":"NOTES","text":"<p>The header and footer lines in the PEM format are normally:</p> <pre><code>-----BEGIN CERTIFICATE REQUEST-----\n-----END CERTIFICATE REQUEST-----\n</code></pre> <p>some software (some versions of Netscape certificate server) instead needs:</p> <pre><code>-----BEGIN NEW CERTIFICATE REQUEST-----\n-----END NEW CERTIFICATE REQUEST-----\n</code></pre> <p>which is produced with the -newhdr option but is otherwise compatible. Either form is accepted transparently on input.</p> <p>The certificate requests generated by Xenroll with MSIE have extensions added. It includes the keyUsage extension which determines the type of key (signature only or general purpose) and any additional OIDs entered by the script in an extendedKeyUsage extension.</p>"},{"location":"man1/req/#diagnostics","title":"DIAGNOSTICS","text":"<p>The following messages are frequently asked about:</p> <pre><code>    Using configuration from /some/path/openssl.cnf\n    Unable to load config info\n</code></pre> <p>This is followed some time later by...</p> <pre><code>    unable to find 'distinguished_name' in config\n    problems making Certificate Request\n</code></pre> <p>The first error message is the clue: it can't find the configuration file! Certain operations (like examining a certificate request) don't need a configuration file so its use isn't enforced. Generation of certificates or requests however does need a configuration file. This could be regarded as a bug.</p> <p>Another puzzling message is this:</p> <pre><code>    Attributes:\n        a0:00\n</code></pre> <p>this is displayed when no attributes are present and the request includes the correct empty SET OF structure (the DER encoding of which is 0xa0 0x00). If you just see:</p> <pre><code>    Attributes:\n</code></pre> <p>then the SET OF is missing and the encoding is technically invalid (but it is tolerated). See the description of the command line option -asn1-kludge for more information.</p>"},{"location":"man1/req/#bugs","title":"BUGS","text":"<p>OpenSSL's handling of T61Strings (aka TeletexStrings) is broken: it effectively treats them as ISO-8859-1 (Latin 1), Netscape and MSIE have similar behaviour. This can cause problems if you need characters that aren't available in PrintableStrings and you don't want to or can't use BMPStrings.</p> <p>As a consequence of the T61String handling the only correct way to represent accented characters in OpenSSL is to use a BMPString: unfortunately Netscape currently chokes on these. If you have to use accented characters with Netscape and MSIE then you currently need to use the invalid T61String form.</p> <p>The current prompting is not very friendly. It doesn't allow you to confirm what you've just entered. Other things like extensions in certificate requests are statically defined in the configuration file. Some of these: like an email address in subjectAltName should be input by the user.</p>"},{"location":"man1/req/#see-also","title":"SEE ALSO","text":"<p>x509(1), ca(1), genrsa(1), gendsa(1), config(5), x509v3_config(5)</p>"},{"location":"man1/req/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/rsa/","title":"rsa","text":""},{"location":"man1/rsa/#name","title":"NAME","text":"<p>openssl-rsa, rsa - RSA key processing tool</p>"},{"location":"man1/rsa/#synopsis","title":"SYNOPSIS","text":"<p>openssl rsa [-help] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-aes128] [-aes192] [-aes256] [-aria128] [-aria192] [-aria256] [-camellia128] [-camellia192] [-camellia256] [-des] [-des3] [-idea] [-text] [-noout] [-modulus] [-check] [-pubin] [-pubout] [-RSAPublicKey_in] [-RSAPublicKey_out] [-engine id]</p>"},{"location":"man1/rsa/#description","title":"DESCRIPTION","text":"<p>The rsa command processes RSA keys. They can be converted between various forms and their components printed out. Note this command uses the traditional SSLeay compatible format for private key encryption: newer applications should use the more secure PKCS#8 format using the pkcs8 utility.</p>"},{"location":"man1/rsa/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option uses an ASN1 DER encoded form compatible with the PKCS#1 RSAPrivateKey or SubjectPublicKeyInfo format. The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines. On input PKCS#8 format private keys are also accepted.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.</p> </li> <li> <p>-passin arg</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write a key to or standard output if this option is not specified. If any encryption options are set then a pass phrase will be prompted for. The output filename should not be the same as the input filename.</p> </li> <li> <p>-passout password</p> <p>The output file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-aes128, -aes192, -aes256, -aria128, -aria192, -aria256, -camellia128, -camellia192, -camellia256, -des, -des3, -idea</p> <p>These options encrypt the private key with the specified cipher before outputting it. A pass phrase is prompted for. If none of these options is specified the key is written in plain text. This means that using the rsa utility to read in an encrypted key with no encryption option can be used to remove the pass phrase from a key, or by setting the encryption options it can be use to add or change the pass phrase. These options can only be used with PEM format output files.</p> </li> <li> <p>-text</p> <p>Prints out the various public or private key components in plain text in addition to the encoded version.</p> </li> <li> <p>-noout</p> <p>This option prevents output of the encoded version of the key.</p> </li> <li> <p>-modulus</p> <p>This option prints out the value of the modulus of the key.</p> </li> <li> <p>-check</p> <p>This option checks the consistency of an RSA private key.</p> </li> <li> <p>-pubin</p> <p>By default a private key is read from the input file: with this option a public key is read instead.</p> </li> <li> <p>-pubout</p> <p>By default a private key is output: with this option a public key will be output instead. This option is automatically set if the input is a public key.</p> </li> <li> <p>-RSAPublicKey_in, -RSAPublicKey_out</p> <p>Like -pubin and -pubout except RSAPublicKey format is used instead.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause rsa to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/rsa/#notes","title":"NOTES","text":"<p>The PEM private key format uses the header and footer lines:</p> <pre><code>-----BEGIN RSA PRIVATE KEY-----\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>The PEM public key format uses the header and footer lines:</p> <pre><code>-----BEGIN PUBLIC KEY-----\n-----END PUBLIC KEY-----\n</code></pre> <p>The PEM RSAPublicKey format uses the header and footer lines:</p> <pre><code>-----BEGIN RSA PUBLIC KEY-----\n-----END RSA PUBLIC KEY-----\n</code></pre>"},{"location":"man1/rsa/#examples","title":"EXAMPLES","text":"<p>To remove the pass phrase on an RSA private key:</p> <pre><code>openssl rsa -in key.pem -out keyout.pem\n</code></pre> <p>To encrypt a private key using triple DES:</p> <pre><code>openssl rsa -in key.pem -des3 -out keyout.pem\n</code></pre> <p>To convert a private key from PEM to DER format:</p> <pre><code>openssl rsa -in key.pem -outform DER -out keyout.der\n</code></pre> <p>To print out the components of a private key to standard output:</p> <pre><code>openssl rsa -in key.pem -text -noout\n</code></pre> <p>To just output the public part of a private key:</p> <pre><code>openssl rsa -in key.pem -pubout -out pubkey.pem\n</code></pre> <p>Output the public part of a private key in RSAPublicKey format:</p> <pre><code>openssl rsa -in key.pem -RSAPublicKey_out -out pubkey.pem\n</code></pre>"},{"location":"man1/rsa/#bugs","title":"BUGS","text":"<p>There should be an option that automatically handles .key files, without having to manually edit them.</p>"},{"location":"man1/rsa/#see-also","title":"SEE ALSO","text":"<p>pkcs8(1), dsa(1), genrsa(1), gendsa(1)</p>"},{"location":"man1/rsa/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/rsautl/","title":"rsautl","text":""},{"location":"man1/rsautl/#name","title":"NAME","text":"<p>openssl-rsautl, rsautl - RSA utility</p>"},{"location":"man1/rsautl/#synopsis","title":"SYNOPSIS","text":"<p>openssl rsautl [-help] [-in file] [-out file] [-inkey file] [-keyform PEM|DER|ENGINE] [-pubin] [-certin] [-sign] [-verify] [-encrypt] [-decrypt] [-rand file...] [-writerand file] [-pkcs] [-ssl] [-raw] [-hexdump] [-asn1parse]</p>"},{"location":"man1/rsautl/#description","title":"DESCRIPTION","text":"<p>The rsautl command can be used to sign, verify, encrypt and decrypt data using the RSA algorithm.</p>"},{"location":"man1/rsautl/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read data from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-inkey file</p> <p>The input key file, by default it should be an RSA private key.</p> </li> <li> <p>-keyform PEM|DER|ENGINE</p> <p>The key format PEM, DER or ENGINE.</p> </li> <li> <p>-pubin</p> <p>The input file is an RSA public key.</p> </li> <li> <p>-certin</p> <p>The input is a certificate containing an RSA public key.</p> </li> <li> <p>-sign</p> <p>Sign the input data and output the signed result. This requires an RSA private key.</p> </li> <li> <p>-verify</p> <p>Verify the input data and output the recovered data.</p> </li> <li> <p>-encrypt</p> <p>Encrypt the input data using an RSA public key.</p> </li> <li> <p>-decrypt</p> <p>Decrypt the input data using an RSA private key.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-pkcs, -oaep, -ssl, -raw</p> <p>The padding to use: PKCS#1 v1.5 (the default), PKCS#1 OAEP, special padding used in SSL v2 backwards compatible handshakes, or no padding, respectively. For signatures, only -pkcs and -raw can be used.</p> </li> <li> <p>-hexdump</p> <p>Hex dump the output data.</p> </li> <li> <p>-asn1parse</p> <p>Parse the ASN.1 output data, this is useful when combined with the -verify option.</p> </li> </ul>"},{"location":"man1/rsautl/#notes","title":"NOTES","text":"<p>rsautl because it uses the RSA algorithm directly can only be used to sign or verify small pieces of data.</p>"},{"location":"man1/rsautl/#examples","title":"EXAMPLES","text":"<p>Sign some data using a private key:</p> <pre><code>openssl rsautl -sign -in file -inkey key.pem -out sig\n</code></pre> <p>Recover the signed data</p> <pre><code>openssl rsautl -verify -in sig -inkey key.pem\n</code></pre> <p>Examine the raw signed data:</p> <pre><code>openssl rsautl -verify -in sig -inkey key.pem -raw -hexdump\n\n0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................\n0070 - ff ff ff ff 00 68 65 6c-6c 6f 20 77 6f 72 6c 64   .....hello world\n</code></pre> <p>The PKCS#1 block formatting is evident from this. If this was done using encrypt and decrypt the block would have been of type 2 (the second byte) and random padding data visible instead of the 0xff bytes.</p> <p>It is possible to analyse the signature of certificates using this utility in conjunction with asn1parse. Consider the self signed example in certs/pca-cert.pem . Running asn1parse as follows yields:</p> <pre><code>openssl asn1parse -in pca-cert.pem\n\n   0:d=0  hl=4 l= 742 cons: SEQUENCE\n   4:d=1  hl=4 l= 591 cons:  SEQUENCE\n   8:d=2  hl=2 l=   3 cons:   cont [ 0 ]\n  10:d=3  hl=2 l=   1 prim:    INTEGER           :02\n  13:d=2  hl=2 l=   1 prim:   INTEGER           :00\n  16:d=2  hl=2 l=  13 cons:   SEQUENCE\n  18:d=3  hl=2 l=   9 prim:    OBJECT            :md5WithRSAEncryption\n  29:d=3  hl=2 l=   0 prim:    NULL\n  31:d=2  hl=2 l=  92 cons:   SEQUENCE\n  33:d=3  hl=2 l=  11 cons:    SET\n  35:d=4  hl=2 l=   9 cons:     SEQUENCE\n  37:d=5  hl=2 l=   3 prim:      OBJECT            :countryName\n  42:d=5  hl=2 l=   2 prim:      PRINTABLESTRING   :AU\n ....\n 599:d=1  hl=2 l=  13 cons:  SEQUENCE\n 601:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption\n 612:d=2  hl=2 l=   0 prim:   NULL\n 614:d=1  hl=3 l= 129 prim:  BIT STRING\n</code></pre> <p>The final BIT STRING contains the actual signature. It can be extracted with:</p> <pre><code>openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614\n</code></pre> <p>The certificate public key can be extracted with:</p> <pre><code>openssl x509 -in test/testx509.pem -pubkey -noout &gt;pubkey.pem\n</code></pre> <p>The signature can be analysed with:</p> <pre><code>openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin\n\n   0:d=0  hl=2 l=  32 cons: SEQUENCE\n   2:d=1  hl=2 l=  12 cons:  SEQUENCE\n   4:d=2  hl=2 l=   8 prim:   OBJECT            :md5\n  14:d=2  hl=2 l=   0 prim:   NULL\n  16:d=1  hl=2 l=  16 prim:  OCTET STRING\n     0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5   .F...Js.7...H%..\n</code></pre> <p>This is the parsed version of an ASN1 DigestInfo structure. It can be seen that the digest used was md5. The actual part of the certificate that was signed can be extracted with:</p> <pre><code>openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4\n</code></pre> <p>and its digest computed with:</p> <pre><code>openssl md5 -c tbs\nMD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5\n</code></pre> <p>which it can be seen agrees with the recovered value above.</p>"},{"location":"man1/rsautl/#see-also","title":"SEE ALSO","text":"<p>dgst(1), rsa(1), genrsa(1)</p>"},{"location":"man1/rsautl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/s_client/","title":"s_client","text":""},{"location":"man1/s_client/#name","title":"NAME","text":"<p>openssl-s_client, s_client - SSL/TLS client program</p>"},{"location":"man1/s_client/#synopsis","title":"SYNOPSIS","text":"<p>openssl s_client [-help] [-connect host:port] [-bind host:port] [-proxy host:port] [-unix path] [-4] [-6] [-servername name] [-noservername] [-verify depth] [-verify_return_error] [-cert filename] [-certform DER|PEM] [-key filename] [-keyform DER|PEM] [-cert_chain filename] [-build_chain] [-xkey] [-xcert] [-xchain] [-xchain_build] [-xcertform PEM|DER] [-xkeyform PEM|DER] [-pass arg] [-CApath directory] [-CAfile filename] [-chainCApath directory] [-chainCAfile filename] [-no-CAfile] [-no-CApath] [-requestCAfile filename] [-dane_tlsa_domain domain] [-dane_tlsa_rrdata rrdata] [-dane_ee_no_namechecks] [-attime timestamp] [-check_ss_sig] [-crl_check] [-crl_check_all] [-explicit_policy] [-extended_crl] [-ignore_critical] [-inhibit_any] [-inhibit_map] [-no_check_time] [-partial_chain] [-policy arg] [-policy_check] [-policy_print] [-purpose purpose] [-suiteB_128] [-suiteB_128_only] [-suiteB_192] [-trusted_first] [-no_alt_chains] [-use_deltas] [-auth_level num] [-nameopt option] [-verify_depth num] [-verify_email email] [-verify_hostname hostname] [-verify_ip ip] [-verify_name name] [-build_chain] [-x509_strict] [-reconnect] [-showcerts] [-debug] [-msg] [-nbio_test] [-state] [-nbio] [-crlf] [-ign_eof] [-no_ign_eof] [-psk_identity identity] [-psk key] [-psk_session file] [-quiet] [-ssl3] [-tls1] [-tls1_1] [-tls1_2] [-tls1_3] [-no_ssl3] [-no_tls1] [-no_tls1_1] [-no_tls1_2] [-no_tls1_3] [-dtls] [-dtls1] [-dtls1_2] [-sctp] [-sctp_label_bug] [-fallback_scsv] [-async] [-max_send_frag] [-split_send_frag] [-max_pipelines] [-read_buf] [-bugs] [-comp] [-no_comp] [-allow_no_dhe_kex] [-sigalgs sigalglist] [-curves curvelist] [-cipher cipherlist] [-ciphersuites val] [-serverpref] [-starttls protocol] [-xmpphost hostname] [-name hostname] [-engine id] [-tlsextdebug] [-no_ticket] [-sess_out filename] [-sess_in filename] [-rand file...] [-writerand file] [-serverinfo types] [-status] [-alpn protocols] [-nextprotoneg protocols] [-ct] [-noct] [-ctlogfile] [-keylogfile file] [-early_data file] [-enable_pha] [target]</p>"},{"location":"man1/s_client/#description","title":"DESCRIPTION","text":"<p>The s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS. It is a very useful diagnostic tool for SSL servers.</p>"},{"location":"man1/s_client/#options","title":"OPTIONS","text":"<p>In addition to the options below the s_client utility also supports the common and client only options documented in the \"Supported Command Line Commands\" section of the SSL_CONF_cmd(3) manual page.</p> <ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-connect host:port</p> <p>This specifies the host and optional port to connect to. It is possible to select the host and port using the optional target positional argument instead. If neither this nor the target positional argument are specified then an attempt is made to connect to the local host on port 4433.</p> </li> <li> <p>-bind host:port]</p> <p>This specifies the host address and or port to bind as the source for the connection.  For Unix-domain sockets the port is ignored and the host is used as the source socket address.</p> </li> <li> <p>-proxy host:port</p> <p>When used with the -connect flag, the program uses the host and port specified with this flag and issues an HTTP CONNECT command to connect to the desired server.</p> </li> <li> <p>-unix path</p> <p>Connect over the specified Unix-domain socket.</p> </li> <li> <p>-4</p> <p>Use IPv4 only.</p> </li> <li> <p>-6</p> <p>Use IPv6 only.</p> </li> <li> <p>-servername name</p> <p>Set the TLS SNI (Server Name Indication) extension in the ClientHello message to the given value.  If -servername is not provided, the TLS SNI extension will be populated with  the name given to -connect if it follows a DNS name format. If -connect is  not provided either, the SNI is set to \"localhost\". This is the default since OpenSSL 1.1.1.</p> <p>Even though SNI should normally be a DNS name and not an IP address, if  -servername is provided then that name will be sent, regardless of whether  it is a DNS name or not.</p> <p>This option cannot be used in conjunction with -noservername.</p> </li> <li> <p>-noservername</p> <p>Suppresses sending of the SNI (Server Name Indication) extension in the ClientHello message. Cannot be used in conjunction with the -servername or &lt;-dane_tlsa_domain&gt; options.</p> </li> <li> <p>-cert certname</p> <p>The certificate to use, if one is requested by the server. The default is not to use a certificate.</p> </li> <li> <p>-certform format</p> <p>The certificate format to use: DER or PEM. PEM is the default.</p> </li> <li> <p>-key keyfile</p> <p>The private key to use. If not specified then the certificate file will be used.</p> </li> <li> <p>-keyform format</p> <p>The private format to use: DER or PEM. PEM is the default.</p> </li> <li> <p>-cert_chain</p> <p>A file containing trusted certificates to use when attempting to build the client/server certificate chain related to the certificate specified via the -cert option.</p> </li> <li> <p>-build_chain</p> <p>Specify whether the application should build the certificate chain to be provided to the server.</p> </li> <li> <p>-xkey infile, -xcert infile, -xchain</p> <p>Specify an extra certificate, private key and certificate chain. These behave in the same manner as the -cert, -key and -cert_chain options.  When specified, the callback returning the first valid chain will be in use by the client.</p> </li> <li> <p>-xchain_build</p> <p>Specify whether the application should build the certificate chain to be provided to the server for the extra certificates provided via -xkey infile, -xcert infile, -xchain options.</p> </li> <li> <p>-xcertform PEM|DER, -xkeyform PEM|DER</p> <p>Extra certificate and private key format respectively.</p> </li> <li> <p>-pass arg</p> <p>the private key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-verify depth</p> <p>The verify depth to use. This specifies the maximum length of the server certificate chain and turns on server certificate verification. Currently the verify operation continues after errors so all the problems with a certificate chain can be seen. As a side effect the connection will never fail due to a server certificate verify failure.</p> </li> <li> <p>-verify_return_error</p> <p>Return verification errors instead of continuing. This will typically abort the handshake with a fatal error.</p> </li> <li> <p>-nameopt option</p> <p>Option which determines how the subject or issuer names are displayed. The option argument can be a single option or multiple options separated by commas.  Alternatively the -nameopt switch may be used more than once to set multiple options. See the x509(1) manual page for details.</p> </li> <li> <p>-CApath directory</p> <p>The directory to use for server certificate verification. This directory must be in \"hash format\", see verify(1) for more information. These are also used when building the client certificate chain.</p> </li> <li> <p>-CAfile file</p> <p>A file containing trusted certificates to use during server authentication and to use when attempting to build the client certificate chain.</p> </li> <li> <p>-chainCApath directory</p> <p>The directory to use for building the chain provided to the server. This directory must be in \"hash format\", see verify(1) for more information.</p> </li> <li> <p>-chainCAfile file</p> <p>A file containing trusted certificates to use when attempting to build the client certificate chain.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location</p> </li> <li> <p>-requestCAfile file</p> <p>A file containing a list of certificates whose subject names will be sent to the server in the certificate_authorities extension. Only supported for TLS 1.3</p> </li> <li> <p>-dane_tlsa_domain domain</p> <p>Enable RFC6698/RFC7671 DANE TLSA authentication and specify the TLSA base domain which becomes the default SNI hint and the primary reference identifier for hostname checks.  This must be used in combination with at least one instance of the -dane_tlsa_rrdata option below.</p> <p>When DANE authentication succeeds, the diagnostic output will include the lowest (closest to 0) depth at which a TLSA record authenticated a chain certificate.  When that TLSA record is a \"2 1 0\" trust anchor public key that signed (rather than matched) the top-most certificate of the chain, the result is reported as \"TA public key verified\".  Otherwise, either the TLSA record \"matched TA certificate\" at a positive depth or else \"matched EE certificate\" at depth 0.</p> </li> <li> <p>-dane_tlsa_rrdata rrdata</p> <p>Use one or more times to specify the RRDATA fields of the DANE TLSA RRset associated with the target service.  The rrdata value is specified in \"presentation form\", that is four whitespace separated fields that specify the usage, selector, matching type and associated data, with the last of these encoded in hexadecimal.  Optional whitespace is ignored in the associated data field.  For example:</p> <pre><code>$ openssl s_client -brief -starttls smtp \\\n  -connect smtp.example.com:25 \\\n  -dane_tlsa_domain smtp.example.com \\\n  -dane_tlsa_rrdata \"2 1 1\n    B111DD8A1C2091A89BD4FD60C57F0716CCE50FEEFF8137CDBEE0326E 02CF362B\" \\\n  -dane_tlsa_rrdata \"2 1 1\n    60B87575447DCBA2A36B7D11AC09FB24A9DB406FEE12D2CC90180517 616E8A18\"\n...\nVerification: OK\nVerified peername: smtp.example.com\nDANE TLSA 2 1 1 ...ee12d2cc90180517616e8a18 matched TA certificate at depth 1\n...\n</code></pre> </li> <li> <p>-dane_ee_no_namechecks</p> <p>This disables server name checks when authenticating via DANE-EE(3) TLSA records. For some applications, primarily web browsers, it is not safe to disable name checks due to \"unknown key share\" attacks, in which a malicious server can convince a client that a connection to a victim server is instead a secure connection to the malicious server. The malicious server may then be able to violate cross-origin scripting restrictions. Thus, despite the text of RFC7671, name checks are by default enabled for DANE-EE(3) TLSA records, and can be disabled in applications where it is safe to do so. In particular, SMTP and XMPP clients should set this option as SRV and MX records already make it possible for a remote domain to redirect client connections to any server of its choice, and in any case SMTP and XMPP clients do not execute scripts downloaded from remote servers.</p> </li> <li> <p>-attime, -check_ss_sig, -crl_check, -crl_check_all, -explicit_policy, -extended_crl, -ignore_critical, -inhibit_any, -inhibit_map, -no_alt_chains, -no_check_time, -partial_chain, -policy, -policy_check, -policy_print, -purpose, -suiteB_128, -suiteB_128_only, -suiteB_192, -trusted_first, -use_deltas, -auth_level, -verify_depth, -verify_email, -verify_hostname, -verify_ip, -verify_name, -x509_strict</p> <p>Set various certificate chain validation options. See the verify(1) manual page for details.</p> </li> <li> <p>-reconnect</p> <p>Reconnects to the same server 5 times using the same session ID, this can be used as a test that session caching is working.</p> </li> <li> <p>-showcerts</p> <p>Displays the server certificate list as sent by the server: it only consists of certificates the server has sent (in the order the server has sent them). It is not a verified chain.</p> </li> <li> <p>-prexit</p> <p>Print session information when the program exits. This will always attempt to print out information even if the connection fails. Normally information will only be printed out once if the connection succeeds. This option is useful because the cipher in use may be renegotiated or the connection may fail because a client certificate is required or is requested only after an attempt is made to access a certain URL. Note: the output produced by this option is not always accurate because a connection might never have been established.</p> </li> <li> <p>-state</p> <p>Prints out the SSL session states.</p> </li> <li> <p>-debug</p> <p>Print extensive debugging information including a hex dump of all traffic.</p> </li> <li> <p>-msg</p> <p>Show all protocol messages with hex dump.</p> </li> <li> <p>-trace</p> <p>Show verbose trace output of protocol messages. OpenSSL needs to be compiled with enable-ssl-trace for this option to work.</p> </li> <li> <p>-msgfile</p> <p>File to send output of -msg or -trace to, default standard output.</p> </li> <li> <p>-nbio_test</p> <p>Tests nonblocking I/O</p> </li> <li> <p>-nbio</p> <p>Turns on nonblocking I/O</p> </li> <li> <p>-crlf</p> <p>This option translated a line feed from the terminal into CR+LF as required by some servers.</p> </li> <li> <p>-ign_eof</p> <p>Inhibit shutting down the connection when end of file is reached in the input.</p> </li> <li> <p>-quiet</p> <p>Inhibit printing of session and certificate information.  This implicitly turns on -ign_eof as well.</p> </li> <li> <p>-no_ign_eof</p> <p>Shut down the connection when end of file is reached in the input. Can be used to override the implicit -ign_eof after -quiet.</p> </li> <li> <p>-psk_identity identity</p> <p>Use the PSK identity identity when using a PSK cipher suite. The default value is \"Client_identity\" (without the quotes).</p> </li> <li> <p>-psk key</p> <p>Use the PSK key key when using a PSK cipher suite. The key is given as a hexadecimal number without leading 0x, for example -psk 1a2b3c4d. This option must be provided in order to use a PSK cipher.</p> </li> <li> <p>-psk_session file</p> <p>Use the pem encoded SSL_SESSION data stored in file as the basis of a PSK. Note that this will only work if TLSv1.3 is negotiated.</p> </li> <li> <p>-ssl3, -tls1, -tls1_1, -tls1_2, -tls1_3, -no_ssl3, -no_tls1, -no_tls1_1, -no_tls1_2, -no_tls1_3</p> <p>These options require or disable the use of the specified SSL or TLS protocols. By default s_client will negotiate the highest mutually supported protocol version. When a specific TLS version is required, only that version will be offered to and accepted from the server. Note that not all protocols and flags may be available, depending on how OpenSSL was built.</p> </li> <li> <p>-dtls, -dtls1, -dtls1_2</p> <p>These options make s_client use DTLS protocols instead of TLS. With -dtls, s_client will negotiate any supported DTLS protocol version, whilst -dtls1 and -dtls1_2 will only support DTLS1.0 and DTLS1.2 respectively.</p> </li> <li> <p>-sctp</p> <p>Use SCTP for the transport protocol instead of UDP in DTLS. Must be used in conjunction with -dtls, -dtls1 or -dtls1_2. This option is only available where OpenSSL has support for SCTP enabled.</p> </li> <li> <p>-sctp_label_bug</p> <p>Use the incorrect behaviour of older OpenSSL implementations when computing endpoint-pair shared secrets for DTLS/SCTP. This allows communication with older broken implementations but breaks interoperability with correct implementations. Must be used in conjunction with -sctp. This option is only available where OpenSSL has support for SCTP enabled.</p> </li> <li> <p>-fallback_scsv</p> <p>Send TLS_FALLBACK_SCSV in the ClientHello.</p> </li> <li> <p>-async</p> <p>Switch on asynchronous mode. Cryptographic operations will be performed asynchronously. This will only have an effect if an asynchronous capable engine is also used via the -engine option. For test purposes the dummy async engine (dasync) can be used (if available).</p> </li> <li> <p>-max_send_frag int</p> <p>The maximum size of data fragment to send. See SSL_CTX_set_max_send_fragment(3) for further information.</p> </li> <li> <p>-split_send_frag int</p> <p>The size used to split data for encrypt pipelines. If more data is written in one go than this value then it will be split into multiple pipelines, up to the maximum number of pipelines defined by max_pipelines. This only has an effect if a suitable cipher suite has been negotiated, an engine that supports pipelining has been loaded, and max_pipelines is greater than 1. See SSL_CTX_set_split_send_fragment(3) for further information.</p> </li> <li> <p>-max_pipelines int</p> <p>The maximum number of encrypt/decrypt pipelines to be used. This will only have an effect if an engine has been loaded that supports pipelining (e.g. the dasync engine) and a suitable cipher suite has been negotiated. The default value is 1. See SSL_CTX_set_max_pipelines(3) for further information.</p> </li> <li> <p>-read_buf int</p> <p>The default read buffer size to be used for connections. This will only have an effect if the buffer size is larger than the size that would otherwise be used and pipelining is in use (see SSL_CTX_set_default_read_buffer_len(3) for further information).</p> </li> <li> <p>-bugs</p> <p>There are several known bugs in SSL and TLS implementations. Adding this option enables various workarounds.</p> </li> <li> <p>-comp</p> <p>Enables support for SSL/TLS compression. This option was introduced in OpenSSL 1.1.0. TLS compression is not recommended and is off by default as of OpenSSL 1.1.0.</p> </li> <li> <p>-no_comp</p> <p>Disables support for SSL/TLS compression. TLS compression is not recommended and is off by default as of OpenSSL 1.1.0.</p> </li> <li> <p>-brief</p> <p>Only provide a brief summary of connection parameters instead of the normal verbose output.</p> </li> <li> <p>-sigalgs sigalglist</p> <p>Specifies the list of signature algorithms that are sent by the client. The server selects one entry in the list based on its preferences. For example strings, see SSL_CTX_set1_sigalgs(3)</p> </li> <li> <p>-curves curvelist</p> <p>Specifies the list of supported curves to be sent by the client. The curve is ultimately selected by the server. For a list of all curves, use:</p> <pre><code>$ openssl ecparam -list_curves\n</code></pre> </li> <li> <p>-cipher cipherlist</p> <p>This allows the TLSv1.2 and below cipher list sent by the client to be modified. This list will be combined with any TLSv1.3 ciphersuites that have been configured. Although the server determines which ciphersuite is used it should take the first supported cipher in the list sent by the client. See the ciphers command for more information.</p> </li> <li> <p>-ciphersuites val</p> <p>This allows the TLSv1.3 ciphersuites sent by the client to be modified. This list will be combined with any TLSv1.2 and below ciphersuites that have been configured. Although the server determines which cipher suite is used it should take the first supported cipher in the list sent by the client. See the ciphers command for more information. The format for this list is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names.</p> </li> <li> <p>-starttls protocol</p> <p>Send the protocol-specific message(s) to switch to TLS for communication. protocol is a keyword for the intended protocol.  Currently, the only supported keywords are \"smtp\", \"pop3\", \"imap\", \"ftp\", \"xmpp\", \"xmpp-server\", \"irc\", \"postgres\", \"mysql\", \"lmtp\", \"nntp\", \"sieve\" and \"ldap\".</p> </li> <li> <p>-xmpphost hostname</p> <p>This option, when used with \"-starttls xmpp\" or \"-starttls xmpp-server\", specifies the host for the \"to\" attribute of the stream element. If this option is not specified, then the host specified with \"-connect\" will be used.</p> <p>This option is an alias of the -name option for \"xmpp\" and \"xmpp-server\".</p> </li> <li> <p>-name hostname</p> <p>This option is used to specify hostname information for various protocols used with -starttls option. Currently only \"xmpp\", \"xmpp-server\", \"smtp\" and \"lmtp\" can utilize this -name option.</p> <p>If this option is used with \"-starttls xmpp\" or \"-starttls xmpp-server\", if specifies the host for the \"to\" attribute of the stream element. If this option is not specified, then the host specified with \"-connect\" will be used.</p> <p>If this option is used with \"-starttls lmtp\" or \"-starttls smtp\", it specifies the name to use in the \"LMTP LHLO\" or \"SMTP EHLO\" message, respectively. If this option is not specified, then \"mail.example.com\" will be used.</p> </li> <li> <p>-tlsextdebug</p> <p>Print out a hex dump of any TLS extensions received from the server.</p> </li> <li> <p>-no_ticket</p> <p>Disable RFC4507bis session ticket support.</p> </li> <li> <p>-sess_out filename</p> <p>Output SSL session to filename.</p> </li> <li> <p>-sess_in sess.pem</p> <p>Load SSL session from filename. The client will attempt to resume a connection from this session.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause s_client to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-serverinfo types</p> <p>A list of comma-separated TLS Extension Types (numbers between 0 and 65535).  Each type will be sent as an empty ClientHello TLS Extension. The server's response (if any) will be encoded and displayed as a PEM file.</p> </li> <li> <p>-status</p> <p>Sends a certificate status request to the server (OCSP stapling). The server response (if any) is printed out.</p> </li> <li> <p>-alpn protocols, -nextprotoneg protocols</p> <p>These flags enable the Enable the Application-Layer Protocol Negotiation or Next Protocol Negotiation (NPN) extension, respectively. ALPN is the IETF standard and replaces NPN. The protocols list is a comma-separated list of protocol names that the client should advertise support for. The list should contain the most desirable protocols first.  Protocol names are printable ASCII strings, for example \"http/1.1\" or \"spdy/3\". An empty list of protocols is treated specially and will cause the client to advertise support for the TLS extension but disconnect just after receiving ServerHello with a list of server supported protocols. The flag -nextprotoneg cannot be specified if -tls1_3 is used.</p> </li> <li> <p>-ct, -noct</p> <p>Use one of these two options to control whether Certificate Transparency (CT) is enabled (-ct) or disabled (-noct). If CT is enabled, signed certificate timestamps (SCTs) will be requested from the server and reported at handshake completion.</p> <p>Enabling CT also enables OCSP stapling, as this is one possible delivery method for SCTs.</p> </li> <li> <p>-ctlogfile</p> <p>A file containing a list of known Certificate Transparency logs. See SSL_CTX_set_ctlog_list_file(3) for the expected file format.</p> </li> <li> <p>-keylogfile file</p> <p>Appends TLS secrets to the specified keylog file such that external programs (like Wireshark) can decrypt TLS connections.</p> </li> <li> <p>-early_data file</p> <p>Reads the contents of the specified file and attempts to send it as early data to the server. This will only work with resumed sessions that support early data and when the server accepts the early data.</p> </li> <li> <p>-enable_pha</p> <p>For TLSv1.3 only, send the Post-Handshake Authentication extension. This will happen whether or not a certificate has been provided via -cert.</p> </li> <li> <p>[target]</p> <p>Rather than providing -connect, the target hostname and optional port may be provided as a single positional argument after all options. If neither this nor -connect are provided, falls back to attempting to connect to localhost on port 4433.</p> </li> </ul>"},{"location":"man1/s_client/#connected-commands","title":"CONNECTED COMMANDS","text":"<p>If a connection is established with an SSL server then any data received from the server is displayed and any key presses will be sent to the server. If end of file is reached then the connection will be closed down. When used interactively (which means neither -quiet nor -ign_eof have been given), then certain commands are also recognized which perform special operations. These commands are a letter which must appear at the start of a line. They are listed below.</p> <ul> <li> <p>Q</p> <p>End the current SSL connection and exit.</p> </li> <li> <p>R</p> <p>Renegotiate the SSL session (TLSv1.2 and below only).</p> </li> <li> <p>B</p> <p>Send a heartbeat message to the server (DTLS only)</p> </li> <li> <p>k</p> <p>Send a key update message to the server (TLSv1.3 only)</p> </li> <li> <p>K</p> <p>Send a key update message to the server and request one back (TLSv1.3 only)</p> </li> </ul>"},{"location":"man1/s_client/#notes","title":"NOTES","text":"<p>s_client can be used to debug SSL servers. To connect to an SSL HTTP server the command:</p> <pre><code>openssl s_client -connect servername:443\n</code></pre> <p>would typically be used (https uses port 443). If the connection succeeds then an HTTP command can be given such as \"GET /\" to retrieve a web page.</p> <p>If the handshake fails then there are several possible causes, if it is nothing obvious like no client certificate then the -bugs, -ssl3, -tls1, -no_ssl3, -no_tls1 options can be tried in case it is a buggy server. In particular you should play with these options before submitting a bug report to an OpenSSL mailing list.</p> <p>A frequent problem when attempting to get client certificates working is that a web client complains it has no certificates or gives an empty list to choose from. This is normally because the server is not sending the clients certificate authority in its \"acceptable CA list\" when it requests a certificate. By using s_client the CA list can be viewed and checked. However, some servers only request client authentication after a specific URL is requested. To obtain the list in this case it is necessary to use the -prexit option and send an HTTP request for an appropriate page.</p> <p>If a certificate is specified on the command line using the -cert option it will not be used unless the server specifically requests a client certificate. Therefore, merely including a client certificate on the command line is no guarantee that the certificate works.</p> <p>If there are problems verifying a server certificate then the -showcerts option can be used to show all the certificates sent by the server.</p> <p>The s_client utility is a test tool and is designed to continue the handshake after any certificate verification errors. As a result it will accept any certificate chain (trusted or not) sent by the peer. Non-test applications should not do this as it makes them vulnerable to a MITM attack. This behaviour can be changed by with the -verify_return_error option: any verify errors are then returned aborting the handshake.</p> <p>The -bind option may be useful if the server or a firewall requires connections to come from some particular address and or port.</p>"},{"location":"man1/s_client/#bugs","title":"BUGS","text":"<p>Because this program has a lot of options and also because some of the techniques used are rather old, the C source of s_client is rather hard to read and not a model of how things should be done. A typical SSL client program would be much simpler.</p> <p>The -prexit option is a bit of a hack. We should really report information whenever a session is renegotiated.</p>"},{"location":"man1/s_client/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_cmd(3), sess_id(1), s_server(1), ciphers(1), SSL_CTX_set_max_send_fragment(3), SSL_CTX_set_split_send_fragment(3), SSL_CTX_set_max_pipelines(3)</p>"},{"location":"man1/s_client/#history","title":"HISTORY","text":"<p>The -no_alt_chains option was added in OpenSSL 1.1.0. The -name option was added in OpenSSL 1.1.1.</p>"},{"location":"man1/s_client/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/s_server/","title":"s_server","text":""},{"location":"man1/s_server/#name","title":"NAME","text":"<p>openssl-s_server, s_server - SSL/TLS server program</p>"},{"location":"man1/s_server/#synopsis","title":"SYNOPSIS","text":"<p>openssl s_server [-help] [-port +int] [-accept val] [-unix val] [-4] [-6] [-unlink] [-context val] [-verify int] [-Verify int] [-cert infile] [-nameopt val] [-naccept +int] [-serverinfo val] [-certform PEM|DER] [-key infile] [-keyform format] [-pass val] [-dcert infile] [-dcertform PEM|DER] [-dkey infile] [-dkeyform PEM|DER] [-dpass val] [-nbio_test] [-crlf] [-debug] [-msg] [-msgfile outfile] [-state] [-CAfile infile] [-CApath dir] [-no-CAfile] [-no-CApath] [-nocert] [-quiet] [-no_resume_ephemeral] [-www] [-WWW] [-servername] [-servername_fatal] [-cert2 infile] [-key2 infile] [-tlsextdebug] [-HTTP] [-id_prefix val] [-rand file...] [-writerand file] [-keymatexport val] [-keymatexportlen +int] [-CRL infile] [-crl_download] [-cert_chain infile] [-dcert_chain infile] [-chainCApath dir] [-verifyCApath dir] [-no_cache] [-ext_cache] [-CRLform PEM|DER] [-verify_return_error] [-verify_quiet] [-build_chain] [-chainCAfile infile] [-verifyCAfile infile] [-ign_eof] [-no_ign_eof] [-status] [-status_verbose] [-status_timeout int] [-status_url val] [-status_file infile] [-trace] [-security_debug] [-security_debug_verbose] [-brief] [-rev] [-async] [-ssl_config val] [-max_send_frag +int] [-split_send_frag +int] [-max_pipelines +int] [-read_buf +int] [-no_ssl3] [-no_tls1] [-no_tls1_1] [-no_tls1_2] [-no_tls1_3] [-bugs] [-no_comp] [-comp] [-no_ticket] [-num_tickets] [-serverpref] [-legacy_renegotiation] [-no_renegotiation] [-legacy_server_connect] [-no_resumption_on_reneg] [-no_legacy_server_connect] [-allow_no_dhe_kex] [-prioritize_chacha] [-strict] [-sigalgs val] [-client_sigalgs val] [-groups val] [-curves val] [-named_curve val] [-cipher val] [-ciphersuites val] [-dhparam infile] [-record_padding val] [-debug_broken_protocol] [-policy val] [-purpose val] [-verify_name val] [-verify_depth int] [-auth_level int] [-attime intmax] [-verify_hostname val] [-verify_email val] [-verify_ip] [-ignore_critical] [-issuer_checks] [-crl_check] [-crl_check_all] [-policy_check] [-explicit_policy] [-inhibit_any] [-inhibit_map] [-x509_strict] [-extended_crl] [-use_deltas] [-policy_print] [-check_ss_sig] [-trusted_first] [-suiteB_128_only] [-suiteB_128] [-suiteB_192] [-partial_chain] [-no_alt_chains] [-no_check_time] [-allow_proxy_certs] [-xkey] [-xcert] [-xchain] [-xchain_build] [-xcertform PEM|DER] [-xkeyform PEM|DER] [-nbio] [-psk_identity val] [-psk_hint val] [-psk val] [-psk_session file] [-srpvfile infile] [-srpuserseed val] [-ssl3] [-tls1] [-tls1_1] [-tls1_2] [-tls1_3] [-dtls] [-timeout] [-mtu +int] [-listen] [-dtls1] [-dtls1_2] [-sctp] [-sctp_label_bug] [-no_dhe] [-nextprotoneg val] [-use_srtp val] [-alpn val] [-engine val] [-keylogfile outfile] [-max_early_data int] [-early_data] [-anti_replay] [-no_anti_replay]</p>"},{"location":"man1/s_server/#description","title":"DESCRIPTION","text":"<p>The s_server command implements a generic SSL/TLS server which listens for connections on a given port using SSL/TLS.</p>"},{"location":"man1/s_server/#options","title":"OPTIONS","text":"<p>In addition to the options below the s_server utility also supports the common and server only options documented in the \"Supported Command Line Commands\" section of the SSL_CONF_cmd(3) manual page.</p> <ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-port +int</p> <p>The TCP port to listen on for connections. If not specified 4433 is used.</p> </li> <li> <p>-accept val</p> <p>The optional TCP host and port to listen on for connections. If not specified, *:4433 is used.</p> </li> <li> <p>-unix val</p> <p>Unix domain socket to accept on.</p> </li> <li> <p>-4</p> <p>Use IPv4 only.</p> </li> <li> <p>-6</p> <p>Use IPv6 only.</p> </li> <li> <p>-unlink</p> <p>For -unix, unlink any existing socket first.</p> </li> <li> <p>-context val</p> <p>Sets the SSL context id. It can be given any string value. If this option is not present a default value will be used.</p> </li> <li> <p>-verify int, -Verify int</p> <p>The verify depth to use. This specifies the maximum length of the client certificate chain and makes the server request a certificate from the client. With the -verify option a certificate is requested but the client does not have to send one, with the -Verify option the client must supply a certificate or an error occurs.</p> <p>If the cipher suite cannot request a client certificate (for example an anonymous cipher suite or PSK) this option has no effect.</p> </li> <li> <p>-cert infile</p> <p>The certificate to use, most servers cipher suites require the use of a certificate and some require a certificate with a certain public key type: for example the DSS cipher suites require a certificate containing a DSS (DSA) key. If not specified then the filename \"server.pem\" will be used.</p> </li> <li> <p>-cert_chain</p> <p>A file containing trusted certificates to use when attempting to build the client/server certificate chain related to the certificate specified via the -cert option.</p> </li> <li> <p>-build_chain</p> <p>Specify whether the application should build the certificate chain to be provided to the client.</p> </li> <li> <p>-nameopt val</p> <p>Option which determines how the subject or issuer names are displayed. The val argument can be a single option or multiple options separated by commas.  Alternatively the -nameopt switch may be used more than once to set multiple options. See the x509(1) manual page for details.</p> </li> <li> <p>-naccept +int</p> <p>The server will exit after receiving the specified number of connections, default unlimited.</p> </li> <li> <p>-serverinfo val</p> <p>A file containing one or more blocks of PEM data.  Each PEM block must encode a TLS ServerHello extension (2 bytes type, 2 bytes length, followed by \"length\" bytes of extension data).  If the client sends an empty TLS ClientHello extension matching the type, the corresponding ServerHello extension will be returned.</p> </li> <li> <p>-certform PEM|DER</p> <p>The certificate format to use: DER or PEM. PEM is the default.</p> </li> <li> <p>-key infile</p> <p>The private key to use. If not specified then the certificate file will be used.</p> </li> <li> <p>-keyform format</p> <p>The private format to use: DER or PEM. PEM is the default.</p> </li> <li> <p>-pass val</p> <p>The private key password source. For more information about the format of val see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-dcert infile, -dkey infile</p> <p>Specify an additional certificate and private key, these behave in the same manner as the -cert and -key options except there is no default if they are not specified (no additional certificate and key is used). As noted above some cipher suites require a certificate containing a key of a certain type. Some cipher suites need a certificate carrying an RSA key and some a DSS (DSA) key. By using RSA and DSS certificates and keys a server can support clients which only support RSA or DSS cipher suites by using an appropriate certificate.</p> </li> <li> <p>-dcert_chain</p> <p>A file containing trusted certificates to use when attempting to build the server certificate chain when a certificate specified via the -dcert option is in use.</p> </li> <li> <p>-dcertform PEM|DER, -dkeyform PEM|DER, -dpass val</p> <p>Additional certificate and private key format and passphrase respectively.</p> </li> <li> <p>-xkey infile, -xcert infile, -xchain</p> <p>Specify an extra certificate, private key and certificate chain. These behave in the same manner as the -cert, -key and -cert_chain options.  When specified, the callback returning the first valid chain will be in use by the server.</p> </li> <li> <p>-xchain_build</p> <p>Specify whether the application should build the certificate chain to be provided to the client for the extra certificates provided via -xkey infile, -xcert infile, -xchain options.</p> </li> <li> <p>-xcertform PEM|DER, -xkeyform PEM|DER</p> <p>Extra certificate and private key format respectively.</p> </li> <li> <p>-nbio_test</p> <p>Tests non blocking I/O.</p> </li> <li> <p>-crlf</p> <p>This option translated a line feed from the terminal into CR+LF.</p> </li> <li> <p>-debug</p> <p>Print extensive debugging information including a hex dump of all traffic.</p> </li> <li> <p>-msg</p> <p>Show all protocol messages with hex dump.</p> </li> <li> <p>-msgfile outfile</p> <p>File to send output of -msg or -trace to, default standard output.</p> </li> <li> <p>-state</p> <p>Prints the SSL session states.</p> </li> <li> <p>-CAfile infile</p> <p>A file containing trusted certificates to use during client authentication and to use when attempting to build the server certificate chain. The list is also used in the list of acceptable client CAs passed to the client when a certificate is requested.</p> </li> <li> <p>-CApath dir</p> <p>The directory to use for client certificate verification. This directory must be in \"hash format\", see verify(1) for more information. These are also used when building the server certificate chain.</p> </li> <li> <p>-chainCApath dir</p> <p>The directory to use for building the chain provided to the client. This directory must be in \"hash format\", see verify(1) for more information.</p> </li> <li> <p>-chainCAfile file</p> <p>A file containing trusted certificates to use when attempting to build the server certificate chain.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location.</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location.</p> </li> <li> <p>-nocert</p> <p>If this option is set then no certificate is used. This restricts the cipher suites available to the anonymous ones (currently just anonymous DH).</p> </li> <li> <p>-quiet</p> <p>Inhibit printing of session and certificate information.</p> </li> <li> <p>-www</p> <p>Sends a status message back to the client when it connects. This includes information about the ciphers used and various session parameters. The output is in HTML format so this option will normally be used with a web browser. Cannot be used in conjunction with -early_data.</p> </li> <li> <p>-WWW</p> <p>Emulates a simple web server. Pages will be resolved relative to the current directory, for example if the URL https://myhost/page.html is requested the file ./page.html will be loaded. Cannot be used in conjunction with -early_data.</p> </li> <li> <p>-tlsextdebug</p> <p>Print a hex dump of any TLS extensions received from the server.</p> </li> <li> <p>-HTTP</p> <p>Emulates a simple web server. Pages will be resolved relative to the current directory, for example if the URL https://myhost/page.html is requested the file ./page.html will be loaded. The files loaded are assumed to contain a complete and correct HTTP response (lines that are part of the HTTP response line and headers must end with CRLF). Cannot be used in conjunction with -early_data.</p> </li> <li> <p>-id_prefix val</p> <p>Generate SSL/TLS session IDs prefixed by val. This is mostly useful for testing any SSL/TLS code (e.g. proxies) that wish to deal with multiple servers, when each of which might be generating a unique range of session IDs (e.g. with a certain prefix).</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-verify_return_error</p> <p>Verification errors normally just print a message but allow the connection to continue, for debugging purposes. If this option is used, then verification errors close the connection.</p> </li> <li> <p>-status</p> <p>Enables certificate status request support (aka OCSP stapling).</p> </li> <li> <p>-status_verbose</p> <p>Enables certificate status request support (aka OCSP stapling) and gives a verbose printout of the OCSP response.</p> </li> <li> <p>-status_timeout int</p> <p>Sets the timeout for OCSP response to int seconds.</p> </li> <li> <p>-status_url val</p> <p>Sets a fallback responder URL to use if no responder URL is present in the server certificate. Without this option an error is returned if the server certificate does not contain a responder address.</p> </li> <li> <p>-status_file infile</p> <p>Overrides any OCSP responder URLs from the certificate and always provides the OCSP Response stored in the file. The file must be in DER format.</p> </li> <li> <p>-trace</p> <p>Show verbose trace output of protocol messages. OpenSSL needs to be compiled with enable-ssl-trace for this option to work.</p> </li> <li> <p>-brief</p> <p>Provide a brief summary of connection parameters instead of the normal verbose output.</p> </li> <li> <p>-rev</p> <p>Simple test server which just reverses the text received from the client and sends it back to the server. Also sets -brief. Cannot be used in conjunction with -early_data.</p> </li> <li> <p>-async</p> <p>Switch on asynchronous mode. Cryptographic operations will be performed asynchronously. This will only have an effect if an asynchronous capable engine is also used via the -engine option. For test purposes the dummy async engine (dasync) can be used (if available).</p> </li> <li> <p>-max_send_frag +int</p> <p>The maximum size of data fragment to send. See SSL_CTX_set_max_send_fragment(3) for further information.</p> </li> <li> <p>-split_send_frag +int</p> <p>The size used to split data for encrypt pipelines. If more data is written in one go than this value then it will be split into multiple pipelines, up to the maximum number of pipelines defined by max_pipelines. This only has an effect if a suitable cipher suite has been negotiated, an engine that supports pipelining has been loaded, and max_pipelines is greater than 1. See SSL_CTX_set_split_send_fragment(3) for further information.</p> </li> <li> <p>-max_pipelines +int</p> <p>The maximum number of encrypt/decrypt pipelines to be used. This will only have an effect if an engine has been loaded that supports pipelining (e.g. the dasync engine) and a suitable cipher suite has been negotiated. The default value is 1. See SSL_CTX_set_max_pipelines(3) for further information.</p> </li> <li> <p>-read_buf +int</p> <p>The default read buffer size to be used for connections. This will only have an effect if the buffer size is larger than the size that would otherwise be used and pipelining is in use (see SSL_CTX_set_default_read_buffer_len(3) for further information).</p> </li> <li> <p>-ssl2, -ssl3, -tls1, -tls1_1, -tls1_2, -tls1_3, -no_ssl2, -no_ssl3, -no_tls1, -no_tls1_1, -no_tls1_2, -no_tls1_3</p> <p>These options require or disable the use of the specified SSL or TLS protocols. By default s_server will negotiate the highest mutually supported protocol version. When a specific TLS version is required, only that version will be accepted from the client. Note that not all protocols and flags may be available, depending on how OpenSSL was built.</p> </li> <li> <p>-bugs</p> <p>There are several known bugs in SSL and TLS implementations. Adding this option enables various workarounds.</p> </li> <li> <p>-no_comp</p> <p>Disable negotiation of TLS compression. TLS compression is not recommended and is off by default as of OpenSSL 1.1.0.</p> </li> <li> <p>-comp</p> <p>Enable negotiation of TLS compression. This option was introduced in OpenSSL 1.1.0. TLS compression is not recommended and is off by default as of OpenSSL 1.1.0.</p> </li> <li> <p>-no_ticket</p> <p>Disable RFC4507bis session ticket support. This option has no effect if TLSv1.3 is negotiated. See -num_tickets.</p> </li> <li> <p>-num_tickets</p> <p>Control the number of tickets that will be sent to the client after a full handshake in TLSv1.3. The default number of tickets is 2. This option does not affect the number of tickets sent after a resumption handshake.</p> </li> <li> <p>-serverpref</p> <p>Use the server's cipher preferences, rather than the client's preferences.</p> </li> <li> <p>-prioritize_chacha</p> <p>Prioritize ChaCha ciphers when preferred by clients. Requires -serverpref.</p> </li> <li> <p>-no_resumption_on_reneg</p> <p>Set the SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION option.</p> </li> <li> <p>-client_sigalgs val</p> <p>Signature algorithms to support for client certificate authentication (colon-separated list).</p> </li> <li> <p>-named_curve val</p> <p>Specifies the elliptic curve to use. NOTE: this is single curve, not a list. For a list of all possible curves, use:</p> <pre><code>$ openssl ecparam -list_curves\n</code></pre> </li> <li> <p>-cipher val</p> <p>This allows the list of TLSv1.2 and below ciphersuites used by the server to be modified. This list is combined with any TLSv1.3 ciphersuites that have been configured. When the client sends a list of supported ciphers the first client cipher also included in the server list is used. Because the client specifies the preference order, the order of the server cipherlist is irrelevant. See the ciphers command for more information.</p> </li> <li> <p>-ciphersuites val</p> <p>This allows the list of TLSv1.3 ciphersuites used by the server to be modified. This list is combined with any TLSv1.2 and below ciphersuites that have been configured. When the client sends a list of supported ciphers the first client cipher also included in the server list is used. Because the client specifies the preference order, the order of the server cipherlist is irrelevant. See the ciphers command for more information. The format for this list is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names.</p> </li> <li> <p>-dhparam infile</p> <p>The DH parameter file to use. The ephemeral DH cipher suites generate keys using a set of DH parameters. If not specified then an attempt is made to load the parameters from the server certificate file. If this fails then a static set of parameters hard coded into the s_server program will be used.</p> </li> <li> <p>-attime, -check_ss_sig, -crl_check, -crl_check_all, -explicit_policy, -extended_crl, -ignore_critical, -inhibit_any, -inhibit_map, -no_alt_chains, -no_check_time, -partial_chain, -policy, -policy_check, -policy_print, -purpose, -suiteB_128, -suiteB_128_only, -suiteB_192, -trusted_first, -use_deltas, -auth_level, -verify_depth, -verify_email, -verify_hostname, -verify_ip, -verify_name, -x509_strict</p> <p>Set different peer certificate verification options. See the verify(1) manual page for details.</p> </li> <li> <p>-crl_check, -crl_check_all</p> <p>Check the peer certificate has not been revoked by its CA. The CRL(s) are appended to the certificate file. With the -crl_check_all option all CRLs of all CAs in the chain are checked.</p> </li> <li> <p>-nbio</p> <p>Turns on non blocking I/O.</p> </li> <li> <p>-psk_identity val</p> <p>Expect the client to send PSK identity val when using a PSK cipher suite, and warn if they do not.  By default, the expected PSK identity is the string \"Client_identity\".</p> </li> <li> <p>-psk_hint val</p> <p>Use the PSK identity hint val when using a PSK cipher suite.</p> </li> <li> <p>-psk val</p> <p>Use the PSK key val when using a PSK cipher suite. The key is given as a hexadecimal number without leading 0x, for example -psk 1a2b3c4d. This option must be provided in order to use a PSK cipher.</p> </li> <li> <p>-psk_session file</p> <p>Use the pem encoded SSL_SESSION data stored in file as the basis of a PSK. Note that this will only work if TLSv1.3 is negotiated.</p> </li> <li> <p>-listen</p> <p>This option can only be used in conjunction with one of the DTLS options above. With this option s_server will listen on a UDP port for incoming connections. Any ClientHellos that arrive will be checked to see if they have a cookie in them or not. Any without a cookie will be responded to with a HelloVerifyRequest. If a ClientHello with a cookie is received then s_server will connect to that peer and complete the handshake.</p> </li> <li> <p>-dtls, -dtls1, -dtls1_2</p> <p>These options make s_server use DTLS protocols instead of TLS. With -dtls, s_server will negotiate any supported DTLS protocol version, whilst -dtls1 and -dtls1_2 will only support DTLSv1.0 and DTLSv1.2 respectively.</p> </li> <li> <p>-sctp</p> <p>Use SCTP for the transport protocol instead of UDP in DTLS. Must be used in conjunction with -dtls, -dtls1 or -dtls1_2. This option is only available where OpenSSL has support for SCTP enabled.</p> </li> <li> <p>-sctp_label_bug</p> <p>Use the incorrect behaviour of older OpenSSL implementations when computing endpoint-pair shared secrets for DTLS/SCTP. This allows communication with older broken implementations but breaks interoperability with correct implementations. Must be used in conjunction with -sctp. This option is only available where OpenSSL has support for SCTP enabled.</p> </li> <li> <p>-no_dhe</p> <p>If this option is set then no DH parameters will be loaded effectively disabling the ephemeral DH cipher suites.</p> </li> <li> <p>-alpn val, -nextprotoneg val</p> <p>These flags enable the Application-Layer Protocol Negotiation or Next Protocol Negotiation (NPN) extension, respectively. ALPN is the IETF standard and replaces NPN. The val list is a comma-separated list of supported protocol names.  The list should contain the most desirable protocols first. Protocol names are printable ASCII strings, for example \"http/1.1\" or \"spdy/3\". The flag -nextprotoneg cannot be specified if -tls1_3 is used.</p> </li> <li> <p>-engine val</p> <p>Specifying an engine (by its unique id string in val) will cause s_server to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-keylogfile outfile</p> <p>Appends TLS secrets to the specified keylog file such that external programs (like Wireshark) can decrypt TLS connections.</p> </li> <li> <p>-max_early_data int</p> <p>Change the default maximum early data bytes that are specified for new sessions and any incoming early data (when used in conjunction with the -early_data flag). The default value is approximately 16k. The argument must be an integer greater than or equal to 0.</p> </li> <li> <p>-early_data</p> <p>Accept early data where possible. Cannot be used in conjunction with -www, -WWW, -HTTP or -rev.</p> </li> <li> <p>-anti_replay, -no_anti_replay</p> <p>Switches replay protection on or off, respectively. Replay protection is on by default unless overridden by a configuration file. When it is on, OpenSSL will automatically detect if a session ticket has been used more than once, TLSv1.3 has been negotiated, and early data is enabled on the server. A full handshake is forced if a session ticket is used a second or subsequent time. Any early data that was sent will be rejected.</p> </li> </ul>"},{"location":"man1/s_server/#connected-commands","title":"CONNECTED COMMANDS","text":"<p>If a connection request is established with an SSL client and neither the -www nor the -WWW option has been used then normally any data received from the client is displayed and any key presses will be sent to the client.</p> <p>Certain commands are also recognized which perform special operations. These commands are a letter which must appear at the start of a line. They are listed below.</p> <ul> <li> <p>q</p> <p>End the current SSL connection but still accept new connections.</p> </li> <li> <p>Q</p> <p>End the current SSL connection and exit.</p> </li> <li> <p>r</p> <p>Renegotiate the SSL session (TLSv1.2 and below only).</p> </li> <li> <p>R</p> <p>Renegotiate the SSL session and request a client certificate (TLSv1.2 and below only).</p> </li> <li> <p>P</p> <p>Send some plain text down the underlying TCP connection: this should cause the client to disconnect due to a protocol violation.</p> </li> <li> <p>S</p> <p>Print out some session cache status information.</p> </li> <li> <p>B</p> <p>Send a heartbeat message to the client (DTLS only)</p> </li> <li> <p>k</p> <p>Send a key update message to the client (TLSv1.3 only)</p> </li> <li> <p>K</p> <p>Send a key update message to the client and request one back (TLSv1.3 only)</p> </li> <li> <p>c</p> <p>Send a certificate request to the client (TLSv1.3 only)</p> </li> </ul>"},{"location":"man1/s_server/#notes","title":"NOTES","text":"<p>s_server can be used to debug SSL clients. To accept connections from a web browser the command:</p> <pre><code>openssl s_server -accept 443 -www\n</code></pre> <p>can be used for example.</p> <p>Although specifying an empty list of CAs when requesting a client certificate is strictly speaking a protocol violation, some SSL clients interpret this to mean any CA is acceptable. This is useful for debugging purposes.</p> <p>The session parameters can printed out using the sess_id program.</p>"},{"location":"man1/s_server/#bugs","title":"BUGS","text":"<p>Because this program has a lot of options and also because some of the techniques used are rather old, the C source of s_server is rather hard to read and not a model of how things should be done. A typical SSL server program would be much simpler.</p> <p>The output of common ciphers is wrong: it just gives the list of ciphers that OpenSSL recognizes and the client supports.</p> <p>There should be a way for the s_server program to print out details of any unknown cipher suites a client says it supports.</p>"},{"location":"man1/s_server/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_cmd(3), sess_id(1), s_client(1), ciphers(1) SSL_CTX_set_max_send_fragment(3), SSL_CTX_set_split_send_fragment(3), SSL_CTX_set_max_pipelines(3)</p>"},{"location":"man1/s_server/#history","title":"HISTORY","text":"<p>The -no_alt_chains option was added in OpenSSL 1.1.0.</p> <p>The -allow-no-dhe-kex and -prioritize_chacha options were added in OpenSSL 1.1.1.</p>"},{"location":"man1/s_server/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/s_time/","title":"s_time","text":""},{"location":"man1/s_time/#name","title":"NAME","text":"<p>openssl-s_time, s_time - SSL/TLS performance timing program</p>"},{"location":"man1/s_time/#synopsis","title":"SYNOPSIS","text":"<p>openssl s_time [-help] [-connect host:port] [-www page] [-cert filename] [-key filename] [-CApath directory] [-CAfile filename] [-no-CAfile] [-no-CApath] [-reuse] [-new] [-verify depth] [-nameopt option] [-time seconds] [-ssl3] [-bugs] [-cipher cipherlist] [-ciphersuites val]</p>"},{"location":"man1/s_time/#description","title":"DESCRIPTION","text":"<p>The s_time command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS. It can request a page from the server and includes the time to transfer the payload data in its timing measurements. It measures the number of connections within a given timeframe, the amount of data transferred (if any), and calculates the average time spent for one connection.</p>"},{"location":"man1/s_time/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-connect host:port</p> <p>This specifies the host and optional port to connect to.</p> </li> <li> <p>-www page</p> <p>This specifies the page to GET from the server. A value of '/' gets the index.htm[l] page. If this parameter is not specified, then s_time will only perform the handshake to establish SSL connections but not transfer any payload data.</p> </li> <li> <p>-cert certname</p> <p>The certificate to use, if one is requested by the server. The default is not to use a certificate. The file is in PEM format.</p> </li> <li> <p>-key keyfile</p> <p>The private key to use. If not specified then the certificate file will be used. The file is in PEM format.</p> </li> <li> <p>-verify depth</p> <p>The verify depth to use. This specifies the maximum length of the server certificate chain and turns on server certificate verification. Currently the verify operation continues after errors so all the problems with a certificate chain can be seen. As a side effect the connection will never fail due to a server certificate verify failure.</p> </li> <li> <p>-nameopt option</p> <p>Option which determines how the subject or issuer names are displayed. The option argument can be a single option or multiple options separated by commas.  Alternatively the -nameopt switch may be used more than once to set multiple options. See the x509(1) manual page for details.</p> </li> <li> <p>-CApath directory</p> <p>The directory to use for server certificate verification. This directory must be in \"hash format\", see verify for more information. These are also used when building the client certificate chain.</p> </li> <li> <p>-CAfile file</p> <p>A file containing trusted certificates to use during server authentication and to use when attempting to build the client certificate chain.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location</p> </li> <li> <p>-new</p> <p>Performs the timing test using a new session ID for each connection. If neither -new nor -reuse are specified, they are both on by default and executed in sequence.</p> </li> <li> <p>-reuse</p> <p>Performs the timing test using the same session ID; this can be used as a test that session caching is working. If neither -new nor -reuse are specified, they are both on by default and executed in sequence.</p> </li> <li> <p>-ssl3</p> <p>This option disables the use of SSL version 3. By default the initial handshake uses a method which should be compatible with all servers and permit them to use SSL v3 or TLS as appropriate.</p> <p>The timing program is not as rich in options to turn protocols on and off as the s_client(1) program and may not connect to all servers. Unfortunately there are a lot of ancient and broken servers in use which cannot handle this technique and will fail to connect. Some servers only work if TLS is turned off with the -ssl3 option.</p> <p>Note that this option may not be available, depending on how OpenSSL was built.</p> </li> <li> <p>-bugs</p> <p>There are several known bugs in SSL and TLS implementations. Adding this option enables various workarounds.</p> </li> <li> <p>-cipher cipherlist</p> <p>This allows the TLSv1.2 and below cipher list sent by the client to be modified. This list will be combined with any TLSv1.3 ciphersuites that have been configured. Although the server determines which cipher suite is used it should take the first supported cipher in the list sent by the client. See ciphers(1) for more information.</p> </li> <li> <p>-ciphersuites val</p> <p>This allows the TLSv1.3 ciphersuites sent by the client to be modified. This list will be combined with any TLSv1.2 and below ciphersuites that have been configured. Although the server determines which cipher suite is used it should take the first supported cipher in the list sent by the client. See ciphers(1) for more information. The format for this list is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names.</p> </li> <li> <p>-time length</p> <p>Specifies how long (in seconds) s_time should establish connections and optionally transfer payload data from a server. Server and client performance and the link speed determine how many connections s_time can establish.</p> </li> </ul>"},{"location":"man1/s_time/#notes","title":"NOTES","text":"<p>s_time can be used to measure the performance of an SSL connection. To connect to an SSL HTTP server and get the default page the command</p> <pre><code>openssl s_time -connect servername:443 -www / -CApath yourdir -CAfile yourfile.pem -cipher commoncipher [-ssl3]\n</code></pre> <p>would typically be used (https uses port 443). 'commoncipher' is a cipher to which both client and server can agree, see the ciphers(1) command for details.</p> <p>If the handshake fails then there are several possible causes, if it is nothing obvious like no client certificate then the -bugs and -ssl3 options can be tried in case it is a buggy server. In particular you should play with these options before submitting a bug report to an OpenSSL mailing list.</p> <p>A frequent problem when attempting to get client certificates working is that a web client complains it has no certificates or gives an empty list to choose from. This is normally because the server is not sending the clients certificate authority in its \"acceptable CA list\" when it requests a certificate. By using s_client(1) the CA list can be viewed and checked. However, some servers only request client authentication after a specific URL is requested. To obtain the list in this case it is necessary to use the -prexit option of s_client(1) and send an HTTP request for an appropriate page.</p> <p>If a certificate is specified on the command line using the -cert option it will not be used unless the server specifically requests a client certificate. Therefore, merely including a client certificate on the command line is no guarantee that the certificate works.</p>"},{"location":"man1/s_time/#bugs","title":"BUGS","text":"<p>Because this program does not have all the options of the s_client(1) program to turn protocols on and off, you may not be able to measure the performance of all protocols with all servers.</p> <p>The -verify option should really exit if the server verification fails.</p>"},{"location":"man1/s_time/#see-also","title":"SEE ALSO","text":"<p>s_client(1), s_server(1), ciphers(1)</p>"},{"location":"man1/s_time/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/sess_id/","title":"sess_id","text":""},{"location":"man1/sess_id/#name","title":"NAME","text":"<p>openssl-sess_id, sess_id - SSL/TLS session handling utility</p>"},{"location":"man1/sess_id/#synopsis","title":"SYNOPSIS","text":"<p>openssl sess_id [-help] [-inform PEM|DER] [-outform PEM|DER|NSS] [-in filename] [-out filename] [-text] [-noout] [-context ID]</p>"},{"location":"man1/sess_id/#description","title":"DESCRIPTION","text":"<p>The sess_id process the encoded version of the SSL session structure and optionally prints out SSL session details (for example the SSL session master key) in human readable format. Since this is a diagnostic tool that needs some knowledge of the SSL protocol to use properly, most users will not need to use it.</p>"},{"location":"man1/sess_id/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format. The DER option uses an ASN1 DER encoded format containing session details. The precise format can vary from one version to the next.  The PEM form is the default format: it consists of the DER format base64 encoded with additional header and footer lines.</p> </li> <li> <p>-outform DER|PEM|NSS</p> <p>This specifies the output format. The PEM and DER options have the same meaning and default as the -inform option. The NSS option outputs the session id and the master key in NSS keylog format.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read session information from or standard input by default.</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write session information to or standard output if this option is not specified.</p> </li> <li> <p>-text</p> <p>Prints out the various public or private key components in plain text in addition to the encoded version.</p> </li> <li> <p>-cert</p> <p>If a certificate is present in the session it will be output using this option, if the -text option is also present then it will be printed out in text form.</p> </li> <li> <p>-noout</p> <p>This option prevents output of the encoded version of the session.</p> </li> <li> <p>-context ID</p> <p>This option can set the session id so the output session information uses the supplied ID. The ID can be any string of characters. This option won't normally be used.</p> </li> </ul>"},{"location":"man1/sess_id/#output","title":"OUTPUT","text":"<p>Typical output:</p> <pre><code>SSL-Session:\n    Protocol  : TLSv1\n    Cipher    : 0016\n    Session-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED\n    Session-ID-ctx: 01000000\n    Master-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD\n    Key-Arg   : None\n    Start Time: 948459261\n    Timeout   : 300 (sec)\n    Verify return code 0 (ok)\n</code></pre> <p>These are described below in more detail.</p> <ul> <li> <p>Protocol</p> <p>This is the protocol in use TLSv1.3, TLSv1.2, TLSv1.1, TLSv1 or SSLv3.</p> </li> <li> <p>Cipher</p> <p>The cipher used this is the actual raw SSL or TLS cipher code, see the SSL or TLS specifications for more information.</p> </li> <li> <p>Session-ID</p> <p>The SSL session ID in hex format.</p> </li> <li> <p>Session-ID-ctx</p> <p>The session ID context in hex format.</p> </li> <li> <p>Master-Key</p> <p>This is the SSL session master key.</p> </li> <li> <p>Start Time</p> <p>This is the session start time represented as an integer in standard Unix format.</p> </li> <li> <p>Timeout</p> <p>The timeout in seconds.</p> </li> <li> <p>Verify return code</p> <p>This is the return code when an SSL client certificate is verified.</p> </li> </ul>"},{"location":"man1/sess_id/#notes","title":"NOTES","text":"<p>The PEM encoded session format uses the header and footer lines:</p> <pre><code>-----BEGIN SSL SESSION PARAMETERS-----\n-----END SSL SESSION PARAMETERS-----\n</code></pre> <p>Since the SSL session output contains the master key it is possible to read the contents of an encrypted session using this information. Therefore, appropriate security precautions should be taken if the information is being output by a \"real\" application. This is however strongly discouraged and should only be used for debugging purposes.</p>"},{"location":"man1/sess_id/#bugs","title":"BUGS","text":"<p>The cipher and start time should be printed out in human readable form.</p>"},{"location":"man1/sess_id/#see-also","title":"SEE ALSO","text":"<p>ciphers(1), s_server(1)</p>"},{"location":"man1/sess_id/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/smime/","title":"smime","text":""},{"location":"man1/smime/#name","title":"NAME","text":"<p>openssl-smime, smime - S/MIME utility</p>"},{"location":"man1/smime/#synopsis","title":"SYNOPSIS","text":"<p>openssl smime [-help] [-encrypt] [-decrypt] [-sign] [-resign] [-verify] [-pk7out] [-binary] [-crlfeol] [-cipher] [-in file] [-CAfile file] [-CApath dir] [-no-CAfile] [-no-CApath] [-attime timestamp] [-check_ss_sig] [-crl_check] [-crl_check_all] [-explicit_policy] [-extended_crl] [-ignore_critical] [-inhibit_any] [-inhibit_map] [-partial_chain] [-policy arg] [-policy_check] [-policy_print] [-purpose purpose] [-suiteB_128] [-suiteB_128_only] [-suiteB_192] [-trusted_first] [-no_alt_chains] [-use_deltas] [-auth_level num] [-verify_depth num] [-verify_email email] [-verify_hostname hostname] [-verify_ip ip] [-verify_name name] [-x509_strict] [-certfile file] [-signer file] [-recip  file] [-inform SMIME|PEM|DER] [-passin arg] [-inkey file_or_id] [-out file] [-outform SMIME|PEM|DER] [-content file] [-to addr] [-from ad] [-subject s] [-text] [-indef] [-noindef] [-stream] [-rand file...] [-writerand file] [-md digest] [cert.pem]...</p>"},{"location":"man1/smime/#description","title":"DESCRIPTION","text":"<p>The smime command handles S/MIME mail. It can encrypt, decrypt, sign and verify S/MIME messages.</p>"},{"location":"man1/smime/#options","title":"OPTIONS","text":"<p>There are six operation options that set the type of operation to be performed. The meaning of the other options varies according to the operation type.</p> <ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-encrypt</p> <p>Encrypt mail for the given recipient certificates. Input file is the message to be encrypted. The output file is the encrypted mail in MIME format.</p> <p>Note that no revocation check is done for the recipient cert, so if that key has been compromised, others may be able to decrypt the text.</p> </li> <li> <p>-decrypt</p> <p>Decrypt mail using the supplied certificate and private key. Expects an encrypted mail message in MIME format for the input file. The decrypted mail is written to the output file.</p> </li> <li> <p>-sign</p> <p>Sign mail using the supplied certificate and private key. Input file is the message to be signed. The signed message in MIME format is written to the output file.</p> </li> <li> <p>-verify</p> <p>Verify signed mail. Expects a signed mail message on input and outputs the signed data. Both clear text and opaque signing is supported.</p> </li> <li> <p>-pk7out</p> <p>Takes an input message and writes out a PEM encoded PKCS#7 structure.</p> </li> <li> <p>-resign</p> <p>Resign a message: take an existing message and one or more new signers.</p> </li> <li> <p>-in filename</p> <p>The input message to be encrypted or signed or the MIME message to be decrypted or verified.</p> </li> <li> <p>-inform SMIME|PEM|DER</p> <p>This specifies the input format for the PKCS#7 structure. The default is SMIME which reads an S/MIME format message. PEM and DER format change this to expect PEM and DER format PKCS#7 structures instead. This currently only affects the input format of the PKCS#7 structure, if no PKCS#7 structure is being input (for example with -encrypt or -sign) this option has no effect.</p> </li> <li> <p>-out filename</p> <p>The message text that has been decrypted or verified or the output MIME format message that has been signed or verified.</p> </li> <li> <p>-outform SMIME|PEM|DER</p> <p>This specifies the output format for the PKCS#7 structure. The default is SMIME which write an S/MIME format message. PEM and DER format change this to write PEM and DER format PKCS#7 structures instead. This currently only affects the output format of the PKCS#7 structure, if no PKCS#7 structure is being output (for example with -verify or -decrypt) this option has no effect.</p> </li> <li> <p>-stream -indef -noindef</p> <p>The -stream and -indef options are equivalent and enable streaming I/O for encoding operations. This permits single pass processing of data without the need to hold the entire contents in memory, potentially supporting very large files. Streaming is automatically set for S/MIME signing with detached data if the output format is SMIME it is currently off by default for all other operations.</p> </li> <li> <p>-noindef</p> <p>Disable streaming I/O where it would produce and indefinite length constructed encoding. This option currently has no effect. In future streaming will be enabled by default on all relevant operations and this option will disable it.</p> </li> <li> <p>-content filename</p> <p>This specifies a file containing the detached content, this is only useful with the -verify command. This is only usable if the PKCS#7 structure is using the detached signature form where the content is not included. This option will override any content if the input format is S/MIME and it uses the multipart/signed MIME content type.</p> </li> <li> <p>-text</p> <p>This option adds plain text (text/plain) MIME headers to the supplied message if encrypting or signing. If decrypting or verifying it strips off text headers: if the decrypted or verified message is not of MIME type text/plain then an error occurs.</p> </li> <li> <p>-CAfile file</p> <p>A file containing trusted CA certificates, only used with -verify.</p> </li> <li> <p>-CApath dir</p> <p>A directory containing trusted CA certificates, only used with -verify. This directory must be a standard certificate directory: that is a hash of each subject name (using x509 -hash) should be linked to each certificate.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location.</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location.</p> </li> <li> <p>-md digest</p> <p>Digest algorithm to use when signing or resigning. If not present then the default digest algorithm for the signing key will be used (usually SHA1).</p> </li> <li> <p>-cipher</p> <p>The encryption algorithm to use. For example DES  (56 bits) - -des, triple DES (168 bits) - -des3, EVP_get_cipherbyname() function) can also be used preceded by a dash, for example -aes-128-cbc. See enc for list of ciphers supported by your version of OpenSSL.</p> <p>If not specified triple DES is used. Only used with -encrypt.</p> </li> <li> <p>-nointern</p> <p>When verifying a message normally certificates (if any) included in the message are searched for the signing certificate. With this option only the certificates specified in the -certfile option are used. The supplied certificates can still be used as untrusted CAs however.</p> </li> <li> <p>-noverify</p> <p>Do not verify the signers certificate of a signed message.</p> </li> <li> <p>-nochain</p> <p>Do not do chain verification of signers certificates: that is don't use the certificates in the signed message as untrusted CAs.</p> </li> <li> <p>-nosigs</p> <p>Don't try to verify the signatures on the message.</p> </li> <li> <p>-nocerts</p> <p>When signing a message the signer's certificate is normally included with this option it is excluded. This will reduce the size of the signed message but the verifier must have a copy of the signers certificate available locally (passed using the -certfile option for example).</p> </li> <li> <p>-noattr</p> <p>Normally when a message is signed a set of attributes are included which include the signing time and supported symmetric algorithms. With this option they are not included.</p> </li> <li> <p>-binary</p> <p>Normally the input message is converted to \"canonical\" format which is effectively using CR and LF as end of line: as required by the S/MIME specification. When this option is present no translation occurs. This is useful when handling binary data which may not be in MIME format.</p> </li> <li> <p>-crlfeol</p> <p>Normally the output file uses a single LF as end of line. When this option is present CRLF is used instead.</p> </li> <li> <p>-nodetach</p> <p>When signing a message use opaque signing: this form is more resistant to translation by mail relays but it cannot be read by mail agents that do not support S/MIME.  Without this option cleartext signing with the MIME type multipart/signed is used.</p> </li> <li> <p>-certfile file</p> <p>Allows additional certificates to be specified. When signing these will be included with the message. When verifying these will be searched for the signers certificates. The certificates should be in PEM format.</p> </li> <li> <p>-signer file</p> <p>A signing certificate when signing or resigning a message, this option can be used multiple times if more than one signer is required. If a message is being verified then the signers certificates will be written to this file if the verification was successful.</p> </li> <li> <p>-recip file</p> <p>The recipients certificate when decrypting a message. This certificate must match one of the recipients of the message or an error occurs.</p> </li> <li> <p>-inkey file_or_id</p> <p>The private key to use when signing or decrypting. This must match the corresponding certificate. If this option is not specified then the private key must be included in the certificate file specified with the -recip or -signer file. When signing this option can be used multiple times to specify successive keys. If no engine is used, the argument is taken as a file; if an engine is specified, the argument is given to the engine as a key identifier.</p> </li> <li> <p>-passin arg</p> <p>The private key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>cert.pem...</p> <p>One or more certificates of message recipients: used when encrypting a message.</p> </li> <li> <p>-to, -from, -subject</p> <p>The relevant mail headers. These are included outside the signed portion of a message so they may be included manually. If signing then many S/MIME mail clients check the signers certificate's email address matches that specified in the From: address.</p> </li> <li> <p>-attime, -check_ss_sig, -crl_check, -crl_check_all, -explicit_policy, -extended_crl, -ignore_critical, -inhibit_any, -inhibit_map, -no_alt_chains, -partial_chain, -policy, -policy_check, -policy_print, -purpose, -suiteB_128, -suiteB_128_only, -suiteB_192, -trusted_first, -use_deltas, -auth_level, -verify_depth, -verify_email, -verify_hostname, -verify_ip, -verify_name, -x509_strict</p> <p>Set various options of certificate chain verification. See verify(1) manual page for details.</p> </li> </ul>"},{"location":"man1/smime/#notes","title":"NOTES","text":"<p>The MIME message must be sent without any blank lines between the headers and the output. Some mail programs will automatically add a blank line. Piping the mail directly to sendmail is one way to achieve the correct format.</p> <p>The supplied message to be signed or encrypted must include the necessary MIME headers or many S/MIME clients won't display it properly (if at all). You can use the -text option to automatically add plain text headers.</p> <p>A \"signed and encrypted\" message is one where a signed message is then encrypted. This can be produced by encrypting an already signed message: see the examples section.</p> <p>This version of the program only allows one signer per message but it will verify multiple signers on received messages. Some S/MIME clients choke if a message contains multiple signers. It is possible to sign messages \"in parallel\" by signing an already signed message.</p> <p>The options -encrypt and -decrypt reflect common usage in S/MIME clients. Strictly speaking these process PKCS#7 enveloped data: PKCS#7 encrypted data is used for other purposes.</p> <p>The -resign option uses an existing message digest when adding a new signer. This means that attributes must be present in at least one existing signer using the same message digest or this operation will fail.</p> <p>The -stream and -indef options enable streaming I/O support. As a result the encoding is BER using indefinite length constructed encoding and no longer DER. Streaming is supported for the -encrypt operation and the -sign operation if the content is not detached.</p> <p>Streaming is always used for the -sign operation with detached data but since the content is no longer part of the PKCS#7 structure the encoding remains DER.</p>"},{"location":"man1/smime/#exit-codes","title":"EXIT CODES","text":"<ul> <li> <p>0</p> <p>The operation was completely successfully.</p> </li> <li> <p>1</p> <p>An error occurred parsing the command options.</p> </li> <li> <p>2</p> <p>One of the input files could not be read.</p> </li> <li> <p>3</p> <p>An error occurred creating the PKCS#7 file or when reading the MIME message.</p> </li> <li> <p>4</p> <p>An error occurred decrypting or verifying the message.</p> </li> <li> <p>5</p> <p>The message was verified correctly but an error occurred writing out the signers certificates.</p> </li> </ul>"},{"location":"man1/smime/#examples","title":"EXAMPLES","text":"<p>Create a cleartext signed message:</p> <pre><code>openssl smime -sign -in message.txt -text -out mail.msg \\\n       -signer mycert.pem\n</code></pre> <p>Create an opaque signed message:</p> <pre><code>openssl smime -sign -in message.txt -text -out mail.msg -nodetach \\\n       -signer mycert.pem\n</code></pre> <p>Create a signed message, include some additional certificates and read the private key from another file:</p> <pre><code>openssl smime -sign -in in.txt -text -out mail.msg \\\n       -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem\n</code></pre> <p>Create a signed message with two signers:</p> <pre><code>openssl smime -sign -in message.txt -text -out mail.msg \\\n       -signer mycert.pem -signer othercert.pem\n</code></pre> <p>Send a signed message under Unix directly to sendmail, including headers:</p> <pre><code>openssl smime -sign -in in.txt -text -signer mycert.pem \\\n       -from steve@openssl.org -to someone@somewhere \\\n       -subject \"Signed message\" | sendmail someone@somewhere\n</code></pre> <p>Verify a message and extract the signer's certificate if successful:</p> <pre><code>openssl smime -verify -in mail.msg -signer user.pem -out signedtext.txt\n</code></pre> <p>Send encrypted mail using triple DES:</p> <pre><code>openssl smime -encrypt -in in.txt -from steve@openssl.org \\\n       -to someone@somewhere -subject \"Encrypted message\" \\\n       -des3 user.pem -out mail.msg\n</code></pre> <p>Sign and encrypt mail:</p> <pre><code>openssl smime -sign -in ml.txt -signer my.pem -text \\\n       | openssl smime -encrypt -out mail.msg \\\n       -from steve@openssl.org -to someone@somewhere \\\n       -subject \"Signed and Encrypted message\" -des3 user.pem\n</code></pre> <p>Note: the encryption command does not include the -text option because the message being encrypted already has MIME headers.</p> <p>Decrypt mail:</p> <pre><code>openssl smime -decrypt -in mail.msg -recip mycert.pem -inkey key.pem\n</code></pre> <p>The output from Netscape form signing is a PKCS#7 structure with the detached signature format. You can use this program to verify the signature by line wrapping the base64 encoded structure and surrounding it with:</p> <pre><code>-----BEGIN PKCS7-----\n-----END PKCS7-----\n</code></pre> <p>and using the command:</p> <pre><code>openssl smime -verify -inform PEM -in signature.pem -content content.txt\n</code></pre> <p>Alternatively you can base64 decode the signature and use:</p> <pre><code>openssl smime -verify -inform DER -in signature.der -content content.txt\n</code></pre> <p>Create an encrypted message using 128 bit Camellia:</p> <pre><code>openssl smime -encrypt -in plain.txt -camellia128 -out mail.msg cert.pem\n</code></pre> <p>Add a signer to an existing message:</p> <pre><code>openssl smime -resign -in mail.msg -signer newsign.pem -out mail2.msg\n</code></pre>"},{"location":"man1/smime/#bugs","title":"BUGS","text":"<p>The MIME parser isn't very clever: it seems to handle most messages that I've thrown at it but it may choke on others.</p> <p>The code currently will only write out the signer's certificate to a file: if the signer has a separate encryption certificate this must be manually extracted. There should be some heuristic that determines the correct encryption certificate.</p> <p>Ideally a database should be maintained of a certificates for each email address.</p> <p>The code doesn't currently take note of the permitted symmetric encryption algorithms as supplied in the SMIMECapabilities signed attribute. This means the user has to manually include the correct encryption algorithm. It should store the list of permitted ciphers in a database and only use those.</p> <p>No revocation checking is done on the signer's certificate.</p> <p>The current code can only handle S/MIME v2 messages, the more complex S/MIME v3 structures may cause parsing errors.</p>"},{"location":"man1/smime/#history","title":"HISTORY","text":"<p>The use of multiple -signer options and the -resign command were first added in OpenSSL 1.0.0</p> <p>The -no_alt_chains option was added in OpenSSL 1.1.0.</p>"},{"location":"man1/smime/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/speed/","title":"speed","text":""},{"location":"man1/speed/#name","title":"NAME","text":"<p>openssl-speed, speed - test library performance</p>"},{"location":"man1/speed/#synopsis","title":"SYNOPSIS","text":"<p>openssl speed [-help] [-engine id] [-elapsed] [-evp algo] [-decrypt] [-rand file...] [-writerand file] [-primes num] [-seconds num] [-bytes num] [algorithm...]</p>"},{"location":"man1/speed/#description","title":"DESCRIPTION","text":"<p>This command is used to test the performance of cryptographic algorithms. To see the list of supported algorithms, use the list --digest-commands or list --cipher-commands command. The global CSPRNG is denoted by the rand algorithm name.</p>"},{"location":"man1/speed/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause speed to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-elapsed</p> <p>When calculating operations- or bytes-per-second, use wall-clock time instead of CPU user time as divisor. It can be useful when testing speed of hardware engines.</p> </li> <li> <p>-evp algo</p> <p>Use the specified cipher or message digest algorithm via the EVP interface. If algo is an AEAD cipher, then you can pass &lt;-aead&gt; to benchmark a TLS-like sequence. And if algo is a multi-buffer capable cipher, e.g. aes-128-cbc-hmac-sha1, then -mb will time multi-buffer operation.</p> </li> <li> <p>-decrypt</p> <p>Time the decryption instead of encryption. Affects only the EVP testing.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-primes num</p> <p>Generate a num-prime RSA key and use it to run the benchmarks. This option is only effective if RSA algorithm is specified to test.</p> </li> <li> <p>-seconds num</p> <p>Run benchmarks for num seconds.</p> </li> <li> <p>-bytes num</p> <p>Run benchmarks on num-byte buffers. Affects ciphers, digests and the CSPRNG.</p> </li> <li> <p>[zero or more test algorithms]</p> <p>If any options are given, speed tests those algorithms, otherwise a pre-compiled grand selection is tested.</p> </li> </ul>"},{"location":"man1/speed/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/spkac/","title":"spkac","text":""},{"location":"man1/spkac/#name","title":"NAME","text":"<p>openssl-spkac, spkac - SPKAC printing and generating utility</p>"},{"location":"man1/spkac/#synopsis","title":"SYNOPSIS","text":"<p>openssl spkac [-help] [-in filename] [-out filename] [-key keyfile] [-keyform PEM|DER|ENGINE] [-passin arg] [-challenge string] [-pubkey] [-spkac spkacname] [-spksect section] [-noout] [-verify] [-engine id]</p>"},{"location":"man1/spkac/#description","title":"DESCRIPTION","text":"<p>The spkac command processes Netscape signed public key and challenge (SPKAC) files. It can print out their contents, verify the signature and produce its own SPKACs from a supplied private key.</p>"},{"location":"man1/spkac/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read from or standard input if this option is not specified. Ignored if the -key option is used.</p> </li> <li> <p>-out filename</p> <p>Specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-key keyfile</p> <p>Create an SPKAC file using the private key in keyfile. The -in, -noout, -spksect and -verify options are ignored if present.</p> </li> <li> <p>-keyform PEM|DER|ENGINE</p> <p>Whether the key format is PEM, DER, or an engine-backed key. The default is PEM.</p> </li> <li> <p>-passin password</p> <p>The input file password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-challenge string</p> <p>Specifies the challenge string if an SPKAC is being created.</p> </li> <li> <p>-spkac spkacname</p> <p>Allows an alternative name form the variable containing the SPKAC. The default is \"SPKAC\". This option affects both generated and input SPKAC files.</p> </li> <li> <p>-spksect section</p> <p>Allows an alternative name form the section containing the SPKAC. The default is the default section.</p> </li> <li> <p>-noout</p> <p>Don't output the text version of the SPKAC (not used if an SPKAC is being created).</p> </li> <li> <p>-pubkey</p> <p>Output the public key of an SPKAC (not used if an SPKAC is being created).</p> </li> <li> <p>-verify</p> <p>Verifies the digital signature on the supplied SPKAC.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause spkac to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> </ul>"},{"location":"man1/spkac/#examples","title":"EXAMPLES","text":"<p>Print out the contents of an SPKAC:</p> <pre><code>openssl spkac -in spkac.cnf\n</code></pre> <p>Verify the signature of an SPKAC:</p> <pre><code>openssl spkac -in spkac.cnf -noout -verify\n</code></pre> <p>Create an SPKAC using the challenge string \"hello\":</p> <pre><code>openssl spkac -key key.pem -challenge hello -out spkac.cnf\n</code></pre> <p>Example of an SPKAC, (long lines split up for clarity):</p> <pre><code>SPKAC=MIG5MGUwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA\\\n1cCoq2Wa3Ixs47uI7FPVwHVIPDx5yso105Y6zpozam135a\\\n8R0CpoRvkkigIyXfcCjiVi5oWk+6FfPaD03uPFoQIDAQAB\\\nFgVoZWxsbzANBgkqhkiG9w0BAQQFAANBAFpQtY/FojdwkJ\\\nh1bEIYuc2EeM2KHTWPEepWYeawvHD0gQ3DngSC75YCWnnD\\\ndq+NQ3F+X4deMx9AaEglZtULwV4=\n</code></pre>"},{"location":"man1/spkac/#notes","title":"NOTES","text":"<p>A created SPKAC with suitable DN components appended can be fed into the ca utility.</p> <p>SPKACs are typically generated by Netscape when a form is submitted containing the KEYGEN tag as part of the certificate enrollment process.</p> <p>The challenge string permits a primitive form of proof of possession of private key. By checking the SPKAC signature and a random challenge string some guarantee is given that the user knows the private key corresponding to the public key being certified. This is important in some applications. Without this it is possible for a previous SPKAC to be used in a \"replay attack\".</p>"},{"location":"man1/spkac/#see-also","title":"SEE ALSO","text":"<p>ca(1)</p>"},{"location":"man1/spkac/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/srp/","title":"srp","text":""},{"location":"man1/srp/#name","title":"NAME","text":"<p>openssl-srp, srp - maintain SRP password file</p>"},{"location":"man1/srp/#synopsis","title":"SYNOPSIS","text":"<p>openssl srp [-help] [-verbose] [-add] [-modify] [-delete] [-list] [-name section] [-config file] [-srpvfile file] [-gn identifier] [-userinfo text...] [-passin arg] [-passout arg] [user...]</p>"},{"location":"man1/srp/#description","title":"DESCRIPTION","text":"<p>The srp command is user to maintain an SRP (secure remote password) file. At most one of the -add, -modify, -delete, and -list options can be specified. These options take zero or more usernames as parameters and perform the appropriate operation on the SRP file. For -list, if no user is given then all users are displayed.</p> <p>The configuration file to use, and the section within the file, can be specified with the -config and -name flags, respectively. If the config file is not specified, the -srpvfile can be used to just specify the file to operate on.</p> <p>The -userinfo option specifies additional information to add when adding or modifying a user.</p> <p>The -gn flag specifies the g and N values, using one of the strengths defined in IETF RFC 5054.</p> <p>The -passin and -passout arguments are parsed as described in the openssl(1) command.</p>"},{"location":"man1/srp/#options","title":"OPTIONS","text":"<ul> <li> <p>[-help]</p> <p>Display an option summary.</p> </li> <li> <p>[-verbose]</p> <p>Generate verbose output while processing.</p> </li> </ul>"},{"location":"man1/srp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/storeutl/","title":"storeutl","text":""},{"location":"man1/storeutl/#name","title":"NAME","text":"<p>openssl-storeutl, storeutl - STORE utility</p>"},{"location":"man1/storeutl/#synopsis","title":"SYNOPSIS","text":"<p>openssl storeutl [-help] [-out file] [-noout] [-passin arg] [-text arg] [-engine id] [-r] [-certs] [-keys] [-crls] [-subject arg] [-issuer arg] [-serial arg] [-alias arg] [-fingerprint arg] [-digest] uri ...</p>"},{"location":"man1/storeutl/#description","title":"DESCRIPTION","text":"<p>The storeutl command can be used to display the contents (after decryption as the case may be) fetched from the given URIs.</p>"},{"location":"man1/storeutl/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-out filename</p> <p>specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-noout</p> <p>this option prevents output of the PEM data.</p> </li> <li> <p>-passin arg</p> <p>the key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-text</p> <p>Prints out the objects in text form, similarly to the -text output from openssl x509, openssl pkey, etc.</p> </li> <li> <p>-engine id</p> <p>specifying an engine (by its unique id string) will cause storeutl to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-r</p> <p>Fetch objects recursively when possible.</p> </li> <li> <p>-certs</p> </li> <li>-keys</li> <li> <p>-crls</p> <p>Only select the certificates, keys or CRLs from the given URI. However, if this URI would return a set of names (URIs), those are always returned.</p> </li> <li> <p>-subject arg</p> <p>Search for an object having the subject name arg. The arg must be formatted as /type0=value0/type1=value1/type2=.... Keyword characters may be escaped by \\ (backslash), and whitespace is retained. Empty values are permitted but are ignored for the search.  That is, a search with an empty value will have the same effect as not specifying the type at all.</p> </li> <li> <p>-issuer arg</p> </li> <li> <p>-serial arg</p> <p>Search for an object having the given issuer name and serial number. These two options must be used together. The issuer arg must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \\ (backslash), no spaces are skipped. The serial arg may be specified as a decimal value or a hex value if preceded by 0x.</p> </li> <li> <p>-alias arg</p> <p>Search for an object having the given alias.</p> </li> <li> <p>-fingerprint arg</p> <p>Search for an object having the given fingerprint.</p> </li> <li> <p>-digest</p> <p>The digest that was used to compute the fingerprint given with -fingerprint.</p> </li> </ul>"},{"location":"man1/storeutl/#see-also","title":"SEE ALSO","text":"<p>openssl(1)</p>"},{"location":"man1/storeutl/#history","title":"HISTORY","text":"<p>The openssl storeutl app was added in OpenSSL 1.1.1.</p>"},{"location":"man1/storeutl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/ts/","title":"ts","text":""},{"location":"man1/ts/#name","title":"NAME","text":"<p>openssl-ts, ts - Time Stamping Authority tool (client/server)</p>"},{"location":"man1/ts/#synopsis","title":"SYNOPSIS","text":"<p>openssl ts -query [-rand file...] [-writerand file] [-config configfile] [-data file_to_hash] [-digest digest_bytes] [-digest] [-tspolicy object_id] [-no_nonce] [-cert] [-in request.tsq] [-out request.tsq] [-text]</p> <p>openssl ts -reply [-config configfile] [-section tsa_section] [-queryfile request.tsq] [-passin password_src] [-signer tsa_cert.pem] [-inkey file_or_id] [-digest] [-chain certs_file.pem] [-tspolicy object_id] [-in response.tsr] [-token_in] [-out response.tsr] [-token_out] [-text] [-engine id]</p> <p>openssl ts -verify [-data file_to_hash] [-digest digest_bytes] [-queryfile request.tsq] [-in response.tsr] [-token_in] [-CApath trusted_cert_path] [-CAfile trusted_certs.pem] [-untrusted cert_file.pem] [verify options]</p> <p>verify options: [-attime timestamp] [-check_ss_sig] [-crl_check] [-crl_check_all] [-explicit_policy] [-extended_crl] [-ignore_critical] [-inhibit_any] [-inhibit_map] [-issuer_checks] [-no_alt_chains] [-no_check_time] [-partial_chain] [-policy arg] [-policy_check] [-policy_print] [-purpose purpose] [-suiteB_128] [-suiteB_128_only] [-suiteB_192] [-trusted_first] [-use_deltas] [-auth_level num] [-verify_depth num] [-verify_email email] [-verify_hostname hostname] [-verify_ip ip] [-verify_name name] [-x509_strict]</p>"},{"location":"man1/ts/#description","title":"DESCRIPTION","text":"<p>The ts command is a basic Time Stamping Authority (TSA) client and server application as specified in RFC 3161 (Time-Stamp Protocol, TSP). A TSA can be part of a PKI deployment and its role is to provide long term proof of the existence of a certain datum before a particular time. Here is a brief description of the protocol:</p> <ol> <li>The TSA client computes a one-way hash value for a data file and sends the hash to the TSA.</li> <li>The TSA attaches the current date and time to the received hash value, signs them and sends the timestamp token back to the client. By creating this token the TSA certifies the existence of the original data file at the time of response generation.</li> <li>The TSA client receives the timestamp token and verifies the signature on it. It also checks if the token contains the same hash value that it had sent to the TSA.</li> </ol> <p>There is one DER encoded protocol data unit defined for transporting  a timestamp request to the TSA and one for sending the timestamp response back to the client. The ts command has three main functions: creating a timestamp request based on a data file, creating a timestamp response based on a request, verifying if a response corresponds to a particular request or a data file.</p> <p>There is no support for sending the requests/responses automatically over HTTP or TCP yet as suggested in RFC 3161. The users must send the requests either by ftp or e-mail.</p>"},{"location":"man1/ts/#options","title":"OPTIONS","text":""},{"location":"man1/ts/#time-stamp-request-generation","title":"Time Stamp Request generation","text":"<p>The -query switch can be used for creating and printing a timestamp request with the following options:</p> <ul> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-config configfile</p> <p>The configuration file to use. Optional; for a description of the default value, see \"COMMAND SUMMARY\" in openssl(1).</p> </li> <li> <p>-data file_to_hash</p> <p>The data file for which the timestamp request needs to be created. stdin is the default if neither the -data nor the -digest parameter is specified. (Optional)</p> </li> <li> <p>-digest digest_bytes</p> <p>It is possible to specify the message imprint explicitly without the data file. The imprint must be specified in a hexadecimal format, two characters per byte, the bytes optionally separated by colons (e.g. 1A:F6:01:... or 1AF601...). The number of bytes must match the message digest algorithm in use. (Optional)</p> </li> <li> <p>-digest</p> <p>The message digest to apply to the data file. Any digest supported by the OpenSSL dgst command can be used. The default is SHA-1. (Optional)</p> </li> <li> <p>-tspolicy object_id</p> <p>The policy that the client expects the TSA to use for creating the timestamp token. Either the dotted OID notation or OID names defined in the config file can be used. If no policy is requested the TSA will use its own default policy. (Optional)</p> </li> <li> <p>-no_nonce</p> <p>No nonce is specified in the request if this option is given. Otherwise a 64 bit long pseudo-random none is included in the request. It is recommended to use nonce to protect against replay-attacks. (Optional)</p> </li> <li> <p>-cert</p> <p>The TSA is expected to include its signing certificate in the response. (Optional)</p> </li> <li> <p>-in request.tsq</p> <p>This option specifies a previously created timestamp request in DER format that will be printed into the output file. Useful when you need to examine the content of a request in human-readable format. (Optional)</p> </li> <li> <p>-out request.tsq</p> <p>Name of the output file to which the request will be written. Default is stdout. (Optional)</p> </li> <li> <p>-text</p> <p>If this option is specified the output is human-readable text format instead of DER. (Optional)</p> </li> </ul>"},{"location":"man1/ts/#time-stamp-response-generation","title":"Time Stamp Response generation","text":"<p>A timestamp response (TimeStampResp) consists of a response status and the timestamp token itself (ContentInfo), if the token generation was successful. The -reply command is for creating a timestamp response or timestamp token based on a request and printing the response/token in human-readable format. If -token_out is not specified the output is always a timestamp response (TimeStampResp), otherwise it is a timestamp token (ContentInfo).</p> <ul> <li> <p>-config configfile</p> <p>The configuration file to use. Optional; for a description of the default value, see \"COMMAND SUMMARY\" in openssl(1). See CONFIGURATION FILE OPTIONS for configurable variables.</p> </li> <li> <p>-section tsa_section</p> <p>The name of the config file section containing the settings for the response generation. If not specified the default TSA section is used, see CONFIGURATION FILE OPTIONS for details. (Optional)</p> </li> <li> <p>-queryfile request.tsq</p> <p>The name of the file containing a DER encoded timestamp request. (Optional)</p> </li> <li> <p>-passin password_src</p> <p>Specifies the password source for the private key of the TSA. See \"Pass Phrase Options\" in openssl(1). (Optional)</p> </li> <li> <p>-signer tsa_cert.pem</p> <p>The signer certificate of the TSA in PEM format. The TSA signing certificate must have exactly one extended key usage assigned to it: timeStamping. The extended key usage must also be critical, otherwise the certificate is going to be refused. Overrides the signer_cert variable of the config file. (Optional)</p> </li> <li> <p>-inkey file_or_id</p> <p>The signer private key of the TSA in PEM format. Overrides the signer_key config file option. (Optional) If no engine is used, the argument is taken as a file; if an engine is specified, the argument is given to the engine as a key identifier.</p> </li> <li> <p>-digest</p> <p>Signing digest to use. Overrides the signer_digest config file option. (Mandatory unless specified in the config file)</p> </li> <li> <p>-chain certs_file.pem</p> <p>The collection of certificates in PEM format that will all be included in the response in addition to the signer certificate if the -cert option was used for the request. This file is supposed to contain the certificate chain for the signer certificate from its issuer upwards. The -reply command does not build a certificate chain automatically. (Optional)</p> </li> <li> <p>-tspolicy object_id</p> <p>The default policy to use for the response unless the client explicitly requires a particular TSA policy. The OID can be specified either in dotted notation or with its name. Overrides the default_policy config file option. (Optional)</p> </li> <li> <p>-in response.tsr</p> <p>Specifies a previously created timestamp response or timestamp token (if -token_in is also specified) in DER format that will be written to the output file. This option does not require a request, it is useful e.g. when you need to examine the content of a response or token or you want to extract the timestamp token from a response. If the input is a token and the output is a timestamp response a default 'granted' status info is added to the token. (Optional)</p> </li> <li> <p>-token_in</p> <p>This flag can be used together with the -in option and indicates that the input is a DER encoded timestamp token (ContentInfo) instead of a timestamp response (TimeStampResp). (Optional)</p> </li> <li> <p>-out response.tsr</p> <p>The response is written to this file. The format and content of the file depends on other options (see -text, -token_out). The default is stdout. (Optional)</p> </li> <li> <p>-token_out</p> <p>The output is a timestamp token (ContentInfo) instead of timestamp response (TimeStampResp). (Optional)</p> </li> <li> <p>-text</p> <p>If this option is specified the output is human-readable text format instead of DER. (Optional)</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause ts to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms. Default is builtin. (Optional)</p> </li> </ul>"},{"location":"man1/ts/#time-stamp-response-verification","title":"Time Stamp Response verification","text":"<p>The -verify command is for verifying if a timestamp response or  timestamp token is valid and matches a particular timestamp request or data file. The -verify command does not use the configuration file.</p> <ul> <li> <p>-data file_to_hash</p> <p>The response or token must be verified against file_to_hash. The file is hashed with the message digest algorithm specified in the token. The -digest and -queryfile options must not be specified with this one. (Optional)</p> </li> <li> <p>-digest digest_bytes</p> <p>The response or token must be verified against the message digest specified with this option. The number of bytes must match the message digest algorithm specified in the token. The -data and -queryfile options must not be specified with this one. (Optional)</p> </li> <li> <p>-queryfile request.tsq</p> <p>The original timestamp request in DER format. The -data and -digest options must not be specified with this one. (Optional)</p> </li> <li> <p>-in response.tsr</p> <p>The timestamp response that needs to be verified in DER format. (Mandatory)</p> </li> <li> <p>-token_in</p> <p>This flag can be used together with the -in option and indicates that the input is a DER encoded timestamp token (ContentInfo) instead of a timestamp response (TimeStampResp). (Optional)</p> </li> <li> <p>-CApath trusted_cert_path</p> <p>The name of the directory containing the trusted CA certificates of the client. See the similar option of verify(1) for additional details. Either this option or -CAfile must be specified. (Optional)</p> </li> <li> <p>-CAfile trusted_certs.pem</p> <p>The name of the file containing a set of trusted self-signed CA certificates in PEM format. See the similar option of verify(1) for additional details. Either this option or -CApath must be specified. (Optional)</p> </li> <li> <p>-untrusted cert_file.pem</p> <p>Set of additional untrusted certificates in PEM format which may be needed when building the certificate chain for the TSA's signing certificate. This file must contain the TSA signing certificate and all intermediate CA certificates unless the response includes them. (Optional)</p> </li> <li> <p>verify options</p> <p>The options -attime timestamp, -check_ss_sig, -crl_check, -crl_check_all, -explicit_policy, -extended_crl, -ignore_critical, -inhibit_any, -inhibit_map, -issuer_checks, -no_alt_chains, -no_check_time, -partial_chain, -policy, -policy_check, -policy_print, -purpose, -suiteB_128, -suiteB_128_only, -suiteB_192, -trusted_first, -use_deltas, -auth_level, -verify_depth, -verify_email, -verify_hostname, -verify_ip, -verify_name, and -x509_strict can be used to control timestamp verification.  See verify(1).</p> </li> </ul>"},{"location":"man1/ts/#configuration-file-options","title":"CONFIGURATION FILE OPTIONS","text":"<p>The -query and -reply commands make use of a configuration file. See config(5) for a general description of the syntax of the config file. The -query command uses only the symbolic OID names section and it can work without it. However, the -reply command needs the config file for its operation.</p> <p>When there is a command line switch equivalent of a variable the switch always overrides the settings in the config file.</p> <ul> <li> <p>tsa section, default_tsa</p> <p>This is the main section and it specifies the name of another section that contains all the options for the -reply command. This default section can be overridden with the -section command line switch. (Optional)</p> </li> <li> <p>oid_file</p> <p>See ca(1) for description. (Optional)</p> </li> <li> <p>oid_section</p> <p>See ca(1) for description. (Optional)</p> </li> <li> <p>RANDFILE</p> <p>See ca(1) for description. (Optional)</p> </li> <li> <p>serial</p> <p>The name of the file containing the hexadecimal serial number of the last timestamp response created. This number is incremented by 1 for each response. If the file does not exist at the time of response generation a new file is created with serial number 1. (Mandatory)</p> </li> <li> <p>crypto_device</p> <p>Specifies the OpenSSL engine that will be set as the default for all available algorithms. The default value is builtin, you can specify any other engines supported by OpenSSL (e.g. use chil for the NCipher HSM). (Optional)</p> </li> <li> <p>signer_cert</p> <p>TSA signing certificate in PEM format. The same as the -signer command line option. (Optional)</p> </li> <li> <p>certs</p> <p>A file containing a set of PEM encoded certificates that need to be included in the response. The same as the -chain command line option. (Optional)</p> </li> <li> <p>signer_key</p> <p>The private key of the TSA in PEM format. The same as the -inkey command line option. (Optional)</p> </li> <li> <p>signer_digest</p> <p>Signing digest to use. The same as the -digest command line option. (Mandatory unless specified on the command line)</p> </li> <li> <p>default_policy</p> <p>The default policy to use when the request does not mandate any policy. The same as the -tspolicy command line option. (Optional)</p> </li> <li> <p>other_policies</p> <p>Comma separated list of policies that are also acceptable by the TSA and used only if the request explicitly specifies one of them. (Optional)</p> </li> <li> <p>digests</p> <p>The list of message digest algorithms that the TSA accepts. At least one algorithm must be specified. (Mandatory)</p> </li> <li> <p>accuracy</p> <p>The accuracy of the time source of the TSA in seconds, milliseconds and microseconds. E.g. secs:1, millisecs:500, microsecs:100. If any of the components is missing zero is assumed for that field. (Optional)</p> </li> <li> <p>clock_precision_digits</p> <p>Specifies the maximum number of digits, which represent the fraction of seconds, that  need to be included in the time field. The trailing zeros must be removed from the time, so there might actually be fewer digits, or no fraction of seconds at all. Supported only on UNIX platforms. The maximum value is 6, default is 0. (Optional)</p> </li> <li> <p>ordering</p> <p>If this option is yes the responses generated by this TSA can always be ordered, even if the time difference between two responses is less than the sum of their accuracies. Default is no. (Optional)</p> </li> <li> <p>tsa_name</p> <p>Set this option to yes if the subject name of the TSA must be included in the TSA name field of the response. Default is no. (Optional)</p> </li> <li> <p>ess_cert_id_chain</p> <p>The SignedData objects created by the TSA always contain the certificate identifier of the signing certificate in a signed attribute (see RFC 2634, Enhanced Security Services). If this option is set to yes and either the certs variable or the -chain option is specified then the certificate identifiers of the chain will also be included in the SigningCertificate signed attribute. If this variable is set to no, only the signing certificate identifier is included. Default is no. (Optional)</p> </li> <li> <p>ess_cert_id_alg</p> <p>This option specifies the hash function to be used to calculate the TSA's public key certificate identifier. Default is sha1. (Optional)</p> </li> </ul>"},{"location":"man1/ts/#examples","title":"EXAMPLES","text":"<p>All the examples below presume that OPENSSL_CONF is set to a proper configuration file, e.g. the example configuration file openssl/apps/openssl.cnf will do.</p>"},{"location":"man1/ts/#time-stamp-request","title":"Time Stamp Request","text":"<p>To create a timestamp request for design1.txt with SHA-1 without nonce and policy and no certificate is required in the response:</p> <pre><code>openssl ts -query -data design1.txt -no_nonce \\\n      -out design1.tsq\n</code></pre> <p>To create a similar timestamp request with specifying the message imprint explicitly:</p> <pre><code>openssl ts -query -digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \\\n       -no_nonce -out design1.tsq\n</code></pre> <p>To print the content of the previous request in human readable format:</p> <pre><code>openssl ts -query -in design1.tsq -text\n</code></pre> <p>To create a timestamp request which includes the MD-5 digest of design2.txt, requests the signer certificate and nonce, specifies a policy id (assuming the tsa_policy1 name is defined in the OID section of the config file):</p> <pre><code>openssl ts -query -data design2.txt -md5 \\\n      -tspolicy tsa_policy1 -cert -out design2.tsq\n</code></pre>"},{"location":"man1/ts/#time-stamp-response","title":"Time Stamp Response","text":"<p>Before generating a response a signing certificate must be created for the TSA that contains the timeStamping critical extended key usage extension without any other key usage extensions. You can add this line to the user certificate section of the config file to generate a proper certificate;</p> <pre><code>extendedKeyUsage = critical,timeStamping\n</code></pre> <p>See req(1), ca(1), and x509(1) for instructions. The examples below assume that cacert.pem contains the certificate of the CA, tsacert.pem is the signing certificate issued by cacert.pem and tsakey.pem is the private key of the TSA.</p> <p>To create a timestamp response for a request:</p> <pre><code>openssl ts -reply -queryfile design1.tsq -inkey tsakey.pem \\\n      -signer tsacert.pem -out design1.tsr\n</code></pre> <p>If you want to use the settings in the config file you could just write:</p> <pre><code>openssl ts -reply -queryfile design1.tsq -out design1.tsr\n</code></pre> <p>To print a timestamp reply to stdout in human readable format:</p> <pre><code>openssl ts -reply -in design1.tsr -text\n</code></pre> <p>To create a timestamp token instead of timestamp response:</p> <pre><code>openssl ts -reply -queryfile design1.tsq -out design1_token.der -token_out\n</code></pre> <p>To print a timestamp token to stdout in human readable format:</p> <pre><code>openssl ts -reply -in design1_token.der -token_in -text -token_out\n</code></pre> <p>To extract the timestamp token from a response:</p> <pre><code>openssl ts -reply -in design1.tsr -out design1_token.der -token_out\n</code></pre> <p>To add 'granted' status info to a timestamp token thereby creating a valid response:</p> <pre><code>openssl ts -reply -in design1_token.der -token_in -out design1.tsr\n</code></pre>"},{"location":"man1/ts/#time-stamp-verification","title":"Time Stamp Verification","text":"<p>To verify a timestamp reply against a request:</p> <pre><code>openssl ts -verify -queryfile design1.tsq -in design1.tsr \\\n      -CAfile cacert.pem -untrusted tsacert.pem\n</code></pre> <p>To verify a timestamp reply that includes the certificate chain:</p> <pre><code>openssl ts -verify -queryfile design2.tsq -in design2.tsr \\\n      -CAfile cacert.pem\n</code></pre> <p>To verify a timestamp token against the original data file:   openssl ts -verify -data design2.txt -in design2.tsr \\         -CAfile cacert.pem</p> <p>To verify a timestamp token against a message imprint:   openssl ts -verify -digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \\          -in design2.tsr -CAfile cacert.pem</p> <p>You could also look at the 'test' directory for more examples.</p>"},{"location":"man1/ts/#bugs","title":"BUGS","text":"<ul> <li>No support for timestamps over SMTP, though it is quite easy to implement an automatic e-mail based TSA with procmail(1) and perl(1). HTTP server support is provided in the form of a separate apache module. HTTP client support is provided by tsget(1). Pure TCP/IP protocol is not supported.</li> <li>The file containing the last serial number of the TSA is not locked when being read or written. This is a problem if more than one instance of openssl(1) is trying to create a timestamp response at the same time. This is not an issue when using the apache server module, it does proper locking.</li> <li>Look for the FIXME word in the source files.</li> <li>The source code should really be reviewed by somebody else, too.</li> <li>More testing is needed, I have done only some basic tests (see test/testtsa).</li> </ul>"},{"location":"man1/ts/#see-also","title":"SEE ALSO","text":"<p>tsget(1), openssl(1), req(1), x509(1), ca(1), genrsa(1), config(5)</p>"},{"location":"man1/ts/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/tsget/","title":"tsget","text":""},{"location":"man1/tsget/#name","title":"NAME","text":"<p>openssl-tsget, tsget - Time Stamping HTTP/HTTPS client</p>"},{"location":"man1/tsget/#synopsis","title":"SYNOPSIS","text":"<p>tsget -h server_url [-e extension] [-o output] [-v] [-d] [-k private_key.pem] [-p key_password] [-c client_cert.pem] [-C CA_certs.pem] [-P CA_path] [-r file:file...] [-g EGD_socket] [request]...</p>"},{"location":"man1/tsget/#description","title":"DESCRIPTION","text":"<p>The tsget command can be used for sending a timestamp request, as specified in RFC 3161, to a timestamp server over HTTP or HTTPS and storing the timestamp response in a file. This tool cannot be used for creating the requests and verifying responses, you can use the OpenSSL ts(1) command to do that. tsget can send several requests to the server without closing the TCP connection if more than one requests are specified on the command line.</p> <p>The tool sends the following HTTP request for each timestamp request:</p> <pre><code>    POST url HTTP/1.1\n    User-Agent: OpenTSA tsget.pl/&lt;version&gt;\n    Host: &lt;host&gt;:&lt;port&gt;\n    Pragma: no-cache\n    Content-Type: application/timestamp-query\n    Accept: application/timestamp-reply\n    Content-Length: length of body\n\n    ...binary request specified by the user...\n</code></pre> <p>tsget expects a response of type application/timestamp-reply, which is written to a file without any interpretation.</p>"},{"location":"man1/tsget/#options","title":"OPTIONS","text":"<ul> <li> <p>-h server_url</p> <p>The URL of the HTTP/HTTPS server listening for timestamp requests.</p> </li> <li> <p>-e extension</p> <p>If the -o option is not given this argument specifies the extension of the output files. The base name of the output file will be the same as those of the input files. Default extension is '.tsr'. (Optional)</p> </li> <li> <p>-o output</p> <p>This option can be specified only when just one request is sent to the server. The timestamp response will be written to the given output file. '-' means standard output. In case of multiple timestamp requests or the absence of this argument the names of the output files will be derived from the names of the input files and the default or specified extension argument. (Optional)</p> </li> <li> <p>-v</p> <p>The name of the currently processed request is printed on standard error. (Optional)</p> </li> <li> <p>-d</p> <p>Switches on verbose mode for the underlying curl library. You can see detailed debug messages for the connection. (Optional)</p> </li> <li> <p>-k private_key.pem</p> <p>(HTTPS) In case of certificate-based client authentication over HTTPS &lt;private_key.pem&gt; must contain the private key of the user. The private key file can optionally be protected by a passphrase. The -c option must also be specified. (Optional)</p> </li> <li> <p>-p key_password</p> <p>(HTTPS) Specifies the passphrase for the private key specified by the -k argument. If this option is omitted and the key is passphrase protected tsget will ask for it. (Optional)</p> </li> <li> <p>-c client_cert.pem</p> <p>(HTTPS) In case of certificate-based client authentication over HTTPS &lt;client_cert.pem&gt; must contain the X.509 certificate of the user.  The -k option must also be specified. If this option is not specified no certificate-based client authentication will take place. (Optional)</p> </li> <li> <p>-C CA_certs.pem</p> <p>(HTTPS) The trusted CA certificate store. The certificate chain of the peer's certificate must include one of the CA certificates specified in this file. Either option -C or option -P must be given in case of HTTPS. (Optional)</p> </li> <li> <p>-P CA_path</p> <p>(HTTPS) The path containing the trusted CA certificates to verify the peer's certificate. The directory must be prepared with the c_rehash OpenSSL utility. Either option -C or option -P must be given in case of HTTPS. (Optional)</p> </li> <li> <p>-rand file:file...</p> <p>The files containing random data for seeding the random number generator. Multiple files can be specified, the separator is ; for MS-Windows, , for VMS and : for all other platforms. (Optional)</p> </li> <li> <p>-g EGD_socket</p> <p>The name of an EGD socket to get random data from. (Optional)</p> </li> <li> <p>[request]...</p> <p>List of files containing RFC 3161 DER-encoded timestamp requests. If no requests are specified only one request will be sent to the server and it will be read from the standard input. (Optional)</p> </li> </ul>"},{"location":"man1/tsget/#environment-variables","title":"ENVIRONMENT VARIABLES","text":"<p>The TSGET environment variable can optionally contain default arguments. The content of this variable is added to the list of command line arguments.</p>"},{"location":"man1/tsget/#examples","title":"EXAMPLES","text":"<p>The examples below presume that file1.tsq and file2.tsq contain valid timestamp requests, tsa.opentsa.org listens at port 8080 for HTTP requests and at port 8443 for HTTPS requests, the TSA service is available at the /tsa absolute path.</p> <p>Get a timestamp response for file1.tsq over HTTP, output is written to file1.tsr:</p> <pre><code>tsget -h http://tsa.opentsa.org:8080/tsa file1.tsq\n</code></pre> <p>Get a timestamp response for file1.tsq and file2.tsq over HTTP showing progress, output is written to file1.reply and file2.reply respectively:</p> <pre><code>tsget -h http://tsa.opentsa.org:8080/tsa -v -e .reply \\\n      file1.tsq file2.tsq\n</code></pre> <p>Create a timestamp request, write it to file3.tsq, send it to the server and write the response to file3.tsr:</p> <pre><code>openssl ts -query -data file3.txt -cert | tee file3.tsq \\\n      | tsget -h http://tsa.opentsa.org:8080/tsa \\\n      -o file3.tsr\n</code></pre> <p>Get a timestamp response for file1.tsq over HTTPS without client authentication:</p> <pre><code>tsget -h https://tsa.opentsa.org:8443/tsa \\\n      -C cacerts.pem file1.tsq\n</code></pre> <p>Get a timestamp response for file1.tsq over HTTPS with certificate-based client authentication (it will ask for the passphrase if client_key.pem is protected):</p> <pre><code>tsget -h https://tsa.opentsa.org:8443/tsa -C cacerts.pem \\\n      -k client_key.pem -c client_cert.pem file1.tsq\n</code></pre> <p>You can shorten the previous command line if you make use of the TSGET environment variable. The following commands do the same as the previous example:</p> <pre><code>TSGET='-h https://tsa.opentsa.org:8443/tsa -C cacerts.pem \\\n      -k client_key.pem -c client_cert.pem'\nexport TSGET\ntsget file1.tsq\n</code></pre>"},{"location":"man1/tsget/#see-also","title":"SEE ALSO","text":"<p>openssl(1), ts(1), curl(1), RFC 3161</p>"},{"location":"man1/tsget/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/verify/","title":"verify","text":""},{"location":"man1/verify/#name","title":"NAME","text":"<p>openssl-verify, verify - Utility to verify certificates</p>"},{"location":"man1/verify/#synopsis","title":"SYNOPSIS","text":"<p>openssl verify [-help] [-CAfile file] [-CApath directory] [-no-CAfile] [-no-CApath] [-allow_proxy_certs] [-attime timestamp] [-check_ss_sig] [-CRLfile file] [-crl_download] [-crl_check] [-crl_check_all] [-engine id] [-explicit_policy] [-extended_crl] [-ignore_critical] [-inhibit_any] [-inhibit_map] [-nameopt option] [-no_check_time] [-partial_chain] [-policy arg] [-policy_check] [-policy_print] [-purpose purpose] [-suiteB_128] [-suiteB_128_only] [-suiteB_192] [-trusted_first] [-no_alt_chains] [-untrusted file] [-trusted file] [-use_deltas] [-verbose] [-auth_level level] [-verify_depth num] [-verify_email email] [-verify_hostname hostname] [-verify_ip ip] [-verify_name name] [-x509_strict] [-show_chain] [-] [certificates]</p>"},{"location":"man1/verify/#description","title":"DESCRIPTION","text":"<p>The verify command verifies certificate chains.</p>"},{"location":"man1/verify/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-CAfile file</p> <p>A file of trusted certificates. The file should contain one or more certificates in PEM format.</p> </li> <li> <p>-CApath directory</p> <p>A directory of trusted certificates. The certificates should have names of the form: hash.0 or have symbolic links to them of this form (\"hash\" is the hashed certificate subject name: see the -hash option of the x509 utility). Under Unix the c_rehash script will automatically create symbolic links to a directory of certificates.</p> </li> <li> <p>-no-CAfile</p> <p>Do not load the trusted CA certificates from the default file location.</p> </li> <li> <p>-no-CApath</p> <p>Do not load the trusted CA certificates from the default directory location.</p> </li> <li> <p>-allow_proxy_certs</p> <p>Allow the verification of proxy certificates.</p> </li> <li> <p>-attime timestamp</p> <p>Perform validation checks using time specified by timestamp and not current system time. timestamp is the number of seconds since 01.01.1970 (UNIX time).</p> </li> <li> <p>-check_ss_sig</p> <p>Verify the signature of the last certificate in a chain if the certificate is supposedly self-signed. This is prohibited and will result in an error if it is a non-conforming CA certificate with key usage restrictions not including the keyCertSign bit. This verification is disabled by default because it doesn't add any security.</p> </li> <li> <p>-CRLfile file</p> <p>The file should contain one or more CRLs in PEM format. This option can be specified more than once to include CRLs from multiple files.</p> </li> <li> <p>-crl_download</p> <p>Attempt to download CRL information for this certificate.</p> </li> <li> <p>-crl_check</p> <p>Checks end entity certificate validity by attempting to look up a valid CRL. If a valid CRL cannot be found an error occurs.</p> </li> <li> <p>-crl_check_all</p> <p>Checks the validity of all certificates in the chain by attempting to look up valid CRLs.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine id will cause verify(1) to attempt to load the specified engine. The engine will then be set as the default for all its supported algorithms. If you want to load certificates or CRLs that require engine support via any of the -trusted, -untrusted or -CRLfile options, the -engine option must be specified before those options.</p> </li> <li> <p>-explicit_policy</p> <p>Set policy variable require-explicit-policy (see RFC5280).</p> </li> <li> <p>-extended_crl</p> <p>Enable extended CRL features such as indirect CRLs and alternate CRL signing keys.</p> </li> <li> <p>-ignore_critical</p> <p>Normally if an unhandled critical extension is present which is not supported by OpenSSL the certificate is rejected (as required by RFC5280). If this option is set critical extensions are ignored.</p> </li> <li> <p>-inhibit_any</p> <p>Set policy variable inhibit-any-policy (see RFC5280).</p> </li> <li> <p>-inhibit_map</p> <p>Set policy variable inhibit-policy-mapping (see RFC5280).</p> </li> <li> <p>-nameopt option</p> <p>Option which determines how the subject or issuer names are displayed. The option argument can be a single option or multiple options separated by commas.  Alternatively the -nameopt switch may be used more than once to set multiple options. See the x509(1) manual page for details.</p> </li> <li> <p>-no_check_time</p> <p>This option suppresses checking the validity period of certificates and CRLs against the current time. If option -attime timestamp is used to specify a verification time, the check is not suppressed.</p> </li> <li> <p>-partial_chain</p> <p>Allow verification to succeed even if a complete chain cannot be built to a self-signed trust-anchor, provided it is possible to construct a chain to a trusted certificate that might not be self-signed.</p> </li> <li> <p>-policy arg</p> <p>Enable policy processing and add arg to the user-initial-policy-set (see RFC5280). The policy arg can be an object name an OID in numeric form. This argument can appear more than once.</p> </li> <li> <p>-policy_check</p> <p>Enables certificate policy processing.</p> </li> <li> <p>-policy_print</p> <p>Print out diagnostics related to policy processing.</p> </li> <li> <p>-purpose purpose</p> <p>The intended use for the certificate. If this option is not specified, verify will not consider certificate purpose during chain verification. Currently accepted uses are sslclient, sslserver, nssslserver, smimesign, smimeencrypt. See the VERIFY OPERATION section for more information.</p> </li> <li> <p>-suiteB_128_only, -suiteB_128, -suiteB_192</p> <p>Enable the Suite B mode operation at 128 bit Level of Security, 128 bit or 192 bit, or only 192 bit Level of Security respectively. See RFC6460 for details. In particular the supported signature algorithms are reduced to support only ECDSA and SHA256 or SHA384 and only the elliptic curves P-256 and P-384.</p> </li> <li> <p>-trusted_first</p> <p>When constructing the certificate chain, use the trusted certificates specified via -CAfile, -CApath or -trusted before any certificates specified via -untrusted. This can be useful in environments with Bridge or Cross-Certified CAs. As of OpenSSL 1.1.0 this option is on by default and cannot be disabled.</p> </li> <li> <p>-no_alt_chains</p> <p>By default, unless -trusted_first is specified, when building a certificate chain, if the first certificate chain found is not trusted, then OpenSSL will attempt to replace untrusted issuer certificates with certificates from the trust store to see if an alternative chain can be found that is trusted. As of OpenSSL 1.1.0, with -trusted_first always on, this option has no effect.</p> </li> <li> <p>-untrusted file</p> <p>A file of additional untrusted certificates (intermediate issuer CAs) used to construct a certificate chain from the subject certificate to a trust-anchor. The file should contain one or more certificates in PEM format. This option can be specified more than once to include untrusted certificates from multiple files.</p> </li> <li> <p>-trusted file</p> <p>A file of trusted certificates, which must be self-signed, unless the -partial_chain option is specified. The file contains one or more certificates in PEM format. With this option, no additional (e.g., default) certificate lists are consulted. That is, the only trust-anchors are those listed in file. This option can be specified more than once to include trusted certificates from multiple files. This option implies the -no-CAfile and -no-CApath options. This option cannot be used in combination with either of the -CAfile or -CApath options.</p> </li> <li> <p>-use_deltas</p> <p>Enable support for delta CRLs.</p> </li> <li> <p>-verbose</p> <p>Print extra information about the operations being performed.</p> </li> <li> <p>-auth_level level</p> <p>Set the certificate chain authentication security level to level. The authentication security level determines the acceptable signature and public key strength when verifying certificate chains. For a certificate chain to validate, the public keys of all the certificates must meet the specified security level. The signature algorithm security level is enforced for all the certificates in the chain except for the chain's trust anchor, which is either directly trusted or validated by means other than its signature. See SSL_CTX_set_security_level(3) for the definitions of the available levels. The default security level is -1, or \"not set\". At security level 0 or lower all algorithms are acceptable. Security level 1 requires at least 80-bit-equivalent security and is broadly interoperable, though it will, for example, reject MD5 signatures or RSA keys shorter than 1024 bits.</p> </li> <li> <p>-verify_depth num</p> <p>Limit the certificate chain to num intermediate CA certificates. A maximal depth chain can have up to num+2 certificates, since neither the end-entity certificate nor the trust-anchor certificate count against the -verify_depth limit.</p> </li> <li> <p>-verify_email email</p> <p>Verify if the email matches the email address in Subject Alternative Name or the email in the subject Distinguished Name.</p> </li> <li> <p>-verify_hostname hostname</p> <p>Verify if the hostname matches DNS name in Subject Alternative Name or Common Name in the subject certificate.</p> </li> <li> <p>-verify_ip ip</p> <p>Verify if the ip matches the IP address in Subject Alternative Name of the subject certificate.</p> </li> <li> <p>-verify_name name</p> <p>Use default verification policies like trust model and required certificate policies identified by name. The trust model determines which auxiliary trust or reject OIDs are applicable to verifying the given certificate chain. See the -addtrust and -addreject options of the x509(1) command-line utility. Supported policy names include: default, pkcs7, smime_sign, ssl_client, ssl_server. These mimics the combinations of purpose and trust settings used in SSL, CMS and S/MIME. As of OpenSSL 1.1.0, the trust model is inferred from the purpose when not specified, so the -verify_name options are functionally equivalent to the corresponding -purpose settings.</p> </li> <li> <p>-x509_strict</p> <p>For strict X.509 compliance, disable non-compliant workarounds for broken certificates.</p> </li> <li> <p>-show_chain</p> <p>Display information about the certificate chain that has been built (if successful). Certificates in the chain that came from the untrusted list will be flagged as \"untrusted\".</p> </li> <li> <p>-</p> <p>Indicates the last option. All arguments following this are assumed to be certificate files. This is useful if the first certificate filename begins with a -.</p> </li> <li> <p>certificates</p> <p>One or more certificates to verify. If no certificates are given, verify will attempt to read a certificate from standard input. Certificates must be in PEM format.</p> </li> </ul>"},{"location":"man1/verify/#verify-operation","title":"VERIFY OPERATION","text":"<p>The verify program uses the same functions as the internal SSL and S/MIME verification, therefore, this description applies to these verify operations too.</p> <p>There is one crucial difference between the verify operations performed by the verify program: wherever possible an attempt is made to continue after an error whereas normally the verify operation would halt on the first error. This allows all the problems with a certificate chain to be determined.</p> <p>The verify operation consists of a number of separate steps.</p> <p>Firstly a certificate chain is built up starting from the supplied certificate and ending in the root CA. It is an error if the whole chain cannot be built up. The chain is built up by looking up the issuers certificate of the current certificate. If a certificate is found which is its own issuer it is assumed to be the root CA.</p> <p>The process of 'looking up the issuers certificate' itself involves a number of steps. After all certificates whose subject name matches the issuer name of the current certificate are subject to further tests. The relevant authority key identifier components of the current certificate (if present) must match the subject key identifier (if present) and issuer and serial number of the candidate issuer, in addition the keyUsage extension of the candidate issuer (if present) must permit certificate signing.</p> <p>The lookup first looks in the list of untrusted certificates and if no match is found the remaining lookups are from the trusted certificates. The root CA is always looked up in the trusted certificate list: if the certificate to verify is a root certificate then an exact match must be found in the trusted list.</p> <p>The second operation is to check every untrusted certificate's extensions for consistency with the supplied purpose. If the -purpose option is not included then no checks are done. The supplied or \"leaf\" certificate must have extensions compatible with the supplied purpose and all other certificates must also be valid CA certificates. The precise extensions required are described in more detail in the CERTIFICATE EXTENSIONS section of the x509 utility.</p> <p>The third operation is to check the trust settings on the root CA. The root CA should be trusted for the supplied purpose. For compatibility with previous versions of OpenSSL, a certificate with no trust settings is considered to be valid for all purposes.</p> <p>The final operation is to check the validity of the certificate chain. For each element in the chain, including the root CA certificate, the validity period as specified by the <code>notBefore</code> and <code>notAfter</code> fields is checked against the current system time. The -attime flag may be used to use a reference time other than \"now.\" The certificate signature is checked as well (except for the signature of the typically self-signed root CA certificate, which is verified only if the -check_ss_sig option is given).</p> <p>If all operations complete successfully then certificate is considered valid. If any operation fails then the certificate is not valid.</p>"},{"location":"man1/verify/#diagnostics","title":"DIAGNOSTICS","text":"<p>When a verify operation fails the output messages can be somewhat cryptic. The general form of the error message is:</p> <pre><code>server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024 bit)\nerror 24 at 1 depth lookup:invalid CA certificate\n</code></pre> <p>The first line contains the name of the certificate being verified followed by the subject name of the certificate. The second line contains the error number and the depth. The depth is number of the certificate being verified when a problem was detected starting with zero for the certificate being verified itself then 1 for the CA that signed the certificate and so on. Finally a text version of the error number is presented.</p> <p>A partial list of the error codes and messages is shown below, this also includes the name of the error code as defined in the header file x509_vfy.h Some of the error codes are defined but never returned: these are described as \"unused\".</p> <ul> <li> <p>X509_V_OK</p> <p>The operation was successful.</p> </li> <li> <p>X509_V_ERR_UNSPECIFIED</p> <p>Unspecified error; should not happen.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT</p> <p>The issuer certificate of a looked up certificate could not be found. This normally means the list of trusted certificates is not complete.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_CRL</p> <p>The CRL of a certificate could not be found.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE</p> <p>The certificate signature could not be decrypted. This means that the actual signature value could not be determined rather than it not matching the expected value, this is only meaningful for RSA keys.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE</p> <p>The CRL signature could not be decrypted: this means that the actual signature value could not be determined rather than it not matching the expected value. Unused.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY</p> <p>The public key in the certificate SubjectPublicKeyInfo could not be read.</p> </li> <li> <p>X509_V_ERR_CERT_SIGNATURE_FAILURE</p> <p>The signature of the certificate is invalid.</p> </li> <li> <p>X509_V_ERR_CRL_SIGNATURE_FAILURE</p> <p>The signature of the certificate is invalid.</p> </li> <li> <p>X509_V_ERR_CERT_NOT_YET_VALID</p> <p>The certificate is not yet valid: the notBefore date is after the current time.</p> </li> <li> <p>X509_V_ERR_CERT_HAS_EXPIRED</p> <p>The certificate has expired: that is the notAfter date is before the current time.</p> </li> <li> <p>X509_V_ERR_CRL_NOT_YET_VALID</p> <p>The CRL is not yet valid.</p> </li> <li> <p>X509_V_ERR_CRL_HAS_EXPIRED</p> <p>The CRL has expired.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD</p> <p>The certificate notBefore field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD</p> <p>The certificate notAfter field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD</p> <p>The CRL lastUpdate field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD</p> <p>The CRL nextUpdate field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_OUT_OF_MEM</p> <p>An error occurred trying to allocate memory. This should never happen.</p> </li> <li> <p>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</p> <p>The passed certificate is self-signed and the same certificate cannot be found in the list of trusted certificates.</p> </li> <li> <p>X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN</p> <p>The certificate chain could be built up using the untrusted certificates but the root could not be found locally.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY</p> <p>The issuer certificate could not be found: this occurs if the issuer certificate of an untrusted certificate cannot be found.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE</p> <p>No signatures could be verified because the chain contains only one certificate and it is not self signed.</p> </li> <li> <p>X509_V_ERR_CERT_CHAIN_TOO_LONG</p> <p>The certificate chain length is greater than the supplied maximum depth. Unused.</p> </li> <li> <p>X509_V_ERR_CERT_REVOKED</p> <p>The certificate has been revoked.</p> </li> <li> <p>X509_V_ERR_INVALID_CA</p> <p>A CA certificate is invalid. Either it is not a CA or its extensions are not consistent with the supplied purpose.</p> </li> <li> <p>X509_V_ERR_PATH_LENGTH_EXCEEDED</p> <p>The basicConstraints pathlength parameter has been exceeded.</p> </li> <li> <p>X509_V_ERR_INVALID_PURPOSE</p> <p>The supplied certificate cannot be used for the specified purpose.</p> </li> <li> <p>X509_V_ERR_CERT_UNTRUSTED</p> <p>The root CA is not marked as trusted for the specified purpose.</p> </li> <li> <p>X509_V_ERR_CERT_REJECTED</p> <p>The root CA is marked to reject the specified purpose.</p> </li> <li> <p>X509_V_ERR_SUBJECT_ISSUER_MISMATCH</p> <p>Not used as of OpenSSL 1.1.0 as a result of the deprecation of the -issuer_checks option.</p> </li> <li> <p>X509_V_ERR_AKID_SKID_MISMATCH</p> <p>Not used as of OpenSSL 1.1.0 as a result of the deprecation of the -issuer_checks option.</p> </li> <li> <p>X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH</p> <p>Not used as of OpenSSL 1.1.0 as a result of the deprecation of the -issuer_checks option.</p> </li> <li> <p>X509_V_ERR_KEYUSAGE_NO_CERTSIGN</p> <p>Not used as of OpenSSL 1.1.0 as a result of the deprecation of the -issuer_checks option.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER</p> <p>Unable to get CRL issuer certificate.</p> </li> <li> <p>X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION</p> <p>Unhandled critical extension.</p> </li> <li> <p>X509_V_ERR_KEYUSAGE_NO_CRL_SIGN</p> <p>Key usage does not include CRL signing.</p> </li> <li> <p>X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION</p> <p>Unhandled critical CRL extension.</p> </li> <li> <p>X509_V_ERR_INVALID_NON_CA</p> <p>Invalid non-CA certificate has CA markings.</p> </li> <li> <p>X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED</p> <p>Proxy path length constraint exceeded.</p> </li> <li> <p>X509_V_ERR_PROXY_SUBJECT_INVALID</p> <p>Proxy certificate subject is invalid.  It MUST be the same as the issuer with a single CN component added.</p> </li> <li> <p>X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE</p> <p>Key usage does not include digital signature.</p> </li> <li> <p>X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED</p> <p>Proxy certificates not allowed, please use -allow_proxy_certs.</p> </li> <li> <p>X509_V_ERR_INVALID_EXTENSION</p> <p>Invalid or inconsistent certificate extension.</p> </li> <li> <p>X509_V_ERR_INVALID_POLICY_EXTENSION</p> <p>Invalid or inconsistent certificate policy extension.</p> </li> <li> <p>X509_V_ERR_NO_EXPLICIT_POLICY</p> <p>No explicit policy.</p> </li> <li> <p>X509_V_ERR_DIFFERENT_CRL_SCOPE</p> <p>Different CRL scope.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE</p> <p>Unsupported extension feature.</p> </li> <li> <p>X509_V_ERR_UNNESTED_RESOURCE</p> <p>RFC 3779 resource not subset of parent's resources.</p> </li> <li> <p>X509_V_ERR_PERMITTED_VIOLATION</p> <p>Permitted subtree violation.</p> </li> <li> <p>X509_V_ERR_EXCLUDED_VIOLATION</p> <p>Excluded subtree violation.</p> </li> <li> <p>X509_V_ERR_SUBTREE_MINMAX</p> <p>Name constraints minimum and maximum not supported.</p> </li> <li> <p>X509_V_ERR_APPLICATION_VERIFICATION</p> <p>Application verification failure. Unused.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE</p> <p>Unsupported name constraint type.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX</p> <p>Unsupported or invalid name constraint syntax.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_NAME_SYNTAX</p> <p>Unsupported or invalid name syntax.</p> </li> <li> <p>X509_V_ERR_CRL_PATH_VALIDATION_ERROR</p> <p>CRL path validation error.</p> </li> <li> <p>X509_V_ERR_PATH_LOOP</p> <p>Path loop.</p> </li> <li> <p>X509_V_ERR_SUITE_B_INVALID_VERSION</p> <p>Suite B: certificate version invalid.</p> </li> <li> <p>X509_V_ERR_SUITE_B_INVALID_ALGORITHM</p> <p>Suite B: invalid public key algorithm.</p> </li> <li> <p>X509_V_ERR_SUITE_B_INVALID_CURVE</p> <p>Suite B: invalid ECC curve.</p> </li> <li> <p>X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM</p> <p>Suite B: invalid signature algorithm.</p> </li> <li> <p>X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED</p> <p>Suite B: curve not allowed for this LOS.</p> </li> <li> <p>X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256</p> <p>Suite B: cannot sign P-384 with P-256.</p> </li> <li> <p>X509_V_ERR_HOSTNAME_MISMATCH</p> <p>Hostname mismatch.</p> </li> <li> <p>X509_V_ERR_EMAIL_MISMATCH</p> <p>Email address mismatch.</p> </li> <li> <p>X509_V_ERR_IP_ADDRESS_MISMATCH</p> <p>IP address mismatch.</p> </li> <li> <p>X509_V_ERR_DANE_NO_MATCH</p> <p>DANE TLSA authentication is enabled, but no TLSA records matched the certificate chain. This error is only possible in s_client(1).</p> </li> <li> <p>X509_V_ERR_EE_KEY_TOO_SMALL</p> <p>EE certificate key too weak.</p> </li> <li> <p>X509_ERR_CA_KEY_TOO_SMALL</p> <p>CA certificate key too weak.</p> </li> <li> <p>X509_ERR_CA_MD_TOO_WEAK</p> <p>CA signature digest algorithm too weak.</p> </li> <li> <p>X509_V_ERR_INVALID_CALL</p> <p>nvalid certificate verification context.</p> </li> <li> <p>X509_V_ERR_STORE_LOOKUP</p> <p>Issuer certificate lookup error.</p> </li> <li> <p>X509_V_ERR_NO_VALID_SCTS</p> <p>Certificate Transparency required, but no valid SCTs found.</p> </li> <li> <p>X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION</p> <p>Proxy subject name violation.</p> </li> <li> <p>X509_V_ERR_OCSP_VERIFY_NEEDED</p> <p>Returned by the verify callback to indicate an OCSP verification is needed.</p> </li> <li> <p>X509_V_ERR_OCSP_VERIFY_FAILED</p> <p>Returned by the verify callback to indicate OCSP verification failed.</p> </li> <li> <p>X509_V_ERR_OCSP_CERT_UNKNOWN</p> <p>Returned by the verify callback to indicate that the certificate is not recognized by the OCSP responder.</p> </li> </ul>"},{"location":"man1/verify/#bugs","title":"BUGS","text":"<p>Although the issuer checks are a considerable improvement over the old technique they still suffer from limitations in the underlying X509_LOOKUP API. One consequence of this is that trusted certificates with matching subject name must either appear in a file (as specified by the -CAfile option) or a directory (as specified by -CApath). If they occur in both then only the certificates in the file will be recognised.</p> <p>Previous versions of OpenSSL assume certificates with matching subject name are identical and mishandled them.</p> <p>Previous versions of this documentation swapped the meaning of the X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT and X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY error codes.</p>"},{"location":"man1/verify/#see-also","title":"SEE ALSO","text":"<p>x509(1)</p>"},{"location":"man1/verify/#history","title":"HISTORY","text":"<p>The -show_chain option was added in OpenSSL 1.1.0.</p> <p>The -issuer_checks option is deprecated as of OpenSSL 1.1.0 and is silently ignored.</p>"},{"location":"man1/verify/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/version/","title":"version","text":""},{"location":"man1/version/#name","title":"NAME","text":"<p>openssl-version, version - print OpenSSL version information</p>"},{"location":"man1/version/#synopsis","title":"SYNOPSIS","text":"<p>openssl version [-help] [-a] [-v] [-b] [-o] [-f] [-p] [-d] [-e]</p>"},{"location":"man1/version/#description","title":"DESCRIPTION","text":"<p>This command is used to print out version information about OpenSSL.</p>"},{"location":"man1/version/#options","title":"OPTIONS","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-a</p> <p>All information, this is the same as setting all the other flags.</p> </li> <li> <p>-v</p> <p>The current OpenSSL version.</p> </li> <li> <p>-b</p> <p>The date the current version of OpenSSL was built.</p> </li> <li> <p>-o</p> <p>Option information: various options set when the library was built.</p> </li> <li> <p>-f</p> <p>Compilation flags.</p> </li> <li> <p>-p</p> <p>Platform setting.</p> </li> <li> <p>-d</p> <p>OPENSSLDIR setting.</p> </li> <li> <p>-e</p> <p>ENGINESDIR setting.</p> </li> </ul>"},{"location":"man1/version/#notes","title":"NOTES","text":"<p>The output of openssl version -a would typically be used when sending in a bug report.</p>"},{"location":"man1/version/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man1/x509/","title":"x509","text":""},{"location":"man1/x509/#name","title":"NAME","text":"<p>openssl-x509, x509 - Certificate display and signing utility</p>"},{"location":"man1/x509/#synopsis","title":"SYNOPSIS","text":"<p>openssl x509 [-help] [-inform DER|PEM] [-outform DER|PEM] [-keyform DER|PEM|ENGINE] [-CAform DER|PEM] [-CAkeyform DER|PEM] [-in filename] [-out filename] [-serial] [-hash] [-subject_hash] [-issuer_hash] [-ocspid] [-subject] [-issuer] [-nameopt option] [-email] [-ocsp_uri] [-startdate] [-enddate] [-purpose] [-dates] [-checkend num] [-modulus] [-pubkey] [-fingerprint] [-alias] [-noout] [-trustout] [-clrtrust] [-clrreject] [-addtrust arg] [-addreject arg] [-setalias arg] [-days arg] [-set_serial n] [-signkey arg] [-passin arg] [-x509toreq] [-req] [-CA filename] [-CAkey filename] [-CAcreateserial] [-CAserial filename] [-force_pubkey key] [-text] [-ext extensions] [-certopt option] [-C] [-digest] [-clrext] [-extfile filename] [-extensions section] [-sigopt nm:v] [-rand file...] [-writerand file] [-engine id] [-preserve_dates]</p>"},{"location":"man1/x509/#description","title":"DESCRIPTION","text":"<p>The x509 command is a multi purpose certificate utility. It can be used to display certificate information, convert certificates to various forms, sign certificate requests like a \"mini CA\" or edit certificate trust settings.</p> <p>Since there are a large number of options they will split up into various sections.</p>"},{"location":"man1/x509/#options","title":"OPTIONS","text":""},{"location":"man1/x509/#input-output-and-general-purpose-options","title":"Input, Output, and General Purpose Options","text":"<ul> <li> <p>-help</p> <p>Print out a usage message.</p> </li> <li> <p>-inform DER|PEM</p> <p>This specifies the input format normally the command will expect an X509 certificate but this can change if other options such as -req are present. The DER format is the DER encoding of the certificate and PEM is the base64 encoding of the DER encoding with header and footer lines added. The default format is PEM.</p> </li> <li> <p>-outform DER|PEM</p> <p>This specifies the output format, the options have the same meaning and default as the -inform option.</p> </li> <li> <p>-in filename</p> <p>This specifies the input filename to read a certificate from or standard input if this option is not specified.</p> </li> <li> <p>-out filename</p> <p>This specifies the output filename to write to or standard output by default.</p> </li> <li> <p>-digest</p> <p>The digest to use. This affects any signing or display option that uses a message digest, such as the -fingerprint, -signkey and -CA options. Any digest supported by the OpenSSL dgst command can be used. If not specified then SHA1 is used with -fingerprint or the default digest for the signing algorithm is used, typically SHA256.</p> </li> <li> <p>-rand file...</p> <p>A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ; for MS-Windows, , for OpenVMS, and : for all others.</p> </li> <li> <p>[-writerand file]</p> <p>Writes random data to the specified file upon exit. This can be used with a subsequent -rand flag.</p> </li> <li> <p>-engine id</p> <p>Specifying an engine (by its unique id string) will cause x509 to attempt to obtain a functional reference to the specified engine, thus initialising it if needed. The engine will then be set as the default for all available algorithms.</p> </li> <li> <p>-preserve_dates</p> <p>When signing a certificate, preserve the \"notBefore\" and \"notAfter\" dates instead of adjusting them to current time and duration. Cannot be used with the -days option.</p> </li> </ul>"},{"location":"man1/x509/#display-options","title":"Display Options","text":"<p>Note: the -alias and -purpose options are also display options but are described in the TRUST SETTINGS section.</p> <ul> <li> <p>-text</p> <p>Prints out the certificate in text form. Full details are output including the public key, signature algorithms, issuer and subject names, serial number any extensions present and any trust settings.</p> </li> <li> <p>-ext extensions</p> <p>Prints out the certificate extensions in text form. Extensions are specified with a comma separated string, e.g., \"subjectAltName,subjectKeyIdentifier\". See the x509v3_config(5) manual page for the extension names.</p> </li> <li> <p>-certopt option</p> <p>Customise the output format used with -text. The option argument can be a single option or multiple options separated by commas. The -certopt switch may be also be used more than once to set multiple options. See the TEXT OPTIONS section for more information.</p> </li> <li> <p>-noout</p> <p>This option prevents output of the encoded version of the certificate.</p> </li> <li> <p>-pubkey</p> <p>Outputs the certificate's SubjectPublicKeyInfo block in PEM format.</p> </li> <li> <p>-modulus</p> <p>This option prints out the value of the modulus of the public key contained in the certificate.</p> </li> <li> <p>-serial</p> <p>Outputs the certificate serial number.</p> </li> <li> <p>-subject_hash</p> <p>Outputs the \"hash\" of the certificate subject name. This is used in OpenSSL to form an index to allow certificates in a directory to be looked up by subject name.</p> </li> <li> <p>-issuer_hash</p> <p>Outputs the \"hash\" of the certificate issuer name.</p> </li> <li> <p>-ocspid</p> <p>Outputs the OCSP hash values for the subject name and public key.</p> </li> <li> <p>-hash</p> <p>Synonym for \"-subject_hash\" for backward compatibility reasons.</p> </li> <li> <p>-subject_hash_old</p> <p>Outputs the \"hash\" of the certificate subject name using the older algorithm as used by OpenSSL before version 1.0.0.</p> </li> <li> <p>-issuer_hash_old</p> <p>Outputs the \"hash\" of the certificate issuer name using the older algorithm as used by OpenSSL before version 1.0.0.</p> </li> <li> <p>-subject</p> <p>Outputs the subject name.</p> </li> <li> <p>-issuer</p> <p>Outputs the issuer name.</p> </li> <li> <p>-nameopt option</p> <p>Option which determines how the subject or issuer names are displayed. The option argument can be a single option or multiple options separated by commas.  Alternatively the -nameopt switch may be used more than once to set multiple options. See the NAME OPTIONS section for more information.</p> </li> <li> <p>-email</p> <p>Outputs the email address(es) if any.</p> </li> <li> <p>-ocsp_uri</p> <p>Outputs the OCSP responder address(es) if any.</p> </li> <li> <p>-startdate</p> <p>Prints out the start date of the certificate, that is the notBefore date.</p> </li> <li> <p>-enddate</p> <p>Prints out the expiry date of the certificate, that is the notAfter date.</p> </li> <li> <p>-dates</p> <p>Prints out the start and expiry dates of a certificate.</p> </li> <li> <p>-checkend arg</p> <p>Checks if the certificate expires within the next arg seconds and exits nonzero if yes it will expire or zero if not.</p> </li> <li> <p>-fingerprint</p> <p>Calculates and outputs the digest of the DER encoded version of the entire certificate (see digest options). This is commonly called a \"fingerprint\". Because of the nature of message digests, the fingerprint of a certificate is unique to that certificate and two certificates with the same fingerprint can be considered to be the same.</p> </li> <li> <p>-C</p> <p>This outputs the certificate in the form of a C source file.</p> </li> </ul>"},{"location":"man1/x509/#trust-settings","title":"Trust Settings","text":"<p>A trusted certificate is an ordinary certificate which has several additional pieces of information attached to it such as the permitted and prohibited uses of the certificate and an \"alias\".</p> <p>Normally when a certificate is being verified at least one certificate must be \"trusted\". By default a trusted certificate must be stored locally and must be a root CA: any certificate chain ending in this CA is then usable for any purpose.</p> <p>Trust settings currently are only used with a root CA. They allow a finer control over the purposes the root CA can be used for. For example a CA may be trusted for SSL client but not SSL server use.</p> <p>See the description of the verify utility for more information on the meaning of trust settings.</p> <p>Future versions of OpenSSL will recognize trust settings on any certificate: not just root CAs.</p> <ul> <li> <p>-trustout</p> <p>This causes x509 to output a trusted certificate. An ordinary or trusted certificate can be input but by default an ordinary certificate is output and any trust settings are discarded. With the -trustout option a trusted certificate is output. A trusted certificate is automatically output if any trust settings are modified.</p> </li> <li> <p>-setalias arg</p> <p>Sets the alias of the certificate. This will allow the certificate to be referred to using a nickname for example \"Steve's Certificate\".</p> </li> <li> <p>-alias</p> <p>Outputs the certificate alias, if any.</p> </li> <li> <p>-clrtrust</p> <p>Clears all the permitted or trusted uses of the certificate.</p> </li> <li> <p>-clrreject</p> <p>Clears all the prohibited or rejected uses of the certificate.</p> </li> <li> <p>-addtrust arg</p> <p>Adds a trusted certificate use. Any object name can be used here but currently only clientAuth (SSL client use), serverAuth (SSL server use), emailProtection (S/MIME email) and anyExtendedKeyUsage are used. As of OpenSSL 1.1.0, the last of these blocks all purposes when rejected or enables all purposes when trusted. Other OpenSSL applications may define additional uses.</p> </li> <li> <p>-addreject arg</p> <p>Adds a prohibited use. It accepts the same values as the -addtrust option.</p> </li> <li> <p>-purpose</p> <p>This option performs tests on the certificate extensions and outputs the results. For a more complete description see the CERTIFICATE EXTENSIONS section.</p> </li> </ul>"},{"location":"man1/x509/#signing-options","title":"Signing Options","text":"<p>The x509 utility can be used to sign certificates and requests: it can thus behave like a \"mini CA\".</p> <ul> <li> <p>-signkey arg</p> <p>This option causes the input file to be self signed using the supplied private key or engine. The private key's format is specified with the -keyform option.</p> <p>If the input file is a certificate it sets the issuer name to the subject name (i.e.  makes it self signed) changes the public key to the supplied value and changes the start and end dates. The start date is set to the current time and the end date is set to a value determined by the -days option. Any certificate extensions are retained unless the -clrext option is supplied; this includes, for example, any existing key identifier extensions.</p> <p>If the input is a certificate request then a self signed certificate is created using the supplied private key using the subject name in the request.</p> </li> <li> <p>-sigopt nm:v</p> <p>Pass options to the signature algorithm during sign or verify operations. Names and values of these options are algorithm-specific.</p> </li> <li> <p>-passin arg</p> <p>The key password source. For more information about the format of arg see \"Pass Phrase Options\" in openssl(1).</p> </li> <li> <p>-clrext</p> <p>Delete any extensions from a certificate. This option is used when a certificate is being created from another certificate (for example with the -signkey or the -CA options). Normally all extensions are retained.</p> </li> <li> <p>-keyform PEM|DER|ENGINE</p> <p>Specifies the format (DER or PEM) of the private key file used in the -signkey option.</p> </li> <li> <p>-days arg</p> <p>Specifies the number of days to make a certificate valid for. The default is 30 days. Cannot be used with the -preserve_dates option.</p> </li> <li> <p>-x509toreq</p> <p>Converts a certificate into a certificate request. The -signkey option is used to pass the required private key.</p> </li> <li> <p>-req</p> <p>By default a certificate is expected on input. With this option a certificate request is expected instead.</p> </li> <li> <p>-set_serial n</p> <p>Specifies the serial number to use. This option can be used with either the -signkey or -CA options. If used in conjunction with the -CA option the serial number file (as specified by the -CAserial or -CAcreateserial options) is not used.</p> <p>The serial number can be decimal or hex (if preceded by 0x).</p> </li> <li> <p>-CA filename</p> <p>Specifies the CA certificate to be used for signing. When this option is present x509 behaves like a \"mini CA\". The input file is signed by this CA using this option: that is its issuer name is set to the subject name of the CA and it is digitally signed using the CAs private key.</p> <p>This option is normally combined with the -req option. Without the -req option the input is a certificate which must be self signed.</p> </li> <li> <p>-CAkey filename</p> <p>Sets the CA private key to sign a certificate with. If this option is not specified then it is assumed that the CA private key is present in the CA certificate file.</p> </li> <li> <p>-CAserial filename</p> <p>Sets the CA serial number file to use.</p> <p>When creating a certificate with this option, and with the -CA option, the certificate serial number is stored in the given file. This file consists of one line containing an even number of hex digits with the serial number used last time. After reading this number, it is incremented and used, and the file is updated.</p> <p>The default filename consists of the CA certificate file base name with \".srl\" appended. For example if the CA certificate file is called \"mycacert.pem\" it expects to find a serial number file called \"mycacert.srl\".</p> <p>If the -CA option is specified and neither &lt;-CAserial&gt; or &lt;-CAcreateserial&gt; is given and the default serial number file does not exist, a random number is generated; this is the recommended practice.</p> </li> <li> <p>-CAcreateserial</p> <p>With this option and the -CA option the CA serial number file is created if it does not exist. A random number is generated, used for the certificate, and saved into the serial number file determined as described above.</p> </li> <li> <p>-extfile filename</p> <p>File containing certificate extensions to use. If not specified then no extensions are added to the certificate.</p> </li> <li> <p>-extensions section</p> <p>The section to add certificate extensions from. If this option is not specified then the extensions should either be contained in the unnamed (default) section or the default section should contain a variable called \"extensions\" which contains the section to use. See the x509v3_config(5) manual page for details of the extension section format.</p> </li> <li> <p>-force_pubkey key</p> <p>When a certificate is created set its public key to key instead of the key in the certificate or certificate request. This option is useful for creating certificates where the algorithm can't normally sign requests, for example DH.</p> <p>The format or key can be specified using the -keyform option.</p> </li> </ul>"},{"location":"man1/x509/#name-options","title":"Name Options","text":"<p>The nameopt command line switch determines how the subject and issuer names are displayed. If no nameopt switch is present the default \"oneline\" format is used which is compatible with previous versions of OpenSSL. Each option is described in detail below, all options can be preceded by a - to turn the option off. Only the first four will normally be used.</p> <ul> <li> <p>compat</p> <p>Use the old format.</p> </li> <li> <p>RFC2253</p> <p>Displays names compatible with RFC2253 equivalent to esc_2253, esc_ctrl, esc_msb, utf8, dump_nostr, dump_unknown, dump_der, sep_comma_plus, dn_rev and sname.</p> </li> <li> <p>oneline</p> <p>A oneline format which is more readable than RFC2253. It is equivalent to specifying the  esc_2253, esc_ctrl, esc_msb, utf8, dump_nostr, dump_der, use_quote, sep_comma_plus_space, space_eq and sname options.  This is the default of no name options are given explicitly.</p> </li> <li> <p>multiline</p> <p>A multiline format. It is equivalent esc_ctrl, esc_msb, sep_multiline, space_eq, lname and align.</p> </li> <li> <p>esc_2253</p> <p>Escape the \"special\" characters required by RFC2253 in a field. That is ,+\"&lt;&gt;;. Additionally # is escaped at the beginning of a string and a space character at the beginning or end of a string.</p> </li> <li> <p>esc_2254</p> <p>Escape the \"special\" characters required by RFC2254 in a field. That is the NUL character as well as and ()*.</p> </li> <li> <p>esc_ctrl</p> <p>Escape control characters. That is those with ASCII values less than 0x20 (space) and the delete (0x7f) character. They are escaped using the RFC2253 \\XX notation (where XX are two hex digits representing the character value).</p> </li> <li> <p>esc_msb</p> <p>Escape characters with the MSB set, that is with ASCII values larger than 127.</p> </li> <li> <p>use_quote</p> <p>Escapes some characters by surrounding the whole string with \" characters, without the option all escaping is done with the \\ character.</p> </li> <li> <p>utf8</p> <p>Convert all strings to UTF8 format first. This is required by RFC2253. If you are lucky enough to have a UTF8 compatible terminal then the use of this option (and not setting esc_msb) may result in the correct display of multibyte (international) characters. Is this option is not present then multibyte characters larger than 0xff will be represented using the format \\UXXXX for 16 bits and \\WXXXXXXXX for 32 bits. Also if this option is off any UTF8Strings will be converted to their character form first.</p> </li> <li> <p>ignore_type</p> <p>This option does not attempt to interpret multibyte characters in any way. That is their content octets are merely dumped as though one octet represents each character. This is useful for diagnostic purposes but will result in rather odd looking output.</p> </li> <li> <p>show_type</p> <p>Show the type of the ASN1 character string. The type precedes the field contents. For example \"BMPSTRING: Hello World\".</p> </li> <li> <p>dump_der</p> <p>When this option is set any fields that need to be hexdumped will be dumped using the DER encoding of the field. Otherwise just the content octets will be displayed. Both options use the RFC2253 #XXXX... format.</p> </li> <li> <p>dump_nostr</p> <p>Dump non character string types (for example OCTET STRING) if this option is not set then non character string types will be displayed as though each content octet represents a single character.</p> </li> <li> <p>dump_all</p> <p>Dump all fields. This option when used with dump_der allows the DER encoding of the structure to be unambiguously determined.</p> </li> <li> <p>dump_unknown</p> <p>Dump any field whose OID is not recognised by OpenSSL.</p> </li> <li> <p>sep_comma_plus, sep_comma_plus_space, sep_semi_plus_space, sep_multiline</p> <p>These options determine the field separators. The first character is between RDNs and the second between multiple AVAs (multiple AVAs are very rare and their use is discouraged). The options ending in \"space\" additionally place a space after the separator to make it more readable. The sep_multiline uses a linefeed character for the RDN separator and a spaced + for the AVA separator. It also indents the fields by four characters. If no field separator is specified then sep_comma_plus_space is used by default.</p> </li> <li> <p>dn_rev</p> <p>Reverse the fields of the DN. This is required by RFC2253. As a side effect this also reverses the order of multiple AVAs but this is permissible.</p> </li> <li> <p>nofname, sname, lname, oid</p> <p>These options alter how the field name is displayed. nofname does not display the field at all. sname uses the \"short name\" form (CN for commonName for example). lname uses the long form. oid represents the OID in numerical form and is useful for diagnostic purpose.</p> </li> <li> <p>align</p> <p>Align field values for a more readable output. Only usable with sep_multiline.</p> </li> <li> <p>space_eq</p> <p>Places spaces round the = character which follows the field name.</p> </li> </ul>"},{"location":"man1/x509/#text-options","title":"Text Options","text":"<p>As well as customising the name output format, it is also possible to customise the actual fields printed using the certopt options when the text option is present. The default behaviour is to print all fields.</p> <ul> <li> <p>compatible</p> <p>Use the old format. This is equivalent to specifying no output options at all.</p> </li> <li> <p>no_header</p> <p>Don't print header information: that is the lines saying \"Certificate\" and \"Data\".</p> </li> <li> <p>no_version</p> <p>Don't print out the version number.</p> </li> <li> <p>no_serial</p> <p>Don't print out the serial number.</p> </li> <li> <p>no_signame</p> <p>Don't print out the signature algorithm used.</p> </li> <li> <p>no_validity</p> <p>Don't print the validity, that is the notBefore and notAfter fields.</p> </li> <li> <p>no_subject</p> <p>Don't print out the subject name.</p> </li> <li> <p>no_issuer</p> <p>Don't print out the issuer name.</p> </li> <li> <p>no_pubkey</p> <p>Don't print out the public key.</p> </li> <li> <p>no_sigdump</p> <p>Don't give a hexadecimal dump of the certificate signature.</p> </li> <li> <p>no_aux</p> <p>Don't print out certificate trust information.</p> </li> <li> <p>no_extensions</p> <p>Don't print out any X509V3 extensions.</p> </li> <li> <p>ext_default</p> <p>Retain default extension behaviour: attempt to print out unsupported certificate extensions.</p> </li> <li> <p>ext_error</p> <p>Print an error message for unsupported certificate extensions.</p> </li> <li> <p>ext_parse</p> <p>ASN1 parse unsupported extensions.</p> </li> <li> <p>ext_dump</p> <p>Hex dump unsupported extensions.</p> </li> <li> <p>ca_default</p> <p>The value used by the ca utility, equivalent to no_issuer, no_pubkey, no_header, and no_version.</p> </li> </ul>"},{"location":"man1/x509/#examples","title":"EXAMPLES","text":"<p>Note: in these examples the '\\' means the example should be all on one line.</p> <p>Display the contents of a certificate:</p> <pre><code>openssl x509 -in cert.pem -noout -text\n</code></pre> <p>Display the \"Subject Alternative Name\" extension of a certificate:</p> <pre><code>openssl x509 -in cert.pem -noout -ext subjectAltName\n</code></pre> <p>Display more extensions of a certificate:</p> <pre><code>openssl x509 -in cert.pem -noout -ext subjectAltName,nsCertType\n</code></pre> <p>Display the certificate serial number:</p> <pre><code>openssl x509 -in cert.pem -noout -serial\n</code></pre> <p>Display the certificate subject name:</p> <pre><code>openssl x509 -in cert.pem -noout -subject\n</code></pre> <p>Display the certificate subject name in RFC2253 form:</p> <pre><code>openssl x509 -in cert.pem -noout -subject -nameopt RFC2253\n</code></pre> <p>Display the certificate subject name in oneline form on a terminal supporting UTF8:</p> <pre><code>openssl x509 -in cert.pem -noout -subject -nameopt oneline,-esc_msb\n</code></pre> <p>Display the certificate SHA1 fingerprint:</p> <pre><code>openssl x509 -sha1 -in cert.pem -noout -fingerprint\n</code></pre> <p>Convert a certificate from PEM to DER format:</p> <pre><code>openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER\n</code></pre> <p>Convert a certificate to a certificate request:</p> <pre><code>openssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem\n</code></pre> <p>Convert a certificate request into a self signed certificate using extensions for a CA:</p> <pre><code>openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca \\\n       -signkey key.pem -out cacert.pem\n</code></pre> <p>Sign a certificate request using the CA certificate above and add user certificate extensions:</p> <pre><code>openssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr \\\n       -CA cacert.pem -CAkey key.pem -CAcreateserial\n</code></pre> <p>Set a certificate to be trusted for SSL client use and change set its alias to \"Steve's Class 1 CA\"</p> <pre><code>openssl x509 -in cert.pem -addtrust clientAuth \\\n       -setalias \"Steve's Class 1 CA\" -out trust.pem\n</code></pre>"},{"location":"man1/x509/#notes","title":"NOTES","text":"<p>The PEM format uses the header and footer lines:</p> <pre><code>-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n</code></pre> <p>it will also handle files containing:</p> <pre><code>-----BEGIN X509 CERTIFICATE-----\n-----END X509 CERTIFICATE-----\n</code></pre> <p>Trusted certificates have the lines</p> <pre><code>-----BEGIN TRUSTED CERTIFICATE-----\n-----END TRUSTED CERTIFICATE-----\n</code></pre> <p>The conversion to UTF8 format used with the name options assumes that T61Strings use the ISO8859-1 character set. This is wrong but Netscape and MSIE do this as do many certificates. So although this is incorrect it is more likely to display the majority of certificates correctly.</p> <p>The -email option searches the subject name and the subject alternative name extension. Only unique email addresses will be printed out: it will not print the same address more than once.</p>"},{"location":"man1/x509/#certificate-extensions","title":"CERTIFICATE EXTENSIONS","text":"<p>The -purpose option checks the certificate extensions and determines what the certificate can be used for. The actual checks done are rather complex and include various hacks and workarounds to handle broken certificates and software.</p> <p>The same code is used when verifying untrusted certificates in chains so this section is useful if a chain is rejected by the verify code.</p> <p>The basicConstraints extension CA flag is used to determine whether the certificate can be used as a CA. If the CA flag is true then it is a CA, if the CA flag is false then it is not a CA. All CAs should have the CA flag set to true.</p> <p>If the basicConstraints extension is absent then the certificate is considered to be a \"possible CA\" other extensions are checked according to the intended use of the certificate. A warning is given in this case because the certificate should really not be regarded as a CA: however it is allowed to be a CA to work around some broken software.</p> <p>If the certificate is a V1 certificate (and thus has no extensions) and it is self signed it is also assumed to be a CA but a warning is again given: this is to work around the problem of Verisign roots which are V1 self signed certificates.</p> <p>If the keyUsage extension is present then additional restraints are made on the uses of the certificate. A CA certificate must have the keyCertSign bit set if the keyUsage extension is present.</p> <p>The extended key usage extension places additional restrictions on the certificate uses. If this extension is present (whether critical or not) the key can only be used for the purposes specified.</p> <p>A complete description of each test is given below. The comments about basicConstraints and keyUsage and V1 certificates above apply to all CA certificates.</p> <ul> <li> <p>SSL Client</p> <p>The extended key usage extension must be absent or include the \"web client authentication\" OID.  keyUsage must be absent or it must have the digitalSignature bit set. Netscape certificate type must be absent or it must have the SSL client bit set.</p> </li> <li> <p>SSL Client CA</p> <p>The extended key usage extension must be absent or include the \"web client authentication\" OID. Netscape certificate type must be absent or it must have the SSL CA bit set: this is used as a work around if the basicConstraints extension is absent.</p> </li> <li> <p>SSL Server</p> <p>The extended key usage extension must be absent or include the \"web server authentication\" and/or one of the SGC OIDs.  keyUsage must be absent or it must have the digitalSignature, the keyEncipherment set or both bits set. Netscape certificate type must be absent or have the SSL server bit set.</p> </li> <li> <p>SSL Server CA</p> <p>The extended key usage extension must be absent or include the \"web server authentication\" and/or one of the SGC OIDs.  Netscape certificate type must be absent or the SSL CA bit must be set: this is used as a work around if the basicConstraints extension is absent.</p> </li> <li> <p>Netscape SSL Server</p> <p>For Netscape SSL clients to connect to an SSL server it must have the keyEncipherment bit set if the keyUsage extension is present. This isn't always valid because some cipher suites use the key for digital signing. Otherwise it is the same as a normal SSL server.</p> </li> <li> <p>Common S/MIME Client Tests</p> <p>The extended key usage extension must be absent or include the \"email protection\" OID. Netscape certificate type must be absent or should have the S/MIME bit set. If the S/MIME bit is not set in Netscape certificate type then the SSL client bit is tolerated as an alternative but a warning is shown: this is because some Verisign certificates don't set the S/MIME bit.</p> </li> <li> <p>S/MIME Signing</p> <p>In addition to the common S/MIME client tests the digitalSignature bit or the nonRepudiation bit must be set if the keyUsage extension is present.</p> </li> <li> <p>S/MIME Encryption</p> <p>In addition to the common S/MIME tests the keyEncipherment bit must be set if the keyUsage extension is present.</p> </li> <li> <p>S/MIME CA</p> <p>The extended key usage extension must be absent or include the \"email protection\" OID. Netscape certificate type must be absent or must have the S/MIME CA bit set: this is used as a work around if the basicConstraints extension is absent.</p> </li> <li> <p>CRL Signing</p> <p>The keyUsage extension must be absent or it must have the CRL signing bit set.</p> </li> <li> <p>CRL Signing CA</p> <p>The normal CA tests apply. Except in this case the basicConstraints extension must be present.</p> </li> </ul>"},{"location":"man1/x509/#bugs","title":"BUGS","text":"<p>Extensions in certificates are not transferred to certificate requests and vice versa.</p> <p>It is possible to produce invalid certificates or requests by specifying the wrong private key or using inconsistent options in some cases: these should be checked.</p> <p>There should be options to explicitly set such things as start and end dates rather than an offset from the current time.</p>"},{"location":"man1/x509/#see-also","title":"SEE ALSO","text":"<p>req(1), ca(1), genrsa(1), gendsa(1), verify(1), x509v3_config(5)</p>"},{"location":"man1/x509/#history","title":"HISTORY","text":"<p>The hash algorithm used in the -subject_hash and -issuer_hash options before OpenSSL 1.0.0 was based on the deprecated MD5 algorithm and the encoding of the distinguished name. In OpenSSL 1.0.0 and later it is based on a canonical version of the DN using SHA1. This means that any directories using the old form must have their links rebuilt using c_rehash or similar.</p>"},{"location":"man1/x509/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ADMISSIONS/","title":"ADMISSIONS","text":""},{"location":"man3/ADMISSIONS/#name","title":"NAME","text":"<p>ADMISSIONS, ADMISSIONS_get0_admissionAuthority, ADMISSIONS_get0_namingAuthority, ADMISSIONS_get0_professionInfos, ADMISSIONS_set0_admissionAuthority, ADMISSIONS_set0_namingAuthority, ADMISSIONS_set0_professionInfos, ADMISSION_SYNTAX, ADMISSION_SYNTAX_get0_admissionAuthority, ADMISSION_SYNTAX_get0_contentsOfAdmissions, ADMISSION_SYNTAX_set0_admissionAuthority, ADMISSION_SYNTAX_set0_contentsOfAdmissions, NAMING_AUTHORITY, NAMING_AUTHORITY_get0_authorityId, NAMING_AUTHORITY_get0_authorityURL, NAMING_AUTHORITY_get0_authorityText, NAMING_AUTHORITY_set0_authorityId, NAMING_AUTHORITY_set0_authorityURL, NAMING_AUTHORITY_set0_authorityText, PROFESSION_INFO, PROFESSION_INFOS, PROFESSION_INFO_get0_addProfessionInfo, PROFESSION_INFO_get0_namingAuthority, PROFESSION_INFO_get0_professionItems, PROFESSION_INFO_get0_professionOIDs, PROFESSION_INFO_get0_registrationNumber, PROFESSION_INFO_set0_addProfessionInfo, PROFESSION_INFO_set0_namingAuthority, PROFESSION_INFO_set0_professionItems, PROFESSION_INFO_set0_professionOIDs, PROFESSION_INFO_set0_registrationNumber - Accessors and settors for ADMISSION_SYNTAX</p>"},{"location":"man3/ADMISSIONS/#synopsis","title":"SYNOPSIS","text":"<pre><code>typedef struct NamingAuthority_st NAMING_AUTHORITY;\ntypedef struct ProfessionInfo_st PROFESSION_INFO;\ntypedef STACK_OF(PROFESSION_INFO) PROFESSION_INFOS;\ntypedef struct Admissions_st ADMISSIONS;\ntypedef struct AdmissionSyntax_st ADMISSION_SYNTAX;\n\nconst ASN1_OBJECT *NAMING_AUTHORITY_get0_authorityId(\n    const NAMING_AUTHORITY *n);\nvoid NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n,\n    ASN1_OBJECT* namingAuthorityId);\nconst ASN1_IA5STRING *NAMING_AUTHORITY_get0_authorityURL(\n    const NAMING_AUTHORITY *n);\nvoid NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n,\n    ASN1_IA5STRING* namingAuthorityUrl);\nconst ASN1_STRING *NAMING_AUTHORITY_get0_authorityText(\n    const NAMING_AUTHORITY *n);\nvoid NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n,\n    ASN1_STRING* namingAuthorityText);\n\nconst GENERAL_NAME *ADMISSION_SYNTAX_get0_admissionAuthority(\n    const ADMISSION_SYNTAX *as);\nvoid ADMISSION_SYNTAX_set0_admissionAuthority(\n    ADMISSION_SYNTAX *as, GENERAL_NAME *aa);\nconst STACK_OF(ADMISSIONS) *ADMISSION_SYNTAX_get0_contentsOfAdmissions(\n    const ADMISSION_SYNTAX *as);\nvoid ADMISSION_SYNTAX_set0_contentsOfAdmissions(\n    ADMISSION_SYNTAX *as, STACK_OF(ADMISSIONS) *a);\n\nconst GENERAL_NAME *ADMISSIONS_get0_admissionAuthority(const ADMISSIONS *a);\nvoid ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa);\nconst NAMING_AUTHORITY *ADMISSIONS_get0_namingAuthority(const ADMISSIONS *a);\nvoid ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na);\nconst PROFESSION_INFOS *ADMISSIONS_get0_professionInfos(const ADMISSIONS *a);\nvoid ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi);\n\nconst ASN1_OCTET_STRING *PROFESSION_INFO_get0_addProfessionInfo(\n    const PROFESSION_INFO *pi);\nvoid PROFESSION_INFO_set0_addProfessionInfo(\n    PROFESSION_INFO *pi, ASN1_OCTET_STRING *aos);\nconst NAMING_AUTHORITY *PROFESSION_INFO_get0_namingAuthority(\n    const PROFESSION_INFO *pi);\nvoid PROFESSION_INFO_set0_namingAuthority(\n    PROFESSION_INFO *pi, NAMING_AUTHORITY *na);\nconst STACK_OF(ASN1_STRING) *PROFESSION_INFO_get0_professionItems(\n    const PROFESSION_INFO *pi);\nvoid PROFESSION_INFO_set0_professionItems(\n    PROFESSION_INFO *pi, STACK_OF(ASN1_STRING) *as);\nconst STACK_OF(ASN1_OBJECT) *PROFESSION_INFO_get0_professionOIDs(\n    const PROFESSION_INFO *pi);\nvoid PROFESSION_INFO_set0_professionOIDs(\n    PROFESSION_INFO *pi, STACK_OF(ASN1_OBJECT) *po);\nconst ASN1_PRINTABLESTRING *PROFESSION_INFO_get0_registrationNumber(\n    const PROFESSION_INFO *pi);\nvoid PROFESSION_INFO_set0_registrationNumber(\n    PROFESSION_INFO *pi, ASN1_PRINTABLESTRING *rn);\n</code></pre>"},{"location":"man3/ADMISSIONS/#description","title":"DESCRIPTION","text":"<p>The PROFESSION_INFOS, ADMISSION_SYNTAX, ADMISSIONS, and PROFESSION_INFO types are opaque structures representing the analogous types defined in the Common PKI Specification published by https://www.t7ev.org. Knowledge of those structures and their semantics is assumed.</p> <p>The conventional routines to convert between DER and the local format are described in d2i_X509(3). The conventional routines to allocate and free the types are defined in X509_dup(3).</p> <p>The PROFESSION_INFOS type is a stack of PROFESSION_INFO; see DEFINE_STACK_OF(3) for details.</p> <p>The NAMING_AUTHORITY type has an authority ID and URL, and text fields. The NAMING_AUTHORITY_get0_authorityId(), NAMING_AUTHORITY_get0_get0_authorityURL(), and NAMING_AUTHORITY_get0_get0_authorityText(), functions return pointers to those values within the object. The NAMING_AUTHORITY_set0_authorityId(), NAMING_AUTHORITY_set0_get0_authorityURL(), and NAMING_AUTHORITY_set0_get0_authorityText(), functions free any existing value and set the pointer to the specified value.</p> <p>The ADMISSION_SYNTAX type has an authority name and a stack of ADMISSION objects. The ADMISSION_SYNTAX_get0_admissionAuthority() and ADMISSION_SYNTAX_get0_contentsOfAdmissions() functions return pointers to those values within the object. The ADMISSION_SYNTAX_set0_admissionAuthority() and ADMISSION_SYNTAX_set0_contentsOfAdmissions() functions free any existing value and set the pointer to the specified value.</p> <p>The ADMISSION type has an authority name, authority object, and a stack of PROFESSION_INFO items. The ADMISSIONS_get0_admissionAuthority(), ADMISSIONS_get0_namingAuthority(), and ADMISSIONS_get0_professionInfos() functions return pointers to those values within the object. The ADMISSIONS_set0_admissionAuthority(), ADMISSIONS_set0_namingAuthority(), and ADMISSIONS_set0_professionInfos() functions free any existing value and set the pointer to the specified value.</p> <p>The PROFESSION_INFO type has a name authority, stacks of profession Items and OIDs, a registration number, and additional profession info. The functions PROFESSION_INFO_get0_addProfessionInfo(), PROFESSION_INFO_get0_namingAuthority(), PROFESSION_INFO_get0_professionItems(), PROFESSION_INFO_get0_professionOIDs(), and PROFESSION_INFO_get0_registrationNumber() functions return pointers to those values within the object. The PROFESSION_INFO_set0_addProfessionInfo(), PROFESSION_INFO_set0_namingAuthority(), PROFESSION_INFO_set0_professionItems(), PROFESSION_INFO_set0_professionOIDs(), and PROFESSION_INFO_set0_registrationNumber() functions free any existing value and set the pointer to the specified value.</p>"},{"location":"man3/ADMISSIONS/#return-values","title":"RETURN VALUES","text":"<p>Described above. Note that all of the get0 functions return a pointer to the internal data structure and must not be freed.</p>"},{"location":"man3/ADMISSIONS/#see-also","title":"SEE ALSO","text":"<p>X509_dup(3), d2i_X509(3),</p>"},{"location":"man3/ADMISSIONS/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_INTEGER_get_int64/","title":"ASN1_INTEGER_get_int64","text":""},{"location":"man3/ASN1_INTEGER_get_int64/#name","title":"NAME","text":"<p>ASN1_INTEGER_get_uint64, ASN1_INTEGER_set_uint64, ASN1_INTEGER_get_int64, ASN1_INTEGER_get, ASN1_INTEGER_set_int64, ASN1_INTEGER_set, BN_to_ASN1_INTEGER, ASN1_INTEGER_to_BN, ASN1_ENUMERATED_get_int64, ASN1_ENUMERATED_get, ASN1_ENUMERATED_set_int64, ASN1_ENUMERATED_set, BN_to_ASN1_ENUMERATED, ASN1_ENUMERATED_to_BN - ASN.1 INTEGER and ENUMERATED utilities</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nint ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);\nlong ASN1_INTEGER_get(const ASN1_INTEGER *a);\n\nint ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);\nint ASN1_INTEGER_set(const ASN1_INTEGER *a, long v);\n\nint ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);\nint ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);\n\nASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);\nBIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);\n\nint ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);\nlong ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);\n\nint ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);\nint ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);\n\nASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai);\nBIGNUM *ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn);\n</code></pre>"},{"location":"man3/ASN1_INTEGER_get_int64/#description","title":"DESCRIPTION","text":"<p>These functions convert to and from ASN1_INTEGER and ASN1_ENUMERATED structures.</p> <p>ASN1_INTEGER_get_int64() converts an ASN1_INTEGER into an int64_t type If successful it returns 1 and sets *pr to the value of a. If it fails (due to invalid type or the value being too big to fit into an int64_t type) it returns 0.</p> <p>ASN1_INTEGER_get_uint64() is similar to ASN1_INTEGER_get_int64_t() except it converts to a uint64_t type and an error is returned if the passed integer is negative.</p> <p>ASN1_INTEGER_get() also returns the value of a but it returns 0 if a is NULL and -1 on error (which is ambiguous because -1 is a legitimate value for an ASN1_INTEGER). New applications should use ASN1_INTEGER_get_int64() instead.</p> <p>ASN1_INTEGER_set_int64() sets the value of ASN1_INTEGER a to the int64_t value r.</p> <p>ASN1_INTEGER_set_uint64() sets the value of ASN1_INTEGER a to the uint64_t value r.</p> <p>ASN1_INTEGER_set() sets the value of ASN1_INTEGER a to the long value v.</p> <p>BN_to_ASN1_INTEGER() converts BIGNUM bn to an ASN1_INTEGER. If ai is NULL a new ASN1_INTEGER structure is returned. If ai is not NULL then the existing structure will be used instead.</p> <p>ASN1_INTEGER_to_BN() converts ASN1_INTEGER ai into a BIGNUM. If bn is NULL a new BIGNUM structure is returned. If bn is not NULL then the existing structure will be used instead.</p> <p>ASN1_ENUMERATED_get_int64(), ASN1_ENUMERATED_set_int64(), ASN1_ENUMERATED_set(), BN_to_ASN1_ENUMERATED() and ASN1_ENUMERATED_to_BN() behave in an identical way to their ASN1_INTEGER counterparts except they operate on an ASN1_ENUMERATED value.</p> <p>ASN1_ENUMERATED_get() returns the value of a in a similar way to ASN1_INTEGER_get() but it returns 0xffffffffL if the value of a will not fit in a long type. New applications should use ASN1_ENUMERATED_get_int64() instead.</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#notes","title":"NOTES","text":"<p>In general an ASN1_INTEGER or ASN1_ENUMERATED type can contain an integer of almost arbitrary size and so cannot always be represented by a C int64_t type. However, in many cases (for example version numbers) they represent small integers which can be more easily manipulated if converted to an appropriate C integer type.</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#bugs","title":"BUGS","text":"<p>The ambiguous return values of ASN1_INTEGER_get() and ASN1_ENUMERATED_get() mean these functions should be avoided if possible. They are retained for compatibility. Normally the ambiguous return values are not legitimate values for the fields they represent.</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#return-values","title":"RETURN VALUES","text":"<p>ASN1_INTEGER_set_int64(), ASN1_INTEGER_set(), ASN1_ENUMERATED_set_int64() and ASN1_ENUMERATED_set() return 1 for success and 0 for failure. They will only fail if a memory allocation error occurs.</p> <p>ASN1_INTEGER_get_int64() and ASN1_ENUMERATED_get_int64() return 1 for success and 0 for failure. They will fail if the passed type is incorrect (this will only happen if there is a programming error) or if the value exceeds the range of an int64_t type.</p> <p>BN_to_ASN1_INTEGER() and BN_to_ASN1_ENUMERATED() return an ASN1_INTEGER or ASN1_ENUMERATED structure respectively or NULL if an error occurs. They will only fail due to a memory allocation error.</p> <p>ASN1_INTEGER_to_BN() and ASN1_ENUMERATED_to_BN() return a BIGNUM structure of NULL if an error occurs. They can fail if the passed type is incorrect (due to programming error) or due to a memory allocation failure.</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#history","title":"HISTORY","text":"<p>ASN1_INTEGER_set_int64(), ASN1_INTEGER_get_int64(), ASN1_ENUMERATED_set_int64() and ASN1_ENUMERATED_get_int64() were added in OpenSSL 1.1.0.</p>"},{"location":"man3/ASN1_INTEGER_get_int64/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_ITEM_lookup/","title":"ASN1_ITEM_lookup","text":""},{"location":"man3/ASN1_ITEM_lookup/#name","title":"NAME","text":"<p>ASN1_ITEM_lookup, ASN1_ITEM_get - lookup ASN.1 structures</p>"},{"location":"man3/ASN1_ITEM_lookup/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nconst ASN1_ITEM *ASN1_ITEM_lookup(const char *name);\nconst ASN1_ITEM *ASN1_ITEM_get(size_t i);\n</code></pre>"},{"location":"man3/ASN1_ITEM_lookup/#description","title":"DESCRIPTION","text":"<p>ASN1_ITEM_lookup() returns the ASN1_ITEM name.</p> <p>ASN1_ITEM_get() returns the ASN1_ITEM with index i. This function returns NULL if the index i is out of range.</p>"},{"location":"man3/ASN1_ITEM_lookup/#return-values","title":"RETURN VALUES","text":"<p>ASN1_ITEM_lookup() and ASN1_ITEM_get() return a valid ASN1_ITEM structure or NULL if an error occurred.</p>"},{"location":"man3/ASN1_ITEM_lookup/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ASN1_ITEM_lookup/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_OBJECT_new/","title":"ASN1_OBJECT_new","text":""},{"location":"man3/ASN1_OBJECT_new/#name","title":"NAME","text":"<p>ASN1_OBJECT_new, ASN1_OBJECT_free - object allocation functions</p>"},{"location":"man3/ASN1_OBJECT_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nASN1_OBJECT *ASN1_OBJECT_new(void);\nvoid ASN1_OBJECT_free(ASN1_OBJECT *a);\n</code></pre>"},{"location":"man3/ASN1_OBJECT_new/#description","title":"DESCRIPTION","text":"<p>The ASN1_OBJECT allocation routines, allocate and free an ASN1_OBJECT structure, which represents an ASN1 OBJECT IDENTIFIER.</p> <p>ASN1_OBJECT_new() allocates and initializes an ASN1_OBJECT structure.</p> <p>ASN1_OBJECT_free() frees up the ASN1_OBJECT structure a. If a is NULL, nothing is done.</p>"},{"location":"man3/ASN1_OBJECT_new/#notes","title":"NOTES","text":"<p>Although ASN1_OBJECT_new() allocates a new ASN1_OBJECT structure it is almost never used in applications. The ASN1 object utility functions such as OBJ_nid2obj() are used instead.</p>"},{"location":"man3/ASN1_OBJECT_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, ASN1_OBJECT_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3). Otherwise it returns a pointer to the newly allocated structure.</p> <p>ASN1_OBJECT_free() returns no value.</p>"},{"location":"man3/ASN1_OBJECT_new/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), d2i_ASN1_OBJECT(3)</p>"},{"location":"man3/ASN1_OBJECT_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_STRING_TABLE_add/","title":"ASN1_STRING_TABLE_add","text":""},{"location":"man3/ASN1_STRING_TABLE_add/#name","title":"NAME","text":"<p>ASN1_STRING_TABLE, ASN1_STRING_TABLE_add, ASN1_STRING_TABLE_get, ASN1_STRING_TABLE_cleanup - ASN1_STRING_TABLE manipulation functions</p>"},{"location":"man3/ASN1_STRING_TABLE_add/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\ntypedef struct asn1_string_table_st ASN1_STRING_TABLE;\n\nint ASN1_STRING_TABLE_add(int nid, long minsize, long maxsize,\n                          unsigned long mask, unsigned long flags);\nASN1_STRING_TABLE * ASN1_STRING_TABLE_get(int nid);\nvoid ASN1_STRING_TABLE_cleanup(void);\n</code></pre>"},{"location":"man3/ASN1_STRING_TABLE_add/#description","title":"DESCRIPTION","text":""},{"location":"man3/ASN1_STRING_TABLE_add/#types","title":"Types","text":"<p>ASN1_STRING_TABLE is a table which holds string information (basically minimum size, maximum size, type and etc) for a NID object.</p>"},{"location":"man3/ASN1_STRING_TABLE_add/#functions","title":"Functions","text":"<p>ASN1_STRING_TABLE_add() adds a new ASN1_STRING_TABLE item into the local ASN1 string table based on the nid along with other parameters.</p> <p>If the item is already in the table, fields of ASN1_STRING_TABLE are updated (depending on the values of those parameters, e.g., minsize and maxsize &gt;= 0, mask and flags != 0). If the nid is standard, a copy of the standard ASN1_STRING_TABLE is created and updated with other parameters.</p> <p>ASN1_STRING_TABLE_get() searches for an ASN1_STRING_TABLE item based on nid. It will search the local table first, then the standard one.</p> <p>ASN1_STRING_TABLE_cleanup() frees all ASN1_STRING_TABLE items added by ASN1_STRING_TABLE_add().</p>"},{"location":"man3/ASN1_STRING_TABLE_add/#return-values","title":"RETURN VALUES","text":"<p>ASN1_STRING_TABLE_add() returns 1 on success, 0 if an error occurred.</p> <p>ASN1_STRING_TABLE_get() returns a valid ASN1_STRING_TABLE structure or NULL if nothing is found.</p> <p>ASN1_STRING_TABLE_cleanup() does not return a value.</p>"},{"location":"man3/ASN1_STRING_TABLE_add/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ASN1_STRING_TABLE_add/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_STRING_length/","title":"ASN1_STRING_length","text":""},{"location":"man3/ASN1_STRING_length/#name","title":"NAME","text":"<p>ASN1_STRING_dup, ASN1_STRING_cmp, ASN1_STRING_set, ASN1_STRING_length, ASN1_STRING_type, ASN1_STRING_get0_data, ASN1_STRING_data, ASN1_STRING_to_UTF8 - ASN1_STRING utility functions</p>"},{"location":"man3/ASN1_STRING_length/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nint ASN1_STRING_length(ASN1_STRING *x);\nconst unsigned char * ASN1_STRING_get0_data(const ASN1_STRING *x);\nunsigned char * ASN1_STRING_data(ASN1_STRING *x);\n\nASN1_STRING * ASN1_STRING_dup(ASN1_STRING *a);\n\nint ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b);\n\nint ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);\n\nint ASN1_STRING_type(const ASN1_STRING *x);\n\nint ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);\n</code></pre>"},{"location":"man3/ASN1_STRING_length/#description","title":"DESCRIPTION","text":"<p>These functions allow an ASN1_STRING structure to be manipulated.</p> <p>ASN1_STRING_length() returns the length of the content of x.</p> <p>ASN1_STRING_get0_data() returns an internal pointer to the data of x. Since this is an internal pointer it should not be freed or modified in any way.</p> <p>ASN1_STRING_data() is similar to ASN1_STRING_get0_data() except the returned value is not constant. This function is deprecated: applications should use ASN1_STRING_get0_data() instead.</p> <p>ASN1_STRING_dup() returns a copy of the structure a.</p> <p>ASN1_STRING_cmp() compares a and b returning 0 if the two are identical. The string types and content are compared.</p> <p>ASN1_STRING_set() sets the data of string str to the buffer data or length len. The supplied data is copied. If len is -1 then the length is determined by strlen(data).</p> <p>ASN1_STRING_type() returns the type of x, using standard constants such as V_ASN1_OCTET_STRING.</p> <p>ASN1_STRING_to_UTF8() converts the string in to UTF8 format, the converted data is allocated in a buffer in *out. The length of out is returned or a negative error code. The buffer *out should be freed using OPENSSL_free().</p>"},{"location":"man3/ASN1_STRING_length/#notes","title":"NOTES","text":"<p>Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING structure. Other types such as ASN1_OCTET_STRING are simply typedef'ed to ASN1_STRING and the functions call the ASN1_STRING equivalents. ASN1_STRING is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time.</p> <p>These functions should not be used to examine or modify ASN1_INTEGER or ASN1_ENUMERATED types: the relevant INTEGER or ENUMERATED utility functions should be used instead.</p> <p>In general it cannot be assumed that the data returned by ASN1_STRING_data() is null terminated or does not contain embedded nulls. The actual format of the data will depend on the actual string type itself: for example for an IA5String the data will be ASCII, for a BMPString two bytes per character in big endian format, and for a UTF8String it will be in UTF8 format.</p> <p>Similar care should be take to ensure the data is in the correct format when calling ASN1_STRING_set().</p>"},{"location":"man3/ASN1_STRING_length/#return-values","title":"RETURN VALUES","text":"<p>ASN1_STRING_length() returns the length of the content of x.</p> <p>ASN1_STRING_get0_data() and ASN1_STRING_data() return an internal pointer to the data of x.</p> <p>ASN1_STRING_dup() returns a valid ASN1_STRING structure or NULL if an error occurred.</p> <p>ASN1_STRING_cmp() returns an integer greater than, equal to, or less than 0, according to whether a is greater than, equal to, or less than b.</p> <p>ASN1_STRING_set() returns 1 on success or 0 on error.</p> <p>ASN1_STRING_type() returns the type of x.</p> <p>ASN1_STRING_to_UTF8() returns the number of bytes in output string out or a negative value if an error occurred.</p>"},{"location":"man3/ASN1_STRING_length/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ASN1_STRING_length/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_STRING_new/","title":"ASN1_STRING_new","text":""},{"location":"man3/ASN1_STRING_new/#name","title":"NAME","text":"<p>ASN1_STRING_new, ASN1_STRING_type_new, ASN1_STRING_free - ASN1_STRING allocation functions</p>"},{"location":"man3/ASN1_STRING_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nASN1_STRING * ASN1_STRING_new(void);\nASN1_STRING * ASN1_STRING_type_new(int type);\nvoid ASN1_STRING_free(ASN1_STRING *a);\n</code></pre>"},{"location":"man3/ASN1_STRING_new/#description","title":"DESCRIPTION","text":"<p>ASN1_STRING_new() returns an allocated ASN1_STRING structure. Its type is undefined.</p> <p>ASN1_STRING_type_new() returns an allocated ASN1_STRING structure of type type.</p> <p>ASN1_STRING_free() frees up a. If a is NULL nothing is done.</p>"},{"location":"man3/ASN1_STRING_new/#notes","title":"NOTES","text":"<p>Other string types call the ASN1_STRING functions. For example ASN1_OCTET_STRING_new() calls ASN1_STRING_type(V_ASN1_OCTET_STRING).</p>"},{"location":"man3/ASN1_STRING_new/#return-values","title":"RETURN VALUES","text":"<p>ASN1_STRING_new() and ASN1_STRING_type_new() return a valid ASN1_STRING structure or NULL if an error occurred.</p> <p>ASN1_STRING_free() does not return a value.</p>"},{"location":"man3/ASN1_STRING_new/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ASN1_STRING_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_STRING_print_ex/","title":"ASN1_STRING_print_ex","text":""},{"location":"man3/ASN1_STRING_print_ex/#name","title":"NAME","text":"<p>ASN1_tag2str, ASN1_STRING_print_ex, ASN1_STRING_print_ex_fp, ASN1_STRING_print - ASN1_STRING output routines</p>"},{"location":"man3/ASN1_STRING_print_ex/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nint ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);\nint ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);\nint ASN1_STRING_print(BIO *out, const ASN1_STRING *str);\n\nconst char *ASN1_tag2str(int tag);\n</code></pre>"},{"location":"man3/ASN1_STRING_print_ex/#description","title":"DESCRIPTION","text":"<p>These functions output an ASN1_STRING structure. ASN1_STRING is used to represent all the ASN1 string types.</p> <p>ASN1_STRING_print_ex() outputs str to out, the format is determined by the options flags. ASN1_STRING_print_ex_fp() is identical except it outputs to fp instead.</p> <p>ASN1_STRING_print() prints str to out but using a different format to ASN1_STRING_print_ex(). It replaces unprintable characters (other than CR, LF) with '.'.</p> <p>ASN1_tag2str() returns a human-readable name of the specified ASN.1 tag.</p>"},{"location":"man3/ASN1_STRING_print_ex/#notes","title":"NOTES","text":"<p>ASN1_STRING_print() is a deprecated function which should be avoided; use ASN1_STRING_print_ex() instead.</p> <p>Although there are a large number of options frequently ASN1_STRFLGS_RFC2253 is suitable, or on UTF8 terminals ASN1_STRFLGS_RFC2253 &amp; ~ASN1_STRFLGS_ESC_MSB.</p> <p>The complete set of supported options for flags is listed below.</p> <p>Various characters can be escaped. If ASN1_STRFLGS_ESC_2253 is set the characters determined by RFC2253 are escaped. If ASN1_STRFLGS_ESC_CTRL is set control characters are escaped. If ASN1_STRFLGS_ESC_MSB is set characters with the MSB set are escaped: this option should not be used if the terminal correctly interprets UTF8 sequences.</p> <p>Escaping takes several forms.</p> <p>If the character being escaped is a 16 bit character then the form \"\\UXXXX\" is used using exactly four characters for the hex representation. If it is 32 bits then \"\\WXXXXXXXX\" is used using eight characters of its hex representation. These forms will only be used if UTF8 conversion is not set (see below).</p> <p>Printable characters are normally escaped using the backslash '\\' character. If ASN1_STRFLGS_ESC_QUOTE is set then the whole string is instead surrounded by double quote characters: this is arguably more readable than the backslash notation. Other characters use the \"\\XX\" using exactly two characters of the hex representation.</p> <p>If ASN1_STRFLGS_UTF8_CONVERT is set then characters are converted to UTF8 format first. If the terminal supports the display of UTF8 sequences then this option will correctly display multi byte characters.</p> <p>If ASN1_STRFLGS_IGNORE_TYPE is set then the string type is not interpreted at all: everything is assumed to be one byte per character. This is primarily for debugging purposes and can result in confusing output in multi character strings.</p> <p>If ASN1_STRFLGS_SHOW_TYPE is set then the string type itself is printed out before its value (for example \"BMPSTRING\"), this actually uses ASN1_tag2str().</p> <p>The content of a string instead of being interpreted can be \"dumped\": this just outputs the value of the string using the form #XXXX using hex format for each octet.</p> <p>If ASN1_STRFLGS_DUMP_ALL is set then any type is dumped.</p> <p>Normally non character string types (such as OCTET STRING) are assumed to be one byte per character, if ASN1_STRFLGS_DUMP_UNKNOWN is set then they will be dumped instead.</p> <p>When a type is dumped normally just the content octets are printed, if ASN1_STRFLGS_DUMP_DER is set then the complete encoding is dumped instead (including tag and length octets).</p> <p>ASN1_STRFLGS_RFC2253 includes all the flags required by RFC2253. It is equivalent to:  ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB |  ASN1_STRFLGS_UTF8_CONVERT | ASN1_STRFLGS_DUMP_UNKNOWN ASN1_STRFLGS_DUMP_DER</p>"},{"location":"man3/ASN1_STRING_print_ex/#return-values","title":"RETURN VALUES","text":"<p>ASN1_STRING_print_ex() and ASN1_STRING_print_ex_fp() return the number of characters written or -1 if an error occurred.</p> <p>ASN1_STRING_print() returns 1 on success or 0 on error.</p> <p>ASN1_tag2str() returns a human-readable name of the specified ASN.1 tag.</p>"},{"location":"man3/ASN1_STRING_print_ex/#see-also","title":"SEE ALSO","text":"<p>X509_NAME_print_ex(3), ASN1_tag2str(3)</p>"},{"location":"man3/ASN1_STRING_print_ex/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_TIME_set/","title":"ASN1_TIME_set","text":""},{"location":"man3/ASN1_TIME_set/#name","title":"NAME","text":"<p>ASN1_TIME_set, ASN1_UTCTIME_set, ASN1_GENERALIZEDTIME_set, ASN1_TIME_adj, ASN1_UTCTIME_adj, ASN1_GENERALIZEDTIME_adj, ASN1_TIME_check, ASN1_UTCTIME_check, ASN1_GENERALIZEDTIME_check, ASN1_TIME_set_string, ASN1_UTCTIME_set_string, ASN1_GENERALIZEDTIME_set_string, ASN1_TIME_set_string_X509, ASN1_TIME_normalize, ASN1_TIME_to_tm, ASN1_TIME_print, ASN1_UTCTIME_print, ASN1_GENERALIZEDTIME_print, ASN1_TIME_diff, ASN1_TIME_cmp_time_t, ASN1_UTCTIME_cmp_time_t, ASN1_TIME_compare, ASN1_TIME_to_generalizedtime - ASN.1 Time functions</p>"},{"location":"man3/ASN1_TIME_set/#synopsis","title":"SYNOPSIS","text":"<pre><code>ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);\nASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);\nASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,\n                                               time_t t);\n\nASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t, int offset_day,\n                         long offset_sec);\nASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,\n                               int offset_day, long offset_sec);\nASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,\n                                               time_t t, int offset_day,\n                                               long offset_sec);\n\nint ASN1_TIME_set_string(ASN1_TIME *s, const char *str);\nint ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);\nint ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);\nint ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s,\n                                    const char *str);\n\nint ASN1_TIME_normalize(ASN1_TIME *s);\n\nint ASN1_TIME_check(const ASN1_TIME *t);\nint ASN1_UTCTIME_check(const ASN1_UTCTIME *t);\nint ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *t);\n\nint ASN1_TIME_print(BIO *b, const ASN1_TIME *s);\nint ASN1_UTCTIME_print(BIO *b, const ASN1_UTCTIME *s);\nint ASN1_GENERALIZEDTIME_print(BIO *b, const ASN1_GENERALIZEDTIME *s);\n\nint ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);\nint ASN1_TIME_diff(int *pday, int *psec, const ASN1_TIME *from,\n                   const ASN1_TIME *to);\n\nint ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);\nint ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);\n\nint ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);\n\nASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t,\n                                                   ASN1_GENERALIZEDTIME **out);\n</code></pre>"},{"location":"man3/ASN1_TIME_set/#description","title":"DESCRIPTION","text":"<p>The ASN1_TIME_set(), ASN1_UTCTIME_set() and ASN1_GENERALIZEDTIME_set() functions set the structure s to the time represented by the time_t value t. If s is NULL a new time structure is allocated and returned.</p> <p>The ASN1_TIME_adj(), ASN1_UTCTIME_adj() and ASN1_GENERALIZEDTIME_adj() functions set the time structure s to the time represented by the time offset_day and offset_sec after the time_t value t. The values of offset_day or offset_sec can be negative to set a time before t. The offset_sec value can also exceed the number of seconds in a day. If s is NULL a new structure is allocated and returned.</p> <p>The ASN1_TIME_set_string(), ASN1_UTCTIME_set_string() and ASN1_GENERALIZEDTIME_set_string() functions set the time structure s to the time represented by string str which must be in appropriate ASN.1 time format (for example YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ). If s is NULL this function performs a format check on str only. The string str is copied into s.</p> <p>ASN1_TIME_set_string_X509() sets ASN1_TIME structure s to the time represented by string str which must be in appropriate time format that RFC 5280 requires, which means it only allows YYMMDDHHMMSSZ and YYYYMMDDHHMMSSZ (leap second is rejected), all other ASN.1 time format are not allowed. If s is NULL this function performs a format check on str only.</p> <p>The ASN1_TIME_normalize() function converts an ASN1_GENERALIZEDTIME or ASN1_UTCTIME into a time value that can be used in a certificate. It should be used after the ASN1_TIME_set_string() functions and before ASN1_TIME_print() functions to get consistent (i.e. GMT) results.</p> <p>The ASN1_TIME_check(), ASN1_UTCTIME_check() and ASN1_GENERALIZEDTIME_check() functions check the syntax of the time structure s.</p> <p>The ASN1_TIME_print(), ASN1_UTCTIME_print() and ASN1_GENERALIZEDTIME_print() functions print the time structure s to BIO b in human readable format. It will be of the format MMM DD HH:MM:SS YYYY [GMT], for example \"Feb  3 00:55:52 2015 GMT\" it does not include a newline. If the time structure has invalid format it prints out \"Bad time value\" and returns an error. The output for generalized time may include a fractional part following the second.</p> <p>ASN1_TIME_to_tm() converts the time s to the standard tm structure. If s is NULL, then the current time is converted. The output time is GMT. The tm_sec, tm_min, tm_hour, tm_mday, tm_wday, tm_yday, tm_mon and tm_year fields of tm structure are set to proper values, whereas all other fields are set to 0. If tm is NULL this function performs a format check on s only. If s is in Generalized format with fractional seconds, e.g. YYYYMMDDHHMMSS.SSSZ, the fractional seconds will be lost while converting s to tm structure.</p> <p>ASN1_TIME_diff() sets *pday and *psec to the time difference between from and to. If to represents a time later than from then one or both (depending on the time difference) of *pday and *psec will be positive. If to represents a time earlier than from then one or both of *pday and *psec will be negative. If to and from represent the same time then *pday and *psec will both be zero. If both *pday and *psec are nonzero they will always have the same sign. The value of *psec will always be less than the number of seconds in a day. If from or to is NULL the current time is used.</p> <p>The ASN1_TIME_cmp_time_t() and ASN1_UTCTIME_cmp_time_t() functions compare the two times represented by the time structure s and the time_t t.</p> <p>The ASN1_TIME_compare() function compares the two times represented by the time structures a and b.</p> <p>The ASN1_TIME_to_generalizedtime() function converts an ASN1_TIME to an ASN1_GENERALIZEDTIME, regardless of year. If either out or *out are NULL, then a new object is allocated and must be freed after use.</p>"},{"location":"man3/ASN1_TIME_set/#notes","title":"NOTES","text":"<p>The ASN1_TIME structure corresponds to the ASN.1 structure Time defined in RFC5280 et al. The time setting functions obey the rules outlined in RFC5280: if the date can be represented by UTCTime it is used, else GeneralizedTime is used.</p> <p>The ASN1_TIME, ASN1_UTCTIME and ASN1_GENERALIZEDTIME structures are represented as an ASN1_STRING internally and can be freed up using ASN1_STRING_free().</p> <p>The ASN1_TIME structure can represent years from 0000 to 9999 but no attempt is made to correct ancient calendar changes (for example from Julian to Gregorian calendars).</p> <p>ASN1_UTCTIME is limited to a year range of 1950 through 2049.</p> <p>Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set() (or equivalent). This can cause problems as the time_t value can overflow on some systems resulting in unexpected results. New applications should use ASN1_TIME_adj() instead and pass the offset value in the offset_sec and offset_day parameters instead of directly manipulating a time_t value.</p> <p>ASN1_TIME_adj() may change the type from ASN1_GENERALIZEDTIME to ASN1_UTCTIME, or vice versa, based on the resulting year. The ASN1_GENERALIZEDTIME_adj() and ASN1_UTCTIME_adj() functions will not modify the type of the return structure.</p> <p>It is recommended that functions starting with ASN1_TIME be used instead of those starting with ASN1_UTCTIME or ASN1_GENERALIZEDTIME. The functions starting with ASN1_UTCTIME and ASN1_GENERALIZEDTIME act only on that specific time format. The functions starting with ASN1_TIME will operate on either format.</p>"},{"location":"man3/ASN1_TIME_set/#bugs","title":"BUGS","text":"<p>ASN1_TIME_print(), ASN1_UTCTIME_print() and ASN1_GENERALIZEDTIME_print() do not print out the timezone: it either prints out \"GMT\" or nothing. But all certificates complying with RFC5280 et al use GMT anyway.</p> <p>Use the ASN1_TIME_normalize() function to normalize the time value before printing to get GMT results.</p>"},{"location":"man3/ASN1_TIME_set/#return-values","title":"RETURN VALUES","text":"<p>ASN1_TIME_set(), ASN1_UTCTIME_set(), ASN1_GENERALIZEDTIME_set(), ASN1_TIME_adj(), ASN1_UTCTIME_adj and ASN1_GENERALIZEDTIME_set return a pointer to a time structure or NULL if an error occurred.</p> <p>ASN1_TIME_set_string(), ASN1_UTCTIME_set_string(), ASN1_GENERALIZEDTIME_set_string() ASN1_TIME_set_string_X509() return 1 if the time value is successfully set and 0 otherwise.</p> <p>ASN1_TIME_normalize() returns 1 on success, and 0 on error.</p> <p>ASN1_TIME_check(), ASN1_UTCTIME_check and ASN1_GENERALIZEDTIME_check() return 1 if the structure is syntactically correct and 0 otherwise.</p> <p>ASN1_TIME_print(), ASN1_UTCTIME_print() and ASN1_GENERALIZEDTIME_print() return 1 if the time is successfully printed out and 0 if an error occurred (I/O error or invalid time format).</p> <p>ASN1_TIME_to_tm() returns 1 if the time is successfully parsed and 0 if an error occurred (invalid time format).</p> <p>ASN1_TIME_diff() returns 1 for success and 0 for failure. It can fail if the passed-in time structure has invalid syntax, for example.</p> <p>ASN1_TIME_cmp_time_t() and ASN1_UTCTIME_cmp_time_t() return -1 if s is before t, 0 if s equals t, or 1 if s is after t. -2 is returned on error.</p> <p>ASN1_TIME_compare() returns -1 if a is before b, 0 if a equals b, or 1 if a is after b. -2 is returned on error.</p> <p>ASN1_TIME_to_generalizedtime() returns a pointer to the appropriate time structure on success or NULL if an error occurred.</p>"},{"location":"man3/ASN1_TIME_set/#examples","title":"EXAMPLES","text":"<p>Set a time structure to one hour after the current time and print it out:</p> <pre><code>#include &lt;time.h&gt;\n#include &lt;openssl/asn1.h&gt;\n\nASN1_TIME *tm;\ntime_t t;\nBIO *b;\n\nt = time(NULL);\ntm = ASN1_TIME_adj(NULL, t, 0, 60 * 60);\nb = BIO_new_fp(stdout, BIO_NOCLOSE);\nASN1_TIME_print(b, tm);\nASN1_STRING_free(tm);\nBIO_free(b);\n</code></pre> <p>Determine if one time is later or sooner than the current time:</p> <pre><code>int day, sec;\n\nif (!ASN1_TIME_diff(&amp;day, &amp;sec, NULL, to))\n    /* Invalid time format */\n\nif (day &gt; 0 || sec &gt; 0)\n    printf(\"Later\\n\");\nelse if (day &lt; 0 || sec &lt; 0)\n    printf(\"Sooner\\n\");\nelse\n    printf(\"Same\\n\");\n</code></pre>"},{"location":"man3/ASN1_TIME_set/#history","title":"HISTORY","text":"<p>The ASN1_TIME_to_tm() function was added in OpenSSL 1.1.1. The ASN1_TIME_set_string_X509() function was added in OpenSSL 1.1.1. The ASN1_TIME_normalize() function was added in OpenSSL 1.1.1. The ASN1_TIME_cmp_time_t() function was added in OpenSSL 1.1.1. The ASN1_TIME_compare() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/ASN1_TIME_set/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_TYPE_get/","title":"ASN1_TYPE_get","text":""},{"location":"man3/ASN1_TYPE_get/#name","title":"NAME","text":"<p>ASN1_TYPE_get, ASN1_TYPE_set, ASN1_TYPE_set1, ASN1_TYPE_cmp, ASN1_TYPE_unpack_sequence, ASN1_TYPE_pack_sequence - ASN1_TYPE utility functions</p>"},{"location":"man3/ASN1_TYPE_get/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nint ASN1_TYPE_get(const ASN1_TYPE *a);\nvoid ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);\nint ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);\nint ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);\n\nvoid *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);\nASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s,\n                                   ASN1_TYPE **t);\n</code></pre>"},{"location":"man3/ASN1_TYPE_get/#description","title":"DESCRIPTION","text":"<p>These functions allow an ASN1_TYPE structure to be manipulated. The ASN1_TYPE structure can contain any ASN.1 type or constructed type such as a SEQUENCE: it is effectively equivalent to the ASN.1 ANY type.</p> <p>ASN1_TYPE_get() returns the type of a.</p> <p>ASN1_TYPE_set() sets the value of a to type and value. This function uses the pointer value internally so it must not be freed up after the call.</p> <p>ASN1_TYPE_set1() sets the value of a to type a copy of value.</p> <p>ASN1_TYPE_cmp() compares ASN.1 types a and b and returns 0 if they are identical and nonzero otherwise.</p> <p>ASN1_TYPE_unpack_sequence() attempts to parse the SEQUENCE present in t using the ASN.1 structure it. If successful it returns a pointer to the ASN.1 structure corresponding to it which must be freed by the caller. If it fails it return NULL.</p> <p>ASN1_TYPE_pack_sequence() attempts to encode the ASN.1 structure s corresponding to it into an ASN1_TYPE. If successful the encoded ASN1_TYPE is returned. If t and *t are not NULL the encoded type is written to t overwriting any existing data. If t is not NULL but *t is NULL the returned ASN1_TYPE is written to *t.</p>"},{"location":"man3/ASN1_TYPE_get/#notes","title":"NOTES","text":"<p>The type and meaning of the value parameter for ASN1_TYPE_set() and ASN1_TYPE_set1() is determined by the type parameter. If type is V_ASN1_NULL value is ignored. If type is V_ASN1_BOOLEAN then the boolean is set to TRUE if value is not NULL. If type is V_ASN1_OBJECT then value is an ASN1_OBJECT structure. Otherwise type is and ASN1_STRING structure. If type corresponds to a primitive type (or a string type) then the contents of the ASN1_STRING contain the content octets of the type. If type corresponds to a constructed type or a tagged type (V_ASN1_SEQUENCE, V_ASN1_SET or V_ASN1_OTHER) then the ASN1_STRING contains the entire ASN.1 encoding verbatim (including tag and length octets).</p> <p>ASN1_TYPE_cmp() may not return zero if two types are equivalent but have different encodings. For example the single content octet of the boolean TRUE value under BER can have any nonzero encoding but ASN1_TYPE_cmp() will only return zero if the values are the same.</p> <p>If either or both of the parameters passed to ASN1_TYPE_cmp() is NULL the return value is nonzero. Technically if both parameters are NULL the two types could be absent OPTIONAL fields and so should match, however, passing NULL values could also indicate a programming error (for example an unparsable type which returns NULL) for types which do not match. So applications should handle the case of two absent values separately.</p>"},{"location":"man3/ASN1_TYPE_get/#return-values","title":"RETURN VALUES","text":"<p>ASN1_TYPE_get() returns the type of the ASN1_TYPE argument.</p> <p>ASN1_TYPE_set() does not return a value.</p> <p>ASN1_TYPE_set1() returns 1 for success and 0 for failure.</p> <p>ASN1_TYPE_cmp() returns 0 if the types are identical and nonzero otherwise.</p> <p>ASN1_TYPE_unpack_sequence() returns a pointer to an ASN.1 structure or NULL on failure.</p> <p>ASN1_TYPE_pack_sequence() return an ASN1_TYPE structure if it succeeds or NULL on failure.</p>"},{"location":"man3/ASN1_TYPE_get/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASN1_generate_nconf/","title":"ASN1_generate_nconf","text":""},{"location":"man3/ASN1_generate_nconf/#name","title":"NAME","text":"<p>ASN1_generate_nconf, ASN1_generate_v3 - ASN1 generation functions</p>"},{"location":"man3/ASN1_generate_nconf/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1.h&gt;\n\nASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf);\nASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf);\n</code></pre>"},{"location":"man3/ASN1_generate_nconf/#description","title":"DESCRIPTION","text":"<p>These functions generate the ASN1 encoding of a string in an ASN1_TYPE structure.</p> <p>str contains the string to encode nconf or cnf contains the optional configuration information where additional strings will be read from. nconf will typically come from a config file whereas cnf is obtained from an X509V3_CTX structure which will typically be used by X509 v3 certificate extension functions. cnf or nconf can be set to NULL if no additional configuration will be used.</p>"},{"location":"man3/ASN1_generate_nconf/#generation-string-format","title":"GENERATION STRING FORMAT","text":"<p>The actual data encoded is determined by the string str and the configuration information. The general format of the string is:</p> <ul> <li>[modifier,]type[:value]</li> </ul> <p>That is zero or more comma separated modifiers followed by a type followed by an optional colon and a value. The formats of type, value and modifier are explained below.</p>"},{"location":"man3/ASN1_generate_nconf/#supported-types","title":"Supported Types","text":"<p>The supported types are listed below. Unless otherwise specified only the ASCII format is permissible.</p> <ul> <li> <p>BOOLEAN, BOOL</p> <p>This encodes a boolean type. The value string is mandatory and should be TRUE or FALSE. Additionally TRUE, true, Y, y, YES, yes, FALSE, false, N, n, NO and no are acceptable.</p> </li> <li> <p>NULL</p> <p>Encode the NULL type, the value string must not be present.</p> </li> <li> <p>INTEGER, INT</p> <p>Encodes an ASN1 INTEGER type. The value string represents the value of the integer, it can be prefaced by a minus sign and is normally interpreted as a decimal value unless the prefix 0x is included.</p> </li> <li> <p>ENUMERATED, ENUM</p> <p>Encodes the ASN1 ENUMERATED type, it is otherwise identical to INTEGER.</p> </li> <li> <p>OBJECT, OID</p> <p>Encodes an ASN1 OBJECT IDENTIFIER, the value string can be a short name, a long name or numerical format.</p> </li> <li> <p>UTCTIME, UTC</p> <p>Encodes an ASN1 UTCTime structure, the value should be in the format YYMMDDHHMMSSZ.</p> </li> <li> <p>GENERALIZEDTIME, GENTIME</p> <p>Encodes an ASN1 GeneralizedTime structure, the value should be in the format YYYYMMDDHHMMSSZ.</p> </li> <li> <p>OCTETSTRING, OCT</p> <p>Encodes an ASN1 OCTET STRING. value represents the contents of this structure, the format strings ASCII and HEX can be used to specify the format of value.</p> </li> <li> <p>BITSTRING, BITSTR</p> <p>Encodes an ASN1 BIT STRING. value represents the contents of this structure, the format strings ASCII, HEX and BITLIST can be used to specify the format of value.</p> <p>If the format is anything other than BITLIST the number of unused bits is set to zero.</p> </li> <li> <p>UNIVERSALSTRING, UNIV, IA5, IA5STRING, UTF8, UTF8String, BMP, BMPSTRING, VISIBLESTRING, VISIBLE, PRINTABLESTRING, PRINTABLE, T61, T61STRING, TELETEXSTRING, GeneralString, NUMERICSTRING, NUMERIC</p> <p>These encode the corresponding string types. value represents the contents of this structure. The format can be ASCII or UTF8.</p> </li> <li> <p>SEQUENCE, SEQ, SET</p> <p>Formats the result as an ASN1 SEQUENCE or SET type. value should be a section name which will contain the contents. The field names in the section are ignored and the values are in the generated string format. If value is absent then an empty SEQUENCE will be encoded.</p> </li> </ul>"},{"location":"man3/ASN1_generate_nconf/#modifiers","title":"Modifiers","text":"<p>Modifiers affect the following structure, they can be used to add EXPLICIT or IMPLICIT tagging, add wrappers or to change the string format of the final type and value. The supported formats are documented below.</p> <ul> <li> <p>EXPLICIT, EXP</p> <p>Add an explicit tag to the following structure. This string should be followed by a colon and the tag value to use as a decimal value.</p> <p>By following the number with U, A, P or C UNIVERSAL, APPLICATION, PRIVATE or CONTEXT SPECIFIC tagging can be used, the default is CONTEXT SPECIFIC.</p> </li> <li> <p>IMPLICIT, IMP</p> <p>This is the same as EXPLICIT except IMPLICIT tagging is used instead.</p> </li> <li> <p>OCTWRAP, SEQWRAP, SETWRAP, BITWRAP</p> <p>The following structure is surrounded by an OCTET STRING, a SEQUENCE, a SET or a BIT STRING respectively. For a BIT STRING the number of unused bits is set to zero.</p> </li> <li> <p>FORMAT</p> <p>This specifies the format of the ultimate value. It should be followed by a colon and one of the strings ASCII, UTF8, HEX or BITLIST.</p> <p>If no format specifier is included then ASCII is used. If UTF8 is specified then the value string must be a valid UTF8 string. For HEX the output must be a set of hex digits. BITLIST (which is only valid for a BIT STRING) is a comma separated list of the indices of the set bits, all other bits are zero.</p> </li> </ul>"},{"location":"man3/ASN1_generate_nconf/#return-values","title":"RETURN VALUES","text":"<p>ASN1_generate_nconf() and ASN1_generate_v3() return the encoded data as an ASN1_TYPE structure or NULL if an error occurred.</p> <p>The error codes that can be obtained by ERR_get_error(3).</p>"},{"location":"man3/ASN1_generate_nconf/#examples","title":"EXAMPLES","text":"<p>A simple IA5String:</p> <pre><code>IA5STRING:Hello World\n</code></pre> <p>An IA5String explicitly tagged:</p> <pre><code>EXPLICIT:0,IA5STRING:Hello World\n</code></pre> <p>An IA5String explicitly tagged using APPLICATION tagging:</p> <pre><code>EXPLICIT:0A,IA5STRING:Hello World\n</code></pre> <p>A BITSTRING with bits 1 and 5 set and all others zero:</p> <pre><code>FORMAT:BITLIST,BITSTRING:1,5\n</code></pre> <p>A more complex example using a config file to produce a SEQUENCE consisting of a BOOL an OID and a UTF8String:</p> <pre><code>asn1 = SEQUENCE:seq_section\n\n[seq_section]\n\nfield1 = BOOLEAN:TRUE\nfield2 = OID:commonName\nfield3 = UTF8:Third field\n</code></pre> <p>This example produces an RSAPrivateKey structure, this is the key contained in the file client.pem in all OpenSSL distributions (note: the field names such as 'coeff' are ignored and are present just for clarity):</p> <pre><code>asn1=SEQUENCE:private_key\n[private_key]\nversion=INTEGER:0\n\nn=INTEGER:0xBB6FE79432CC6EA2D8F970675A5A87BFBE1AFF0BE63E879F2AFFB93644\\\nD4D2C6D000430DEC66ABF47829E74B8C5108623A1C0EE8BE217B3AD8D36D5EB4FCA1D9\n\ne=INTEGER:0x010001\n\nd=INTEGER:0x6F05EAD2F27FFAEC84BEC360C4B928FD5F3A9865D0FCAAD291E2A52F4A\\\nF810DC6373278C006A0ABBA27DC8C63BF97F7E666E27C5284D7D3B1FFFE16B7A87B51D\n\np=INTEGER:0xF3929B9435608F8A22C208D86795271D54EBDFB09DDEF539AB083DA912\\\nD4BD57\n\nq=INTEGER:0xC50016F89DFF2561347ED1186A46E150E28BF2D0F539A1594BBD7FE467\\\n46EC4F\n\nexp1=INTEGER:0x9E7D4326C924AFC1DEA40B45650134966D6F9DFA3A7F9D698CD4ABEA\\\n9C0A39B9\n\nexp2=INTEGER:0xBA84003BB95355AFB7C50DF140C60513D0BA51D637272E355E397779\\\nE7B2458F\n\ncoeff=INTEGER:0x30B9E4F2AFA5AC679F920FC83F1F2DF1BAF1779CF989447FABC2F5\\\n628657053A\n</code></pre> <p>This example is the corresponding public key in a SubjectPublicKeyInfo structure:</p> <pre><code># Start with a SEQUENCE\nasn1=SEQUENCE:pubkeyinfo\n\n# pubkeyinfo contains an algorithm identifier and the public key wrapped\n# in a BIT STRING\n[pubkeyinfo]\nalgorithm=SEQUENCE:rsa_alg\npubkey=BITWRAP,SEQUENCE:rsapubkey\n\n# algorithm ID for RSA is just an OID and a NULL\n[rsa_alg]\nalgorithm=OID:rsaEncryption\nparameter=NULL\n\n# Actual public key: modulus and exponent\n[rsapubkey]\nn=INTEGER:0xBB6FE79432CC6EA2D8F970675A5A87BFBE1AFF0BE63E879F2AFFB93644\\\nD4D2C6D000430DEC66ABF47829E74B8C5108623A1C0EE8BE217B3AD8D36D5EB4FCA1D9\n\ne=INTEGER:0x010001\n</code></pre>"},{"location":"man3/ASN1_generate_nconf/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ASN1_generate_nconf/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/","title":"ASYNC_WAIT_CTX_new","text":""},{"location":"man3/ASYNC_WAIT_CTX_new/#name","title":"NAME","text":"<p>ASYNC_WAIT_CTX_new, ASYNC_WAIT_CTX_free, ASYNC_WAIT_CTX_set_wait_fd, ASYNC_WAIT_CTX_get_fd, ASYNC_WAIT_CTX_get_all_fds, ASYNC_WAIT_CTX_get_changed_fds, ASYNC_WAIT_CTX_clear_fd - functions to manage waiting for asynchronous jobs to complete</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/async.h&gt;\n\nASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void);\nvoid ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);\nint ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,\n                               OSSL_ASYNC_FD fd,\n                               void *custom_data,\n                               void (*cleanup)(ASYNC_WAIT_CTX *, const void *,\n                                               OSSL_ASYNC_FD, void *));\nint ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,\n                          OSSL_ASYNC_FD *fd, void **custom_data);\nint ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,\n                               size_t *numfds);\nint ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,\n                                   size_t *numaddfds, OSSL_ASYNC_FD *delfd,\n                                   size_t *numdelfds);\nint ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);\n</code></pre>"},{"location":"man3/ASYNC_WAIT_CTX_new/#description","title":"DESCRIPTION","text":"<p>For an overview of how asynchronous operations are implemented in OpenSSL see ASYNC_start_job(3). An ASYNC_WAIT_CTX object represents an asynchronous \"session\", i.e. a related set of crypto operations. For example in SSL terms this would have a one-to-one correspondence with an SSL connection.</p> <p>Application code must create an ASYNC_WAIT_CTX using the ASYNC_WAIT_CTX_new() function prior to calling ASYNC_start_job() (see ASYNC_start_job(3)). When the job is started it is associated with the ASYNC_WAIT_CTX for the duration of that job. An ASYNC_WAIT_CTX should only be used for one ASYNC_JOB at any one time, but can be reused after an ASYNC_JOB has finished for a subsequent ASYNC_JOB. When the session is complete (e.g. the SSL connection is closed), application code cleans up with ASYNC_WAIT_CTX_free().</p> <p>ASYNC_WAIT_CTXs can have \"wait\" file descriptors associated with them. Calling ASYNC_WAIT_CTX_get_all_fds() and passing in a pointer to an ASYNC_WAIT_CTX in the ctx parameter will return the wait file descriptors associated with that job in *fd. The number of file descriptors returned will be stored in *numfds. It is the caller's responsibility to ensure that sufficient memory has been allocated in *fd to receive all the file descriptors. Calling ASYNC_WAIT_CTX_get_all_fds() with a NULL fd value will return no file descriptors but will still populate *numfds. Therefore, application code is typically expected to call this function twice: once to get the number of fds, and then again when sufficient memory has been allocated. If only one asynchronous engine is being used then normally this call will only ever return one fd. If multiple asynchronous engines are being used then more could be returned.</p> <p>The function ASYNC_WAIT_CTX_get_changed_fds() can be used to detect if any fds have changed since the last call time ASYNC_start_job() returned an ASYNC_PAUSE result (or since the ASYNC_WAIT_CTX was created if no ASYNC_PAUSE result has been received). The numaddfds and numdelfds parameters will be populated with the number of fds added or deleted respectively. *addfd and *delfd will be populated with the list of added and deleted fds respectively. Similarly to ASYNC_WAIT_CTX_get_all_fds() either of these can be NULL, but if they are not NULL then the caller is responsible for ensuring sufficient memory is allocated.</p> <p>Implementors of async aware code (e.g. engines) are encouraged to return a stable fd for the lifetime of the ASYNC_WAIT_CTX in order to reduce the \"churn\" of regularly changing fds - although no guarantees of this are provided to applications.</p> <p>Applications can wait for the file descriptor to be ready for \"read\" using a system function call such as select or poll (being ready for \"read\" indicates that the job should be resumed). If no file descriptor is made available then an application will have to periodically \"poll\" the job by attempting to restart it to see if it is ready to continue.</p> <p>Async aware code (e.g. engines) can get the current ASYNC_WAIT_CTX from the job via ASYNC_get_wait_ctx(3) and provide a file descriptor to use for waiting on by calling ASYNC_WAIT_CTX_set_wait_fd(). Typically this would be done by an engine immediately prior to calling ASYNC_pause_job() and not by end user code. An existing association with a file descriptor can be obtained using ASYNC_WAIT_CTX_get_fd() and cleared using ASYNC_WAIT_CTX_clear_fd(). Both of these functions requires a key value which is unique to the async aware code.  This could be any unique value but a good candidate might be the ENGINE * for the engine. The custom_data parameter can be any value, and will be returned in a subsequent call to ASYNC_WAIT_CTX_get_fd(). The ASYNC_WAIT_CTX_set_wait_fd() function also expects a pointer to a \"cleanup\" routine. This can be NULL but if provided will automatically get called when the ASYNC_WAIT_CTX is freed, and gives the engine the opportunity to close the fd or any other resources. Note: The \"cleanup\" routine does not get called if the fd is cleared directly via a call to ASYNC_WAIT_CTX_clear_fd().</p> <p>An example of typical usage might be an async capable engine. User code would initiate cryptographic operations. The engine would initiate those operations asynchronously and then call ASYNC_WAIT_CTX_set_wait_fd() followed by ASYNC_pause_job() to return control to the user code. The user code can then perform other tasks or wait for the job to be ready by calling \"select\" or other similar function on the wait file descriptor. The engine can signal to the user code that the job should be resumed by making the wait file descriptor \"readable\". Once resumed the engine should clear the wake signal on the wait file descriptor.</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>ASYNC_WAIT_CTX_new() returns a pointer to the newly allocated ASYNC_WAIT_CTX or NULL on error.</p> <p>ASYNC_WAIT_CTX_set_wait_fd, ASYNC_WAIT_CTX_get_fd, ASYNC_WAIT_CTX_get_all_fds, ASYNC_WAIT_CTX_get_changed_fds and ASYNC_WAIT_CTX_clear_fd all return 1 on success or 0 on error.</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/#notes","title":"NOTES","text":"<p>On Windows platforms the openssl/async.h header is dependent on some of the types customarily made available by including windows.h. The application developer is likely to require control over when the latter is included, commonly as one of the first included headers. Therefore, it is defined as an application developer's responsibility to include windows.h prior to async.h.</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/#see-also","title":"SEE ALSO","text":"<p>crypto(7), ASYNC_start_job(3)</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/#history","title":"HISTORY","text":"<p>ASYNC_WAIT_CTX_new(), ASYNC_WAIT_CTX_free(), ASYNC_WAIT_CTX_set_wait_fd(), ASYNC_WAIT_CTX_get_fd(), ASYNC_WAIT_CTX_get_all_fds(), ASYNC_WAIT_CTX_get_changed_fds() and ASYNC_WAIT_CTX_clear_fd() were added in OpenSSL 1.1.0.</p>"},{"location":"man3/ASYNC_WAIT_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ASYNC_start_job/","title":"ASYNC_start_job","text":""},{"location":"man3/ASYNC_start_job/#name","title":"NAME","text":"<p>ASYNC_get_wait_ctx, ASYNC_init_thread, ASYNC_cleanup_thread, ASYNC_start_job, ASYNC_pause_job, ASYNC_get_current_job, ASYNC_block_pause, ASYNC_unblock_pause, ASYNC_is_capable - asynchronous job management functions</p>"},{"location":"man3/ASYNC_start_job/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/async.h&gt;\n\nint ASYNC_init_thread(size_t max_size, size_t init_size);\nvoid ASYNC_cleanup_thread(void);\n\nint ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,\n                    int (*func)(void *), void *args, size_t size);\nint ASYNC_pause_job(void);\n\nASYNC_JOB *ASYNC_get_current_job(void);\nASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job);\nvoid ASYNC_block_pause(void);\nvoid ASYNC_unblock_pause(void);\n\nint ASYNC_is_capable(void);\n</code></pre>"},{"location":"man3/ASYNC_start_job/#description","title":"DESCRIPTION","text":"<p>OpenSSL implements asynchronous capabilities through an ASYNC_JOB. This represents code that can be started and executes until some event occurs. At that point the code can be paused and control returns to user code until some subsequent event indicates that the job can be resumed.</p> <p>The creation of an ASYNC_JOB is a relatively expensive operation. Therefore, for efficiency reasons, jobs can be created up front and reused many times. They are held in a pool until they are needed, at which point they are removed from the pool, used, and then returned to the pool when the job completes. If the user application is multi-threaded, then ASYNC_init_thread() may be called for each thread that will initiate asynchronous jobs. Before user code exits per-thread resources need to be cleaned up. This will normally occur automatically (see OPENSSL_init_crypto(3)) but may be explicitly initiated by using ASYNC_cleanup_thread(). No asynchronous jobs must be outstanding for the thread when ASYNC_cleanup_thread() is called. Failing to ensure this will result in memory leaks.</p> <p>The max_size argument limits the number of ASYNC_JOBs that will be held in the pool. If max_size is set to 0 then no upper limit is set. When an ASYNC_JOB is needed but there are none available in the pool already then one will be automatically created, as long as the total of ASYNC_JOBs managed by the pool does not exceed max_size. When the pool is first initialised init_size ASYNC_JOBs will be created immediately. If ASYNC_init_thread() is not called before the pool is first used then it will be called automatically with a max_size of 0 (no upper limit) and an init_size of 0 (no ASYNC_JOBs created up front).</p> <p>An asynchronous job is started by calling the ASYNC_start_job() function. Initially *job should be NULL. ctx should point to an ASYNC_WAIT_CTX object created through the ASYNC_WAIT_CTX_new(3) function. ret should point to a location where the return value of the asynchronous function should be stored on completion of the job. func represents the function that should be started asynchronously. The data pointed to by args and of size size will be copied and then passed as an argument to func when the job starts. ASYNC_start_job will return one of the following values:</p> <ul> <li> <p>ASYNC_ERR</p> <p>An error occurred trying to start the job. Check the OpenSSL error queue (e.g. see ERR_print_errors(3)) for more details.</p> </li> <li> <p>ASYNC_NO_JOBS</p> <p>There are no jobs currently available in the pool. This call can be retried again at a later time.</p> </li> <li> <p>ASYNC_PAUSE</p> <p>The job was successfully started but was \"paused\" before it completed (see ASYNC_pause_job() below). A handle to the job is placed in *job. Other work can be performed (if desired) and the job restarted at a later time. To restart a job call ASYNC_start_job() again passing the job handle in *job. The func, args and size parameters will be ignored when restarting a job. When restarting a job ASYNC_start_job() must be called from the same thread that the job was originally started from.</p> </li> <li> <p>ASYNC_FINISH</p> <p>The job completed. *job will be NULL and the return value from func will be placed in *ret.</p> </li> </ul> <p>At any one time there can be a maximum of one job actively running per thread (you can have many that are paused). ASYNC_get_current_job() can be used to get a pointer to the currently executing ASYNC_JOB. If no job is currently executing then this will return NULL.</p> <p>If executing within the context of a job (i.e. having been called directly or indirectly by the function \"func\" passed as an argument to ASYNC_start_job()) then ASYNC_pause_job() will immediately return control to the calling application with ASYNC_PAUSE returned from the ASYNC_start_job() call. A subsequent call to ASYNC_start_job passing in the relevant ASYNC_JOB in the *job parameter will resume execution from the ASYNC_pause_job() call. If ASYNC_pause_job() is called whilst not within the context of a job then no action is taken and ASYNC_pause_job() returns immediately.</p> <p>ASYNC_get_wait_ctx() can be used to get a pointer to the ASYNC_WAIT_CTX for the job. ASYNC_WAIT_CTXs can have a \"wait\" file descriptor associated with them. Applications can wait for the file descriptor to be ready for \"read\" using a system function call such as select or poll (being ready for \"read\" indicates that the job should be resumed). If no file descriptor is made available then an application will have to periodically \"poll\" the job by attempting to restart it to see if it is ready to continue.</p> <p>An example of typical usage might be an async capable engine. User code would initiate cryptographic operations. The engine would initiate those operations asynchronously and then call ASYNC_WAIT_CTX_set_wait_fd(3) followed by ASYNC_pause_job() to return control to the user code. The user code can then perform other tasks or wait for the job to be ready by calling \"select\" or other similar function on the wait file descriptor. The engine can signal to the user code that the job should be resumed by making the wait file descriptor \"readable\". Once resumed the engine should clear the wake signal on the wait file descriptor.</p> <p>The ASYNC_block_pause() function will prevent the currently active job from pausing. The block will remain in place until a subsequent call to ASYNC_unblock_pause(). These functions can be nested, e.g. if you call ASYNC_block_pause() twice then you must call ASYNC_unblock_pause() twice in order to re-enable pausing. If these functions are called while there is no currently active job then they have no effect. This functionality can be useful to avoid deadlock scenarios. For example during the execution of an ASYNC_JOB an application acquires a lock. It then calls some cryptographic function which invokes ASYNC_pause_job(). This returns control back to the code that created the ASYNC_JOB. If that code then attempts to acquire the same lock before resuming the original job then a deadlock can occur. By calling ASYNC_block_pause() immediately after acquiring the lock and ASYNC_unblock_pause() immediately before releasing it then this situation cannot occur.</p> <p>Some platforms cannot support async operations. The ASYNC_is_capable() function can be used to detect whether the current platform is async capable or not.</p>"},{"location":"man3/ASYNC_start_job/#return-values","title":"RETURN VALUES","text":"<p>ASYNC_init_thread returns 1 on success or 0 otherwise.</p> <p>ASYNC_start_job returns one of ASYNC_ERR, ASYNC_NO_JOBS, ASYNC_PAUSE or ASYNC_FINISH as described above.</p> <p>ASYNC_pause_job returns 0 if an error occurred or 1 on success. If called when not within the context of an ASYNC_JOB then this is counted as success so 1 is returned.</p> <p>ASYNC_get_current_job returns a pointer to the currently executing ASYNC_JOB or NULL if not within the context of a job.</p> <p>ASYNC_get_wait_ctx() returns a pointer to the ASYNC_WAIT_CTX for the job.</p> <p>ASYNC_is_capable() returns 1 if the current platform is async capable or 0 otherwise.</p>"},{"location":"man3/ASYNC_start_job/#notes","title":"NOTES","text":"<p>On Windows platforms the openssl/async.h header is dependent on some of the types customarily made available by including windows.h. The application developer is likely to require control over when the latter is included, commonly as one of the first included headers. Therefore, it is defined as an application developer's responsibility to include windows.h prior to async.h.</p>"},{"location":"man3/ASYNC_start_job/#examples","title":"EXAMPLES","text":"<p>The following example demonstrates how to use most of the core async APIs:</p> <pre><code>#ifdef _WIN32\n# include &lt;windows.h&gt;\n#endif\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;openssl/async.h&gt;\n#include &lt;openssl/crypto.h&gt;\n\nint unique = 0;\n\nvoid cleanup(ASYNC_WAIT_CTX *ctx, const void *key, OSSL_ASYNC_FD r, void *vw)\n{\n    OSSL_ASYNC_FD *w = (OSSL_ASYNC_FD *)vw;\n\n    close(r);\n    close(*w);\n    OPENSSL_free(w);\n}\n\nint jobfunc(void *arg)\n{\n    ASYNC_JOB *currjob;\n    unsigned char *msg;\n    int pipefds[2] = {0, 0};\n    OSSL_ASYNC_FD *wptr;\n    char buf = 'X';\n\n    currjob = ASYNC_get_current_job();\n    if (currjob != NULL) {\n        printf(\"Executing within a job\\n\");\n    } else {\n        printf(\"Not executing within a job - should not happen\\n\");\n        return 0;\n    }\n\n    msg = (unsigned char *)arg;\n    printf(\"Passed in message is: %s\\n\", msg);\n\n    if (pipe(pipefds) != 0) {\n        printf(\"Failed to create pipe\\n\");\n        return 0;\n    }\n    wptr = OPENSSL_malloc(sizeof(OSSL_ASYNC_FD));\n    if (wptr == NULL) {\n        printf(\"Failed to malloc\\n\");\n        return 0;\n    }\n    *wptr = pipefds[1];\n    ASYNC_WAIT_CTX_set_wait_fd(ASYNC_get_wait_ctx(currjob), &amp;unique,\n                               pipefds[0], wptr, cleanup);\n\n    /*\n     * Normally some external event would cause this to happen at some\n     * later point - but we do it here for demo purposes, i.e.\n     * immediately signalling that the job is ready to be woken up after\n     * we return to main via ASYNC_pause_job().\n     */\n    write(pipefds[1], &amp;buf, 1);\n\n    /* Return control back to main */\n    ASYNC_pause_job();\n\n    /* Clear the wake signal */\n    read(pipefds[0], &amp;buf, 1);\n\n    printf (\"Resumed the job after a pause\\n\");\n\n    return 1;\n}\n\nint main(void)\n{\n    ASYNC_JOB *job = NULL;\n    ASYNC_WAIT_CTX *ctx = NULL;\n    int ret;\n    OSSL_ASYNC_FD waitfd;\n    fd_set waitfdset;\n    size_t numfds;\n    unsigned char msg[13] = \"Hello world!\";\n\n    printf(\"Starting...\\n\");\n\n    ctx = ASYNC_WAIT_CTX_new();\n    if (ctx == NULL) {\n        printf(\"Failed to create ASYNC_WAIT_CTX\\n\");\n        abort();\n    }\n\n    for (;;) {\n        switch (ASYNC_start_job(&amp;job, ctx, &amp;ret, jobfunc, msg, sizeof(msg))) {\n        case ASYNC_ERR:\n        case ASYNC_NO_JOBS:\n            printf(\"An error occurred\\n\");\n            goto end;\n        case ASYNC_PAUSE:\n            printf(\"Job was paused\\n\");\n            break;\n        case ASYNC_FINISH:\n            printf(\"Job finished with return value %d\\n\", ret);\n            goto end;\n        }\n\n        /* Wait for the job to be woken */\n        printf(\"Waiting for the job to be woken up\\n\");\n\n        if (!ASYNC_WAIT_CTX_get_all_fds(ctx, NULL, &amp;numfds)\n                || numfds &gt; 1) {\n            printf(\"Unexpected number of fds\\n\");\n            abort();\n        }\n        ASYNC_WAIT_CTX_get_all_fds(ctx, &amp;waitfd, &amp;numfds);\n        FD_ZERO(&amp;waitfdset);\n        FD_SET(waitfd, &amp;waitfdset);\n        select(waitfd + 1, &amp;waitfdset, NULL, NULL, NULL);\n    }\n\nend:\n    ASYNC_WAIT_CTX_free(ctx);\n    printf(\"Finishing\\n\");\n\n    return 0;\n}\n</code></pre> <p>The expected output from executing the above example program is:</p> <pre><code>Starting...\nExecuting within a job\nPassed in message is: Hello world!\nJob was paused\nWaiting for the job to be woken up\nResumed the job after a pause\nJob finished with return value 1\nFinishing\n</code></pre>"},{"location":"man3/ASYNC_start_job/#see-also","title":"SEE ALSO","text":"<p>crypto(7), ERR_print_errors(3)</p>"},{"location":"man3/ASYNC_start_job/#history","title":"HISTORY","text":"<p>ASYNC_init_thread, ASYNC_cleanup_thread, ASYNC_start_job, ASYNC_pause_job, ASYNC_get_current_job, ASYNC_get_wait_ctx(), ASYNC_block_pause(), ASYNC_unblock_pause() and ASYNC_is_capable() were first added in OpenSSL 1.1.0.</p>"},{"location":"man3/ASYNC_start_job/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BF_encrypt/","title":"BF_encrypt","text":""},{"location":"man3/BF_encrypt/#name","title":"NAME","text":"<p>BF_set_key, BF_encrypt, BF_decrypt, BF_ecb_encrypt, BF_cbc_encrypt, BF_cfb64_encrypt, BF_ofb64_encrypt, BF_options - Blowfish encryption</p>"},{"location":"man3/BF_encrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/blowfish.h&gt;\n\nvoid BF_set_key(BF_KEY *key, int len, const unsigned char *data);\n\nvoid BF_ecb_encrypt(const unsigned char *in, unsigned char *out,\n                    BF_KEY *key, int enc);\nvoid BF_cbc_encrypt(const unsigned char *in, unsigned char *out,\n                    long length, BF_KEY *schedule,\n                    unsigned char *ivec, int enc);\nvoid BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,\n                      long length, BF_KEY *schedule,\n                      unsigned char *ivec, int *num, int enc);\nvoid BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,\n                      long length, BF_KEY *schedule,\n                      unsigned char *ivec, int *num);\nconst char *BF_options(void);\n\nvoid BF_encrypt(BF_LONG *data, const BF_KEY *key);\nvoid BF_decrypt(BF_LONG *data, const BF_KEY *key);\n</code></pre>"},{"location":"man3/BF_encrypt/#description","title":"DESCRIPTION","text":"<p>This library implements the Blowfish cipher, which was invented and described by Counterpane (see http://www.counterpane.com/blowfish.html ).</p> <p>Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data. It uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption.  Blowfish can be used in the same modes as DES (see des_modes(7)).  Blowfish is currently one of the faster block ciphers.  It is quite a bit faster than DES, and much faster than IDEA or RC2.</p> <p>Blowfish consists of a key setup phase and the actual encryption or decryption phase.</p> <p>BF_set_key() sets up the BF_KEY key using the len bytes long key at data.</p> <p>BF_ecb_encrypt() is the basic Blowfish encryption and decryption function. It encrypts or decrypts the first 64 bits of in using the key key, putting the result in out.  enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed.  The vector pointed at by in and out must be 64 bits in length, no less.  If they are larger, everything after the first 64 bits is ignored.</p> <p>The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data.  They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message.  ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt.  Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt a variable number of bytes (the amount does not have to be an exact multiple of 8).  The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls.  This integer must be initialized to zero when ivec is initialized.</p> <p>BF_cbc_encrypt() is the Cipher Block Chaining function for Blowfish.  It encrypts or decrypts the 64 bits chunks of in using the key schedule, putting the result in out.  enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed.  ivec must point at an 8 byte long initialization vector.</p> <p>BF_cfb64_encrypt() is the CFB mode for Blowfish with 64 bit feedback. It encrypts or decrypts the bytes in in using the key schedule, putting the result in out.  enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed.  ivec must point at an 8 byte long initialization vector. num must point at an integer which must be initially zero.</p> <p>BF_ofb64_encrypt() is the OFB mode for Blowfish with 64 bit feedback. It uses the same parameters as BF_cfb64_encrypt(), which must be initialized the same way.</p> <p>BF_encrypt() and BF_decrypt() are the lowest level functions for Blowfish encryption.  They encrypt/decrypt the first 64 bits of the vector pointed by data, using the key key.  These functions should not be used unless you implement 'modes' of Blowfish.  The alternative is to use BF_ecb_encrypt(). If you still want to use these functions, you should be aware that they take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones.</p>"},{"location":"man3/BF_encrypt/#return-values","title":"RETURN VALUES","text":"<p>None of the functions presented here return any value.</p>"},{"location":"man3/BF_encrypt/#note","title":"NOTE","text":"<p>Applications should use the higher level functions EVP_EncryptInit(3) etc. instead of calling these functions directly.</p>"},{"location":"man3/BF_encrypt/#see-also","title":"SEE ALSO","text":"<p>EVP_EncryptInit(3), des_modes(7)</p>"},{"location":"man3/BF_encrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_ADDR/","title":"BIO_ADDR","text":""},{"location":"man3/BIO_ADDR/#name","title":"NAME","text":"<p>BIO_ADDR, BIO_ADDR_new, BIO_ADDR_clear, BIO_ADDR_free, BIO_ADDR_rawmake, BIO_ADDR_family, BIO_ADDR_rawaddress, BIO_ADDR_rawport, BIO_ADDR_hostname_string, BIO_ADDR_service_string, BIO_ADDR_path_string - BIO_ADDR routines</p>"},{"location":"man3/BIO_ADDR/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;sys/types.h&gt;\n#include &lt;openssl/bio.h&gt;\n\ntypedef union bio_addr_st BIO_ADDR;\n\nBIO_ADDR *BIO_ADDR_new(void);\nvoid BIO_ADDR_free(BIO_ADDR *);\nvoid BIO_ADDR_clear(BIO_ADDR *ap);\nint BIO_ADDR_rawmake(BIO_ADDR *ap, int family,\n                     const void *where, size_t wherelen, unsigned short port);\nint BIO_ADDR_family(const BIO_ADDR *ap);\nint BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);\nunsigned short BIO_ADDR_rawport(const BIO_ADDR *ap);\nchar *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);\nchar *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);\nchar *BIO_ADDR_path_string(const BIO_ADDR *ap);\n</code></pre>"},{"location":"man3/BIO_ADDR/#description","title":"DESCRIPTION","text":"<p>The BIO_ADDR type is a wrapper around all types of socket addresses that OpenSSL deals with, currently transparently supporting AF_INET, AF_INET6 and AF_UNIX according to what's available on the platform at hand.</p> <p>BIO_ADDR_new() creates a new unfilled BIO_ADDR, to be used with routines that will fill it with information, such as BIO_accept_ex().</p> <p>BIO_ADDR_free() frees a BIO_ADDR created with BIO_ADDR_new().</p> <p>BIO_ADDR_clear() clears any data held within the provided BIO_ADDR and sets it back to an uninitialised state.</p> <p>BIO_ADDR_rawmake() takes a protocol family, a byte array of size wherelen with an address in network byte order pointed at by where and a port number in network byte order in port (except for the AF_UNIX protocol family, where port is meaningless and therefore ignored) and populates the given BIO_ADDR with them. In case this creates a AF_UNIX BIO_ADDR, wherelen is expected to be the length of the path string (not including the terminating NUL, such as the result of a call to strlen()). Read on about the addresses in \"RAW ADDRESSES\" below.</p> <p>BIO_ADDR_family() returns the protocol family of the given BIO_ADDR.  The possible non-error results are one of the constants AF_INET, AF_INET6 and AF_UNIX. It will also return AF_UNSPEC if the BIO_ADDR has not been initialised.</p> <p>BIO_ADDR_rawaddress() will write the raw address of the given BIO_ADDR in the area pointed at by p if p is non-NULL, and will set *l to be the amount of bytes the raw address takes up if l is non-NULL. A technique to only find out the size of the address is a call with p set to NULL.  The raw address will be in network byte order, most significant byte first. In case this is a AF_UNIX BIO_ADDR, l gets the length of the path string (not including the terminating NUL, such as the result of a call to strlen()). Read on about the addresses in \"RAW ADDRESSES\" below.</p> <p>BIO_ADDR_rawport() returns the raw port of the given BIO_ADDR. The raw port will be in network byte order.</p> <p>BIO_ADDR_hostname_string() returns a character string with the hostname of the given BIO_ADDR.  If numeric is 1, the string will contain the numerical form of the address.  This only works for BIO_ADDR of the protocol families AF_INET and AF_INET6.  The returned string has been allocated on the heap and must be freed with OPENSSL_free().</p> <p>BIO_ADDR_service_string() returns a character string with the service name of the port of the given BIO_ADDR.  If numeric is 1, the string will contain the port number.  This only works for BIO_ADDR of the protocol families AF_INET and AF_INET6.  The returned string has been allocated on the heap and must be freed with OPENSSL_free().</p> <p>BIO_ADDR_path_string() returns a character string with the path of the given BIO_ADDR.  This only works for BIO_ADDR of the protocol family AF_UNIX.  The returned string has been allocated on the heap and must be freed with OPENSSL_free().</p>"},{"location":"man3/BIO_ADDR/#raw-addresses","title":"RAW ADDRESSES","text":"<p>Both BIO_ADDR_rawmake() and BIO_ADDR_rawaddress() take a pointer to a network byte order address of a specific site.  Internally, those are treated as a pointer to struct in_addr (for AF_INET), struct in6_addr (for AF_INET6) or char * (for AF_UNIX), all depending on the protocol family the address is for.</p>"},{"location":"man3/BIO_ADDR/#return-values","title":"RETURN VALUES","text":"<p>The string producing functions BIO_ADDR_hostname_string(), BIO_ADDR_service_string() and BIO_ADDR_path_string() will return NULL on error and leave an error indication on the OpenSSL error stack.</p> <p>All other functions described here return 0 or NULL when the information they should return isn't available.</p>"},{"location":"man3/BIO_ADDR/#see-also","title":"SEE ALSO","text":"<p>BIO_connect(3), BIO_s_connect(3)</p>"},{"location":"man3/BIO_ADDR/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_ADDRINFO/","title":"BIO_ADDRINFO","text":""},{"location":"man3/BIO_ADDRINFO/#name","title":"NAME","text":"<p>BIO_lookup_type, BIO_ADDRINFO, BIO_ADDRINFO_next, BIO_ADDRINFO_free, BIO_ADDRINFO_family, BIO_ADDRINFO_socktype, BIO_ADDRINFO_protocol, BIO_ADDRINFO_address, BIO_lookup_ex, BIO_lookup - BIO_ADDRINFO type and routines</p>"},{"location":"man3/BIO_ADDRINFO/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;sys/types.h&gt;\n#include &lt;openssl/bio.h&gt;\n\ntypedef union bio_addrinfo_st BIO_ADDRINFO;\n\nenum BIO_lookup_type {\n    BIO_LOOKUP_CLIENT, BIO_LOOKUP_SERVER\n};\n\nint BIO_lookup_ex(const char *host, const char *service, int lookup_type,\n                  int family, int socktype, int protocol, BIO_ADDRINFO **res);\nint BIO_lookup(const char *node, const char *service,\n               enum BIO_lookup_type lookup_type,\n               int family, int socktype, BIO_ADDRINFO **res);\n\nconst BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);\nint BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);\nint BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);\nint BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);\nconst BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);\nvoid BIO_ADDRINFO_free(BIO_ADDRINFO *bai);\n</code></pre>"},{"location":"man3/BIO_ADDRINFO/#description","title":"DESCRIPTION","text":"<p>The BIO_ADDRINFO type is a wrapper for address information types provided on your platform.</p> <p>BIO_ADDRINFO normally forms a chain of several that can be picked at one by one.</p> <p>BIO_lookup_ex() looks up a specified host and service, and uses lookup_type to determine what the default address should be if host is NULL. family, socktype and protocol are used to determine what protocol family, socket type and protocol should be used for the lookup.  family can be any of AF_INET, AF_INET6, AF_UNIX and AF_UNSPEC. socktype can be SOCK_STREAM, SOCK_DGRAM or 0. Specifying 0 indicates that any type can be used. protocol specifies a protocol such as IPPROTO_TCP, IPPROTO_UDP or IPPORTO_SCTP. If set to 0 than any protocol can be used. res points at a pointer to hold the start of a BIO_ADDRINFO chain.</p> <p>For the family AF_UNIX, BIO_lookup_ex() will ignore the service parameter and expects the node parameter to hold the path to the socket file.</p> <p>BIO_lookup() does the same as BIO_lookup_ex() but does not provide the ability to select based on the protocol (any protocol may be returned).</p> <p>BIO_ADDRINFO_family() returns the family of the given BIO_ADDRINFO.  The result will be one of the constants AF_INET, AF_INET6 and AF_UNIX.</p> <p>BIO_ADDRINFO_socktype() returns the socket type of the given BIO_ADDRINFO.  The result will be one of the constants SOCK_STREAM and SOCK_DGRAM.</p> <p>BIO_ADDRINFO_protocol() returns the protocol id of the given BIO_ADDRINFO.  The result will be one of the constants IPPROTO_TCP and IPPROTO_UDP.</p> <p>BIO_ADDRINFO_address() returns the underlying BIO_ADDR of the given BIO_ADDRINFO.</p> <p>BIO_ADDRINFO_next() returns the next BIO_ADDRINFO in the chain from the given one.</p> <p>BIO_ADDRINFO_free() frees the chain of BIO_ADDRINFO starting with the given one.</p>"},{"location":"man3/BIO_ADDRINFO/#return-values","title":"RETURN VALUES","text":"<p>BIO_lookup_ex() and BIO_lookup() return 1 on success and 0 when an error occurred, and will leave an error indication on the OpenSSL error stack in that case.</p> <p>All other functions described here return 0 or NULL when the information they should return isn't available.</p>"},{"location":"man3/BIO_ADDRINFO/#notes","title":"NOTES","text":"<p>The BIO_lookup_ex() implementation uses the platform provided getaddrinfo() function. On Linux it is known that specifying 0 for the protocol will not return any SCTP based addresses when calling getaddrinfo(). Therefore, if an SCTP address is required then the protocol parameter to BIO_lookup_ex() should be explicitly set to IPPROTO_SCTP. The same may be true on other platforms.</p>"},{"location":"man3/BIO_ADDRINFO/#history","title":"HISTORY","text":"<p>The BIO_lookup_ex() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/BIO_ADDRINFO/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_connect/","title":"BIO_connect","text":""},{"location":"man3/BIO_connect/#name","title":"NAME","text":"<p>BIO_socket, BIO_bind, BIO_connect, BIO_listen, BIO_accept_ex, BIO_closesocket - BIO socket communication setup routines</p>"},{"location":"man3/BIO_connect/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nint BIO_socket(int domain, int socktype, int protocol, int options);\nint BIO_bind(int sock, const BIO_ADDR *addr, int options);\nint BIO_connect(int sock, const BIO_ADDR *addr, int options);\nint BIO_listen(int sock, const BIO_ADDR *addr, int options);\nint BIO_accept_ex(int accept_sock, BIO_ADDR *peer, int options);\nint BIO_closesocket(int sock);\n</code></pre>"},{"location":"man3/BIO_connect/#description","title":"DESCRIPTION","text":"<p>BIO_socket() creates a socket in the domain domain, of type socktype and protocol.  Socket options are currently unused, but is present for future use.</p> <p>BIO_bind() binds the source address and service to a socket and may be useful before calling BIO_connect().  The options may include BIO_SOCK_REUSEADDR, which is described in \"FLAGS\" below.</p> <p>BIO_connect() connects sock to the address and service given by addr.  Connection options may be zero or any combination of BIO_SOCK_KEEPALIVE, BIO_SOCK_NONBLOCK and BIO_SOCK_NODELAY. The flags are described in \"FLAGS\" below.</p> <p>BIO_listen() has sock start listening on the address and service given by addr.  Connection options may be zero or any combination of BIO_SOCK_KEEPALIVE, BIO_SOCK_NONBLOCK, BIO_SOCK_NODELAY, BIO_SOCK_REUSEADDR and BIO_SOCK_V6_ONLY. The flags are described in \"FLAGS\" below.</p> <p>BIO_accept_ex() waits for an incoming connections on the given socket accept_sock.  When it gets a connection, the address and port of the peer gets stored in peer if that one is non-NULL. Accept options may be zero or BIO_SOCK_NONBLOCK, and is applied on the accepted socket.  The flags are described in \"FLAGS\" below.</p> <p>BIO_closesocket() closes sock.</p>"},{"location":"man3/BIO_connect/#flags","title":"FLAGS","text":"<ul> <li> <p>BIO_SOCK_KEEPALIVE</p> <p>Enables regular sending of keep-alive messages.</p> </li> <li> <p>BIO_SOCK_NONBLOCK</p> <p>Sets the socket to nonblocking mode.</p> </li> <li> <p>BIO_SOCK_NODELAY</p> <p>Corresponds to TCP_NODELAY, and disables the Nagle algorithm.  With this set, any data will be sent as soon as possible instead of being buffered until there's enough for the socket to send out in one go.</p> </li> <li> <p>BIO_SOCK_REUSEADDR</p> <p>Try to reuse the address and port combination for a recently closed port.</p> </li> <li> <p>BIO_SOCK_V6_ONLY</p> <p>When creating an IPv6 socket, make it only listen for IPv6 addresses and not IPv4 addresses mapped to IPv6.</p> </li> </ul> <p>These flags are bit flags, so they are to be combined with the <code>|</code> operator, for example:</p> <pre><code>BIO_connect(sock, addr, BIO_SOCK_KEEPALIVE | BIO_SOCK_NONBLOCK);\n</code></pre>"},{"location":"man3/BIO_connect/#return-values","title":"RETURN VALUES","text":"<p>BIO_socket() returns the socket number on success or INVALID_SOCKET (-1) on error.  When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.</p> <p>BIO_bind(), BIO_connect() and BIO_listen() return 1 on success or 0 on error. When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.</p> <p>BIO_accept_ex() returns the accepted socket on success or INVALID_SOCKET (-1) on error.  When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.</p>"},{"location":"man3/BIO_connect/#see-also","title":"SEE ALSO","text":"<p>BIO_ADDR(3)</p>"},{"location":"man3/BIO_connect/#history","title":"HISTORY","text":"<p>BIO_gethostname(), BIO_get_port(), BIO_get_host_ip(), BIO_get_accept_socket() and BIO_accept() were deprecated in OpenSSL 1.1.0. Use the functions described above instead.</p>"},{"location":"man3/BIO_connect/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_ctrl/","title":"BIO_ctrl","text":""},{"location":"man3/BIO_ctrl/#name","title":"NAME","text":"<p>BIO_ctrl, BIO_callback_ctrl, BIO_ptr_ctrl, BIO_int_ctrl, BIO_reset, BIO_seek, BIO_tell, BIO_flush, BIO_eof, BIO_set_close, BIO_get_close, BIO_pending, BIO_wpending, BIO_ctrl_pending, BIO_ctrl_wpending, BIO_get_info_callback, BIO_set_info_callback, BIO_info_cb - BIO control operations</p>"},{"location":"man3/BIO_ctrl/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\ntypedef int BIO_info_cb(BIO *b, int state, int res);\n\nlong BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);\nlong BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *cb);\nvoid *BIO_ptr_ctrl(BIO *bp, int cmd, long larg);\nlong BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);\n\nint BIO_reset(BIO *b);\nint BIO_seek(BIO *b, int ofs);\nint BIO_tell(BIO *b);\nint BIO_flush(BIO *b);\nint BIO_eof(BIO *b);\nint BIO_set_close(BIO *b, long flag);\nint BIO_get_close(BIO *b);\nint BIO_pending(BIO *b);\nint BIO_wpending(BIO *b);\nsize_t BIO_ctrl_pending(BIO *b);\nsize_t BIO_ctrl_wpending(BIO *b);\n\nint BIO_get_info_callback(BIO *b, BIO_info_cb **cbp);\nint BIO_set_info_callback(BIO *b, BIO_info_cb *cb);\n</code></pre>"},{"location":"man3/BIO_ctrl/#description","title":"DESCRIPTION","text":"<p>BIO_ctrl(), BIO_callback_ctrl(), BIO_ptr_ctrl() and BIO_int_ctrl() are BIO \"control\" operations taking arguments of various types. These functions are not normally called directly, various macros are used instead. The standard macros are described below, macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls.</p> <p>BIO_reset() typically resets a BIO to some initial state, in the case of file related BIOs for example it rewinds the file pointer to the start of the file.</p> <p>BIO_seek() resets a file related BIO's (that is file descriptor and FILE BIOs) file position pointer to ofs bytes from start of file.</p> <p>BIO_tell() returns the current file position of a file related BIO.</p> <p>BIO_flush() normally writes out any internally buffered data, in some cases it is used to signal EOF and that no more data will be written.</p> <p>BIO_eof() returns 1 if the BIO has read EOF, the precise meaning of \"EOF\" varies according to the BIO type.</p> <p>BIO_set_close() sets the BIO b close flag to flag. flag can take the value BIO_CLOSE or BIO_NOCLOSE. Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.</p> <p>BIO_get_close() returns the BIOs close flag.</p> <p>BIO_pending(), BIO_ctrl_pending(), BIO_wpending() and BIO_ctrl_wpending() return the number of pending characters in the BIOs read and write buffers. Not all BIOs support these calls. BIO_ctrl_pending() and BIO_ctrl_wpending() return a size_t type and are functions, BIO_pending() and BIO_wpending() are macros which call BIO_ctrl().</p>"},{"location":"man3/BIO_ctrl/#return-values","title":"RETURN VALUES","text":"<p>BIO_reset() normally returns 1 for success and 0 or -1 for failure. File BIOs are an exception, they return 0 for success and -1 for failure.</p> <p>BIO_seek() and BIO_tell() both return the current file position on success and -1 for failure, except file BIOs which for BIO_seek() always return 0 for success and -1 for failure.</p> <p>BIO_flush() returns 1 for success and 0 or -1 for failure.</p> <p>BIO_eof() returns 1 if EOF has been reached 0 otherwise.</p> <p>BIO_set_close() always returns 1.</p> <p>BIO_get_close() returns the close flag value: BIO_CLOSE or BIO_NOCLOSE.</p> <p>BIO_pending(), BIO_ctrl_pending(), BIO_wpending() and BIO_ctrl_wpending() return the amount of pending data.</p>"},{"location":"man3/BIO_ctrl/#notes","title":"NOTES","text":"<p>BIO_flush(), because it can write data may return 0 or -1 indicating that the call should be retried later in a similar manner to BIO_write_ex(). The BIO_should_retry() call should be used and appropriate action taken is the call fails.</p> <p>The return values of BIO_pending() and BIO_wpending() may not reliably determine the amount of pending data in all cases. For example in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way. For other types of BIO they may not be supported.</p> <p>Filter BIOs if they do not internally handle a particular BIO_ctrl() operation usually pass the operation to the next BIO in the chain. This often means there is no need to locate the required BIO for a particular operation, it can be called on a chain and it will be automatically passed to the relevant BIO. However, this can cause unexpected results: for example no current filter BIOs implement BIO_seek(), but this may still succeed if the chain ends in a FILE or file descriptor BIO.</p> <p>Source/sink BIOs return an 0 if they do not recognize the BIO_ctrl() operation.</p>"},{"location":"man3/BIO_ctrl/#bugs","title":"BUGS","text":"<p>Some of the return values are ambiguous and care should be taken. In particular a return value of 0 can be returned if an operation is not supported, if an error occurred, if EOF has not been reached and in the case of BIO_seek() on a file BIO for a successful operation.</p>"},{"location":"man3/BIO_ctrl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_f_base64/","title":"BIO_f_base64","text":""},{"location":"man3/BIO_f_base64/#name","title":"NAME","text":"<p>BIO_f_base64 - base64 BIO filter</p>"},{"location":"man3/BIO_f_base64/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n#include &lt;openssl/evp.h&gt;\n\nconst BIO_METHOD *BIO_f_base64(void);\n</code></pre>"},{"location":"man3/BIO_f_base64/#description","title":"DESCRIPTION","text":"<p>BIO_f_base64() returns the base64 BIO method. This is a filter BIO that base64 encodes any data written through it and decodes any data read through it.</p> <p>Base64 BIOs do not support BIO_gets() or BIO_puts().</p> <p>For writing, output is by default divided to lines of length 64 characters and there is always a newline at the end of output.</p> <p>For reading, first line should be at most 1024 characters long. If it is longer then it is ignored completely. Other input lines can be of any length. There must be a newline at the end of input.</p> <p>This behavior can be changed with BIO_FLAGS_BASE64_NO_NL flag.</p> <p>BIO_flush() on a base64 BIO that is being written through is used to signal that no more data is to be encoded: this is used to flush the final block through the BIO.</p> <p>The flag BIO_FLAGS_BASE64_NO_NL can be set with BIO_set_flags(). For writing, it causes all data to be written on one line without newline at the end. For reading, it expects the data to be all on one line (with or without a trailing newline).</p>"},{"location":"man3/BIO_f_base64/#notes","title":"NOTES","text":"<p>Because of the format of base64 encoding the end of the encoded block cannot always be reliably determined.</p>"},{"location":"man3/BIO_f_base64/#return-values","title":"RETURN VALUES","text":"<p>BIO_f_base64() returns the base64 BIO method.</p>"},{"location":"man3/BIO_f_base64/#examples","title":"EXAMPLES","text":"<p>Base64 encode the string \"Hello World\\n\" and write the result to standard output:</p> <pre><code>BIO *bio, *b64;\nchar message[] = \"Hello World \\n\";\n\nb64 = BIO_new(BIO_f_base64());\nbio = BIO_new_fp(stdout, BIO_NOCLOSE);\nBIO_push(b64, bio);\nBIO_write(b64, message, strlen(message));\nBIO_flush(b64);\n\nBIO_free_all(b64);\n</code></pre> <p>Read Base64 encoded data from standard input and write the decoded data to standard output:</p> <pre><code>BIO *bio, *b64, *bio_out;\nchar inbuf[512];\nint inlen;\n\nb64 = BIO_new(BIO_f_base64());\nbio = BIO_new_fp(stdin, BIO_NOCLOSE);\nbio_out = BIO_new_fp(stdout, BIO_NOCLOSE);\nBIO_push(b64, bio);\nwhile ((inlen = BIO_read(b64, inbuf, 512)) &gt; 0)\n    BIO_write(bio_out, inbuf, inlen);\n\nBIO_flush(bio_out);\nBIO_free_all(b64);\n</code></pre>"},{"location":"man3/BIO_f_base64/#bugs","title":"BUGS","text":"<p>The ambiguity of EOF in base64 encoded data can cause additional data following the base64 encoded block to be misinterpreted.</p> <p>There should be some way of specifying a test that the BIO can perform to reliably determine EOF (for example a MIME boundary).</p>"},{"location":"man3/BIO_f_base64/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_f_buffer/","title":"BIO_f_buffer","text":""},{"location":"man3/BIO_f_buffer/#name","title":"NAME","text":"<p>BIO_get_buffer_num_lines, BIO_set_read_buffer_size, BIO_set_write_buffer_size, BIO_set_buffer_size, BIO_set_buffer_read_data, BIO_f_buffer - buffering BIO</p>"},{"location":"man3/BIO_f_buffer/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_f_buffer(void);\n\nlong BIO_get_buffer_num_lines(BIO *b);\nlong BIO_set_read_buffer_size(BIO *b, long size);\nlong BIO_set_write_buffer_size(BIO *b, long size);\nlong BIO_set_buffer_size(BIO *b, long size);\nlong BIO_set_buffer_read_data(BIO *b, void *buf, long num);\n</code></pre>"},{"location":"man3/BIO_f_buffer/#description","title":"DESCRIPTION","text":"<p>BIO_f_buffer() returns the buffering BIO method.</p> <p>Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain. Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain. Both BIO_gets() and BIO_puts() are supported.</p> <p>Calling BIO_reset() on a buffering BIO clears any buffered data.</p> <p>BIO_get_buffer_num_lines() returns the number of lines currently buffered.</p> <p>BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() set the read, write or both read and write buffer sizes to size. The initial buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored. Any buffered data is cleared when the buffer is resized.</p> <p>BIO_set_buffer_read_data() clears the read buffer and fills it with num bytes of buf. If num is larger than the current buffer size the buffer is expanded.</p>"},{"location":"man3/BIO_f_buffer/#notes","title":"NOTES","text":"<p>These functions, other than BIO_f_buffer(), are implemented as macros.</p> <p>Buffering BIOs implement BIO_read_ex() and BIO_gets() by using BIO_read_ex() operations on the next BIO in the chain and storing the result in an internal buffer, from which bytes are given back to the caller as appropriate for the call; a BIO_gets() is guaranteed to give the caller a whole line, and BIO_read_ex() is guaranteed to give the caller the number of bytes it asks for, unless there's an error or end of communication is reached in the next BIO.  By prepending a buffering BIO to a chain it is therefore possible to provide BIO_gets() or exact size BIO_read_ex() functionality if the following BIOs do not support it.</p> <p>Do not add more than one BIO_f_buffer() to a BIO chain.  The result of doing so will force a full read of the size of the internal buffer of the top BIO_f_buffer(), which is 4 KiB at a minimum.</p> <p>Data is only written to the next BIO in the chain when the write buffer fills or when BIO_flush() is called. It is therefore important to call BIO_flush() whenever any pending data should be written such as when removing a buffering BIO using BIO_pop(). BIO_flush() may need to be retried if the ultimate source/sink BIO is non blocking.</p>"},{"location":"man3/BIO_f_buffer/#return-values","title":"RETURN VALUES","text":"<p>BIO_f_buffer() returns the buffering BIO method.</p> <p>BIO_get_buffer_num_lines() returns the number of lines buffered (may be 0).</p> <p>BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() return 1 if the buffer was successfully resized or 0 for failure.</p> <p>BIO_set_buffer_read_data() returns 1 if the data was set correctly or 0 if there was an error.</p>"},{"location":"man3/BIO_f_buffer/#see-also","title":"SEE ALSO","text":"<p>bio(7), BIO_reset(3), BIO_flush(3), BIO_pop(3), BIO_ctrl(3).</p>"},{"location":"man3/BIO_f_buffer/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_f_cipher/","title":"BIO_f_cipher","text":""},{"location":"man3/BIO_f_cipher/#name","title":"NAME","text":"<p>BIO_f_cipher, BIO_set_cipher, BIO_get_cipher_status, BIO_get_cipher_ctx - cipher BIO filter</p>"},{"location":"man3/BIO_f_cipher/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n#include &lt;openssl/evp.h&gt;\n\nconst BIO_METHOD *BIO_f_cipher(void);\nvoid BIO_set_cipher(BIO *b, const EVP_CIPHER *cipher,\n                    unsigned char *key, unsigned char *iv, int enc);\nint BIO_get_cipher_status(BIO *b)\nint BIO_get_cipher_ctx(BIO *b, EVP_CIPHER_CTX **pctx)\n</code></pre>"},{"location":"man3/BIO_f_cipher/#description","title":"DESCRIPTION","text":"<p>BIO_f_cipher() returns the cipher BIO method. This is a filter BIO that encrypts any data written through it, and decrypts any data read from it. It is a BIO wrapper for the cipher routines EVP_CipherInit(), EVP_CipherUpdate() and EVP_CipherFinal().</p> <p>Cipher BIOs do not support BIO_gets() or BIO_puts().</p> <p>BIO_flush() on an encryption BIO that is being written through is used to signal that no more data is to be encrypted: this is used to flush and possibly pad the final block through the BIO.</p> <p>BIO_set_cipher() sets the cipher of BIO b to cipher using key key and IV iv. enc should be set to 1 for encryption and zero for decryption.</p> <p>When reading from an encryption BIO the final block is automatically decrypted and checked when EOF is detected. BIO_get_cipher_status() is a BIO_ctrl() macro which can be called to determine whether the decryption operation was successful.</p> <p>BIO_get_cipher_ctx() is a BIO_ctrl() macro which retrieves the internal BIO cipher context. The retrieved context can be used in conjunction with the standard cipher routines to set it up. This is useful when BIO_set_cipher() is not flexible enough for the applications needs.</p>"},{"location":"man3/BIO_f_cipher/#notes","title":"NOTES","text":"<p>When encrypting BIO_flush() must be called to flush the final block through the BIO. If it is not then the final block will fail a subsequent decrypt.</p> <p>When decrypting an error on the final block is signaled by a zero return value from the read operation. A successful decrypt followed by EOF will also return zero for the final read. BIO_get_cipher_status() should be called to determine if the decrypt was successful.</p> <p>As always, if BIO_gets() or BIO_puts() support is needed then it can be achieved by preceding the cipher BIO with a buffering BIO.</p>"},{"location":"man3/BIO_f_cipher/#return-values","title":"RETURN VALUES","text":"<p>BIO_f_cipher() returns the cipher BIO method.</p> <p>BIO_set_cipher() does not return a value.</p> <p>BIO_get_cipher_status() returns 1 for a successful decrypt and 0 for failure.</p> <p>BIO_get_cipher_ctx() currently always returns 1.</p>"},{"location":"man3/BIO_f_cipher/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_f_md/","title":"BIO_f_md","text":""},{"location":"man3/BIO_f_md/#name","title":"NAME","text":"<p>BIO_f_md, BIO_set_md, BIO_get_md, BIO_get_md_ctx - message digest BIO filter</p>"},{"location":"man3/BIO_f_md/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n#include &lt;openssl/evp.h&gt;\n\nconst BIO_METHOD *BIO_f_md(void);\nint BIO_set_md(BIO *b, EVP_MD *md);\nint BIO_get_md(BIO *b, EVP_MD **mdp);\nint BIO_get_md_ctx(BIO *b, EVP_MD_CTX **mdcp);\n</code></pre>"},{"location":"man3/BIO_f_md/#description","title":"DESCRIPTION","text":"<p>BIO_f_md() returns the message digest BIO method. This is a filter BIO that digests any data passed through it, it is a BIO wrapper for the digest routines EVP_DigestInit(), EVP_DigestUpdate() and EVP_DigestFinal().</p> <p>Any data written or read through a digest BIO using BIO_read_ex() and BIO_write_ex() is digested.</p> <p>BIO_gets(), if its size parameter is large enough finishes the digest calculation and returns the digest value. BIO_puts() is not supported.</p> <p>BIO_reset() reinitialises a digest BIO.</p> <p>BIO_set_md() sets the message digest of BIO b to md: this must be called to initialize a digest BIO before any data is passed through it. It is a BIO_ctrl() macro.</p> <p>BIO_get_md() places the a pointer to the digest BIOs digest method in mdp, it is a BIO_ctrl() macro.</p> <p>BIO_get_md_ctx() returns the digest BIOs context into mdcp.</p>"},{"location":"man3/BIO_f_md/#notes","title":"NOTES","text":"<p>The context returned by BIO_get_md_ctx() can be used in calls to EVP_DigestFinal() and also the signature routines EVP_SignFinal() and EVP_VerifyFinal().</p> <p>The context returned by BIO_get_md_ctx() is an internal context structure. Changes made to this context will affect the digest BIO itself and the context pointer will become invalid when the digest BIO is freed.</p> <p>After the digest has been retrieved from a digest BIO it must be reinitialized by calling BIO_reset(), or BIO_set_md() before any more data is passed through it.</p> <p>If an application needs to call BIO_gets() or BIO_puts() through a chain containing digest BIOs then this can be done by prepending a buffering BIO.</p> <p>Calling BIO_get_md_ctx() will return the context and initialize the BIO state. This allows applications to initialize the context externally if the standard calls such as BIO_set_md() are not sufficiently flexible.</p>"},{"location":"man3/BIO_f_md/#return-values","title":"RETURN VALUES","text":"<p>BIO_f_md() returns the digest BIO method.</p> <p>BIO_set_md(), BIO_get_md() and BIO_md_ctx() return 1 for success and 0 for failure.</p>"},{"location":"man3/BIO_f_md/#examples","title":"EXAMPLES","text":"<p>The following example creates a BIO chain containing an SHA1 and MD5 digest BIO and passes the string \"Hello World\" through it. Error checking has been omitted for clarity.</p> <pre><code>BIO *bio, *mdtmp;\nchar message[] = \"Hello World\";\n\nbio = BIO_new(BIO_s_null());\nmdtmp = BIO_new(BIO_f_md());\nBIO_set_md(mdtmp, EVP_sha1());\n/*\n * For BIO_push() we want to append the sink BIO and keep a note of\n * the start of the chain.\n */\nbio = BIO_push(mdtmp, bio);\nmdtmp = BIO_new(BIO_f_md());\nBIO_set_md(mdtmp, EVP_md5());\nbio = BIO_push(mdtmp, bio);\n/* Note: mdtmp can now be discarded */\nBIO_write(bio, message, strlen(message));\n</code></pre> <p>The next example digests data by reading through a chain instead:</p> <pre><code>BIO *bio, *mdtmp;\nchar buf[1024];\nint rdlen;\n\nbio = BIO_new_file(file, \"rb\");\nmdtmp = BIO_new(BIO_f_md());\nBIO_set_md(mdtmp, EVP_sha1());\nbio = BIO_push(mdtmp, bio);\nmdtmp = BIO_new(BIO_f_md());\nBIO_set_md(mdtmp, EVP_md5());\nbio = BIO_push(mdtmp, bio);\ndo {\n    rdlen = BIO_read(bio, buf, sizeof(buf));\n    /* Might want to do something with the data here */\n} while (rdlen &gt; 0);\n</code></pre> <p>This next example retrieves the message digests from a BIO chain and outputs them. This could be used with the examples above.</p> <pre><code>BIO *mdtmp;\nunsigned char mdbuf[EVP_MAX_MD_SIZE];\nint mdlen;\nint i;\n\nmdtmp = bio;   /* Assume bio has previously been set up */\ndo {\n    EVP_MD *md;\n\n    mdtmp = BIO_find_type(mdtmp, BIO_TYPE_MD);\n    if (!mdtmp)\n        break;\n    BIO_get_md(mdtmp, &amp;md);\n    printf(\"%s digest\", OBJ_nid2sn(EVP_MD_type(md)));\n    mdlen = BIO_gets(mdtmp, mdbuf, EVP_MAX_MD_SIZE);\n    for (i = 0; i &lt; mdlen; i++) printf(\":%02X\", mdbuf[i]);\n    printf(\"\\n\");\n    mdtmp = BIO_next(mdtmp);\n} while (mdtmp);\n\nBIO_free_all(bio);\n</code></pre>"},{"location":"man3/BIO_f_md/#bugs","title":"BUGS","text":"<p>The lack of support for BIO_puts() and the non standard behaviour of BIO_gets() could be regarded as anomalous. It could be argued that BIO_gets() and BIO_puts() should be passed to the next BIO in the chain and digest the data passed through and that digests should be retrieved using a separate BIO_ctrl() call.</p>"},{"location":"man3/BIO_f_md/#history","title":"HISTORY","text":"<p>Before OpenSSL 1.0.0., the call to BIO_get_md_ctx() would only work if the BIO was initialized first.</p>"},{"location":"man3/BIO_f_md/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_f_null/","title":"BIO_f_null","text":""},{"location":"man3/BIO_f_null/#name","title":"NAME","text":"<p>BIO_f_null - null filter</p>"},{"location":"man3/BIO_f_null/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_f_null(void);\n</code></pre>"},{"location":"man3/BIO_f_null/#description","title":"DESCRIPTION","text":"<p>BIO_f_null() returns the null filter BIO method. This is a filter BIO that does nothing.</p> <p>All requests to a null filter BIO are passed through to the next BIO in the chain: this means that a BIO chain containing a null filter BIO behaves just as though the BIO was not there.</p>"},{"location":"man3/BIO_f_null/#notes","title":"NOTES","text":"<p>As may be apparent a null filter BIO is not particularly useful.</p>"},{"location":"man3/BIO_f_null/#return-values","title":"RETURN VALUES","text":"<p>BIO_f_null() returns the null filter BIO method.</p>"},{"location":"man3/BIO_f_null/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_f_ssl/","title":"BIO_f_ssl","text":""},{"location":"man3/BIO_f_ssl/#name","title":"NAME","text":"<p>BIO_do_handshake, BIO_f_ssl, BIO_set_ssl, BIO_get_ssl, BIO_set_ssl_mode, BIO_set_ssl_renegotiate_bytes, BIO_get_num_renegotiates, BIO_set_ssl_renegotiate_timeout, BIO_new_ssl, BIO_new_ssl_connect, BIO_new_buffer_ssl_connect, BIO_ssl_copy_session_id, BIO_ssl_shutdown - SSL BIO</p>"},{"location":"man3/BIO_f_ssl/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n#include &lt;openssl/ssl.h&gt;\n\nconst BIO_METHOD *BIO_f_ssl(void);\n\nlong BIO_set_ssl(BIO *b, SSL *ssl, long c);\nlong BIO_get_ssl(BIO *b, SSL **sslp);\nlong BIO_set_ssl_mode(BIO *b, long client);\nlong BIO_set_ssl_renegotiate_bytes(BIO *b, long num);\nlong BIO_set_ssl_renegotiate_timeout(BIO *b, long seconds);\nlong BIO_get_num_renegotiates(BIO *b);\n\nBIO *BIO_new_ssl(SSL_CTX *ctx, int client);\nBIO *BIO_new_ssl_connect(SSL_CTX *ctx);\nBIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);\nint BIO_ssl_copy_session_id(BIO *to, BIO *from);\nvoid BIO_ssl_shutdown(BIO *bio);\n\nlong BIO_do_handshake(BIO *b);\n</code></pre>"},{"location":"man3/BIO_f_ssl/#description","title":"DESCRIPTION","text":"<p>BIO_f_ssl() returns the SSL BIO method. This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO \"flavour\" to SSL I/O.</p> <p>I/O performed on an SSL BIO communicates using the SSL protocol with the SSLs read and write BIOs. If an SSL connection is not established then an attempt is made to establish one on the first I/O call.</p> <p>If a BIO is appended to an SSL BIO using BIO_push() it is automatically used as the SSL BIOs read and write BIOs.</p> <p>Calling BIO_reset() on an SSL BIO closes down any current SSL connection by calling SSL_shutdown(). BIO_reset() is then sent to the next BIO in the chain: this will typically disconnect the underlying transport. The SSL BIO is then reset to the initial accept or connect state.</p> <p>If the close flag is set when an SSL BIO is freed then the internal SSL structure is also freed using SSL_free().</p> <p>BIO_set_ssl() sets the internal SSL pointer of SSL BIO b to ssl using the close flag c.</p> <p>BIO_get_ssl() retrieves the SSL pointer of SSL BIO b, it can then be manipulated using the standard SSL library functions.</p> <p>BIO_set_ssl_mode() sets the SSL BIO mode to client. If client is 1 client mode is set. If client is 0 server mode is set.</p> <p>BIO_set_ssl_renegotiate_bytes() sets the renegotiate byte count of SSL BIO b to num. When set after every num bytes of I/O (read and write) the SSL session is automatically renegotiated. num must be at least 512 bytes.</p> <p>BIO_set_ssl_renegotiate_timeout() sets the renegotiate timeout of SSL BIO b to seconds. When the renegotiate timeout elapses the session is automatically renegotiated.</p> <p>BIO_get_num_renegotiates() returns the total number of session renegotiations due to I/O or timeout of SSL BIO b.</p> <p>BIO_new_ssl() allocates an SSL BIO using SSL_CTX ctx and using client mode if client is non zero.</p> <p>BIO_new_ssl_connect() creates a new BIO chain consisting of an SSL BIO (using ctx) followed by a connect BIO.</p> <p>BIO_new_buffer_ssl_connect() creates a new BIO chain consisting of a buffering BIO, an SSL BIO (using ctx), and a connect BIO.</p> <p>BIO_ssl_copy_session_id() copies an SSL session id between BIO chains from and to. It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id() on the internal SSL pointer.</p> <p>BIO_ssl_shutdown() closes down an SSL connection on BIO chain bio. It does this by locating the SSL BIO in the chain and calling SSL_shutdown() on its internal SSL pointer.</p> <p>BIO_do_handshake() attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection. It returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established, the call BIO_should_retry() should be used for non blocking connect BIOs to determine if the call should be retried. If an SSL connection has already been established this call has no effect.</p>"},{"location":"man3/BIO_f_ssl/#notes","title":"NOTES","text":"<p>SSL BIOs are exceptional in that if the underlying transport is non blocking they can still request a retry in exceptional circumstances. Specifically this will happen if a session renegotiation takes place during a BIO_read_ex() operation, one case where this happens is when step up occurs.</p> <p>The SSL flag SSL_AUTO_RETRY can be set to disable this behaviour. That is when this flag is set an SSL BIO using a blocking transport will never request a retry.</p> <p>Since unknown BIO_ctrl() operations are sent through filter BIOs the servers name and port can be set using BIO_set_host() on the BIO returned by BIO_new_ssl_connect() without having to locate the connect BIO first.</p> <p>Applications do not have to call BIO_do_handshake() but may wish to do so to separate the handshake process from other I/O processing.</p> <p>BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout(), BIO_get_num_renegotiates(), and BIO_do_handshake() are implemented as macros.</p>"},{"location":"man3/BIO_f_ssl/#return-values","title":"RETURN VALUES","text":"<p>BIO_f_ssl() returns the SSL BIO_METHOD structure.</p> <p>BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.</p> <p>BIO_new_ssl(), BIO_new_ssl_connect() and BIO_new_buffer_ssl_connect() return a valid BIO structure on success or NULL if an error occurred.</p> <p>BIO_ssl_copy_session_id() returns 1 on success or 0 on error.</p> <p>BIO_do_handshake() returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established.</p>"},{"location":"man3/BIO_f_ssl/#examples","title":"EXAMPLES","text":"<p>This SSL/TLS client example attempts to retrieve a page from an SSL/TLS web server. The I/O routines are identical to those of the unencrypted example in BIO_s_connect(3).</p> <pre><code>BIO *sbio, *out;\nint len;\nchar tmpbuf[1024];\nSSL_CTX *ctx;\nSSL *ssl;\n\n/* XXX Seed the PRNG if needed. */\n\nctx = SSL_CTX_new(TLS_client_method());\n\n/* XXX Set verify paths and mode here. */\n\nsbio = BIO_new_ssl_connect(ctx);\nBIO_get_ssl(sbio, &amp;ssl);\nif (ssl == NULL) {\n    fprintf(stderr, \"Can't locate SSL pointer\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\n/* Don't want any retries */\nSSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);\n\n/* XXX We might want to do other things with ssl here */\n\n/* An empty host part means the loopback address */\nBIO_set_conn_hostname(sbio, \":https\");\n\nout = BIO_new_fp(stdout, BIO_NOCLOSE);\nif (BIO_do_connect(sbio) &lt;= 0) {\n    fprintf(stderr, \"Error connecting to server\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\n/* XXX Could examine ssl here to get connection info */\n\nBIO_puts(sbio, \"GET / HTTP/1.0\\n\\n\");\nfor (;;) {\n    len = BIO_read(sbio, tmpbuf, 1024);\n    if (len &lt;= 0)\n        break;\n    BIO_write(out, tmpbuf, len);\n}\nBIO_free_all(sbio);\nBIO_free(out);\n</code></pre> <p>Here is a simple server example. It makes use of a buffering BIO to allow lines to be read from the SSL BIO using BIO_gets. It creates a pseudo web page containing the actual request from a client and also echoes the request to standard output.</p> <pre><code>BIO *sbio, *bbio, *acpt, *out;\nint len;\nchar tmpbuf[1024];\nSSL_CTX *ctx;\nSSL *ssl;\n\n/* XXX Seed the PRNG if needed. */\n\nctx = SSL_CTX_new(TLS_server_method());\nif (!SSL_CTX_use_certificate_file(ctx, \"server.pem\", SSL_FILETYPE_PEM)\n        || !SSL_CTX_use_PrivateKey_file(ctx, \"server.pem\", SSL_FILETYPE_PEM)\n        || !SSL_CTX_check_private_key(ctx)) {\n    fprintf(stderr, \"Error setting up SSL_CTX\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\n/* XXX Other things like set verify locations, EDH temp callbacks. */\n\n/* New SSL BIO setup as server */\nsbio = BIO_new_ssl(ctx, 0);\nBIO_get_ssl(sbio, &amp;ssl);\nif (ssl == NULL) {\n    fprintf(stderr, \"Can't locate SSL pointer\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\nSSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);\nbbio = BIO_new(BIO_f_buffer());\nsbio = BIO_push(bbio, sbio);\nacpt = BIO_new_accept(\"4433\");\n\n/*\n * By doing this when a new connection is established\n * we automatically have sbio inserted into it. The\n * BIO chain is now 'swallowed' by the accept BIO and\n * will be freed when the accept BIO is freed.\n */\nBIO_set_accept_bios(acpt, sbio);\nout = BIO_new_fp(stdout, BIO_NOCLOSE);\n\n/* Setup accept BIO */\nif (BIO_do_accept(acpt) &lt;= 0) {\n    fprintf(stderr, \"Error setting up accept BIO\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\n/* We only want one connection so remove and free accept BIO */\nsbio = BIO_pop(acpt);\nBIO_free_all(acpt);\n\nif (BIO_do_handshake(sbio) &lt;= 0) {\n    fprintf(stderr, \"Error in SSL handshake\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\nBIO_puts(sbio, \"HTTP/1.0 200 OK\\r\\nContent-type: text/plain\\r\\n\\r\\n\");\nBIO_puts(sbio, \"\\r\\nConnection Established\\r\\nRequest headers:\\r\\n\");\nBIO_puts(sbio, \"--------------------------------------------------\\r\\n\");\n\nfor (;;) {\n    len = BIO_gets(sbio, tmpbuf, 1024);\n    if (len &lt;= 0)\n        break;\n    BIO_write(sbio, tmpbuf, len);\n    BIO_write(out, tmpbuf, len);\n    /* Look for blank line signifying end of headers*/\n    if (tmpbuf[0] == '\\r' || tmpbuf[0] == '\\n')\n        break;\n}\n\nBIO_puts(sbio, \"--------------------------------------------------\\r\\n\");\nBIO_puts(sbio, \"\\r\\n\");\nBIO_flush(sbio);\nBIO_free_all(sbio);\n</code></pre>"},{"location":"man3/BIO_f_ssl/#history","title":"HISTORY","text":"<p>In OpenSSL before 1.0.0 the BIO_pop() call was handled incorrectly, the I/O BIO reference count was incorrectly incremented (instead of decremented) and dissociated with the SSL BIO even if the SSL BIO was not explicitly being popped (e.g. a pop higher up the chain). Applications which included workarounds for this bug (e.g. freeing BIOs more than once) should be modified to handle this fix or they may free up an already freed BIO.</p>"},{"location":"man3/BIO_f_ssl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_find_type/","title":"BIO_find_type","text":""},{"location":"man3/BIO_find_type/#name","title":"NAME","text":"<p>BIO_find_type, BIO_next, BIO_method_type - BIO chain traversal</p>"},{"location":"man3/BIO_find_type/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nBIO *BIO_find_type(BIO *b, int bio_type);\nBIO *BIO_next(BIO *b);\nint BIO_method_type(const BIO *b);\n</code></pre>"},{"location":"man3/BIO_find_type/#description","title":"DESCRIPTION","text":"<p>The BIO_find_type() searches for a BIO of a given type in a chain, starting at BIO b. If type is a specific type (such as BIO_TYPE_MEM) then a search is made for a BIO of that type. If type is a general type (such as BIO_TYPE_SOURCE_SINK) then the next matching BIO of the given general type is searched for. BIO_find_type() returns the next matching BIO or NULL if none is found.</p> <p>The following general types are defined: BIO_TYPE_DESCRIPTOR, BIO_TYPE_FILTER, and BIO_TYPE_SOURCE_SINK.</p> <p>For a list of the specific types, see the openssl/bio.h header file.</p> <p>BIO_next() returns the next BIO in a chain. It can be used to traverse all BIOs in a chain or used in conjunction with BIO_find_type() to find all BIOs of a certain type.</p> <p>BIO_method_type() returns the type of a BIO.</p>"},{"location":"man3/BIO_find_type/#return-values","title":"RETURN VALUES","text":"<p>BIO_find_type() returns a matching BIO or NULL for no match.</p> <p>BIO_next() returns the next BIO in a chain.</p> <p>BIO_method_type() returns the type of the BIO b.</p>"},{"location":"man3/BIO_find_type/#examples","title":"EXAMPLES","text":"<p>Traverse a chain looking for digest BIOs:</p> <pre><code>BIO *btmp;\n\nbtmp = in_bio; /* in_bio is chain to search through */\ndo {\n    btmp = BIO_find_type(btmp, BIO_TYPE_MD);\n    if (btmp == NULL)\n        break; /* Not found */\n    /* btmp is a digest BIO, do something with it ...*/\n    ...\n\n    btmp = BIO_next(btmp);\n} while (btmp);\n</code></pre>"},{"location":"man3/BIO_find_type/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_get_data/","title":"BIO_get_data","text":""},{"location":"man3/BIO_get_data/#name","title":"NAME","text":"<p>BIO_set_data, BIO_get_data, BIO_set_init, BIO_get_init, BIO_set_shutdown, BIO_get_shutdown - functions for managing BIO state information</p>"},{"location":"man3/BIO_get_data/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nvoid BIO_set_data(BIO *a, void *ptr);\nvoid *BIO_get_data(BIO *a);\nvoid BIO_set_init(BIO *a, int init);\nint BIO_get_init(BIO *a);\nvoid BIO_set_shutdown(BIO *a, int shut);\nint BIO_get_shutdown(BIO *a);\n</code></pre>"},{"location":"man3/BIO_get_data/#description","title":"DESCRIPTION","text":"<p>These functions are mainly useful when implementing a custom BIO.</p> <p>The BIO_set_data() function associates the custom data pointed to by ptr with the BIO. This data can subsequently be retrieved via a call to BIO_get_data(). This can be used by custom BIOs for storing implementation specific information.</p> <p>The BIO_set_init() function sets the value of the BIO's \"init\" flag to indicate whether initialisation has been completed for this BIO or not. A nonzero value indicates that initialisation is complete, whilst zero indicates that it is not. Often initialisation will complete during initial construction of the BIO. For some BIOs however, initialisation may not complete until after additional steps have occurred (for example through calling custom ctrls). The BIO_get_init() function returns the value of the \"init\" flag.</p> <p>The BIO_set_shutdown() and BIO_get_shutdown() functions set and get the state of this BIO's shutdown (i.e. BIO_CLOSE) flag. If set then the underlying resource is also closed when the BIO is freed.</p>"},{"location":"man3/BIO_get_data/#return-values","title":"RETURN VALUES","text":"<p>BIO_get_data() returns a pointer to the implementation specific custom data associated with this BIO, or NULL if none has been set.</p> <p>BIO_get_init() returns the state of the BIO's init flag.</p> <p>BIO_get_shutdown() returns the stat of the BIO's shutdown (i.e. BIO_CLOSE) flag.</p>"},{"location":"man3/BIO_get_data/#see-also","title":"SEE ALSO","text":"<p>bio, BIO_meth_new</p>"},{"location":"man3/BIO_get_data/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/BIO_get_data/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_get_ex_new_index/","title":"BIO_get_ex_new_index","text":""},{"location":"man3/BIO_get_ex_new_index/#name","title":"NAME","text":"<p>BIO_get_ex_new_index, BIO_set_ex_data, BIO_get_ex_data, ENGINE_get_ex_new_index, ENGINE_set_ex_data, ENGINE_get_ex_data, UI_get_ex_new_index, UI_set_ex_data, UI_get_ex_data, X509_get_ex_new_index, X509_set_ex_data, X509_get_ex_data, X509_STORE_get_ex_new_index, X509_STORE_set_ex_data, X509_STORE_get_ex_data, X509_STORE_CTX_get_ex_new_index, X509_STORE_CTX_set_ex_data, X509_STORE_CTX_get_ex_data, DH_get_ex_new_index, DH_set_ex_data, DH_get_ex_data, DSA_get_ex_new_index, DSA_set_ex_data, DSA_get_ex_data, ECDH_get_ex_new_index, ECDH_set_ex_data, ECDH_get_ex_data, EC_KEY_get_ex_new_index, EC_KEY_set_ex_data, EC_KEY_get_ex_data, RSA_get_ex_new_index, RSA_set_ex_data, RSA_get_ex_data - application-specific data</p>"},{"location":"man3/BIO_get_ex_new_index/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint TYPE_get_ex_new_index(long argl, void *argp,\n                          CRYPTO_EX_new *new_func,\n                          CRYPTO_EX_dup *dup_func,\n                          CRYPTO_EX_free *free_func);\n\nint TYPE_set_ex_data(TYPE *d, int idx, void *arg);\n\nvoid *TYPE_get_ex_data(TYPE *d, int idx);\n</code></pre>"},{"location":"man3/BIO_get_ex_new_index/#description","title":"DESCRIPTION","text":"<p>In the description here, TYPE is used a placeholder for any of the OpenSSL datatypes listed in CRYPTO_get_ex_new_index(3).</p> <p>These functions handle application-specific data for OpenSSL data structures.</p> <p>TYPE_get_ex_new_index() is a macro that calls CRYPTO_get_ex_new_index() with the correct index value.</p> <p>TYPE_set_ex_data() is a function that calls CRYPTO_set_ex_data() with an offset into the opaque exdata part of the TYPE object.</p> <p>TYPE_get_ex_data() is a function that calls CRYPTO_get_ex_data() with an offset into the opaque exdata part of the TYPE object.</p>"},{"location":"man3/BIO_get_ex_new_index/#return-values","title":"RETURN VALUES","text":"<p>TYPE_get_ex_new_index() returns a new index on success or -1 on error.</p> <p>TYPE_set_ex_data() returns 1 on success or 0 on error.</p> <p>TYPE_get_ex_data() returns the application data or NULL if an error occurred.</p>"},{"location":"man3/BIO_get_ex_new_index/#see-also","title":"SEE ALSO","text":"<p>CRYPTO_get_ex_new_index(3).</p>"},{"location":"man3/BIO_get_ex_new_index/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_meth_new/","title":"BIO_meth_new","text":""},{"location":"man3/BIO_meth_new/#name","title":"NAME","text":"<p>BIO_get_new_index, BIO_meth_new, BIO_meth_free, BIO_meth_get_read_ex, BIO_meth_set_read_ex, BIO_meth_get_write_ex, BIO_meth_set_write_ex, BIO_meth_get_write, BIO_meth_set_write, BIO_meth_get_read, BIO_meth_set_read, BIO_meth_get_puts, BIO_meth_set_puts, BIO_meth_get_gets, BIO_meth_set_gets, BIO_meth_get_ctrl, BIO_meth_set_ctrl, BIO_meth_get_create, BIO_meth_set_create, BIO_meth_get_destroy, BIO_meth_set_destroy, BIO_meth_get_callback_ctrl, BIO_meth_set_callback_ctrl - Routines to build up BIO methods</p>"},{"location":"man3/BIO_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nint BIO_get_new_index(void);\n\nBIO_METHOD *BIO_meth_new(int type, const char *name);\n\nvoid BIO_meth_free(BIO_METHOD *biom);\n\nint (*BIO_meth_get_write_ex(const BIO_METHOD *biom))(BIO *, const char *, size_t,\n                                               size_t *);\nint (*BIO_meth_get_write(const BIO_METHOD *biom))(BIO *, const char *, int);\nint BIO_meth_set_write_ex(BIO_METHOD *biom,\n                          int (*bwrite)(BIO *, const char *, size_t, size_t *));\nint BIO_meth_set_write(BIO_METHOD *biom,\n                       int (*write)(BIO *, const char *, int));\n\nint (*BIO_meth_get_read_ex(const BIO_METHOD *biom))(BIO *, char *, size_t, size_t *);\nint (*BIO_meth_get_read(const BIO_METHOD *biom))(BIO *, char *, int);\nint BIO_meth_set_read_ex(BIO_METHOD *biom,\n                         int (*bread)(BIO *, char *, size_t, size_t *));\nint BIO_meth_set_read(BIO_METHOD *biom, int (*read)(BIO *, char *, int));\n\nint (*BIO_meth_get_puts(const BIO_METHOD *biom))(BIO *, const char *);\nint BIO_meth_set_puts(BIO_METHOD *biom, int (*puts)(BIO *, const char *));\n\nint (*BIO_meth_get_gets(const BIO_METHOD *biom))(BIO *, char *, int);\nint BIO_meth_set_gets(BIO_METHOD *biom,\n                      int (*gets)(BIO *, char *, int));\n\nlong (*BIO_meth_get_ctrl(const BIO_METHOD *biom))(BIO *, int, long, void *);\nint BIO_meth_set_ctrl(BIO_METHOD *biom,\n                      long (*ctrl)(BIO *, int, long, void *));\n\nint (*BIO_meth_get_create(const BIO_METHOD *bion))(BIO *);\nint BIO_meth_set_create(BIO_METHOD *biom, int (*create)(BIO *));\n\nint (*BIO_meth_get_destroy(const BIO_METHOD *biom))(BIO *);\nint BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy)(BIO *));\n\nlong (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))(BIO *, int, BIO_info_cb *);\nint BIO_meth_set_callback_ctrl(BIO_METHOD *biom,\n                               long (*callback_ctrl)(BIO *, int, BIO_info_cb *));\n</code></pre>"},{"location":"man3/BIO_meth_new/#description","title":"DESCRIPTION","text":"<p>The BIO_METHOD type is a structure used for the implementation of new BIO types. It provides a set of functions used by OpenSSL for the implementation of the various BIO capabilities. See the bio page for more information.</p> <p>BIO_meth_new() creates a new BIO_METHOD structure. It should be given a unique integer type and a string that represents its name. Use BIO_get_new_index() to get the value for type.</p> <p>The set of standard OpenSSL provided BIO types is provided in bio.h. Some examples include BIO_TYPE_BUFFER and BIO_TYPE_CIPHER. Filter BIOs should have a type which have the \"filter\" bit set (BIO_TYPE_FILTER). Source/sink BIOs should have the \"source/sink\" bit set (BIO_TYPE_SOURCE_SINK). File descriptor based BIOs (e.g. socket, fd, connect, accept etc) should additionally have the \"descriptor\" bit set (BIO_TYPE_DESCRIPTOR). See the BIO_find_type page for more information.</p> <p>BIO_meth_free() destroys a BIO_METHOD structure and frees up any memory associated with it.</p> <p>BIO_meth_get_write_ex() and BIO_meth_set_write_ex() get and set the function used for writing arbitrary length data to the BIO respectively. This function will be called in response to the application calling BIO_write_ex() or BIO_write(). The parameters for the function have the same meaning as for BIO_write_ex(). Older code may call BIO_meth_get_write() and BIO_meth_set_write() instead. Applications should not call both BIO_meth_set_write_ex() and BIO_meth_set_write() or call BIO_meth_get_write() when the function was set with BIO_meth_set_write_ex().</p> <p>BIO_meth_get_read_ex() and BIO_meth_set_read_ex() get and set the function used for reading arbitrary length data from the BIO respectively. This function will be called in response to the application calling BIO_read_ex() or BIO_read(). The parameters for the function have the same meaning as for BIO_read_ex(). Older code may call BIO_meth_get_read() and BIO_meth_set_read() instead. Applications should not call both BIO_meth_set_read_ex() and BIO_meth_set_read() or call BIO_meth_get_read() when the function was set with BIO_meth_set_read_ex().</p> <p>BIO_meth_get_puts() and BIO_meth_set_puts() get and set the function used for writing a NULL terminated string to the BIO respectively. This function will be called in response to the application calling BIO_puts(). The parameters for the function have the same meaning as for BIO_puts().</p> <p>BIO_meth_get_gets() and BIO_meth_set_gets() get and set the function typically used for reading a line of data from the BIO respectively (see the BIO_gets(3) page for more information). This function will be called in response to the application calling BIO_gets(). The parameters for the function have the same meaning as for BIO_gets().</p> <p>BIO_meth_get_ctrl() and BIO_meth_set_ctrl() get and set the function used for processing ctrl messages in the BIO respectively. See the BIO_ctrl page for more information. This function will be called in response to the application calling BIO_ctrl(). The parameters for the function have the same meaning as for BIO_ctrl().</p> <p>BIO_meth_get_create() and BIO_meth_set_create() get and set the function used for creating a new instance of the BIO respectively. This function will be called in response to the application calling BIO_new() and passing in a pointer to the current BIO_METHOD. The BIO_new() function will allocate the memory for the new BIO, and a pointer to this newly allocated structure will be passed as a parameter to the function.</p> <p>BIO_meth_get_destroy() and BIO_meth_set_destroy() get and set the function used for destroying an instance of a BIO respectively. This function will be called in response to the application calling BIO_free(). A pointer to the BIO to be destroyed is passed as a parameter. The destroy function should be used for BIO specific clean up. The memory for the BIO itself should not be freed by this function.</p> <p>BIO_meth_get_callback_ctrl() and BIO_meth_set_callback_ctrl() get and set the function used for processing callback ctrl messages in the BIO respectively. See the BIO_callback_ctrl(3) page for more information. This function will be called in response to the application calling BIO_callback_ctrl(). The parameters for the function have the same meaning as for BIO_callback_ctrl().</p>"},{"location":"man3/BIO_meth_new/#return-values","title":"RETURN VALUES","text":"<p>BIO_get_new_index() returns the new BIO type value or -1 if an error occurred.</p> <p>BIO_meth_new(int type, const char *name) returns a valid BIO_METHOD or NULL if an error occurred.</p> <p>The BIO_meth_set functions return 1 on success or 0 on error.</p> <p>The BIO_meth_get functions return the corresponding function pointers.</p>"},{"location":"man3/BIO_meth_new/#see-also","title":"SEE ALSO","text":"<p>bio, BIO_find_type, BIO_ctrl, BIO_read_ex, BIO_new</p>"},{"location":"man3/BIO_meth_new/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/BIO_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_new/","title":"BIO_new","text":""},{"location":"man3/BIO_new/#name","title":"NAME","text":"<p>BIO_new, BIO_up_ref, BIO_free, BIO_vfree, BIO_free_all - BIO allocation and freeing functions</p>"},{"location":"man3/BIO_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nBIO *  BIO_new(const BIO_METHOD *type);\nint    BIO_up_ref(BIO *a);\nint    BIO_free(BIO *a);\nvoid   BIO_vfree(BIO *a);\nvoid   BIO_free_all(BIO *a);\n</code></pre>"},{"location":"man3/BIO_new/#description","title":"DESCRIPTION","text":"<p>The BIO_new() function returns a new BIO using method type.</p> <p>BIO_up_ref() increments the reference count associated with the BIO object.</p> <p>BIO_free() frees up a single BIO, BIO_vfree() also frees up a single BIO but it does not return a value. If a is NULL nothing is done. Calling BIO_free() may also have some effect on the underlying I/O structure, for example it may close the file being referred to under certain circumstances. For more details see the individual BIO_METHOD descriptions.</p> <p>BIO_free_all() frees up an entire BIO chain, it does not halt if an error occurs freeing up an individual BIO in the chain. If a is NULL nothing is done.</p>"},{"location":"man3/BIO_new/#return-values","title":"RETURN VALUES","text":"<p>BIO_new() returns a newly created BIO or NULL if the call fails.</p> <p>BIO_up_ref() and BIO_free() return 1 for success and 0 for failure.</p> <p>BIO_free_all() and BIO_vfree() do not return values.</p>"},{"location":"man3/BIO_new/#notes","title":"NOTES","text":"<p>If BIO_free() is called on a BIO chain it will only free one BIO resulting in a memory leak.</p> <p>Calling BIO_free_all() on a single BIO has the same effect as calling BIO_free() on it other than the discarded return value.</p>"},{"location":"man3/BIO_new/#history","title":"HISTORY","text":"<p>BIO_set() was removed in OpenSSL 1.1.0 as BIO type is now opaque.</p>"},{"location":"man3/BIO_new/#examples","title":"EXAMPLES","text":"<p>Create a memory BIO:</p> <pre><code>BIO *mem = BIO_new(BIO_s_mem());\n</code></pre>"},{"location":"man3/BIO_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_new_CMS/","title":"BIO_new_CMS","text":""},{"location":"man3/BIO_new_CMS/#name","title":"NAME","text":"<p>BIO_new_CMS - CMS streaming filter BIO</p>"},{"location":"man3/BIO_new_CMS/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nBIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);\n</code></pre>"},{"location":"man3/BIO_new_CMS/#description","title":"DESCRIPTION","text":"<p>BIO_new_CMS() returns a streaming filter BIO chain based on cms. The output of the filter is written to out. Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type.</p>"},{"location":"man3/BIO_new_CMS/#notes","title":"NOTES","text":"<p>The chain returned by this function behaves like a standard filter BIO. It supports non blocking I/O. Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures. After all content has been written through the chain BIO_flush() must be called to finalise the structure.</p> <p>The CMS_STREAM flag must be included in the corresponding flags parameter of the cms creation function.</p> <p>If an application wishes to write additional data to out BIOs should be removed from the chain using BIO_pop() and freed with BIO_free() until out is reached. If no additional data needs to be written BIO_free_all() can be called to free up the whole chain.</p> <p>Any content written through the filter is used verbatim: no canonical translation is performed.</p> <p>It is possible to chain multiple BIOs to, for example, create a triple wrapped signed, enveloped, signed structure. In this case it is the applications responsibility to set the inner content type of any outer CMS_ContentInfo structures.</p> <p>Large numbers of small writes through the chain should be avoided as this will produce an output consisting of lots of OCTET STRING structures. Prepending a BIO_f_buffer() buffering BIO will prevent this.</p>"},{"location":"man3/BIO_new_CMS/#bugs","title":"BUGS","text":"<p>There is currently no corresponding inverse BIO: i.e. one which can decode a CMS structure on the fly.</p>"},{"location":"man3/BIO_new_CMS/#return-values","title":"RETURN VALUES","text":"<p>BIO_new_CMS() returns a BIO chain when successful or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/BIO_new_CMS/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_encrypt(3)</p>"},{"location":"man3/BIO_new_CMS/#history","title":"HISTORY","text":"<p>The BIO_new_CMS() function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/BIO_new_CMS/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_parse_hostserv/","title":"BIO_parse_hostserv","text":""},{"location":"man3/BIO_parse_hostserv/#name","title":"NAME","text":"<p>BIO_hostserv_priorities, BIO_parse_hostserv - utility routines to parse a standard host and service string</p>"},{"location":"man3/BIO_parse_hostserv/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nenum BIO_hostserv_priorities {\n    BIO_PARSE_PRIO_HOST, BIO_PARSE_PRIO_SERV\n};\nint BIO_parse_hostserv(const char *hostserv, char **host, char **service,\n                       enum BIO_hostserv_priorities hostserv_prio);\n</code></pre>"},{"location":"man3/BIO_parse_hostserv/#description","title":"DESCRIPTION","text":"<p>BIO_parse_hostserv() will parse the information given in hostserv, create strings with the hostname and service name and give those back via host and service.  Those will need to be freed after they are used.  hostserv_prio helps determine if hostserv shall be interpreted primarily as a hostname or a service name in ambiguous cases.</p> <p>The syntax the BIO_parse_hostserv() recognises is:</p> <pre><code>host + ':' + service\nhost + ':' + '*'\nhost + ':'\n       ':' + service\n'*'  + ':' + service\nhost\nservice\n</code></pre> <p>The host part can be a name or an IP address.  If it's a IPv6 address, it MUST be enclosed in brackets, such as '[::1]'.</p> <p>The service part can  be a service name or its port number.</p> <p>The returned values will depend on the given hostserv string and hostserv_prio, as follows:</p> <pre><code>host + ':' + service  =&gt; *host = \"host\", *service = \"service\"\nhost + ':' + '*'      =&gt; *host = \"host\", *service = NULL\nhost + ':'            =&gt; *host = \"host\", *service = NULL\n       ':' + service  =&gt; *host = NULL, *service = \"service\"\n '*' + ':' + service  =&gt; *host = NULL, *service = \"service\"\n\nin case no ':' is present in the string, the result depends on\nhostserv_prio, as follows:\n\nwhen hostserv_prio == BIO_PARSE_PRIO_HOST\nhost                 =&gt; *host = \"host\", *service untouched\n\nwhen hostserv_prio == BIO_PARSE_PRIO_SERV\nservice              =&gt; *host untouched, *service = \"service\"\n</code></pre>"},{"location":"man3/BIO_parse_hostserv/#return-values","title":"RETURN VALUES","text":"<p>BIO_parse_hostserv() returns 1 on success or 0 on error.</p>"},{"location":"man3/BIO_parse_hostserv/#see-also","title":"SEE ALSO","text":"<p>BIO_ADDRINFO(3)</p>"},{"location":"man3/BIO_parse_hostserv/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_printf/","title":"BIO_printf","text":""},{"location":"man3/BIO_printf/#name","title":"NAME","text":"<p>BIO_printf, BIO_vprintf, BIO_snprintf, BIO_vsnprintf - formatted output to a BIO</p>"},{"location":"man3/BIO_printf/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nint BIO_printf(BIO *bio, const char *format, ...)\nint BIO_vprintf(BIO *bio, const char *format, va_list args)\n\nint BIO_snprintf(char *buf, size_t n, const char *format, ...)\nint BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)\n</code></pre>"},{"location":"man3/BIO_printf/#description","title":"DESCRIPTION","text":"<p>BIO_printf() is similar to the standard C printf() function, except that the output is sent to the specified BIO, bio, rather than standard output.  All common format specifiers are supported.</p> <p>BIO_vprintf() is similar to the vprintf() function found on many platforms, the output is sent to the specified BIO, bio, rather than standard output.  All common format specifiers are supported. The argument list args is a stdarg argument list.</p> <p>BIO_snprintf() is for platforms that do not have the common snprintf() function. It is like sprintf() except that the size parameter, n, specifies the size of the output buffer.</p> <p>BIO_vsnprintf() is to BIO_snprintf() as BIO_vprintf() is to BIO_printf().</p>"},{"location":"man3/BIO_printf/#return-values","title":"RETURN VALUES","text":"<p>All functions return the number of bytes written, or -1 on error. For BIO_snprintf() and BIO_vsnprintf() this includes when the output buffer is too small.</p>"},{"location":"man3/BIO_printf/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_push/","title":"BIO_push","text":""},{"location":"man3/BIO_push/#name","title":"NAME","text":"<p>BIO_push, BIO_pop, BIO_set_next - add and remove BIOs from a chain</p>"},{"location":"man3/BIO_push/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nBIO *BIO_push(BIO *b, BIO *next);\nBIO *BIO_pop(BIO *b);\nvoid BIO_set_next(BIO *b, BIO *next);\n</code></pre>"},{"location":"man3/BIO_push/#description","title":"DESCRIPTION","text":"<p>BIO_push() pushes b on next. If b is NULL the function does nothing and returns next. Otherwise it prepends b, which may be a single BIO or a chain of BIOs, to next (unless next is NULL). It then makes a control call on b and returns b.</p> <p>BIO_pop() removes the BIO b from any chain is is part of. If b is NULL the function does nothing and returns NULL. Otherwise it makes a control call on b and returns the next BIO in the chain, or NULL if there is no next BIO. The removed BIO becomes a single BIO with no association with the original chain, it can thus be freed or be made part of a different chain.</p> <p>BIO_set_next() replaces the existing next BIO in a chain with the BIO pointed to by next. The new chain may include some of the same BIOs from the old chain or it may be completely different.</p>"},{"location":"man3/BIO_push/#notes","title":"NOTES","text":"<p>The names of these functions are perhaps a little misleading. BIO_push() joins two BIO chains whereas BIO_pop() deletes a single BIO from a chain, the deleted BIO does not need to be at the end of a chain.</p> <p>The process of calling BIO_push() and BIO_pop() on a BIO may have additional consequences (a control call is made to the affected BIOs). Any effects will be noted in the descriptions of individual BIOs.</p>"},{"location":"man3/BIO_push/#return-values","title":"RETURN VALUES","text":"<p>BIO_push() returns the head of the chain, which usually is b, or next if b is NULL.</p> <p>BIO_pop() returns the next BIO in the chain, or NULL if there is no next BIO.</p>"},{"location":"man3/BIO_push/#examples","title":"EXAMPLES","text":"<p>For these examples suppose md1 and md2 are digest BIOs, b64 is a base64 BIO and f is a file BIO.</p> <p>If the call:</p> <pre><code>BIO_push(b64, f);\n</code></pre> <p>is made then the new chain will be b64-f. After making the calls</p> <pre><code>BIO_push(md2, b64);\nBIO_push(md1, md2);\n</code></pre> <p>the new chain is md1-md2-b64-f. Data written to md1 will be digested by md1 and md2, base64 encoded, and finally written to f.</p> <p>It should be noted that reading causes data to pass in the reverse direction, that is data is read from f, base64 decoded, and digested by md2 and then md1.</p> <p>The call:</p> <pre><code>BIO_pop(md2);\n</code></pre> <p>will return b64 and the new chain will be md1-b64-f. Data can be written to and read from md1 as before, except that md2 will no more be applied.</p>"},{"location":"man3/BIO_push/#see-also","title":"SEE ALSO","text":"<p>bio</p>"},{"location":"man3/BIO_push/#history","title":"HISTORY","text":"<p>The BIO_set_next() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/BIO_push/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_read/","title":"BIO_read","text":""},{"location":"man3/BIO_read/#name","title":"NAME","text":"<p>BIO_read_ex, BIO_write_ex, BIO_read, BIO_write, BIO_gets, BIO_puts - BIO I/O functions</p>"},{"location":"man3/BIO_read/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nint BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);\nint BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);\n\nint BIO_read(BIO *b, void *data, int dlen);\nint BIO_gets(BIO *b, char *buf, int size);\nint BIO_write(BIO *b, const void *data, int dlen);\nint BIO_puts(BIO *b, const char *buf);\n</code></pre>"},{"location":"man3/BIO_read/#description","title":"DESCRIPTION","text":"<p>BIO_read_ex() attempts to read dlen bytes from BIO b and places the data in data. If any bytes were successfully read then the number of bytes read is stored in *readbytes.</p> <p>BIO_write_ex() attempts to write dlen bytes from data to BIO b. If successful then the number of bytes written is stored in *written.</p> <p>BIO_read() attempts to read len bytes from BIO b and places the data in buf.</p> <p>BIO_gets() performs the BIOs \"gets\" operation and places the data in buf. Usually this operation will attempt to read a line of data from the BIO of maximum length size-1. There are exceptions to this, however; for example, BIO_gets() on a digest BIO will calculate and return the digest and other BIOs may not support BIO_gets() at all. The returned string is always NUL-terminated and the '\\n' is preserved if present in the input data.</p> <p>BIO_write() attempts to write len bytes from buf to BIO b.</p> <p>BIO_puts() attempts to write a NUL-terminated string buf to BIO b.</p>"},{"location":"man3/BIO_read/#return-values","title":"RETURN VALUES","text":"<p>BIO_read_ex() and BIO_write_ex() return 1 if data was successfully read or written, and 0 otherwise.</p> <p>All other functions return either the amount of data successfully read or written (if the return value is positive) or that no data was successfully read or written if the result is 0 or -1. If the return value is -2 then the operation is not implemented in the specific BIO type.  The trailing NUL is not included in the length returned by BIO_gets().</p>"},{"location":"man3/BIO_read/#notes","title":"NOTES","text":"<p>A 0 or -1 return is not necessarily an indication of an error. In particular when the source/sink is nonblocking or of a certain type it may merely be an indication that no data is currently available and that the application should retry the operation later.</p> <p>One technique sometimes used with blocking sockets is to use a system call (such as select(), poll() or equivalent) to determine when data is available and then call read() to read the data. The equivalent with BIOs (that is call select() on the underlying I/O structure and then call BIO_read() to read the data) should not be used because a single call to BIO_read() can cause several reads (and writes in the case of SSL BIOs) on the underlying I/O structure and may block as a result. Instead select() (or equivalent) should be combined with non blocking I/O so successive reads will request a retry instead of blocking.</p> <p>See BIO_should_retry(3) for details of how to determine the cause of a retry and other I/O issues.</p> <p>If the BIO_gets() function is not supported by a BIO then it possible to work around this by adding a buffering BIO BIO_f_buffer(3) to the chain.</p>"},{"location":"man3/BIO_read/#see-also","title":"SEE ALSO","text":"<p>BIO_should_retry(3)</p>"},{"location":"man3/BIO_read/#history","title":"HISTORY","text":"<p>BIO_gets() on 1.1.0 and older when called on BIO_fd() based BIO does not keep the '\\n' at the end of the line in the buffer.</p>"},{"location":"man3/BIO_read/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_accept/","title":"BIO_s_accept","text":""},{"location":"man3/BIO_s_accept/#name","title":"NAME","text":"<p>BIO_s_accept, BIO_set_accept_name, BIO_set_accept_port, BIO_get_accept_name, BIO_get_accept_port, BIO_new_accept, BIO_set_nbio_accept, BIO_set_accept_bios, BIO_get_peer_name, BIO_get_peer_port, BIO_get_accept_ip_family, BIO_set_accept_ip_family, BIO_set_bind_mode, BIO_get_bind_mode, BIO_do_accept - accept BIO</p>"},{"location":"man3/BIO_s_accept/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_accept(void);\n\nlong BIO_set_accept_name(BIO *b, char *name);\nchar *BIO_get_accept_name(BIO *b);\n\nlong BIO_set_accept_port(BIO *b, char *port);\nchar *BIO_get_accept_port(BIO *b);\n\nBIO *BIO_new_accept(char *host_port);\n\nlong BIO_set_nbio_accept(BIO *b, int n);\nlong BIO_set_accept_bios(BIO *b, char *bio);\n\nchar *BIO_get_peer_name(BIO *b);\nchar *BIO_get_peer_port(BIO *b);\nlong BIO_get_accept_ip_family(BIO *b);\nlong BIO_set_accept_ip_family(BIO *b, long family);\n\nlong BIO_set_bind_mode(BIO *b, long mode);\nlong BIO_get_bind_mode(BIO *b);\n\nint BIO_do_accept(BIO *b);\n</code></pre>"},{"location":"man3/BIO_s_accept/#description","title":"DESCRIPTION","text":"<p>BIO_s_accept() returns the accept BIO method. This is a wrapper round the platform's TCP/IP socket accept routines.</p> <p>Using accept BIOs, TCP/IP connections can be accepted and data transferred using only BIO routines. In this way any platform specific operations are hidden by the BIO abstraction.</p> <p>Read and write operations on an accept BIO will perform I/O on the underlying connection. If no connection is established and the port (see below) is set up properly then the BIO waits for an incoming connection.</p> <p>Accept BIOs support BIO_puts() but not BIO_gets().</p> <p>If the close flag is set on an accept BIO then any active connection on that chain is shutdown and the socket closed when the BIO is freed.</p> <p>Calling BIO_reset() on an accept BIO will close any active connection and reset the BIO into a state where it awaits another incoming connection.</p> <p>BIO_get_fd() and BIO_set_fd() can be called to retrieve or set the accept socket. See BIO_s_fd(3)</p> <p>BIO_set_accept_name() uses the string name to set the accept name. The name is represented as a string of the form \"host:port\", where \"host\" is the interface to use and \"port\" is the port. The host can be \"*\" or empty which is interpreted as meaning any interface.  If the host is an IPv6 address, it has to be enclosed in brackets, for example \"[::1]:https\".  \"port\" has the same syntax as the port specified in BIO_set_conn_port() for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname() and a string table.</p> <p>BIO_set_accept_port() uses the string port to set the accept port.  \"port\" has the same syntax as the port specified in BIO_set_conn_port() for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname() and a string table.</p> <p>BIO_new_accept() combines BIO_new() and BIO_set_accept_name() into a single call: that is it creates a new accept BIO with port host_port.</p> <p>BIO_set_nbio_accept() sets the accept socket to blocking mode (the default) if n is 0 or non blocking mode if n is 1.</p> <p>BIO_set_accept_bios() can be used to set a chain of BIOs which will be duplicated and prepended to the chain when an incoming connection is received. This is useful if, for example, a buffering or SSL BIO is required for each connection. The chain of BIOs must not be freed after this call, they will be automatically freed when the accept BIO is freed.</p> <p>BIO_set_bind_mode() and BIO_get_bind_mode() set and retrieve the current bind mode. If BIO_BIND_NORMAL (the default) is set then another socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port. If BIO_BIND_REUSEADDR_IF_UNUSED is set then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use then a second attempt is made using BIO_BIND_REUSEADDR.</p> <p>BIO_do_accept() serves two functions. When it is first called, after the accept BIO has been setup, it will attempt to create the accept socket and bind an address to it. Second and subsequent calls to BIO_do_accept() will await an incoming connection, or request a retry in non blocking mode.</p>"},{"location":"man3/BIO_s_accept/#notes","title":"NOTES","text":"<p>When an accept BIO is at the end of a chain it will await an incoming connection before processing I/O calls. When an accept BIO is not at then end of a chain it passes I/O calls to the next BIO in the chain.</p> <p>When a connection is established a new socket BIO is created for the connection and appended to the chain. That is the chain is now accept-&gt;socket. This effectively means that attempting I/O on an initial accept socket will await an incoming connection then perform I/O on it.</p> <p>If any additional BIOs have been set using BIO_set_accept_bios() then they are placed between the socket and the accept BIO, that is the chain will be accept-&gt;otherbios-&gt;socket.</p> <p>If a server wishes to process multiple connections (as is normally the case) then the accept BIO must be made available for further incoming connections. This can be done by waiting for a connection and then calling:</p> <pre><code>connection = BIO_pop(accept);\n</code></pre> <p>After this call connection will contain a BIO for the recently established connection and accept will now be a single BIO again which can be used to await further incoming connections. If no further connections will be accepted the accept can be freed using BIO_free().</p> <p>If only a single connection will be processed it is possible to perform I/O using the accept BIO itself. This is often undesirable however because the accept BIO will still accept additional incoming connections. This can be resolved by using BIO_pop() (see above) and freeing up the accept BIO after the initial connection.</p> <p>If the underlying accept socket is nonblocking and BIO_do_accept() is called to await an incoming connection it is possible for BIO_should_io_special() with the reason BIO_RR_ACCEPT. If this happens then it is an indication that an accept attempt would block: the application should take appropriate action to wait until the underlying socket has accepted a connection and retry the call.</p> <p>BIO_set_accept_name(), BIO_get_accept_name(), BIO_set_accept_port(), BIO_get_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_get_peer_name(), BIO_get_peer_port(), BIO_get_accept_ip_family(), BIO_set_accept_ip_family(), BIO_set_bind_mode(), BIO_get_bind_mode() and BIO_do_accept() are macros.</p>"},{"location":"man3/BIO_s_accept/#return-values","title":"RETURN VALUES","text":"<p>BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.</p> <p>BIO_get_accept_name() returns the accept name or NULL on error. BIO_get_peer_name() returns the peer name or NULL on error.</p> <p>BIO_get_accept_port() returns the accept port as a string or NULL on error. BIO_get_peer_port() returns the peer port as a string or NULL on error. BIO_get_accept_ip_family() returns the IP family or -1 on error.</p> <p>BIO_get_bind_mode() returns the set of BIO_BIND flags, or -1 on failure.</p> <p>BIO_new_accept() returns a BIO or NULL on error.</p>"},{"location":"man3/BIO_s_accept/#examples","title":"EXAMPLES","text":"<p>This example accepts two connections on port 4444, sends messages down each and finally closes both down.</p> <pre><code>BIO *abio, *cbio, *cbio2;\n\n/* First call to BIO_accept() sets up accept BIO */\nabio = BIO_new_accept(\"4444\");\nif (BIO_do_accept(abio) &lt;= 0) {\n    fprintf(stderr, \"Error setting up accept\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n\n/* Wait for incoming connection */\nif (BIO_do_accept(abio) &lt;= 0) {\n    fprintf(stderr, \"Error accepting connection\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\nfprintf(stderr, \"Connection 1 established\\n\");\n\n/* Retrieve BIO for connection */\ncbio = BIO_pop(abio);\nBIO_puts(cbio, \"Connection 1: Sending out Data on initial connection\\n\");\nfprintf(stderr, \"Sent out data on connection 1\\n\");\n\n/* Wait for another connection */\nif (BIO_do_accept(abio) &lt;= 0) {\n    fprintf(stderr, \"Error accepting connection\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\nfprintf(stderr, \"Connection 2 established\\n\");\n\n/* Close accept BIO to refuse further connections */\ncbio2 = BIO_pop(abio);\nBIO_free(abio);\nBIO_puts(cbio2, \"Connection 2: Sending out Data on second\\n\");\nfprintf(stderr, \"Sent out data on connection 2\\n\");\n\nBIO_puts(cbio, \"Connection 1: Second connection established\\n\");\n\n/* Close the two established connections */\nBIO_free(cbio);\nBIO_free(cbio2);\n</code></pre>"},{"location":"man3/BIO_s_accept/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_bio/","title":"BIO_s_bio","text":""},{"location":"man3/BIO_s_bio/#name","title":"NAME","text":"<p>BIO_s_bio, BIO_make_bio_pair, BIO_destroy_bio_pair, BIO_shutdown_wr, BIO_set_write_buf_size, BIO_get_write_buf_size, BIO_new_bio_pair, BIO_get_write_guarantee, BIO_ctrl_get_write_guarantee, BIO_get_read_request, BIO_ctrl_get_read_request, BIO_ctrl_reset_read_request - BIO pair BIO</p>"},{"location":"man3/BIO_s_bio/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_bio(void);\n\nint BIO_make_bio_pair(BIO *b1, BIO *b2);\nint BIO_destroy_bio_pair(BIO *b);\nint BIO_shutdown_wr(BIO *b);\n\nint BIO_set_write_buf_size(BIO *b, long size);\nsize_t BIO_get_write_buf_size(BIO *b, long size);\n\nint BIO_new_bio_pair(BIO **bio1, size_t writebuf1, BIO **bio2, size_t writebuf2);\n\nint BIO_get_write_guarantee(BIO *b);\nsize_t BIO_ctrl_get_write_guarantee(BIO *b);\nint BIO_get_read_request(BIO *b);\nsize_t BIO_ctrl_get_read_request(BIO *b);\nint BIO_ctrl_reset_read_request(BIO *b);\n</code></pre>"},{"location":"man3/BIO_s_bio/#description","title":"DESCRIPTION","text":"<p>BIO_s_bio() returns the method for a BIO pair. A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half. Both halves must usually by handled by the same application thread since no locking is done on the internal data structures.</p> <p>Since BIO chains typically end in a source/sink BIO it is possible to make this one half of a BIO pair and have all the data processed by the chain under application control.</p> <p>One typical use of BIO pairs is to place TLS/SSL I/O under application control, this can be used when the application wishes to use a non standard transport for TLS/SSL or the normal socket routines are inappropriate.</p> <p>Calls to BIO_read_ex() will read data from the buffer or request a retry if no data is available.</p> <p>Calls to BIO_write_ex() will place data in the buffer or request a retry if the buffer is full.</p> <p>The standard calls BIO_ctrl_pending() and BIO_ctrl_wpending() can be used to determine the amount of pending data in the read or write buffer.</p> <p>BIO_reset() clears any data in the write buffer.</p> <p>BIO_make_bio_pair() joins two separate BIOs into a connected pair.</p> <p>BIO_destroy_pair() destroys the association between two connected BIOs. Freeing up any half of the pair will automatically destroy the association.</p> <p>BIO_shutdown_wr() is used to close down a BIO b. After this call no further writes on BIO b are allowed (they will return an error). Reads on the other half of the pair will return any pending data or EOF when all pending data has been read.</p> <p>BIO_set_write_buf_size() sets the write buffer size of BIO b to size. If the size is not initialized a default value is used. This is currently 17K, sufficient for a maximum size TLS record.</p> <p>BIO_get_write_buf_size() returns the size of the write buffer.</p> <p>BIO_new_bio_pair() combines the calls to BIO_new(), BIO_make_bio_pair() and BIO_set_write_buf_size() to create a connected pair of BIOs bio1, bio2 with write buffer sizes writebuf1 and writebuf2. If either size is zero then the default size is used.  BIO_new_bio_pair() does not check whether bio1 or bio2 do point to some other BIO, the values are overwritten, BIO_free() is not called.</p> <p>BIO_get_write_guarantee() and BIO_ctrl_get_write_guarantee() return the maximum length of data that can be currently written to the BIO. Writes larger than this value will return a value from BIO_write_ex() less than the amount requested or if the buffer is full request a retry. BIO_ctrl_get_write_guarantee() is a function whereas BIO_get_write_guarantee() is a macro.</p> <p>BIO_get_read_request() and BIO_ctrl_get_read_request() return the amount of data requested, or the buffer size if it is less, if the last read attempt at the other half of the BIO pair failed due to an empty buffer.  This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size. After a successful read this call will return zero.  It also will return zero once new data has been written satisfying the read request or part of it. Note that BIO_get_read_request() never returns an amount larger than that returned by BIO_get_write_guarantee().</p> <p>BIO_ctrl_reset_read_request() can also be used to reset the value returned by BIO_get_read_request() to zero.</p>"},{"location":"man3/BIO_s_bio/#notes","title":"NOTES","text":"<p>Both halves of a BIO pair should be freed. That is even if one half is implicit freed due to a BIO_free_all() or SSL_free() call the other half needs to be freed.</p> <p>When used in bidirectional applications (such as TLS/SSL) care should be taken to flush any data in the write buffer. This can be done by calling BIO_pending() on the other half of the pair and, if any data is pending, reading it and sending it to the underlying transport. This must be done before any normal processing (such as calling select() ) due to a request and BIO_should_read() being true.</p> <p>To see why this is important consider a case where a request is sent using BIO_write_ex() and a response read with BIO_read_ex(), this can occur during an TLS/SSL handshake for example. BIO_write_ex() will succeed and place data in the write buffer. BIO_read_ex() will initially fail and BIO_should_read() will be true. If the application then waits for data to be available on the underlying transport before flushing the write buffer it will never succeed because the request was never sent!</p> <p>BIO_eof() is true if no data is in the peer BIO and the peer BIO has been shutdown.</p> <p>BIO_make_bio_pair(), BIO_destroy_bio_pair(), BIO_shutdown_wr(), BIO_set_write_buf_size(), BIO_get_write_buf_size(), BIO_get_write_guarantee(), and BIO_get_read_request() are implemented as macros.</p>"},{"location":"man3/BIO_s_bio/#return-values","title":"RETURN VALUES","text":"<p>BIO_new_bio_pair() returns 1 on success, with the new BIOs available in bio1 and bio2, or 0 on failure, with NULL pointers stored into the locations for bio1 and bio2. Check the error stack for more information.</p> <p>[XXXXX: More return values need to be added here]</p>"},{"location":"man3/BIO_s_bio/#examples","title":"EXAMPLES","text":"<p>The BIO pair can be used to have full control over the network access of an application. The application can call select() on the socket as required without having to go through the SSL-interface.</p> <pre><code>BIO *internal_bio, *network_bio;\n\n...\nBIO_new_bio_pair(&amp;internal_bio, 0, &amp;network_bio, 0);\nSSL_set_bio(ssl, internal_bio, internal_bio);\nSSL_operations(); /* e.g. SSL_read and SSL_write */\n...\n\napplication |   TLS-engine\n   |        |\n   +----------&gt; SSL_operations()\n            |     /\\    ||\n            |     ||    \\/\n            |   BIO-pair (internal_bio)\n            |   BIO-pair (network_bio)\n            |     ||     /\\\n            |     \\/     ||\n   +-----------&lt; BIO_operations()\n   |        |\n   |        |\n  socket\n\n ...\n SSL_free(ssl);                /* implicitly frees internal_bio */\n BIO_free(network_bio);\n ...\n</code></pre> <p>As the BIO pair will only buffer the data and never directly access the connection, it behaves nonblocking and will return as soon as the write buffer is full or the read buffer is drained. Then the application has to flush the write buffer and/or fill the read buffer.</p> <p>Use the BIO_ctrl_pending(), to find out whether data is buffered in the BIO and must be transferred to the network. Use BIO_ctrl_get_read_request() to find out, how many bytes must be written into the buffer before the SSL_operation() can successfully be continued.</p>"},{"location":"man3/BIO_s_bio/#warnings","title":"WARNINGS","text":"<p>As the data is buffered, SSL_operation() may return with an ERROR_SSL_WANT_READ condition, but there is still data in the write buffer. An application must not rely on the error value of SSL_operation() but must assure that the write buffer is always flushed first. Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue.</p>"},{"location":"man3/BIO_s_bio/#see-also","title":"SEE ALSO","text":"<p>SSL_set_bio(3), ssl(7), bio(7), BIO_should_retry(3), BIO_read_ex(3)</p>"},{"location":"man3/BIO_s_bio/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_connect/","title":"BIO_s_connect","text":""},{"location":"man3/BIO_s_connect/#name","title":"NAME","text":"<p>BIO_set_conn_address, BIO_get_conn_address, BIO_s_connect, BIO_new_connect, BIO_set_conn_hostname, BIO_set_conn_port, BIO_set_conn_ip_family, BIO_get_conn_ip_family, BIO_get_conn_hostname, BIO_get_conn_port, BIO_set_nbio, BIO_do_connect - connect BIO</p>"},{"location":"man3/BIO_s_connect/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD * BIO_s_connect(void);\n\nBIO *BIO_new_connect(char *name);\n\nlong BIO_set_conn_hostname(BIO *b, char *name);\nlong BIO_set_conn_port(BIO *b, char *port);\nlong BIO_set_conn_address(BIO *b, BIO_ADDR *addr);\nlong BIO_set_conn_ip_family(BIO *b, long family);\nconst char *BIO_get_conn_hostname(BIO *b);\nconst char *BIO_get_conn_port(BIO *b);\nconst BIO_ADDR *BIO_get_conn_address(BIO *b);\nconst long BIO_get_conn_ip_family(BIO *b);\n\nlong BIO_set_nbio(BIO *b, long n);\n\nint BIO_do_connect(BIO *b);\n</code></pre>"},{"location":"man3/BIO_s_connect/#description","title":"DESCRIPTION","text":"<p>BIO_s_connect() returns the connect BIO method. This is a wrapper round the platform's TCP/IP socket connection routines.</p> <p>Using connect BIOs, TCP/IP connections can be made and data transferred using only BIO routines. In this way any platform specific operations are hidden by the BIO abstraction.</p> <p>Read and write operations on a connect BIO will perform I/O on the underlying connection. If no connection is established and the port and hostname (see below) is set up properly then a connection is established first.</p> <p>Connect BIOs support BIO_puts() but not BIO_gets().</p> <p>If the close flag is set on a connect BIO then any active connection is shutdown and the socket closed when the BIO is freed.</p> <p>Calling BIO_reset() on a connect BIO will close any active connection and reset the BIO into a state where it can connect to the same host again.</p> <p>BIO_get_fd() places the underlying socket in c if it is not NULL, it also returns the socket . If c is not NULL it should be of type (int *).</p> <p>BIO_set_conn_hostname() uses the string name to set the hostname. The hostname can be an IP address; if the address is an IPv6 one, it must be enclosed with brackets. The hostname can also include the port in the form hostname:port.</p> <p>BIO_set_conn_port() sets the port to port. port can be the numerical form or a string such as \"http\". A string will be looked up first using getservbyname() on the host platform but if that fails a standard table of port names will be used. This internal list is http, telnet, socks, https, ssl, ftp, and gopher.</p> <p>BIO_set_conn_address() sets the address and port information using a BIO_ADDR(3ssl).</p> <p>BIO_set_conn_ip_family() sets the IP family.</p> <p>BIO_get_conn_hostname() returns the hostname of the connect BIO or NULL if the BIO is initialized but no hostname is set. This return value is an internal pointer which should not be modified.</p> <p>BIO_get_conn_port() returns the port as a string. This return value is an internal pointer which should not be modified.</p> <p>BIO_get_conn_address() returns the address information as a BIO_ADDR. This return value is an internal pointer which should not be modified.</p> <p>BIO_get_conn_ip_family() returns the IP family of the connect BIO.</p> <p>BIO_set_nbio() sets the non blocking I/O flag to n. If n is zero then blocking I/O is set. If n is 1 then non blocking I/O is set. Blocking I/O is the default. The call to BIO_set_nbio() should be made before the connection is established because non blocking I/O is set during the connect process.</p> <p>BIO_new_connect() combines BIO_new() and BIO_set_conn_hostname() into a single call: that is it creates a new connect BIO with name.</p> <p>BIO_do_connect() attempts to connect the supplied BIO. It returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established, the call BIO_should_retry() should be used for non blocking connect BIOs to determine if the call should be retried.</p>"},{"location":"man3/BIO_s_connect/#notes","title":"NOTES","text":"<p>If blocking I/O is set then a non positive return value from any I/O call is caused by an error condition, although a zero return will normally mean that the connection was closed.</p> <p>If the port name is supplied as part of the hostname then this will override any value set with BIO_set_conn_port(). This may be undesirable if the application does not wish to allow connection to arbitrary ports. This can be avoided by checking for the presence of the ':' character in the passed hostname and either indicating an error or truncating the string at that point.</p> <p>The values returned by BIO_get_conn_hostname(), BIO_get_conn_address(), and BIO_get_conn_port() are updated when a connection attempt is made. Before any connection attempt the values returned are those set by the application itself.</p> <p>Applications do not have to call BIO_do_connect() but may wish to do so to separate the connection process from other I/O processing.</p> <p>If non blocking I/O is set then retries will be requested as appropriate.</p> <p>It addition to BIO_should_read() and BIO_should_write() it is also possible for BIO_should_io_special() to be true during the initial connection process with the reason BIO_RR_CONNECT. If this is returned then this is an indication that a connection attempt would block, the application should then take appropriate action to wait until the underlying socket has connected and retry the call.</p> <p>BIO_set_conn_hostname(), BIO_set_conn_port(), BIO_get_conn_hostname(), BIO_set_conn_address(), BIO_get_conn_port(), BIO_get_conn_address(), BIO_set_conn_ip_family(), BIO_get_conn_ip_family(), BIO_set_nbio(), and BIO_do_connect() are macros.</p>"},{"location":"man3/BIO_s_connect/#return-values","title":"RETURN VALUES","text":"<p>BIO_s_connect() returns the connect BIO method.</p> <p>BIO_get_fd() returns the socket or -1 if the BIO has not been initialized.</p> <p>BIO_set_conn_address(), BIO_set_conn_port(), and BIO_set_conn_ip_family() always return 1.</p> <p>BIO_set_conn_hostname() returns 1 on success and 0 on failure.</p> <p>BIO_get_conn_address() returns the address information or NULL if none was set.</p> <p>BIO_get_conn_hostname() returns the connected hostname or NULL if none was set.</p> <p>BIO_get_conn_ip_family() returns the address family or -1 if none was set.</p> <p>BIO_get_conn_port() returns a string representing the connected port or NULL if not set.</p> <p>BIO_set_nbio() always returns 1.</p> <p>BIO_do_connect() returns 1 if the connection was successfully established and 0 or -1 if the connection failed.</p>"},{"location":"man3/BIO_s_connect/#examples","title":"EXAMPLES","text":"<p>This is example connects to a webserver on the local host and attempts to retrieve a page and copy the result to standard output.</p> <pre><code>BIO *cbio, *out;\nint len;\nchar tmpbuf[1024];\n\ncbio = BIO_new_connect(\"localhost:http\");\nout = BIO_new_fp(stdout, BIO_NOCLOSE);\nif (BIO_do_connect(cbio) &lt;= 0) {\n    fprintf(stderr, \"Error connecting to server\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\nBIO_puts(cbio, \"GET / HTTP/1.0\\n\\n\");\nfor (;;) {\n    len = BIO_read(cbio, tmpbuf, 1024);\n    if (len &lt;= 0)\n        break;\n    BIO_write(out, tmpbuf, len);\n}\nBIO_free(cbio);\nBIO_free(out);\n</code></pre>"},{"location":"man3/BIO_s_connect/#see-also","title":"SEE ALSO","text":"<p>BIO_ADDR(3)</p>"},{"location":"man3/BIO_s_connect/#history","title":"HISTORY","text":"<p>BIO_set_conn_int_port(), BIO_get_conn_int_port(), BIO_set_conn_ip(), and BIO_get_conn_ip() were removed in OpenSSL 1.1.0. Use BIO_set_conn_address() and BIO_get_conn_address() instead.</p>"},{"location":"man3/BIO_s_connect/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_fd/","title":"BIO_s_fd","text":""},{"location":"man3/BIO_s_fd/#name","title":"NAME","text":"<p>BIO_s_fd, BIO_set_fd, BIO_get_fd, BIO_new_fd - file descriptor BIO</p>"},{"location":"man3/BIO_s_fd/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_fd(void);\n\nint BIO_set_fd(BIO *b, int fd, int c);\nint BIO_get_fd(BIO *b, int *c);\n\nBIO *BIO_new_fd(int fd, int close_flag);\n</code></pre>"},{"location":"man3/BIO_s_fd/#description","title":"DESCRIPTION","text":"<p>BIO_s_fd() returns the file descriptor BIO method. This is a wrapper round the platforms file descriptor routines such as read() and write().</p> <p>BIO_read_ex() and BIO_write_ex() read or write the underlying descriptor. BIO_puts() is supported but BIO_gets() is not.</p> <p>If the close flag is set then close() is called on the underlying file descriptor when the BIO is freed.</p> <p>BIO_reset() attempts to change the file pointer to the start of file such as by using lseek(fd, 0, 0).</p> <p>BIO_seek() sets the file pointer to position ofs from start of file such as by using lseek(fd, ofs, 0).</p> <p>BIO_tell() returns the current file position such as by calling lseek(fd, 0, 1).</p> <p>BIO_set_fd() sets the file descriptor of BIO b to fd and the close flag to c.</p> <p>BIO_get_fd() places the file descriptor in c if it is not NULL, it also returns the file descriptor.</p> <p>BIO_new_fd() returns a file descriptor BIO using fd and close_flag.</p>"},{"location":"man3/BIO_s_fd/#notes","title":"NOTES","text":"<p>The behaviour of BIO_read_ex() and BIO_write_ex() depends on the behavior of the platforms read() and write() calls on the descriptor. If the underlying file descriptor is in a non blocking mode then the BIO will behave in the manner described in the BIO_read_ex(3) and BIO_should_retry(3) manual pages.</p> <p>File descriptor BIOs should not be used for socket I/O. Use socket BIOs instead.</p> <p>BIO_set_fd() and BIO_get_fd() are implemented as macros.</p>"},{"location":"man3/BIO_s_fd/#return-values","title":"RETURN VALUES","text":"<p>BIO_s_fd() returns the file descriptor BIO method.</p> <p>BIO_set_fd() always returns 1.</p> <p>BIO_get_fd() returns the file descriptor or -1 if the BIO has not been initialized.</p> <p>BIO_new_fd() returns the newly allocated BIO or NULL is an error occurred.</p>"},{"location":"man3/BIO_s_fd/#examples","title":"EXAMPLES","text":"<p>This is a file descriptor BIO version of \"Hello World\":</p> <pre><code>BIO *out;\n\nout = BIO_new_fd(fileno(stdout), BIO_NOCLOSE);\nBIO_printf(out, \"Hello World\\n\");\nBIO_free(out);\n</code></pre>"},{"location":"man3/BIO_s_fd/#see-also","title":"SEE ALSO","text":"<p>BIO_seek(3), BIO_tell(3), BIO_reset(3), BIO_read_ex(3), BIO_write_ex(3), BIO_puts(3), BIO_gets(3), BIO_printf(3), BIO_set_close(3), BIO_get_close(3)</p>"},{"location":"man3/BIO_s_fd/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_file/","title":"BIO_s_file","text":""},{"location":"man3/BIO_s_file/#name","title":"NAME","text":"<p>BIO_s_file, BIO_new_file, BIO_new_fp, BIO_set_fp, BIO_get_fp, BIO_read_filename, BIO_write_filename, BIO_append_filename, BIO_rw_filename - FILE bio</p>"},{"location":"man3/BIO_s_file/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_file(void);\nBIO *BIO_new_file(const char *filename, const char *mode);\nBIO *BIO_new_fp(FILE *stream, int flags);\n\nBIO_set_fp(BIO *b, FILE *fp, int flags);\nBIO_get_fp(BIO *b, FILE **fpp);\n\nint BIO_read_filename(BIO *b, char *name)\nint BIO_write_filename(BIO *b, char *name)\nint BIO_append_filename(BIO *b, char *name)\nint BIO_rw_filename(BIO *b, char *name)\n</code></pre>"},{"location":"man3/BIO_s_file/#description","title":"DESCRIPTION","text":"<p>BIO_s_file() returns the BIO file method. As its name implies it is a wrapper round the stdio FILE structure and it is a source/sink BIO.</p> <p>Calls to BIO_read_ex() and BIO_write_ex() read and write data to the underlying stream. BIO_gets() and BIO_puts() are supported on file BIOs.</p> <p>BIO_flush() on a file BIO calls the fflush() function on the wrapped stream.</p> <p>BIO_reset() attempts to change the file pointer to the start of file using fseek(stream, 0, 0).</p> <p>BIO_seek() sets the file pointer to position ofs from start of file using fseek(stream, ofs, 0).</p> <p>BIO_eof() calls feof().</p> <p>Setting the BIO_CLOSE flag calls fclose() on the stream when the BIO is freed.</p> <p>BIO_new_file() creates a new file BIO with mode mode the meaning of mode is the same as the stdio function fopen(). The BIO_CLOSE flag is set on the returned BIO.</p> <p>BIO_new_fp() creates a file BIO wrapping stream. Flags can be: BIO_CLOSE, BIO_NOCLOSE (the close flag) BIO_FP_TEXT (sets the underlying stream to text mode, default is binary: this only has any effect under Win32).</p> <p>BIO_set_fp() sets the fp of a file BIO to fp. flags has the same meaning as in BIO_new_fp(), it is a macro.</p> <p>BIO_get_fp() retrieves the fp of a file BIO, it is a macro.</p> <p>BIO_seek() is a macro that sets the position pointer to offset bytes from the start of file.</p> <p>BIO_tell() returns the value of the position pointer.</p> <p>BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and BIO_rw_filename() set the file BIO b to use file name for reading, writing, append or read write respectively.</p>"},{"location":"man3/BIO_s_file/#notes","title":"NOTES","text":"<p>When wrapping stdout, stdin or stderr the underlying stream should not normally be closed so the BIO_NOCLOSE flag should be set.</p> <p>Because the file BIO calls the underlying stdio functions any quirks in stdio behaviour will be mirrored by the corresponding BIO.</p> <p>On Windows BIO_new_files reserves for the filename argument to be UTF-8 encoded. In other words if you have to make it work in multi- lingual environment, encode filenames in UTF-8.</p>"},{"location":"man3/BIO_s_file/#return-values","title":"RETURN VALUES","text":"<p>BIO_s_file() returns the file BIO method.</p> <p>BIO_new_file() and BIO_new_fp() return a file BIO or NULL if an error occurred.</p> <p>BIO_set_fp() and BIO_get_fp() return 1 for success or 0 for failure (although the current implementation never return 0).</p> <p>BIO_seek() returns the same value as the underlying fseek() function: 0 for success or -1 for failure.</p> <p>BIO_tell() returns the current file position.</p> <p>BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and BIO_rw_filename() return 1 for success or 0 for failure.</p>"},{"location":"man3/BIO_s_file/#examples","title":"EXAMPLES","text":"<p>File BIO \"hello world\":</p> <pre><code>BIO *bio_out;\n\nbio_out = BIO_new_fp(stdout, BIO_NOCLOSE);\nBIO_printf(bio_out, \"Hello World\\n\");\n</code></pre> <p>Alternative technique:</p> <pre><code>BIO *bio_out;\n\nbio_out = BIO_new(BIO_s_file());\nif (bio_out == NULL)\n    /* Error */\nif (!BIO_set_fp(bio_out, stdout, BIO_NOCLOSE))\n    /* Error */\nBIO_printf(bio_out, \"Hello World\\n\");\n</code></pre> <p>Write to a file:</p> <pre><code>BIO *out;\n\nout = BIO_new_file(\"filename.txt\", \"w\");\nif (!out)\n    /* Error */\nBIO_printf(out, \"Hello World\\n\");\nBIO_free(out);\n</code></pre> <p>Alternative technique:</p> <pre><code>BIO *out;\n\nout = BIO_new(BIO_s_file());\nif (out == NULL)\n    /* Error */\nif (!BIO_write_filename(out, \"filename.txt\"))\n    /* Error */\nBIO_printf(out, \"Hello World\\n\");\nBIO_free(out);\n</code></pre>"},{"location":"man3/BIO_s_file/#bugs","title":"BUGS","text":"<p>BIO_reset() and BIO_seek() are implemented using fseek() on the underlying stream. The return value for fseek() is 0 for success or -1 if an error occurred this differs from other types of BIO which will typically return 1 for success and a non positive value if an error occurred.</p>"},{"location":"man3/BIO_s_file/#see-also","title":"SEE ALSO","text":"<p>BIO_seek(3), BIO_tell(3), BIO_reset(3), BIO_flush(3), BIO_read_ex(3), BIO_write_ex(3), BIO_puts(3), BIO_gets(3), BIO_printf(3), BIO_set_close(3), BIO_get_close(3)</p>"},{"location":"man3/BIO_s_file/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_mem/","title":"BIO_s_mem","text":""},{"location":"man3/BIO_s_mem/#name","title":"NAME","text":"<p>BIO_s_secmem, BIO_s_mem, BIO_set_mem_eof_return, BIO_get_mem_data, BIO_set_mem_buf, BIO_get_mem_ptr, BIO_new_mem_buf - memory BIO</p>"},{"location":"man3/BIO_s_mem/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_mem(void);\nconst BIO_METHOD *BIO_s_secmem(void);\n\nBIO_set_mem_eof_return(BIO *b, int v)\nlong BIO_get_mem_data(BIO *b, char **pp)\nBIO_set_mem_buf(BIO *b, BUF_MEM *bm, int c)\nBIO_get_mem_ptr(BIO *b, BUF_MEM **pp)\n\nBIO *BIO_new_mem_buf(const void *buf, int len);\n</code></pre>"},{"location":"man3/BIO_s_mem/#description","title":"DESCRIPTION","text":"<p>BIO_s_mem() returns the memory BIO method function.</p> <p>A memory BIO is a source/sink BIO which uses memory for its I/O. Data written to a memory BIO is stored in a BUF_MEM structure which is extended as appropriate to accommodate the stored data.</p> <p>BIO_s_secmem() is like BIO_s_mem() except that the secure heap is used for buffer storage.</p> <p>Any data written to a memory BIO can be recalled by reading from it. Unless the memory BIO is read only any data read from it is deleted from the BIO.</p> <p>Memory BIOs support BIO_gets() and BIO_puts().</p> <p>If the BIO_CLOSE flag is set when a memory BIO is freed then the underlying BUF_MEM structure is also freed.</p> <p>Calling BIO_reset() on a read write memory BIO clears any data in it if the flag BIO_FLAGS_NONCLEAR_RST is not set, otherwise it just restores the read pointer to the state it was just after the last write was performed and the data can be read again. On a read only BIO it similarly restores the BIO to its original state and the read only data can be read again.</p> <p>BIO_eof() is true if no data is in the BIO.</p> <p>BIO_ctrl_pending() returns the number of bytes currently stored.</p> <p>BIO_set_mem_eof_return() sets the behaviour of memory BIO b when it is empty. If the v is zero then an empty memory BIO will return EOF (that is it will return zero and BIO_should_retry(b) will be false. If v is non zero then it will return v when it is empty and it will set the read retry flag (that is BIO_read_retry(b) is true). To avoid ambiguity with a normal positive return value v should be set to a negative value, typically -1.</p> <p>BIO_get_mem_data() sets *pp to a pointer to the start of the memory BIOs data and returns the total amount of data available. It is implemented as a macro.</p> <p>BIO_set_mem_buf() sets the internal BUF_MEM structure to bm and sets the close flag to c, that is c should be either BIO_CLOSE or BIO_NOCLOSE. It is a macro.</p> <p>BIO_get_mem_ptr() places the underlying BUF_MEM structure in *pp. It is a macro.</p> <p>BIO_new_mem_buf() creates a memory BIO using len bytes of data at buf, if len is -1 then the buf is assumed to be nul terminated and its length is determined by strlen. The BIO is set to a read only state and as a result cannot be written to. This is useful when some data needs to be made available from a static area of memory in the form of a BIO. The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed.</p>"},{"location":"man3/BIO_s_mem/#notes","title":"NOTES","text":"<p>Writes to memory BIOs will always succeed if memory is available: that is their size can grow indefinitely.</p> <p>Every write after partial read (not all data in the memory buffer was read) to a read write memory BIO will have to move the unread data with an internal copy operation, if a BIO contains a lot of data and it is read in small chunks intertwined with writes the operation can be very slow. Adding a buffering BIO to the chain can speed up the process.</p> <p>Calling BIO_set_mem_buf() on a BIO created with BIO_new_secmem() will give undefined results, including perhaps a program crash.</p> <p>Switching the memory BIO from read write to read only is not supported and can give undefined results including a program crash. There are two notable exceptions to the rule. The first one is to assign a static memory buffer immediately after BIO creation and set the BIO as read only.</p> <p>The other supported sequence is to start with read write BIO then temporarily switch it to read only and call BIO_reset() on the read only BIO immediately before switching it back to read write. Before the BIO is freed it must be switched back to the read write mode.</p> <p>Calling BIO_get_mem_ptr() on read only BIO will return a BUF_MEM that contains only the remaining data to be read. If the close status of the BIO is set to BIO_NOCLOSE, before freeing the BUF_MEM the data pointer in it must be set to NULL as the data pointer does not point to an allocated memory.</p> <p>Calling BIO_reset() on a read write memory BIO with BIO_FLAGS_NONCLEAR_RST flag set can have unexpected outcome when the reads and writes to the BIO are intertwined. As documented above the BIO will be reset to the state after the last completed write operation. The effects of reads preceding that write operation cannot be undone.</p> <p>Calling BIO_get_mem_ptr() prior to a BIO_reset() call with BIO_FLAGS_NONCLEAR_RST set has the same effect as a write operation.</p>"},{"location":"man3/BIO_s_mem/#bugs","title":"BUGS","text":"<p>There should be an option to set the maximum size of a memory BIO.</p>"},{"location":"man3/BIO_s_mem/#return-values","title":"RETURN VALUES","text":"<p>BIO_s_mem() and BIO_s_secmem() return a valid memory BIO_METHOD structure.</p> <p>BIO_set_mem_eof_return(), BIO_set_mem_buf() and BIO_get_mem_ptr() return 1 on success or a value which is less than or equal to 0 if an error occurred.</p> <p>BIO_get_mem_data() returns the total number of bytes available on success, 0 if b is NULL, or a negative value in case of other errors.</p> <p>BIO_new_mem_buf() returns a valid BIO structure on success or NULL on error.</p>"},{"location":"man3/BIO_s_mem/#examples","title":"EXAMPLES","text":"<p>Create a memory BIO and write some data to it:</p> <pre><code>BIO *mem = BIO_new(BIO_s_mem());\n\nBIO_puts(mem, \"Hello World\\n\");\n</code></pre> <p>Create a read only memory BIO:</p> <pre><code>char data[] = \"Hello World\";\nBIO *mem = BIO_new_mem_buf(data, -1);\n</code></pre> <p>Extract the BUF_MEM structure from a memory BIO and then free up the BIO:</p> <pre><code>BUF_MEM *bptr;\n\nBIO_get_mem_ptr(mem, &amp;bptr);\nBIO_set_close(mem, BIO_NOCLOSE); /* So BIO_free() leaves BUF_MEM alone */\nBIO_free(mem);\n</code></pre>"},{"location":"man3/BIO_s_mem/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_null/","title":"BIO_s_null","text":""},{"location":"man3/BIO_s_null/#name","title":"NAME","text":"<p>BIO_s_null - null data sink</p>"},{"location":"man3/BIO_s_null/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_null(void);\n</code></pre>"},{"location":"man3/BIO_s_null/#description","title":"DESCRIPTION","text":"<p>BIO_s_null() returns the null sink BIO method. Data written to the null sink is discarded, reads return EOF.</p>"},{"location":"man3/BIO_s_null/#notes","title":"NOTES","text":"<p>A null sink BIO behaves in a similar manner to the Unix /dev/null device.</p> <p>A null bio can be placed on the end of a chain to discard any data passed through it.</p> <p>A null sink is useful if, for example, an application wishes to digest some data by writing through a digest bio but not send the digested data anywhere. Since a BIO chain must normally include a source/sink BIO this can be achieved by adding a null sink BIO to the end of the chain</p>"},{"location":"man3/BIO_s_null/#return-values","title":"RETURN VALUES","text":"<p>BIO_s_null() returns the null sink BIO method.</p>"},{"location":"man3/BIO_s_null/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_s_socket/","title":"BIO_s_socket","text":""},{"location":"man3/BIO_s_socket/#name","title":"NAME","text":"<p>BIO_s_socket, BIO_new_socket - socket BIO</p>"},{"location":"man3/BIO_s_socket/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nconst BIO_METHOD *BIO_s_socket(void);\n\nBIO *BIO_new_socket(int sock, int close_flag);\n</code></pre>"},{"location":"man3/BIO_s_socket/#description","title":"DESCRIPTION","text":"<p>BIO_s_socket() returns the socket BIO method. This is a wrapper round the platform's socket routines.</p> <p>BIO_read_ex() and BIO_write_ex() read or write the underlying socket. BIO_puts() is supported but BIO_gets() is not.</p> <p>If the close flag is set then the socket is shut down and closed when the BIO is freed.</p> <p>BIO_new_socket() returns a socket BIO using sock and close_flag.</p>"},{"location":"man3/BIO_s_socket/#notes","title":"NOTES","text":"<p>Socket BIOs also support any relevant functionality of file descriptor BIOs.</p> <p>The reason for having separate file descriptor and socket BIOs is that on some platforms sockets are not file descriptors and use distinct I/O routines, Windows is one such platform. Any code mixing the two will not work on all platforms.</p>"},{"location":"man3/BIO_s_socket/#return-values","title":"RETURN VALUES","text":"<p>BIO_s_socket() returns the socket BIO method.</p> <p>BIO_new_socket() returns the newly allocated BIO or NULL is an error occurred.</p>"},{"location":"man3/BIO_s_socket/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_set_callback/","title":"BIO_set_callback","text":""},{"location":"man3/BIO_set_callback/#name","title":"NAME","text":"<p>BIO_set_callback_ex, BIO_get_callback_ex, BIO_set_callback, BIO_get_callback, BIO_set_callback_arg, BIO_get_callback_arg, BIO_debug_callback, BIO_callback_fn_ex, BIO_callback_fn - BIO callback functions</p>"},{"location":"man3/BIO_set_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\ntypedef long (*BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,\n                                   size_t len, int argi,\n                                   long argl, int ret, size_t *processed);\ntypedef long (*BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,\n                                long argl, long ret);\n\nvoid BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);\nBIO_callback_fn_ex BIO_get_callback_ex(const BIO *b);\n\nvoid BIO_set_callback(BIO *b, BIO_callback_fn cb);\nBIO_callback_fn BIO_get_callback(BIO *b);\nvoid BIO_set_callback_arg(BIO *b, char *arg);\nchar *BIO_get_callback_arg(const BIO *b);\n\nlong BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,\n                        long argl, long ret);\n</code></pre>"},{"location":"man3/BIO_set_callback/#description","title":"DESCRIPTION","text":"<p>BIO_set_callback_ex() and BIO_get_callback_ex() set and retrieve the BIO callback. The callback is called during most high-level BIO operations. It can be used for debugging purposes to trace operations on a BIO or to modify its operation.</p> <p>BIO_set_callback() and BIO_get_callback() set and retrieve the old format BIO callback. New code should not use these functions, but they are retained for backwards compatibility. Any callback set via BIO_set_callback_ex() will get called in preference to any set by BIO_set_callback().</p> <p>BIO_set_callback_arg() and BIO_get_callback_arg() are macros which can be used to set and retrieve an argument for use in the callback.</p> <p>BIO_debug_callback() is a standard debugging callback which prints out information relating to each BIO operation. If the callback argument is set it is interpreted as a BIO to send the information to, otherwise stderr is used.</p> <p>BIO_callback_fn_ex() is the type of the callback function and BIO_callback_fn() is the type of the old format callback function. The meaning of each argument is described below:</p> <ul> <li> <p>b</p> <p>The BIO the callback is attached to is passed in b.</p> </li> <li> <p>oper</p> <p>oper is set to the operation being performed. For some operations the callback is called twice, once before and once after the actual operation, the latter case has oper or'ed with BIO_CB_RETURN.</p> </li> <li> <p>len</p> <p>The length of the data requested to be read or written. This is only useful if oper is BIO_CB_READ, BIO_CB_WRITE or BIO_CB_GETS.</p> </li> <li> <p>argp argi argl</p> <p>The meaning of the arguments argp, argi and argl depends on the value of oper, that is the operation being performed.</p> </li> <li> <p>processed</p> <p>processed is a pointer to a location which will be updated with the amount of data that was actually read or written. Only used for BIO_CB_READ, BIO_CB_WRITE, BIO_CB_GETS and BIO_CB_PUTS.</p> </li> <li> <p>ret</p> <p>ret is the return value that would be returned to the application if no callback were present. The actual value returned is the return value of the callback itself. In the case of callbacks called before the actual BIO operation 1 is placed in ret, if the return value is not positive it will be immediately returned to the application and the BIO operation will not be performed.</p> </li> </ul> <p>The callback should normally simply return ret when it has finished processing, unless it specifically wishes to modify the value returned to the application.</p>"},{"location":"man3/BIO_set_callback/#callback-operations","title":"CALLBACK OPERATIONS","text":"<p>In the notes below, callback defers to the actual callback function that is called.</p> <ul> <li> <p>BIO_free(b)</p> <pre><code>callback_ex(b, BIO_CB_FREE, NULL, 0, 0, 0L, 1L, NULL)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_FREE, NULL, 0L, 0L, 1L)\n</code></pre> <p>is called before the free operation.</p> </li> <li> <p>BIO_read_ex(b, data, dlen, readbytes)</p> <pre><code>callback_ex(b, BIO_CB_READ, data, dlen, 0, 0L, 1L, NULL)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_READ, data, dlen, 0L, 1L)\n</code></pre> <p>is called before the read and</p> <pre><code>callback_ex(b, BIO_CB_READ | BIO_CB_RETURN, data, dlen, 0, 0L, retvalue,\n            &amp;readbytes)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_READ|BIO_CB_RETURN, data, dlen, 0L, retvalue)\n</code></pre> <p>after.</p> </li> <li> <p>BIO_write(b, data, dlen, written)</p> <pre><code>callback_ex(b, BIO_CB_WRITE, data, dlen, 0, 0L, 1L, NULL)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_WRITE, datat, dlen, 0L, 1L)\n</code></pre> <p>is called before the write and</p> <pre><code>callback_ex(b, BIO_CB_WRITE | BIO_CB_RETURN, data, dlen, 0, 0L, retvalue,\n            &amp;written)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_WRITE|BIO_CB_RETURN, data, dlen, 0L, retvalue)\n</code></pre> <p>after.</p> </li> <li> <p>BIO_gets(b, buf, size)</p> <pre><code>callback_ex(b, BIO_CB_GETS, buf, size, 0, 0L, 1, NULL, NULL)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_GETS, buf, size, 0L, 1L)\n</code></pre> <p>is called before the operation and</p> <pre><code>callback_ex(b, BIO_CB_GETS | BIO_CB_RETURN, buf, size, 0, 0L, retvalue,\n            &amp;readbytes)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_GETS|BIO_CB_RETURN, buf, size, 0L, retvalue)\n</code></pre> <p>after.</p> </li> <li> <p>BIO_puts(b, buf)</p> <pre><code>callback_ex(b, BIO_CB_PUTS, buf, 0, 0, 0L, 1L, NULL);\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_PUTS, buf, 0, 0L, 1L)\n</code></pre> <p>is called before the operation and</p> <pre><code>callback_ex(b, BIO_CB_PUTS | BIO_CB_RETURN, buf, 0, 0, 0L, retvalue, &amp;written)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_PUTS|BIO_CB_RETURN, buf, 0, 0L, retvalue)\n</code></pre> <p>after.</p> </li> <li> <p>BIO_ctrl(BIO *b, int cmd, long larg, void *parg)</p> <pre><code>callback_ex(b, BIO_CB_CTRL, parg, 0, cmd, larg, 1L, NULL)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_CTRL, parg, cmd, larg, 1L)\n</code></pre> <p>is called before the call and</p> <pre><code>callback_ex(b, BIO_CB_CTRL | BIO_CB_RETURN, parg, 0, cmd, larg, ret, NULL)\n</code></pre> <p>or</p> <pre><code>callback(b, BIO_CB_CTRL|BIO_CB_RETURN, parg, cmd, larg, ret)\n</code></pre> <p>after.</p> <p>Note: cmd == BIO_CTRL_SET_CALLBACK is special, because parg is not the argument of type BIO_info_cb itself.  In this case parg is a pointer to the actual call parameter, see BIO_callback_ctrl.</p> </li> </ul>"},{"location":"man3/BIO_set_callback/#return-values","title":"RETURN VALUES","text":"<p>BIO_get_callback_ex() and BIO_get_callback() return the callback function previously set by a call to BIO_set_callback_ex() and BIO_set_callback() respectively.</p> <p>BIO_get_callback_arg() returns a char pointer to the value previously set via a call to BIO_set_callback_arg().</p> <p>BIO_debug_callback() returns 1 or ret if it's called after specific BIO operations.</p>"},{"location":"man3/BIO_set_callback/#examples","title":"EXAMPLES","text":"<p>The BIO_debug_callback() function is a good example, its source is in crypto/bio/bio_cb.c</p>"},{"location":"man3/BIO_set_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BIO_should_retry/","title":"BIO_should_retry","text":""},{"location":"man3/BIO_should_retry/#name","title":"NAME","text":"<p>BIO_should_read, BIO_should_write, BIO_should_io_special, BIO_retry_type, BIO_should_retry, BIO_get_retry_BIO, BIO_get_retry_reason, BIO_set_retry_reason - BIO retry functions</p>"},{"location":"man3/BIO_should_retry/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n\nint BIO_should_read(BIO *b);\nint BIO_should_write(BIO *b);\nint BIO_should_io_special(iBIO *b);\nint BIO_retry_type(BIO *b);\nint BIO_should_retry(BIO *b);\n\nBIO *BIO_get_retry_BIO(BIO *bio, int *reason);\nint BIO_get_retry_reason(BIO *bio);\nvoid BIO_set_retry_reason(BIO *bio, int reason);\n</code></pre>"},{"location":"man3/BIO_should_retry/#description","title":"DESCRIPTION","text":"<p>These functions determine why a BIO is not able to read or write data. They will typically be called after a failed BIO_read_ex() or BIO_write_ex() call.</p> <p>BIO_should_retry() is true if the call that produced this condition should then be retried at a later time.</p> <p>If BIO_should_retry() is false then the cause is an error condition.</p> <p>BIO_should_read() is true if the cause of the condition is that the BIO has insufficient data to return. Check for readability and/or retry the last operation.</p> <p>BIO_should_write() is true if the cause of the condition is that the BIO has pending data to write. Check for writability and/or retry the last operation.</p> <p>BIO_should_io_special() is true if some \"special\" condition, that is a reason other than reading or writing is the cause of the condition.</p> <p>BIO_retry_type() returns a mask of the cause of a retry condition consisting of the values BIO_FLAGS_READ, BIO_FLAGS_WRITE, BIO_FLAGS_IO_SPECIAL though current BIO types will only set one of these.</p> <p>BIO_get_retry_BIO() determines the precise reason for the special condition, it returns the BIO that caused this condition and if reason is not NULL it contains the reason code. The meaning of the reason code and the action that should be taken depends on the type of BIO that resulted in this condition.</p> <p>BIO_get_retry_reason() returns the reason for a special condition if passed the relevant BIO, for example as returned by BIO_get_retry_BIO().</p> <p>BIO_set_retry_reason() sets the retry reason for a special condition for a given BIO. This would usually only be called by BIO implementations.</p>"},{"location":"man3/BIO_should_retry/#notes","title":"NOTES","text":"<p>BIO_should_read(), BIO_should_write(), BIO_should_io_special(), BIO_retry_type(), and BIO_should_retry(), are implemented as macros.</p> <p>If BIO_should_retry() returns false then the precise \"error condition\" depends on the BIO type that caused it and the return code of the BIO operation. For example if a call to BIO_read_ex() on a socket BIO returns 0 and BIO_should_retry() is false then the cause will be that the connection closed. A similar condition on a file BIO will mean that it has reached EOF. Some BIO types may place additional information on the error queue. For more details see the individual BIO type manual pages.</p> <p>If the underlying I/O structure is in a blocking mode almost all current BIO types will not request a retry, because the underlying I/O calls will not. If the application knows that the BIO type will never signal a retry then it need not call BIO_should_retry() after a failed BIO I/O call. This is typically done with file BIOs.</p> <p>SSL BIOs are the only current exception to this rule: they can request a retry even if the underlying I/O structure is blocking, if a handshake occurs during a call to BIO_read(). An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure.</p> <p>While an application may retry a failed non blocking call immediately this is likely to be very inefficient because the call will fail repeatedly until data can be processed or is available. An application will normally wait until the necessary condition is satisfied. How this is done depends on the underlying I/O structure.</p> <p>For example if the cause is ultimately a socket and BIO_should_read() is true then a call to select() may be made to wait until data is available and then retry the BIO operation. By combining the retry conditions of several non blocking BIOs in a single select() call it is possible to service several BIOs in a single thread, though the performance may be poor if SSL BIOs are present because long delays can occur during the initial handshake process.</p> <p>It is possible for a BIO to block indefinitely if the underlying I/O structure cannot process or return any data. This depends on the behaviour of the platforms I/O functions. This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select() (or equivalent) call.</p>"},{"location":"man3/BIO_should_retry/#bugs","title":"BUGS","text":"<p>The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write. This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.</p>"},{"location":"man3/BIO_should_retry/#return-values","title":"RETURN VALUES","text":"<p>BIO_should_read(), BIO_should_write(), BIO_should_io_special(), and BIO_should_retry() return either 1 or 0 based on the actual conditions of the BIO.</p> <p>BIO_retry_type() returns a flag combination presenting the cause of a retry condition or false if there is no retry condition.</p> <p>BIO_get_retry_BIO() returns a valid BIO structure.</p> <p>BIO_get_retry_reason() returns the reason for a special condition.</p>"},{"location":"man3/BIO_should_retry/#see-also","title":"SEE ALSO","text":"<p>bio</p>"},{"location":"man3/BIO_should_retry/#history","title":"HISTORY","text":"<p>The BIO_get_retry_reason() and BIO_set_retry_reason() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/BIO_should_retry/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_BLINDING_new/","title":"BN_BLINDING_new","text":""},{"location":"man3/BN_BLINDING_new/#name","title":"NAME","text":"<p>BN_BLINDING_new, BN_BLINDING_free, BN_BLINDING_update, BN_BLINDING_convert, BN_BLINDING_invert, BN_BLINDING_convert_ex, BN_BLINDING_invert_ex, BN_BLINDING_is_current_thread, BN_BLINDING_set_current_thread, BN_BLINDING_lock, BN_BLINDING_unlock, BN_BLINDING_get_flags, BN_BLINDING_set_flags, BN_BLINDING_create_param - blinding related BIGNUM functions</p>"},{"location":"man3/BN_BLINDING_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai,\n                             BIGNUM *mod);\nvoid BN_BLINDING_free(BN_BLINDING *b);\nint BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);\nint BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);\nint BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);\nint BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b,\n                           BN_CTX *ctx);\nint BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,\n                          BN_CTX *ctx);\nint BN_BLINDING_is_current_thread(BN_BLINDING *b);\nvoid BN_BLINDING_set_current_thread(BN_BLINDING *b);\nint BN_BLINDING_lock(BN_BLINDING *b);\nint BN_BLINDING_unlock(BN_BLINDING *b);\nunsigned long BN_BLINDING_get_flags(const BN_BLINDING *);\nvoid BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);\nBN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,\n                                      const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,\n                                      int (*bn_mod_exp)(BIGNUM *r,\n                                                        const BIGNUM *a,\n                                                        const BIGNUM *p,\n                                                        const BIGNUM *m,\n                                                        BN_CTX *ctx,\n                                                        BN_MONT_CTX *m_ctx),\n                                      BN_MONT_CTX *m_ctx);\n</code></pre>"},{"location":"man3/BN_BLINDING_new/#description","title":"DESCRIPTION","text":"<p>BN_BLINDING_new() allocates a new BN_BLINDING structure and copies the A and Ai values into the newly created BN_BLINDING object.</p> <p>BN_BLINDING_free() frees the BN_BLINDING structure. If b is NULL, nothing is done.</p> <p>BN_BLINDING_update() updates the BN_BLINDING parameters by squaring the A and Ai or, after specific number of uses and if the necessary parameters are set, by re-creating the blinding parameters.</p> <p>BN_BLINDING_convert_ex() multiplies n with the blinding factor A. If r is not NULL a copy the inverse blinding factor Ai will be returned in r (this is useful if a RSA object is shared among several threads). BN_BLINDING_invert_ex() multiplies n with the inverse blinding factor Ai. If r is not NULL it will be used as the inverse blinding.</p> <p>BN_BLINDING_convert() and BN_BLINDING_invert() are wrapper functions for BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() with r set to NULL.</p> <p>BN_BLINDING_is_current_thread() returns whether the BN_BLINDING structure is owned by the current thread. This is to help users provide proper locking if needed for multi-threaded use.</p> <p>BN_BLINDING_set_current_thread() sets the current thread as the owner of the BN_BLINDING structure.</p> <p>BN_BLINDING_lock() locks the BN_BLINDING structure.</p> <p>BN_BLINDING_unlock() unlocks the BN_BLINDING structure.</p> <p>BN_BLINDING_get_flags() returns the BN_BLINDING flags. Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE. BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING parameters after a fixed number of uses (currently 32). In newly allocated BN_BLINDING objects no flags are set. BN_BLINDING_set_flags() sets the BN_BLINDING parameters flags.</p> <p>BN_BLINDING_create_param() creates new BN_BLINDING parameters using the exponent e and the modulus m. bn_mod_exp and m_ctx can be used to pass special functions for exponentiation (normally BN_mod_exp_mont() and BN_MONT_CTX).</p>"},{"location":"man3/BN_BLINDING_new/#return-values","title":"RETURN VALUES","text":"<p>BN_BLINDING_new() returns the newly allocated BN_BLINDING structure or NULL in case of an error.</p> <p>BN_BLINDING_update(), BN_BLINDING_convert(), BN_BLINDING_invert(), BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() return 1 on success and 0 if an error occurred.</p> <p>BN_BLINDING_is_current_thread() returns 1 if the current thread owns the BN_BLINDING object, 0 otherwise.</p> <p>BN_BLINDING_set_current_thread() doesn't return anything.</p> <p>BN_BLINDING_lock(), BN_BLINDING_unlock() return 1 if the operation succeeded or 0 on error.</p> <p>BN_BLINDING_get_flags() returns the currently set BN_BLINDING flags (a unsigned long value).</p> <p>BN_BLINDING_create_param() returns the newly created BN_BLINDING parameters or NULL on error.</p>"},{"location":"man3/BN_BLINDING_new/#history","title":"HISTORY","text":"<p>BN_BLINDING_thread_id() was first introduced in OpenSSL 1.0.0, and it deprecates BN_BLINDING_set_thread_id() and BN_BLINDING_get_thread_id().</p>"},{"location":"man3/BN_BLINDING_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2005-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_CTX_new/","title":"BN_CTX_new","text":""},{"location":"man3/BN_CTX_new/#name","title":"NAME","text":"<p>BN_CTX_new, BN_CTX_secure_new, BN_CTX_free - allocate and free BN_CTX structures</p>"},{"location":"man3/BN_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBN_CTX *BN_CTX_new(void);\n\nBN_CTX *BN_CTX_secure_new(void);\n\nvoid BN_CTX_free(BN_CTX *c);\n</code></pre>"},{"location":"man3/BN_CTX_new/#description","title":"DESCRIPTION","text":"<p>A BN_CTX is a structure that holds BIGNUM temporary variables used by library functions. Since dynamic memory allocation to create BIGNUMs is rather expensive when used in conjunction with repeated subroutine calls, the BN_CTX structure is used.</p> <p>BN_CTX_new() allocates and initializes a BN_CTX structure. BN_CTX_secure_new() allocates and initializes a BN_CTX structure but uses the secure heap (see CRYPTO_secure_malloc(3)) to hold the BIGNUMs.</p> <p>BN_CTX_free() frees the components of the BN_CTX and the structure itself. Since BN_CTX_start() is required in order to obtain BIGNUMs from the BN_CTX, in most cases BN_CTX_end() must be called before the BN_CTX may be freed by BN_CTX_free().  If c is NULL, nothing is done.</p> <p>A given BN_CTX must only be used by a single thread of execution.  No locking is performed, and the internal pool allocator will not properly handle multiple threads of execution.</p>"},{"location":"man3/BN_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>BN_CTX_new() and BN_CTX_secure_new() return a pointer to the BN_CTX. If the allocation fails, they return NULL and sets an error code that can be obtained by ERR_get_error(3).</p> <p>BN_CTX_free() has no return values.</p>"},{"location":"man3/BN_CTX_new/#removed-functionality","title":"REMOVED FUNCTIONALITY","text":"<pre><code>void BN_CTX_init(BN_CTX *c);\n</code></pre> <p>BN_CTX_init() is no longer available as of OpenSSL 1.1.0. Applications should replace use of BN_CTX_init with BN_CTX_new instead:</p> <pre><code>BN_CTX *ctx;\nctx = BN_CTX_new();\nif (!ctx)\n    /* error */\n...\nBN_CTX_free(ctx);\n</code></pre>"},{"location":"man3/BN_CTX_new/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_add(3), BN_CTX_start(3)</p>"},{"location":"man3/BN_CTX_new/#history","title":"HISTORY","text":"<p>BN_CTX_init() was removed in OpenSSL 1.1.0.</p>"},{"location":"man3/BN_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_CTX_start/","title":"BN_CTX_start","text":""},{"location":"man3/BN_CTX_start/#name","title":"NAME","text":"<p>BN_CTX_start, BN_CTX_get, BN_CTX_end - use temporary BIGNUM variables</p>"},{"location":"man3/BN_CTX_start/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nvoid BN_CTX_start(BN_CTX *ctx);\n\nBIGNUM *BN_CTX_get(BN_CTX *ctx);\n\nvoid BN_CTX_end(BN_CTX *ctx);\n</code></pre>"},{"location":"man3/BN_CTX_start/#description","title":"DESCRIPTION","text":"<p>These functions are used to obtain temporary BIGNUM variables from a BN_CTX (which can been created by using BN_CTX_new(3)) in order to save the overhead of repeatedly creating and freeing BIGNUMs in functions that are called from inside a loop.</p> <p>A function must call BN_CTX_start() first. Then, BN_CTX_get() may be called repeatedly to obtain temporary BIGNUMs. All BN_CTX_get() calls must be made before calling any other functions that use the ctx as an argument.</p> <p>Finally, BN_CTX_end() must be called before returning from the function. If ctx is NULL, nothing is done. When BN_CTX_end() is called, the BIGNUM pointers obtained from BN_CTX_get() become invalid.</p>"},{"location":"man3/BN_CTX_start/#return-values","title":"RETURN VALUES","text":"<p>BN_CTX_start() and BN_CTX_end() return no values.</p> <p>BN_CTX_get() returns a pointer to the BIGNUM, or NULL on error. Once BN_CTX_get() has failed, the subsequent calls will return NULL as well, so it is sufficient to check the return value of the last BN_CTX_get() call. In case of an error, an error code is set, which can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_CTX_start/#see-also","title":"SEE ALSO","text":"<p>BN_CTX_new(3)</p>"},{"location":"man3/BN_CTX_start/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_add/","title":"BN_add","text":""},{"location":"man3/BN_add/#name","title":"NAME","text":"<p>BN_add, BN_sub, BN_mul, BN_sqr, BN_div, BN_mod, BN_nnmod, BN_mod_add, BN_mod_sub, BN_mod_mul, BN_mod_sqr, BN_mod_sqrt, BN_exp, BN_mod_exp, BN_gcd - arithmetic operations on BIGNUMs</p>"},{"location":"man3/BN_add/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);\n\nint BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);\n\nint BN_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);\n\nint BN_sqr(BIGNUM *r, BIGNUM *a, BN_CTX *ctx);\n\nint BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *a, const BIGNUM *d,\n           BN_CTX *ctx);\n\nint BN_mod(BIGNUM *rem, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);\n\nint BN_nnmod(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);\n\nint BN_mod_add(BIGNUM *r, BIGNUM *a, BIGNUM *b, const BIGNUM *m,\n               BN_CTX *ctx);\n\nint BN_mod_sub(BIGNUM *r, BIGNUM *a, BIGNUM *b, const BIGNUM *m,\n               BN_CTX *ctx);\n\nint BN_mod_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, const BIGNUM *m,\n               BN_CTX *ctx);\n\nint BN_mod_sqr(BIGNUM *r, BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);\n\nBIGNUM *BN_mod_sqrt(BIGNUM *in, BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);\n\nint BN_exp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);\n\nint BN_mod_exp(BIGNUM *r, BIGNUM *a, const BIGNUM *p,\n               const BIGNUM *m, BN_CTX *ctx);\n\nint BN_gcd(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);\n</code></pre>"},{"location":"man3/BN_add/#description","title":"DESCRIPTION","text":"<p>BN_add() adds a and b and places the result in r (<code>r=a+b</code>). r may be the same BIGNUM as a or b.</p> <p>BN_sub() subtracts b from a and places the result in r (<code>r=a-b</code>). r may be the same BIGNUM as a or b.</p> <p>BN_mul() multiplies a and b and places the result in r (<code>r=a*b</code>). r may be the same BIGNUM as a or b. For multiplication by powers of 2, use BN_lshift(3).</p> <p>BN_sqr() takes the square of a and places the result in r (<code>r=a^2</code>). r and a may be the same BIGNUM. This function is faster than BN_mul(r,a,a).</p> <p>BN_div() divides a by d and places the result in dv and the remainder in rem (<code>dv=a/d, rem=a%d</code>). Either of dv and rem may be NULL, in which case the respective value is not returned. The result is rounded towards zero; thus if a is negative, the remainder will be zero or negative. For division by powers of 2, use BN_rshift(3).</p> <p>BN_mod() corresponds to BN_div() with dv set to NULL.</p> <p>BN_nnmod() reduces a modulo m and places the nonnegative remainder in r.</p> <p>BN_mod_add() adds a to b modulo m and places the nonnegative result in r.</p> <p>BN_mod_sub() subtracts b from a modulo m and places the nonnegative result in r.</p> <p>BN_mod_mul() multiplies a by b and finds the nonnegative remainder respective to modulus m (<code>r=(a*b) mod m</code>). r may be the same BIGNUM as a or b. For more efficient algorithms for repeated computations using the same modulus, see BN_mod_mul_montgomery(3) and BN_mod_mul_reciprocal(3).</p> <p>BN_mod_sqr() takes the square of a modulo m and places the result in r.</p> <p>BN_mod_sqrt() returns the modular square root of a such that <code>in^2 = a (mod p)</code>. The modulus p must be a prime, otherwise an error or an incorrect \"result\" will be returned. The result is stored into in which can be NULL. The result will be newly allocated in that case.</p> <p>BN_exp() raises a to the p-th power and places the result in r (<code>r=a^p</code>). This function is faster than repeated applications of BN_mul().</p> <p>BN_mod_exp() computes a to the p-th power modulo m (<code>r=a^p % m</code>). This function uses less time and space than BN_exp(). Do not call this function when m is even and any of the parameters have the BN_FLG_CONSTTIME flag set.</p> <p>BN_gcd() computes the greatest common divisor of a and b and places the result in r. r may be the same BIGNUM as a or b.</p> <p>For all functions, ctx is a previously allocated BN_CTX used for temporary variables; see BN_CTX_new(3).</p> <p>Unless noted otherwise, the result BIGNUM must be different from the arguments.</p>"},{"location":"man3/BN_add/#return-values","title":"RETURN VALUES","text":"<p>The BN_mod_sqrt() returns the result (possibly incorrect if p is not a prime), or NULL.</p> <p>For all remaining functions, 1 is returned for success, 0 on error. The return value should always be checked (e.g., <code>if (!BN_add(r,a,b)) goto err;</code>). The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_add/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_CTX_new(3), BN_add_word(3), BN_set_bit(3)</p>"},{"location":"man3/BN_add/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_add_word/","title":"BN_add_word","text":""},{"location":"man3/BN_add_word/#name","title":"NAME","text":"<p>BN_add_word, BN_sub_word, BN_mul_word, BN_div_word, BN_mod_word - arithmetic functions on BIGNUMs with integers</p>"},{"location":"man3/BN_add_word/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_add_word(BIGNUM *a, BN_ULONG w);\n\nint BN_sub_word(BIGNUM *a, BN_ULONG w);\n\nint BN_mul_word(BIGNUM *a, BN_ULONG w);\n\nBN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w);\n\nBN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w);\n</code></pre>"},{"location":"man3/BN_add_word/#description","title":"DESCRIPTION","text":"<p>These functions perform arithmetic operations on BIGNUMs with unsigned integers. They are much more efficient than the normal BIGNUM arithmetic operations.</p> <p>BN_add_word() adds w to a (<code>a+=w</code>).</p> <p>BN_sub_word() subtracts w from a (<code>a-=w</code>).</p> <p>BN_mul_word() multiplies a and w (<code>a*=w</code>).</p> <p>BN_div_word() divides a by w (<code>a/=w</code>) and returns the remainder.</p> <p>BN_mod_word() returns the remainder of a divided by w (<code>a%w</code>).</p> <p>For BN_div_word() and BN_mod_word(), w must not be 0.</p>"},{"location":"man3/BN_add_word/#return-values","title":"RETURN VALUES","text":"<p>BN_add_word(), BN_sub_word() and BN_mul_word() return 1 for success, 0 on error. The error codes can be obtained by ERR_get_error(3).</p> <p>BN_mod_word() and BN_div_word() return a%w on success and (BN_ULONG)-1 if an error occurred.</p>"},{"location":"man3/BN_add_word/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_add(3)</p>"},{"location":"man3/BN_add_word/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_bn2bin/","title":"BN_bn2bin","text":""},{"location":"man3/BN_bn2bin/#name","title":"NAME","text":"<p>BN_bn2binpad, BN_bn2bin, BN_bin2bn, BN_bn2lebinpad, BN_lebin2bn, BN_bn2hex, BN_bn2dec, BN_hex2bn, BN_dec2bn, BN_print, BN_print_fp, BN_bn2mpi, BN_mpi2bn - format conversions</p>"},{"location":"man3/BN_bn2bin/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_bn2bin(const BIGNUM *a, unsigned char *to);\nint BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen);\nBIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);\n\nint BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen);\nBIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret);\n\nchar *BN_bn2hex(const BIGNUM *a);\nchar *BN_bn2dec(const BIGNUM *a);\nint BN_hex2bn(BIGNUM **a, const char *str);\nint BN_dec2bn(BIGNUM **a, const char *str);\n\nint BN_print(BIO *fp, const BIGNUM *a);\nint BN_print_fp(FILE *fp, const BIGNUM *a);\n\nint BN_bn2mpi(const BIGNUM *a, unsigned char *to);\nBIGNUM *BN_mpi2bn(unsigned char *s, int len, BIGNUM *ret);\n</code></pre>"},{"location":"man3/BN_bn2bin/#description","title":"DESCRIPTION","text":"<p>BN_bn2bin() converts the absolute value of a into big-endian form and stores it at to. to must point to BN_num_bytes(a) bytes of memory.</p> <p>BN_bn2binpad() also converts the absolute value of a into big-endian form and stores it at to. tolen indicates the length of the output buffer to. The result is padded with zeros if necessary. If tolen is less than BN_num_bytes(a) an error is returned.</p> <p>BN_bin2bn() converts the positive integer in big-endian form of length len at s into a BIGNUM and places it in ret. If ret is NULL, a new BIGNUM is created.</p> <p>BN_bn2lebinpad() and BN_lebin2bn() are identical to BN_bn2binpad() and BN_bin2bn() except the buffer is in little-endian format.</p> <p>BN_bn2hex() and BN_bn2dec() return printable strings containing the hexadecimal and decimal encoding of a respectively. For negative numbers, the string is prefaced with a leading '-'. The string must be freed later using OPENSSL_free().</p> <p>BN_hex2bn() takes as many characters as possible from the string str, including the leading character '-' which means negative, to form a valid hexadecimal number representation and converts them to a BIGNUM and stores it in **a. If *a is NULL, a new BIGNUM is created. If a is NULL, it only computes the length of valid representation. A \"negative zero\" is converted to zero. BN_dec2bn() is the same using the decimal system.</p> <p>BN_print() and BN_print_fp() write the hexadecimal encoding of a, with a leading '-' for negative numbers, to the BIO or FILE fp.</p> <p>BN_bn2mpi() and BN_mpi2bn() convert BIGNUMs from and to a format that consists of the number's length in bytes represented as a 4-byte big-endian number, and the number itself in big-endian format, where the most significant bit signals a negative number (the representation of numbers with the MSB set is prefixed with null byte).</p> <p>BN_bn2mpi() stores the representation of a at to, where to must be large enough to hold the result. The size can be determined by calling BN_bn2mpi(a, NULL).</p> <p>BN_mpi2bn() converts the len bytes long representation at s to a BIGNUM and stores it at ret, or in a newly allocated BIGNUM if ret is NULL.</p>"},{"location":"man3/BN_bn2bin/#return-values","title":"RETURN VALUES","text":"<p>BN_bn2bin() returns the length of the big-endian number placed at to. BN_bin2bn() returns the BIGNUM, NULL on error.</p> <p>BN_bn2binpad() returns the number of bytes written or -1 if the supplied buffer is too small.</p> <p>BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL on error. BN_hex2bn() and BN_dec2bn() return the number of characters used in parsing, or 0 on error, in which case no new BIGNUM will be created.</p> <p>BN_print_fp() and BN_print() return 1 on success, 0 on write errors.</p> <p>BN_bn2mpi() returns the length of the representation. BN_mpi2bn() returns the BIGNUM, and NULL on error.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_bn2bin/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_zero(3), ASN1_INTEGER_to_BN(3), BN_num_bytes(3)</p>"},{"location":"man3/BN_bn2bin/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_cmp/","title":"BN_cmp","text":""},{"location":"man3/BN_cmp/#name","title":"NAME","text":"<p>BN_cmp, BN_ucmp, BN_is_zero, BN_is_one, BN_is_word, BN_abs_is_word, BN_is_odd - BIGNUM comparison and test functions</p>"},{"location":"man3/BN_cmp/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_cmp(const BIGNUM *a, const BIGNUM *b);\nint BN_ucmp(const BIGNUM *a, const BIGNUM *b);\n\nint BN_is_zero(const BIGNUM *a);\nint BN_is_one(const BIGNUM *a);\nint BN_is_word(const BIGNUM *a, const BN_ULONG w);\nint BN_abs_is_word(const BIGNUM *a, const BN_ULONG w);\nint BN_is_odd(const BIGNUM *a);\n</code></pre>"},{"location":"man3/BN_cmp/#description","title":"DESCRIPTION","text":"<p>BN_cmp() compares the numbers a and b. BN_ucmp() compares their absolute values.</p> <p>BN_is_zero(), BN_is_one(), BN_is_word() and BN_abs_is_word() test if a equals 0, 1, w, or |w| respectively. BN_is_odd() tests if a is odd.</p>"},{"location":"man3/BN_cmp/#return-values","title":"RETURN VALUES","text":"<p>BN_cmp() returns -1 if a &lt; b, 0 if a == b and 1 if a &gt; b. BN_ucmp() is the same using the absolute values of a and b.</p> <p>BN_is_zero(), BN_is_one() BN_is_word(), BN_abs_is_word() and BN_is_odd() return 1 if the condition is true, 0 otherwise.</p>"},{"location":"man3/BN_cmp/#history","title":"HISTORY","text":"<p>Prior to OpenSSL 1.1.0, BN_is_zero(), BN_is_one(), BN_is_word(), BN_abs_is_word() and BN_is_odd() were macros.</p>"},{"location":"man3/BN_cmp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_copy/","title":"BN_copy","text":""},{"location":"man3/BN_copy/#name","title":"NAME","text":"<p>BN_copy, BN_dup, BN_with_flags - copy BIGNUMs</p>"},{"location":"man3/BN_copy/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBIGNUM *BN_copy(BIGNUM *to, const BIGNUM *from);\n\nBIGNUM *BN_dup(const BIGNUM *from);\n\nvoid BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags);\n</code></pre>"},{"location":"man3/BN_copy/#description","title":"DESCRIPTION","text":"<p>BN_copy() copies from to to. BN_dup() creates a new BIGNUM containing the value from.</p> <p>BN_with_flags creates a temporary shallow copy of b in dest. It places significant restrictions on the copied data. Applications that do no adhere to these restrictions may encounter unexpected side effects or crashes. For that reason use of this function is discouraged. Any flags provided in flags will be set in dest in addition to any flags already set in b. For example this might commonly be used to create a temporary copy of a BIGNUM with the BN_FLG_CONSTTIME flag set for constant time operations. The temporary copy in dest will share some internal state with b. For this reason the following restrictions apply to the use of dest:</p> <ul> <li>dest should be a newly allocated BIGNUM obtained via a call to BN_new(). It should not have been used for other purposes or initialised in any way.</li> <li>dest must only be used in \"read-only\" operations, i.e. typically those functions where the relevant parameter is declared \"const\".</li> <li>dest must be used and freed before any further subsequent use of b</li> </ul>"},{"location":"man3/BN_copy/#return-values","title":"RETURN VALUES","text":"<p>BN_copy() returns to on success, NULL on error. BN_dup() returns the new BIGNUM, and NULL on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_copy/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/BN_copy/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_generate_prime/","title":"BN_generate_prime","text":""},{"location":"man3/BN_generate_prime/#name","title":"NAME","text":"<p>BN_generate_prime_ex, BN_is_prime_ex, BN_is_prime_fasttest_ex, BN_GENCB_call, BN_GENCB_new, BN_GENCB_free, BN_GENCB_set_old, BN_GENCB_set, BN_GENCB_get_arg, BN_generate_prime, BN_is_prime, BN_is_prime_fasttest - generate primes and test for primality</p>"},{"location":"man3/BN_generate_prime/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,\n                         const BIGNUM *rem, BN_GENCB *cb);\n\nint BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);\n\nint BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,\n                            int do_trial_division, BN_GENCB *cb);\n\nint BN_GENCB_call(BN_GENCB *cb, int a, int b);\n\nBN_GENCB *BN_GENCB_new(void);\n\nvoid BN_GENCB_free(BN_GENCB *cb);\n\nvoid BN_GENCB_set_old(BN_GENCB *gencb,\n                      void (*callback)(int, int, void *), void *cb_arg);\n\nvoid BN_GENCB_set(BN_GENCB *gencb,\n                  int (*callback)(int, int, BN_GENCB *), void *cb_arg);\n\nvoid *BN_GENCB_get_arg(BN_GENCB *cb);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x00908000L\nBIGNUM *BN_generate_prime(BIGNUM *ret, int num, int safe, BIGNUM *add,\n                          BIGNUM *rem, void (*callback)(int, int, void *),\n                          void *cb_arg);\n\nint BN_is_prime(const BIGNUM *a, int checks,\n                void (*callback)(int, int, void *), BN_CTX *ctx, void *cb_arg);\n\nint BN_is_prime_fasttest(const BIGNUM *a, int checks,\n                         void (*callback)(int, int, void *), BN_CTX *ctx,\n                         void *cb_arg, int do_trial_division);\n#endif\n</code></pre>"},{"location":"man3/BN_generate_prime/#description","title":"DESCRIPTION","text":"<p>BN_generate_prime_ex() generates a pseudo-random prime number of at least bit length bits. The returned number is probably prime with a negligible error. If add is NULL the returned prime number will have exact bit length bits with the top most two bits set.</p> <p>If ret is not NULL, it will be used to store the number.</p> <p>If cb is not NULL, it is used as follows:</p> <ul> <li>BN_GENCB_call(cb, 0, i) is called after generating the i-th potential prime number.</li> <li>While the number is being tested for primality, BN_GENCB_call(cb, 1, j) is called as described below.</li> <li>When a prime has been found, BN_GENCB_call(cb, 2, i) is called.</li> <li>The callers of BN_generate_prime_ex() may call BN_GENCB_call(cb, i, j) with other values as described in their respective man pages; see \"SEE ALSO\".</li> </ul> <p>The prime may have to fulfill additional requirements for use in Diffie-Hellman key exchange:</p> <p>If add is not NULL, the prime will fulfill the condition p % add == rem (p % add == 1 if rem == NULL) in order to suit a given generator.</p> <p>If safe is true, it will be a safe prime (i.e. a prime p so that (p-1)/2 is also prime). If safe is true, and rem == NULL the condition will be p % add == 3. It is recommended that add is a multiple of 4.</p> <p>The random generator must be seeded prior to calling BN_generate_prime_ex(). If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>BN_is_prime_ex() and BN_is_prime_fasttest_ex() test if the number p is prime.  The following tests are performed until one of them shows that p is composite; if p passes all these tests, it is considered prime.</p> <p>BN_is_prime_fasttest_ex(), when called with do_trial_division == 1, first attempts trial division by a number of small primes; if no divisors are found by this test and cb is not NULL, BN_GENCB_call(cb, 1, -1) is called. If do_trial_division == 0, this test is skipped.</p> <p>Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a Miller-Rabin probabilistic primality test with nchecks iterations. If nchecks == BN_prime_checks, a number of iterations is used that yields a false positive rate of at most 2^-64 for random input. The error rate depends on the size of the prime and goes down for bigger primes. The rate is 2^-80 starting at 308 bits, 2^-112 at 852 bits, 2^-128 at 1080 bits, 2^-192 at 3747 bits and 2^-256 at 6394 bits.</p> <p>When the source of the prime is not random or not trusted, the number of checks needs to be much higher to reach the same level of assurance: It should equal half of the targeted security level in bits (rounded up to the next integer if necessary). For instance, to reach the 128 bit security level, nchecks should be set to 64.</p> <p>If cb is not NULL, BN_GENCB_call(cb, 1, j) is called after the j-th iteration (j = 0, 1, ...). ctx is a preallocated BN_CTX (to save the overhead of allocating and freeing the structure in a loop), or NULL.</p> <p>BN_GENCB_call() calls the callback function held in the BN_GENCB structure and passes the ints a and b as arguments. There are two types of BN_GENCB structure that are supported: \"new\" style and \"old\" style. New programs should prefer the \"new\" style, whilst the \"old\" style is provided for backwards compatibility purposes.</p> <p>A BN_GENCB structure should be created through a call to BN_GENCB_new(), and freed through a call to BN_GENCB_free().</p> <p>For \"new\" style callbacks a BN_GENCB structure should be initialised with a call to BN_GENCB_set(), where gencb is a BN_GENCB *, callback is of type int (*callback)(int, int, BN_GENCB *) and cb_arg is a void *. \"Old\" style callbacks are the same except they are initialised with a call to BN_GENCB_set_old() and callback is of type void (*callback)(int, int, void *).</p> <p>A callback is invoked through a call to BN_GENCB_call. This will check the type of the callback and will invoke callback(a, b, gencb) for new style callbacks or callback(a, b, cb_arg) for old style.</p> <p>It is possible to obtain the argument associated with a BN_GENCB structure (set via a call to BN_GENCB_set or BN_GENCB_set_old) using BN_GENCB_get_arg.</p> <p>BN_generate_prime() (deprecated) works in the same way as BN_generate_prime_ex() but expects an old-style callback function directly in the callback parameter, and an argument to pass to it in the cb_arg. BN_is_prime() and BN_is_prime_fasttest() can similarly be compared to BN_is_prime_ex() and BN_is_prime_fasttest_ex(), respectively.</p>"},{"location":"man3/BN_generate_prime/#return-values","title":"RETURN VALUES","text":"<p>BN_generate_prime_ex() return 1 on success or 0 on error.</p> <p>BN_is_prime_ex(), BN_is_prime_fasttest_ex(), BN_is_prime() and BN_is_prime_fasttest() return 0 if the number is composite, 1 if it is prime with an error probability of less than 0.25^nchecks, and -1 on error.</p> <p>BN_generate_prime() returns the prime number on success, NULL otherwise.</p> <p>BN_GENCB_new returns a pointer to a BN_GENCB structure on success, or NULL otherwise.</p> <p>BN_GENCB_get_arg returns the argument previously associated with a BN_GENCB structure.</p> <p>Callback functions should return 1 on success or 0 on error.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_generate_prime/#removed-functionality","title":"REMOVED FUNCTIONALITY","text":"<p>As of OpenSSL 1.1.0 it is no longer possible to create a BN_GENCB structure directly, as in:</p> <pre><code>BN_GENCB callback;\n</code></pre> <p>Instead applications should create a BN_GENCB structure using BN_GENCB_new:</p> <pre><code>BN_GENCB *callback;\ncallback = BN_GENCB_new();\nif (!callback)\n    /* error */\n...\nBN_GENCB_free(callback);\n</code></pre>"},{"location":"man3/BN_generate_prime/#see-also","title":"SEE ALSO","text":"<p>DH_generate_parameters(3), DSA_generate_parameters(3), RSA_generate_key(3), ERR_get_error(3), RAND_bytes(3), RAND(7)</p>"},{"location":"man3/BN_generate_prime/#history","title":"HISTORY","text":"<p>The BN_GENCB_new(), BN_GENCB_free(), and BN_GENCB_get_arg() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/BN_generate_prime/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_mod_inverse/","title":"BN_mod_inverse","text":""},{"location":"man3/BN_mod_inverse/#name","title":"NAME","text":"<p>BN_mod_inverse - compute inverse modulo n</p>"},{"location":"man3/BN_mod_inverse/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBIGNUM *BN_mod_inverse(BIGNUM *r, BIGNUM *a, const BIGNUM *n,\n                       BN_CTX *ctx);\n</code></pre>"},{"location":"man3/BN_mod_inverse/#description","title":"DESCRIPTION","text":"<p>BN_mod_inverse() computes the inverse of a modulo n places the result in r (<code>(a*r)%n==1</code>). If r is NULL, a new BIGNUM is created.</p> <p>ctx is a previously allocated BN_CTX used for temporary variables. r may be the same BIGNUM as a or n.</p>"},{"location":"man3/BN_mod_inverse/#return-values","title":"RETURN VALUES","text":"<p>BN_mod_inverse() returns the BIGNUM containing the inverse, and NULL on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_mod_inverse/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_add(3)</p>"},{"location":"man3/BN_mod_inverse/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_mod_mul_montgomery/","title":"BN_mod_mul_montgomery","text":""},{"location":"man3/BN_mod_mul_montgomery/#name","title":"NAME","text":"<p>BN_mod_mul_montgomery, BN_MONT_CTX_new, BN_MONT_CTX_free, BN_MONT_CTX_set, BN_MONT_CTX_copy, BN_from_montgomery, BN_to_montgomery - Montgomery multiplication</p>"},{"location":"man3/BN_mod_mul_montgomery/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBN_MONT_CTX *BN_MONT_CTX_new(void);\nvoid BN_MONT_CTX_free(BN_MONT_CTX *mont);\n\nint BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *m, BN_CTX *ctx);\nBN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);\n\nint BN_mod_mul_montgomery(BIGNUM *r, BIGNUM *a, BIGNUM *b,\n                          BN_MONT_CTX *mont, BN_CTX *ctx);\n\nint BN_from_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont,\n                       BN_CTX *ctx);\n\nint BN_to_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont,\n                     BN_CTX *ctx);\n</code></pre>"},{"location":"man3/BN_mod_mul_montgomery/#description","title":"DESCRIPTION","text":"<p>These functions implement Montgomery multiplication. They are used automatically when BN_mod_exp(3) is called with suitable input, but they may be useful when several operations are to be performed using the same modulus.</p> <p>BN_MONT_CTX_new() allocates and initializes a BN_MONT_CTX structure.</p> <p>BN_MONT_CTX_set() sets up the mont structure from the modulus m by precomputing its inverse and a value R.</p> <p>BN_MONT_CTX_copy() copies the BN_MONT_CTX from to to.</p> <p>BN_MONT_CTX_free() frees the components of the BN_MONT_CTX, and, if it was created by BN_MONT_CTX_new(), also the structure itself. If mont is NULL, nothing is done.</p> <p>BN_mod_mul_montgomery() computes Mont(a,b):=a*b*R^-1 and places the result in r.</p> <p>BN_from_montgomery() performs the Montgomery reduction r = a*R^-1.</p> <p>BN_to_montgomery() computes Mont(a,R^2), i.e. a*R. Note that a must be nonnegative and smaller than the modulus.</p> <p>For all functions, ctx is a previously allocated BN_CTX used for temporary variables.</p>"},{"location":"man3/BN_mod_mul_montgomery/#return-values","title":"RETURN VALUES","text":"<p>BN_MONT_CTX_new() returns the newly allocated BN_MONT_CTX, and NULL on error.</p> <p>BN_MONT_CTX_free() has no return value.</p> <p>For the other functions, 1 is returned for success, 0 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_mod_mul_montgomery/#warnings","title":"WARNINGS","text":"<p>The inputs must be reduced modulo m, otherwise the result will be outside the expected range.</p>"},{"location":"man3/BN_mod_mul_montgomery/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_add(3), BN_CTX_new(3)</p>"},{"location":"man3/BN_mod_mul_montgomery/#history","title":"HISTORY","text":"<p>BN_MONT_CTX_init() was removed in OpenSSL 1.1.0</p>"},{"location":"man3/BN_mod_mul_montgomery/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_mod_mul_reciprocal/","title":"BN_mod_mul_reciprocal","text":""},{"location":"man3/BN_mod_mul_reciprocal/#name","title":"NAME","text":"<p>BN_mod_mul_reciprocal, BN_div_recp, BN_RECP_CTX_new, BN_RECP_CTX_free, BN_RECP_CTX_set - modular multiplication using reciprocal</p>"},{"location":"man3/BN_mod_mul_reciprocal/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBN_RECP_CTX *BN_RECP_CTX_new(void);\nvoid BN_RECP_CTX_free(BN_RECP_CTX *recp);\n\nint BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *m, BN_CTX *ctx);\n\nint BN_div_recp(BIGNUM *dv, BIGNUM *rem, BIGNUM *a, BN_RECP_CTX *recp,\n                BN_CTX *ctx);\n\nint BN_mod_mul_reciprocal(BIGNUM *r, BIGNUM *a, BIGNUM *b,\n                          BN_RECP_CTX *recp, BN_CTX *ctx);\n</code></pre>"},{"location":"man3/BN_mod_mul_reciprocal/#description","title":"DESCRIPTION","text":"<p>BN_mod_mul_reciprocal() can be used to perform an efficient BN_mod_mul(3) operation when the operation will be performed repeatedly with the same modulus. It computes r=(a*b)%m using recp=1/m, which is set as described below.  ctx is a previously allocated BN_CTX used for temporary variables.</p> <p>BN_RECP_CTX_new() allocates and initializes a BN_RECP structure.</p> <p>BN_RECP_CTX_free() frees the components of the BN_RECP, and, if it was created by BN_RECP_CTX_new(), also the structure itself. If recp is NULL, nothing is done.</p> <p>BN_RECP_CTX_set() stores m in recp and sets it up for computing 1/m and shifting it left by BN_num_bits(m)+1 to make it an integer. The result and the number of bits it was shifted left will later be stored in recp.</p> <p>BN_div_recp() divides a by m using recp. It places the quotient in dv and the remainder in rem.</p> <p>The BN_RECP_CTX structure cannot be shared between threads.</p>"},{"location":"man3/BN_mod_mul_reciprocal/#return-values","title":"RETURN VALUES","text":"<p>BN_RECP_CTX_new() returns the newly allocated BN_RECP_CTX, and NULL on error.</p> <p>BN_RECP_CTX_free() has no return value.</p> <p>For the other functions, 1 is returned for success, 0 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_mod_mul_reciprocal/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), BN_add(3), BN_CTX_new(3)</p>"},{"location":"man3/BN_mod_mul_reciprocal/#history","title":"HISTORY","text":"<p>BN_RECP_CTX_init() was removed in OpenSSL 1.1.0</p>"},{"location":"man3/BN_mod_mul_reciprocal/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_new/","title":"BN_new","text":""},{"location":"man3/BN_new/#name","title":"NAME","text":"<p>BN_new, BN_secure_new, BN_clear, BN_free, BN_clear_free - allocate and free BIGNUMs</p>"},{"location":"man3/BN_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nBIGNUM *BN_new(void);\n\nBIGNUM *BN_secure_new(void);\n\nvoid BN_clear(BIGNUM *a);\n\nvoid BN_free(BIGNUM *a);\n\nvoid BN_clear_free(BIGNUM *a);\n</code></pre>"},{"location":"man3/BN_new/#description","title":"DESCRIPTION","text":"<p>BN_new() allocates and initializes a BIGNUM structure. BN_secure_new() does the same except that the secure heap OPENSSL_secure_malloc(3) is used to store the value.</p> <p>BN_clear() is used to destroy sensitive data such as keys when they are no longer needed. It erases the memory used by a and sets it to the value 0. If a is NULL, nothing is done.</p> <p>BN_free() frees the components of the BIGNUM, and if it was created by BN_new(), also the structure itself. BN_clear_free() additionally overwrites the data before the memory is returned to the system. If a is NULL, nothing is done.</p>"},{"location":"man3/BN_new/#return-values","title":"RETURN VALUES","text":"<p>BN_new() and BN_secure_new() return a pointer to the BIGNUM initialised to the value 0. If the allocation fails, they return NULL and set an error code that can be obtained by ERR_get_error(3).</p> <p>BN_clear(), BN_free() and BN_clear_free() have no return values.</p>"},{"location":"man3/BN_new/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), OPENSSL_secure_malloc(3)</p>"},{"location":"man3/BN_new/#history","title":"HISTORY","text":"<p>BN_init() was removed in OpenSSL 1.1.0; use BN_new() instead.</p>"},{"location":"man3/BN_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_num_bytes/","title":"BN_num_bytes","text":""},{"location":"man3/BN_num_bytes/#name","title":"NAME","text":"<p>BN_num_bits, BN_num_bytes, BN_num_bits_word - get BIGNUM size</p>"},{"location":"man3/BN_num_bytes/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_num_bytes(const BIGNUM *a);\n\nint BN_num_bits(const BIGNUM *a);\n\nint BN_num_bits_word(BN_ULONG w);\n</code></pre>"},{"location":"man3/BN_num_bytes/#description","title":"DESCRIPTION","text":"<p>BN_num_bytes() returns the size of a BIGNUM in bytes.</p> <p>BN_num_bits_word() returns the number of significant bits in a word. If we take 0x00000432 as an example, it returns 11, not 16, not 32. Basically, except for a zero, it returns floor(log2(w))+1.</p> <p>BN_num_bits() returns the number of significant bits in a BIGNUM, following the same principle as BN_num_bits_word().</p> <p>BN_num_bytes() is a macro.</p>"},{"location":"man3/BN_num_bytes/#return-values","title":"RETURN VALUES","text":"<p>The size.</p>"},{"location":"man3/BN_num_bytes/#notes","title":"NOTES","text":"<p>Some have tried using BN_num_bits() on individual numbers in RSA keys, DH keys and DSA keys, and found that they don't always come up with the number of bits they expected (something like 512, 1024, 2048, ...).  This is because generating a number with some specific number of bits doesn't always set the highest bits, thereby making the number of significant bits a little lower.  If you want to know the \"key size\" of such a key, either use functions like RSA_size(), DH_size() and DSA_size(), or use BN_num_bytes() and multiply with 8 (although there's no real guarantee that will match the \"key size\", just a lot more probability).</p>"},{"location":"man3/BN_num_bytes/#see-also","title":"SEE ALSO","text":"<p>DH_size(3), DSA_size(3), RSA_size(3)</p>"},{"location":"man3/BN_num_bytes/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_rand/","title":"BN_rand","text":""},{"location":"man3/BN_rand/#name","title":"NAME","text":"<p>BN_rand, BN_priv_rand, BN_pseudo_rand, BN_rand_range, BN_priv_rand_range, BN_pseudo_rand_range - generate pseudo-random number</p>"},{"location":"man3/BN_rand/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_rand(BIGNUM *rnd, int bits, int top, int bottom);\n\nint BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom);\n\nint BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);\n\nint BN_rand_range(BIGNUM *rnd, BIGNUM *range);\n\nint BN_priv_rand_range(BIGNUM *rnd, BIGNUM *range);\n\nint BN_pseudo_rand_range(BIGNUM *rnd, BIGNUM *range);\n</code></pre>"},{"location":"man3/BN_rand/#description","title":"DESCRIPTION","text":"<p>BN_rand() generates a cryptographically strong pseudo-random number of bits in length and stores it in rnd. If bits is less than zero, or too small to accommodate the requirements specified by the top and bottom parameters, an error is returned. The top parameters specifies requirements on the most significant bit of the generated number. If it is BN_RAND_TOP_ANY, there is no constraint. If it is BN_RAND_TOP_ONE, the top bit must be one. If it is BN_RAND_TOP_TWO, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*bits length. If bottom is BN_RAND_BOTTOM_ODD, the number will be odd; if it is BN_RAND_BOTTOM_ANY it can be odd or even. If bits is 1 then top cannot also be BN_RAND_TOP_TWO.</p> <p>BN_rand_range() generates a cryptographically strong pseudo-random number rnd in the range 0 &lt;= rnd &lt; range.</p> <p>BN_priv_rand() and BN_priv_rand_range() have the same semantics as BN_rand() and BN_rand_range() respectively.  They are intended to be used for generating values that should remain private, and mirror the same difference between RAND_bytes(3) and RAND_priv_bytes(3).</p>"},{"location":"man3/BN_rand/#notes","title":"NOTES","text":"<p>Always check the error return value of these functions and do not take randomness for granted: an error occurs if the CSPRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence.</p>"},{"location":"man3/BN_rand/#return-values","title":"RETURN VALUES","text":"<p>The functions return 1 on success, 0 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_rand/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RAND_add(3), RAND_bytes(3), RAND_priv_bytes(3), RAND(7), RAND_DRBG(7)</p>"},{"location":"man3/BN_rand/#history","title":"HISTORY","text":"<ul> <li>Starting with OpenSSL release 1.1.0, BN_pseudo_rand() has been identical to BN_rand() and BN_pseudo_rand_range() has been identical to BN_rand_range(). The \"pseudo\" functions should not be used and may be deprecated in a future release.</li> <li>The BN_priv_rand() and BN_priv_rand_range() functions were added in OpenSSL 1.1.1.</li> </ul>"},{"location":"man3/BN_rand/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_security_bits/","title":"BN_security_bits","text":""},{"location":"man3/BN_security_bits/#name","title":"NAME","text":"<p>BN_security_bits - returns bits of security based on given numbers</p>"},{"location":"man3/BN_security_bits/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_security_bits(int L, int N);\n</code></pre>"},{"location":"man3/BN_security_bits/#description","title":"DESCRIPTION","text":"<p>BN_security_bits() returns the number of bits of security provided by a specific algorithm and a particular key size. The bits of security is defined in NIST SP800-57. Currently, BN_security_bits() support two types of asymmetric algorithms: the FFC (Finite Field Cryptography) and IFC (Integer Factorization Cryptography). For FFC, e.g., DSA and DH, both parameters L and N are used to decide the bits of security, where L is the size of the public key and N is the size of the private key. For IFC, e.g., RSA, only L is used and it's commonly considered to be the key size (modulus).</p>"},{"location":"man3/BN_security_bits/#return-values","title":"RETURN VALUES","text":"<p>Number of security bits.</p>"},{"location":"man3/BN_security_bits/#notes","title":"NOTES","text":"<p>ECC (Elliptic Curve Cryptography) is not covered by the BN_security_bits() function. The symmetric algorithms are not covered neither.</p>"},{"location":"man3/BN_security_bits/#see-also","title":"SEE ALSO","text":"<p>DH_security_bits(3), DSA_security_bits(3), RSA_security_bits(3)</p>"},{"location":"man3/BN_security_bits/#history","title":"HISTORY","text":"<p>The BN_security_bits() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/BN_security_bits/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_set_bit/","title":"BN_set_bit","text":""},{"location":"man3/BN_set_bit/#name","title":"NAME","text":"<p>BN_set_bit, BN_clear_bit, BN_is_bit_set, BN_mask_bits, BN_lshift, BN_lshift1, BN_rshift, BN_rshift1 - bit operations on BIGNUMs</p>"},{"location":"man3/BN_set_bit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nint BN_set_bit(BIGNUM *a, int n);\nint BN_clear_bit(BIGNUM *a, int n);\n\nint BN_is_bit_set(const BIGNUM *a, int n);\n\nint BN_mask_bits(BIGNUM *a, int n);\n\nint BN_lshift(BIGNUM *r, const BIGNUM *a, int n);\nint BN_lshift1(BIGNUM *r, BIGNUM *a);\n\nint BN_rshift(BIGNUM *r, BIGNUM *a, int n);\nint BN_rshift1(BIGNUM *r, BIGNUM *a);\n</code></pre>"},{"location":"man3/BN_set_bit/#description","title":"DESCRIPTION","text":"<p>BN_set_bit() sets bit n in a to 1 (<code>a|=(1&lt;&lt;n)</code>). The number is expanded if necessary.</p> <p>BN_clear_bit() sets bit n in a to 0 (<code>a&amp;=~(1&lt;&lt;n)</code>). An error occurs if a is shorter than n bits.</p> <p>BN_is_bit_set() tests if bit n in a is set.</p> <p>BN_mask_bits() truncates a to an n bit number (<code>a&amp;=~((~0)&lt;&lt;n)</code>).  An error occurs if a already is shorter than n bits.</p> <p>BN_lshift() shifts a left by n bits and places the result in r (<code>r=a*2^n</code>). Note that n must be nonnegative. BN_lshift1() shifts a left by one and places the result in r (<code>r=2*a</code>).</p> <p>BN_rshift() shifts a right by n bits and places the result in r (<code>r=a/2^n</code>). Note that n must be nonnegative. BN_rshift1() shifts a right by one and places the result in r (<code>r=a/2</code>).</p> <p>For the shift functions, r and a may be the same variable.</p>"},{"location":"man3/BN_set_bit/#return-values","title":"RETURN VALUES","text":"<p>BN_is_bit_set() returns 1 if the bit is set, 0 otherwise.</p> <p>All other functions return 1 for success, 0 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/BN_set_bit/#see-also","title":"SEE ALSO","text":"<p>BN_num_bytes(3), BN_add(3)</p>"},{"location":"man3/BN_set_bit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_swap/","title":"BN_swap","text":""},{"location":"man3/BN_swap/#name","title":"NAME","text":"<p>BN_swap - exchange BIGNUMs</p>"},{"location":"man3/BN_swap/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nvoid BN_swap(BIGNUM *a, BIGNUM *b);\n</code></pre>"},{"location":"man3/BN_swap/#description","title":"DESCRIPTION","text":"<p>BN_swap() exchanges the values of a and b.</p>"},{"location":"man3/BN_swap/#return-values","title":"RETURN VALUES","text":"<p>BN_swap() does not return a value.</p>"},{"location":"man3/BN_swap/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BN_zero/","title":"BN_zero","text":""},{"location":"man3/BN_zero/#name","title":"NAME","text":"<p>BN_zero, BN_one, BN_value_one, BN_set_word, BN_get_word - BIGNUM assignment operations</p>"},{"location":"man3/BN_zero/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bn.h&gt;\n\nvoid BN_zero(BIGNUM *a);\nint BN_one(BIGNUM *a);\n\nconst BIGNUM *BN_value_one(void);\n\nint BN_set_word(BIGNUM *a, BN_ULONG w);\nunsigned BN_ULONG BN_get_word(BIGNUM *a);\n</code></pre>"},{"location":"man3/BN_zero/#description","title":"DESCRIPTION","text":"<p>BN_ULONG is a macro that will be an unsigned integral type optimized for the most efficient implementation on the local platform.</p> <p>BN_zero(), BN_one() and BN_set_word() set a to the values 0, 1 and w respectively.  BN_zero() and BN_one() are macros.</p> <p>BN_value_one() returns a BIGNUM constant of value 1. This constant is useful for use in comparisons and assignment.</p> <p>BN_get_word() returns a, if it can be represented as a BN_ULONG.</p>"},{"location":"man3/BN_zero/#return-values","title":"RETURN VALUES","text":"<p>BN_get_word() returns the value a, or all-bits-set if a cannot be represented as a single integer.</p> <p>BN_one() and BN_set_word() return 1 on success, 0 otherwise. BN_value_one() returns the constant. BN_zero() never fails and returns no value.</p>"},{"location":"man3/BN_zero/#bugs","title":"BUGS","text":"<p>If a BIGNUM is equal to the value of all-bits-set, it will collide with the error condition returned by BN_get_word() which uses that as an error value.</p> <p>BN_ULONG should probably be a typedef.</p>"},{"location":"man3/BN_zero/#see-also","title":"SEE ALSO","text":"<p>BN_bn2bin(3)</p>"},{"location":"man3/BN_zero/#history","title":"HISTORY","text":"<p>In OpenSSL 0.9.8, BN_zero() was changed to not return a value; previous versions returned an int.</p>"},{"location":"man3/BN_zero/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/BUF_MEM_new/","title":"BUF_MEM_new","text":""},{"location":"man3/BUF_MEM_new/#name","title":"NAME","text":"<p>BUF_MEM_new, BUF_MEM_new_ex, BUF_MEM_free, BUF_MEM_grow, BUF_MEM_grow_clean, BUF_reverse - simple character array structure</p>"},{"location":"man3/BUF_MEM_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/buffer.h&gt;\n\nBUF_MEM *BUF_MEM_new(void);\n\nBUF_MEM *BUF_MEM_new_ex(unsigned long flags);\n\nvoid BUF_MEM_free(BUF_MEM *a);\n\nint BUF_MEM_grow(BUF_MEM *str, int len);\nsize_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len);\n\nvoid BUF_reverse(unsigned char *out, const unsigned char *in, size_t size);\n</code></pre>"},{"location":"man3/BUF_MEM_new/#description","title":"DESCRIPTION","text":"<p>The buffer library handles simple character arrays. Buffers are used for various purposes in the library, most notably memory BIOs.</p> <p>BUF_MEM_new() allocates a new buffer of zero size.</p> <p>BUF_MEM_new_ex() allocates a buffer with the specified flags. The flag BUF_MEM_FLAG_SECURE specifies that the data pointer should be allocated on the secure heap; see CRYPTO_secure_malloc(3).</p> <p>BUF_MEM_free() frees up an already existing buffer. The data is zeroed before freeing up in case the buffer contains sensitive data.</p> <p>BUF_MEM_grow() changes the size of an already existing buffer to len. Any data already in the buffer is preserved if it increases in size.</p> <p>BUF_MEM_grow_clean() is similar to BUF_MEM_grow() but it sets any free'd or additionally-allocated memory to zero.</p> <p>BUF_reverse() reverses size bytes at in into out.  If in is NULL, the array is reversed in-place.</p>"},{"location":"man3/BUF_MEM_new/#return-values","title":"RETURN VALUES","text":"<p>BUF_MEM_new() returns the buffer or NULL on error.</p> <p>BUF_MEM_free() has no return value.</p> <p>BUF_MEM_grow() and BUF_MEM_grow_clean() return zero on error or the new size (i.e., len).</p>"},{"location":"man3/BUF_MEM_new/#see-also","title":"SEE ALSO","text":"<p>bio(7), CRYPTO_secure_malloc(3).</p>"},{"location":"man3/BUF_MEM_new/#history","title":"HISTORY","text":"<p>The BUF_MEM_new_ex() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/BUF_MEM_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_add0_cert/","title":"CMS_add0_cert","text":""},{"location":"man3/CMS_add0_cert/#name","title":"NAME","text":"<p>CMS_add0_cert, CMS_add1_cert, CMS_get1_certs, CMS_add0_crl, CMS_add1_crl, CMS_get1_crls - CMS certificate and CRL utility functions</p>"},{"location":"man3/CMS_add0_cert/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);\nint CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);\nSTACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms);\n\nint CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);\nint CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);\nSTACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms);\n</code></pre>"},{"location":"man3/CMS_add0_cert/#description","title":"DESCRIPTION","text":"<p>CMS_add0_cert() and CMS_add1_cert() add certificate cert to cms. cms must be of type signed data or (authenticated) enveloped data. For signed data, such a certificate can be used when signing or verifying to fill in the signer certificate or to provide an extra CA certificate that may be needed for chain building in certificate validation.</p> <p>CMS_get1_certs() returns all certificates in cms.</p> <p>CMS_add0_crl() and CMS_add1_crl() add CRL crl to cms. cms must be of type signed data or (authenticated) enveloped data. For signed data, such a CRL may be used in certificate validation. It may be given both for inclusion when signing a CMS message and when verifying a signed CMS message.</p> <p>CMS_get1_crls() returns all CRLs in cms.</p>"},{"location":"man3/CMS_add0_cert/#notes","title":"NOTES","text":"<p>The CMS_ContentInfo structure cms must be of type signed data or enveloped data or an error will be returned.</p> <p>For signed data certificates and CRLs are added to the certificates and crls fields of SignedData structure. For enveloped data they are added to OriginatorInfo.</p> <p>As the 0 implies CMS_add0_cert() adds cert internally to cms and it must not be freed up after the call as opposed to CMS_add1_cert() where cert must be freed up.</p> <p>The same certificate or CRL must not be added to the same cms structure more than once.</p>"},{"location":"man3/CMS_add0_cert/#return-values","title":"RETURN VALUES","text":"<p>CMS_add0_cert(), CMS_add1_cert() and CMS_add0_crl() and CMS_add1_crl() return 1 for success and 0 for failure.</p> <p>CMS_get1_certs() and CMS_get1_crls() return the STACK of certificates or CRLs or NULL if there are none or an error occurs. The only error which will occur in practice is if the cms type is invalid.</p>"},{"location":"man3/CMS_add0_cert/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_encrypt(3)</p>"},{"location":"man3/CMS_add0_cert/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_add1_recipient_cert/","title":"CMS_add1_recipient_cert","text":""},{"location":"man3/CMS_add1_recipient_cert/#name","title":"NAME","text":"<p>CMS_add1_recipient_cert, CMS_add0_recipient_key - add recipients to a CMS enveloped data structure</p>"},{"location":"man3/CMS_add1_recipient_cert/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,\n                                           X509 *recip, unsigned int flags);\n\nCMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,\n                                          unsigned char *key, size_t keylen,\n                                          unsigned char *id, size_t idlen,\n                                          ASN1_GENERALIZEDTIME *date,\n                                          ASN1_OBJECT *otherTypeId,\n                                          ASN1_TYPE *otherType);\n</code></pre>"},{"location":"man3/CMS_add1_recipient_cert/#description","title":"DESCRIPTION","text":"<p>CMS_add1_recipient_cert() adds recipient recip to CMS_ContentInfo enveloped data structure cms as a KeyTransRecipientInfo structure.</p> <p>CMS_add0_recipient_key() adds symmetric key key of length keylen using wrapping algorithm nid, identifier id of length idlen and optional values date, otherTypeId and otherType to CMS_ContentInfo enveloped data structure cms as a KEKRecipientInfo structure.</p> <p>The CMS_ContentInfo structure should be obtained from an initial call to CMS_encrypt() with the flag CMS_PARTIAL set.</p>"},{"location":"man3/CMS_add1_recipient_cert/#notes","title":"NOTES","text":"<p>The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt() function defaults are not appropriate. For example if one or more KEKRecipientInfo structures need to be added. New attributes can also be added using the returned CMS_RecipientInfo structure and the CMS attribute utility functions.</p> <p>OpenSSL will by default identify recipient certificates using issuer name and serial number. If CMS_USE_KEYID is set it will use the subject key identifier value instead. An error occurs if all recipient certificates do not have a subject key identifier extension.</p> <p>Currently only AES based key wrapping algorithms are supported for nid, specifically: NID_id_aes128_wrap, NID_id_aes192_wrap and NID_id_aes256_wrap. If nid is set to NID_undef then an AES wrap algorithm will be used consistent with keylen.</p>"},{"location":"man3/CMS_add1_recipient_cert/#return-values","title":"RETURN VALUES","text":"<p>CMS_add1_recipient_cert() and CMS_add0_recipient_key() return an internal pointer to the CMS_RecipientInfo structure just added or NULL if an error occurs.</p>"},{"location":"man3/CMS_add1_recipient_cert/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_decrypt(3), CMS_final(3),</p>"},{"location":"man3/CMS_add1_recipient_cert/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_add1_signer/","title":"CMS_add1_signer","text":""},{"location":"man3/CMS_add1_signer/#name","title":"NAME","text":"<p>CMS_add1_signer, CMS_SignerInfo_sign - add a signer to a CMS_ContentInfo signed data structure</p>"},{"location":"man3/CMS_add1_signer/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms, X509 *signcert,\n                                EVP_PKEY *pkey, const EVP_MD *md,\n                                unsigned int flags);\n\nint CMS_SignerInfo_sign(CMS_SignerInfo *si);\n</code></pre>"},{"location":"man3/CMS_add1_signer/#description","title":"DESCRIPTION","text":"<p>CMS_add1_signer() adds a signer with certificate signcert and private key pkey using message digest md to CMS_ContentInfo SignedData structure cms.</p> <p>The CMS_ContentInfo structure should be obtained from an initial call to CMS_sign() with the flag CMS_PARTIAL set or in the case or re-signing a valid CMS_ContentInfo SignedData structure.</p> <p>If the md parameter is NULL then the default digest for the public key algorithm will be used.</p> <p>Unless the CMS_REUSE_DIGEST flag is set the returned CMS_ContentInfo structure is not complete and must be finalized either by streaming (if applicable) or a call to CMS_final().</p> <p>The CMS_SignerInfo_sign() function will explicitly sign a CMS_SignerInfo structure, its main use is when CMS_REUSE_DIGEST and CMS_PARTIAL flags are both set.</p>"},{"location":"man3/CMS_add1_signer/#notes","title":"NOTES","text":"<p>The main purpose of CMS_add1_signer() is to provide finer control over a CMS signed data structure where the simpler CMS_sign() function defaults are not appropriate. For example if multiple signers or non default digest algorithms are needed. New attributes can also be added using the returned CMS_SignerInfo structure and the CMS attribute utility functions or the CMS signed receipt request functions.</p> <p>Any of the following flags (ored together) can be passed in the flags parameter.</p> <p>If CMS_REUSE_DIGEST is set then an attempt is made to copy the content digest value from the CMS_ContentInfo structure: to add a signer to an existing structure.  An error occurs if a matching digest value cannot be found to copy. The returned CMS_ContentInfo structure will be valid and finalized when this flag is set.</p> <p>If CMS_PARTIAL is set in addition to CMS_REUSE_DIGEST then the CMS_SignerInfo structure will not be finalized so additional attributes can be added. In this case an explicit call to CMS_SignerInfo_sign() is needed to finalize it.</p> <p>If CMS_NOCERTS is set the signer's certificate will not be included in the CMS_ContentInfo structure, the signer's certificate must still be supplied in the signcert parameter though. This can reduce the size of the signature if the signers certificate can be obtained by other means: for example a previously signed message.</p> <p>The SignedData structure includes several CMS signedAttributes including the signing time, the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute. If CMS_NOATTR is set then no signedAttributes will be used. If CMS_NOSMIMECAP is set then just the SMIMECapabilities are omitted.</p> <p>OpenSSL will by default identify signing certificates using issuer name and serial number. If CMS_USE_KEYID is set it will use the subject key identifier value instead. An error occurs if the signing certificate does not have a subject key identifier extension.</p> <p>If present the SMIMECapabilities attribute indicates support for the following algorithms in preference order: 256 bit AES, Gost R3411-94, Gost 28147-89, 192 bit AES, 128 bit AES, triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is not available then it will not be included: for example the GOST algorithms will not be included if the GOST ENGINE is not loaded.</p> <p>CMS_add1_signer() returns an internal pointer to the CMS_SignerInfo structure just added, this can be used to set additional attributes before it is finalized.</p>"},{"location":"man3/CMS_add1_signer/#return-values","title":"RETURN VALUES","text":"<p>CMS_add1_signer() returns an internal pointer to the CMS_SignerInfo structure just added or NULL if an error occurs.</p>"},{"location":"man3/CMS_add1_signer/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_final(3),</p>"},{"location":"man3/CMS_add1_signer/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2014-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_compress/","title":"CMS_compress","text":""},{"location":"man3/CMS_compress/#name","title":"NAME","text":"<p>CMS_compress - create a CMS CompressedData structure</p>"},{"location":"man3/CMS_compress/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_compress/#description","title":"DESCRIPTION","text":"<p>CMS_compress() creates and returns a CMS CompressedData structure. comp_nid is the compression algorithm to use or NID_undef to use the default algorithm (zlib compression). in is the content to be compressed. flags is an optional set of flags.</p>"},{"location":"man3/CMS_compress/#notes","title":"NOTES","text":"<p>The only currently supported compression algorithm is zlib using the NID NID_zlib_compression.</p> <p>If zlib support is not compiled into OpenSSL then CMS_compress() will return an error.</p> <p>If the CMS_TEXT flag is set MIME headers for type text/plain are prepended to the data.</p> <p>Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if CMS_BINARY is set no translation occurs. This option should be used if the supplied data is in binary format otherwise the translation will corrupt it. If CMS_BINARY is set then CMS_TEXT is ignored.</p> <p>If the CMS_STREAM flag is set a partial CMS_ContentInfo structure is returned suitable for streaming I/O: no data is read from the BIO in.</p> <p>The compressed data is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is rarely used in practice and is not supported by SMIME_write_CMS().</p>"},{"location":"man3/CMS_compress/#notes_1","title":"NOTES","text":"<p>If the flag CMS_STREAM is set the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results.</p> <p>Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(), PEM_write_bio_CMS_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS().</p> <p>Additional compression parameters such as the zlib compression level cannot currently be set.</p>"},{"location":"man3/CMS_compress/#return-values","title":"RETURN VALUES","text":"<p>CMS_compress() returns either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/CMS_compress/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_uncompress(3)</p>"},{"location":"man3/CMS_compress/#history","title":"HISTORY","text":"<p>The CMS_STREAM flag was added in OpenSSL 1.0.0.</p>"},{"location":"man3/CMS_compress/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_decrypt/","title":"CMS_decrypt","text":""},{"location":"man3/CMS_decrypt/#name","title":"NAME","text":"<p>CMS_decrypt - decrypt content from a CMS envelopedData structure</p>"},{"location":"man3/CMS_decrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,\n                BIO *dcont, BIO *out, unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_decrypt/#description","title":"DESCRIPTION","text":"<p>CMS_decrypt() extracts and decrypts the content from a CMS EnvelopedData structure. pkey is the private key of the recipient, cert is the recipient's certificate, out is a BIO to write the content to and flags is an optional set of flags.</p> <p>The dcont parameter is used in the rare case where the encrypted content is detached. It will normally be set to NULL.</p>"},{"location":"man3/CMS_decrypt/#notes","title":"NOTES","text":"<p>Although the recipients certificate is not needed to decrypt the data it is needed to locate the appropriate (of possible several) recipients in the CMS structure.</p> <p>If cert is set to NULL all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack.</p> <p>It is possible to determine the correct recipient key by other means (for example looking them up in a database) and setting them in the CMS structure in advance using the CMS utility functions such as CMS_set1_pkey(). In this case both cert and pkey should be set to NULL.</p> <p>To process KEKRecipientInfo types CMS_set1_key() or CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() should be called before CMS_decrypt() and cert and pkey set to NULL.</p> <p>The following flags can be passed in the flags parameter.</p> <p>If the CMS_TEXT flag is set MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain then an error is returned.</p>"},{"location":"man3/CMS_decrypt/#return-values","title":"RETURN VALUES","text":"<p>CMS_decrypt() returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/CMS_decrypt/#bugs","title":"BUGS","text":"<p>The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify() also applies to CMS_decrypt().</p>"},{"location":"man3/CMS_decrypt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_encrypt(3)</p>"},{"location":"man3/CMS_decrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_encrypt/","title":"CMS_encrypt","text":""},{"location":"man3/CMS_encrypt/#name","title":"NAME","text":"<p>CMS_encrypt - create a CMS envelopedData structure</p>"},{"location":"man3/CMS_encrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in,\n                             const EVP_CIPHER *cipher, unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_encrypt/#description","title":"DESCRIPTION","text":"<p>CMS_encrypt() creates and returns a CMS EnvelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.</p>"},{"location":"man3/CMS_encrypt/#notes","title":"NOTES","text":"<p>Only certificates carrying RSA, Diffie-Hellman or EC keys are supported by this function.</p> <p>EVP_des_ede3_cbc() (triple DES) is the algorithm of choice for S/MIME use because most clients will support it.</p> <p>The algorithm passed in the cipher parameter must support ASN1 encoding of its parameters.</p> <p>Many browsers implement a \"sign and encrypt\" option which is simply an S/MIME envelopedData containing an S/MIME signed message. This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to CMS_encrypt().</p> <p>The following flags can be passed in the flags parameter.</p> <p>If the CMS_TEXT flag is set MIME headers for type text/plain are prepended to the data.</p> <p>Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if CMS_BINARY is set no translation occurs. This option should be used if the supplied data is in binary format otherwise the translation will corrupt it. If CMS_BINARY is set then CMS_TEXT is ignored.</p> <p>OpenSSL will by default identify recipient certificates using issuer name and serial number. If CMS_USE_KEYID is set it will use the subject key identifier value instead. An error occurs if all recipient certificates do not have a subject key identifier extension.</p> <p>If the CMS_STREAM flag is set a partial CMS_ContentInfo structure is returned suitable for streaming I/O: no data is read from the BIO in.</p> <p>If the CMS_PARTIAL flag is set a partial CMS_ContentInfo structure is returned to which additional recipients and attributes can be added before finalization.</p> <p>The data being encrypted is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is rarely used in practice and is not supported by SMIME_write_CMS().</p>"},{"location":"man3/CMS_encrypt/#notes_1","title":"NOTES","text":"<p>If the flag CMS_STREAM is set the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results.</p> <p>Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(), PEM_write_bio_CMS_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS().</p> <p>The recipients specified in certs use a CMS KeyTransRecipientInfo info structure. KEKRecipientInfo is also supported using the flag CMS_PARTIAL and CMS_add0_recipient_key().</p> <p>The parameter certs may be NULL if CMS_PARTIAL is set and recipients added later using CMS_add1_recipient_cert() or CMS_add0_recipient_key().</p>"},{"location":"man3/CMS_encrypt/#return-values","title":"RETURN VALUES","text":"<p>CMS_encrypt() returns either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/CMS_encrypt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_decrypt(3)</p>"},{"location":"man3/CMS_encrypt/#history","title":"HISTORY","text":"<p>The CMS_STREAM flag was first supported in OpenSSL 1.0.0.</p>"},{"location":"man3/CMS_encrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_final/","title":"CMS_final","text":""},{"location":"man3/CMS_final/#name","title":"NAME","text":"<p>CMS_final - finalise a CMS_ContentInfo structure</p>"},{"location":"man3/CMS_final/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_final/#description","title":"DESCRIPTION","text":"<p>CMS_final() finalises the structure cms. Its purpose is to perform any operations necessary on cms (digest computation for example) and set the appropriate fields. The parameter data contains the content to be processed. The dcont parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.</p>"},{"location":"man3/CMS_final/#notes","title":"NOTES","text":"<p>This function will normally be called when the CMS_PARTIAL flag is used. It should only be used when streaming is not performed because the streaming I/O functions perform finalisation operations internally.</p>"},{"location":"man3/CMS_final/#return-values","title":"RETURN VALUES","text":"<p>CMS_final() returns 1 for success or 0 for failure.</p>"},{"location":"man3/CMS_final/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_encrypt(3)</p>"},{"location":"man3/CMS_final/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_get0_RecipientInfos/","title":"CMS_get0_RecipientInfos","text":""},{"location":"man3/CMS_get0_RecipientInfos/#name","title":"NAME","text":"<p>CMS_get0_RecipientInfos, CMS_RecipientInfo_type, CMS_RecipientInfo_ktri_get0_signer_id, CMS_RecipientInfo_ktri_cert_cmp, CMS_RecipientInfo_set0_pkey, CMS_RecipientInfo_kekri_get0_id, CMS_RecipientInfo_kekri_id_cmp, CMS_RecipientInfo_set0_key, CMS_RecipientInfo_decrypt, CMS_RecipientInfo_encrypt - CMS envelopedData RecipientInfo routines</p>"},{"location":"man3/CMS_get0_RecipientInfos/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nSTACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);\nint CMS_RecipientInfo_type(CMS_RecipientInfo *ri);\n\nint CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,\n                                          ASN1_OCTET_STRING **keyid,\n                                          X509_NAME **issuer,\n                                          ASN1_INTEGER **sno);\nint CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);\nint CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);\n\nint CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri, X509_ALGOR **palg,\n                                    ASN1_OCTET_STRING **pid,\n                                    ASN1_GENERALIZEDTIME **pdate,\n                                    ASN1_OBJECT **potherid,\n                                    ASN1_TYPE **pothertype);\nint CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,\n                                   const unsigned char *id, size_t idlen);\nint CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,\n                               unsigned char *key, size_t keylen);\n\nint CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);\nint CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);\n</code></pre>"},{"location":"man3/CMS_get0_RecipientInfos/#description","title":"DESCRIPTION","text":"<p>The function CMS_get0_RecipientInfos() returns all the CMS_RecipientInfo structures associated with a CMS EnvelopedData structure.</p> <p>CMS_RecipientInfo_type() returns the type of CMS_RecipientInfo structure ri. It will currently return CMS_RECIPINFO_TRANS, CMS_RECIPINFO_AGREE, CMS_RECIPINFO_KEK, CMS_RECIPINFO_PASS, or CMS_RECIPINFO_OTHER.</p> <p>CMS_RecipientInfo_ktri_get0_signer_id() retrieves the certificate recipient identifier associated with a specific CMS_RecipientInfo structure ri, which must be of type CMS_RECIPINFO_TRANS. Either the keyidentifier will be set in keyid or both issuer name and serial number in issuer and sno.</p> <p>CMS_RecipientInfo_ktri_cert_cmp() compares the certificate cert against the CMS_RecipientInfo structure ri, which must be of type CMS_RECIPINFO_TRANS. It returns zero if the comparison is successful and non zero if not.</p> <p>CMS_RecipientInfo_set0_pkey() associates the private key pkey with the CMS_RecipientInfo structure ri, which must be of type CMS_RECIPINFO_TRANS.</p> <p>CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure ri which must be of type CMS_RECIPINFO_KEK.  Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to palg, the keyIdentifier field is written to pid, the date field if present is written to pdate, if the other field is present the components keyAttrId and keyAttr are written to parameters potherid and pothertype.</p> <p>CMS_RecipientInfo_kekri_id_cmp() compares the ID in the id and idlen parameters against the keyIdentifier CMS_RecipientInfo structure ri, which must be of type CMS_RECIPINFO_KEK.  It returns zero if the comparison is successful and non zero if not.</p> <p>CMS_RecipientInfo_set0_key() associates the symmetric key key of length keylen with the CMS_RecipientInfo structure ri, which must be of type CMS_RECIPINFO_KEK.</p> <p>CMS_RecipientInfo_decrypt() attempts to decrypt CMS_RecipientInfo structure ri in structure cms. A key must have been associated with the structure first.</p> <p>CMS_RecipientInfo_encrypt() attempts to encrypt CMS_RecipientInfo structure ri in structure cms. A key must have been associated with the structure first and the content encryption key must be available: for example by a previous call to CMS_RecipientInfo_decrypt().</p>"},{"location":"man3/CMS_get0_RecipientInfos/#notes","title":"NOTES","text":"<p>The main purpose of these functions is to enable an application to lookup recipient keys using any appropriate technique when the simpler method of CMS_decrypt() is not appropriate.</p> <p>In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos() and check the type of each using CMS_RecipientInfo_type(). Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function. Then if the corresponding secret or private key can be obtained by any appropriate means it can then associated with the structure and CMS_RecipientInfo_decrypt() called. If successful CMS_decrypt() can be called with a NULL key to decrypt the enveloped content.</p> <p>The CMS_RecipientInfo_encrypt() can be used to add a new recipient to an existing enveloped data structure. Typically an application will first decrypt an appropriate CMS_RecipientInfo structure to make the content encrypt key available, it will then add a new recipient using a function such as CMS_add1_recipient_cert() and finally encrypt the content encryption key using CMS_RecipientInfo_encrypt().</p>"},{"location":"man3/CMS_get0_RecipientInfos/#return-values","title":"RETURN VALUES","text":"<p>CMS_get0_RecipientInfos() returns all CMS_RecipientInfo structures, or NULL if an error occurs.</p> <p>CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.</p> <p>CMS_RecipientInfo_ktri_cert_cmp() and CMS_RecipientInfo_kekri_cmp() return 0 for a successful comparison and non zero otherwise.</p> <p>Any error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/CMS_get0_RecipientInfos/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_decrypt(3)</p>"},{"location":"man3/CMS_get0_RecipientInfos/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_get0_SignerInfos/","title":"CMS_get0_SignerInfos","text":""},{"location":"man3/CMS_get0_SignerInfos/#name","title":"NAME","text":"<p>CMS_SignerInfo_set1_signer_cert, CMS_get0_SignerInfos, CMS_SignerInfo_get0_signer_id, CMS_SignerInfo_get0_signature, CMS_SignerInfo_cert_cmp - CMS signedData signer functions</p>"},{"location":"man3/CMS_get0_SignerInfos/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nSTACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms);\n\nint CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si, ASN1_OCTET_STRING **keyid,\n                                  X509_NAME **issuer, ASN1_INTEGER **sno);\nASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);\nint CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);\nvoid CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);\n</code></pre>"},{"location":"man3/CMS_get0_SignerInfos/#description","title":"DESCRIPTION","text":"<p>The function CMS_get0_SignerInfos() returns all the CMS_SignerInfo structures associated with a CMS signedData structure.</p> <p>CMS_SignerInfo_get0_signer_id() retrieves the certificate signer identifier associated with a specific CMS_SignerInfo structure si. Either the keyidentifier will be set in keyid or both issuer name and serial number in issuer and sno.</p> <p>CMS_SignerInfo_get0_signature() retrieves the signature associated with si in a pointer to an ASN1_OCTET_STRING structure. This pointer returned corresponds to the internal signature value if si so it may be read or modified.</p> <p>CMS_SignerInfo_cert_cmp() compares the certificate cert against the signer identifier si. It returns zero if the comparison is successful and non zero if not.</p> <p>CMS_SignerInfo_set1_signer_cert() sets the signers certificate of si to signer.</p>"},{"location":"man3/CMS_get0_SignerInfos/#notes","title":"NOTES","text":"<p>The main purpose of these functions is to enable an application to lookup signers certificates using any appropriate technique when the simpler method of CMS_verify() is not appropriate.</p> <p>In typical usage and application will retrieve all CMS_SignerInfo structures using CMS_get0_SignerInfo() and retrieve the identifier information using CMS. It will then obtain the signer certificate by some unspecified means (or return and error if it cannot be found) and set it using CMS_SignerInfo_set1_signer_cert().</p> <p>Once all signer certificates have been set CMS_verify() can be used.</p> <p>Although CMS_get0_SignerInfos() can return NULL if an error occurs or if there are no signers this is not a problem in practice because the only error which can occur is if the cms structure is not of type signedData due to application error.</p>"},{"location":"man3/CMS_get0_SignerInfos/#return-values","title":"RETURN VALUES","text":"<p>CMS_get0_SignerInfos() returns all CMS_SignerInfo structures, or NULL there are no signers or an error occurs.</p> <p>CMS_SignerInfo_get0_signer_id() returns 1 for success and 0 for failure.</p> <p>CMS_SignerInfo_cert_cmp() returns 0 for a successful comparison and non zero otherwise.</p> <p>CMS_SignerInfo_set1_signer_cert() does not return a value.</p> <p>Any error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/CMS_get0_SignerInfos/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_verify(3)</p>"},{"location":"man3/CMS_get0_SignerInfos/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_get0_type/","title":"CMS_get0_type","text":""},{"location":"man3/CMS_get0_type/#name","title":"NAME","text":"<p>CMS_get0_type, CMS_set1_eContentType, CMS_get0_eContentType, CMS_get0_content - get and set CMS content types and content</p>"},{"location":"man3/CMS_get0_type/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nconst ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms);\nint CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);\nconst ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms);\nASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms);\n</code></pre>"},{"location":"man3/CMS_get0_type/#description","title":"DESCRIPTION","text":"<p>CMS_get0_type() returns the content type of a CMS_ContentInfo structure as an ASN1_OBJECT pointer. An application can then decide how to process the CMS_ContentInfo structure based on this value.</p> <p>CMS_set1_eContentType() sets the embedded content type of a CMS_ContentInfo structure. It should be called with CMS functions (such as CMS_sign, CMS_encrypt) with the CMS_PARTIAL flag and before the structure is finalised, otherwise the results are undefined.</p> <p>ASN1_OBJECT *CMS_get0_eContentType() returns a pointer to the embedded content type.</p> <p>CMS_get0_content() returns a pointer to the ASN1_OCTET_STRING pointer containing the embedded content.</p>"},{"location":"man3/CMS_get0_type/#notes","title":"NOTES","text":"<p>As the 0 implies CMS_get0_type(), CMS_get0_eContentType() and CMS_get0_content() return internal pointers which should not be freed up. CMS_set1_eContentType() copies the supplied OID and it should be freed up after use.</p> <p>The ASN1_OBJECT values returned can be converted to an integer NID value using OBJ_obj2nid(). For the currently supported content types the following values are returned:</p> <pre><code>NID_pkcs7_data\nNID_pkcs7_signed\nNID_pkcs7_digest\nNID_id_smime_ct_compressedData:\nNID_pkcs7_encrypted\nNID_pkcs7_enveloped\n</code></pre> <p>The return value of CMS_get0_content() is a pointer to the ASN1_OCTET_STRING content pointer. That means that for example:</p> <pre><code>ASN1_OCTET_STRING **pconf = CMS_get0_content(cms);\n</code></pre> <p>*pconf could be NULL if there is no embedded content. Applications can access, modify or create the embedded content in a CMS_ContentInfo structure using this function. Applications usually will not need to modify the embedded content as it is normally set by higher level functions.</p>"},{"location":"man3/CMS_get0_type/#return-values","title":"RETURN VALUES","text":"<p>CMS_get0_type() and CMS_get0_eContentType() return an ASN1_OBJECT structure.</p> <p>CMS_set1_eContentType() returns 1 for success or 0 if an error occurred.  The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/CMS_get0_type/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/CMS_get0_type/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_get1_ReceiptRequest/","title":"CMS_get1_ReceiptRequest","text":""},{"location":"man3/CMS_get1_ReceiptRequest/#name","title":"NAME","text":"<p>CMS_ReceiptRequest_create0, CMS_add1_ReceiptRequest, CMS_get1_ReceiptRequest, CMS_ReceiptRequest_get0_values - CMS signed receipt request functions</p>"},{"location":"man3/CMS_get1_ReceiptRequest/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,\n                                               int allorfirst,\n                                               STACK_OF(GENERAL_NAMES) *receiptList,\n                                               STACK_OF(GENERAL_NAMES) *receiptsTo);\nint CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);\nint CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);\nvoid CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr, ASN1_STRING **pcid,\n                                    int *pallorfirst,\n                                    STACK_OF(GENERAL_NAMES) **plist,\n                                    STACK_OF(GENERAL_NAMES) **prto);\n</code></pre>"},{"location":"man3/CMS_get1_ReceiptRequest/#description","title":"DESCRIPTION","text":"<p>CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or it is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value.</p> <p>The CMS_add1_ReceiptRequest() function adds a signed receipt request rr to SignerInfo structure si.</p> <p>int CMS_get1_ReceiptRequest() looks for a signed receipt request in si, if any is found it is decoded and written to prr.</p> <p>CMS_ReceiptRequest_get0_values() retrieves the values of a receipt request. The signedContentIdentifier is copied to pcid. If the allOrFirstTier option of receiptsFrom is used its value is copied to pallorfirst otherwise the receiptList field is copied to plist. The receiptsTo parameter is copied to prto.</p>"},{"location":"man3/CMS_get1_ReceiptRequest/#notes","title":"NOTES","text":"<p>For more details of the meaning of the fields see RFC2634.</p> <p>The contents of a signed receipt should only be considered meaningful if the corresponding CMS_ContentInfo structure can be successfully verified using CMS_verify().</p>"},{"location":"man3/CMS_get1_ReceiptRequest/#return-values","title":"RETURN VALUES","text":"<p>CMS_ReceiptRequest_create0() returns a signed receipt request structure or NULL if an error occurred.</p> <p>CMS_add1_ReceiptRequest() returns 1 for success or 0 if an error occurred.</p> <p>CMS_get1_ReceiptRequest() returns 1 is a signed receipt request is found and decoded. It returns 0 if a signed receipt request is not present and -1 if it is present but malformed.</p>"},{"location":"man3/CMS_get1_ReceiptRequest/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_sign_receipt(3), CMS_verify(3) CMS_verify_receipt(3)</p>"},{"location":"man3/CMS_get1_ReceiptRequest/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_sign/","title":"CMS_sign","text":""},{"location":"man3/CMS_sign/#name","title":"NAME","text":"<p>CMS_sign - create a CMS SignedData structure</p>"},{"location":"man3/CMS_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,\n                          BIO *data, unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_sign/#description","title":"DESCRIPTION","text":"<p>CMS_sign() creates and returns a CMS SignedData structure. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain). Any or all of these parameters can be NULL, see NOTES below.</p> <p>The data to be signed is read from BIO data.</p> <p>flags is an optional set of flags.</p>"},{"location":"man3/CMS_sign/#notes","title":"NOTES","text":"<p>Any of the following flags (ored together) can be passed in the flags parameter.</p> <p>Many S/MIME clients expect the signed content to include valid MIME headers. If the CMS_TEXT flag is set MIME headers for type text/plain are prepended to the data.</p> <p>If CMS_NOCERTS is set the signer's certificate will not be included in the CMS_ContentInfo structure, the signer's certificate must still be supplied in the signcert parameter though. This can reduce the size of the signature if the signers certificate can be obtained by other means: for example a previously signed message.</p> <p>The data being signed is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is used for CMS_ContentInfo detached signatures which are used in S/MIME plaintext signed messages for example.</p> <p>Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if CMS_BINARY is set no translation occurs. This option should be used if the supplied data is in binary format otherwise the translation will corrupt it.</p> <p>The SignedData structure includes several CMS signedAttributes including the signing time, the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute. If CMS_NOATTR is set then no signedAttributes will be used. If CMS_NOSMIMECAP is set then just the SMIMECapabilities are omitted.</p> <p>If present the SMIMECapabilities attribute indicates support for the following algorithms in preference order: 256 bit AES, Gost R3411-94, Gost 28147-89, 192 bit AES, 128 bit AES, triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is not available then it will not be included: for example the GOST algorithms will not be included if the GOST ENGINE is not loaded.</p> <p>OpenSSL will by default identify signing certificates using issuer name and serial number. If CMS_USE_KEYID is set it will use the subject key identifier value instead. An error occurs if the signing certificate does not have a subject key identifier extension.</p> <p>If the flags CMS_STREAM is set then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass.</p> <p>If the CMS_PARTIAL flag is set a partial CMS_ContentInfo structure is output to which additional signers and capabilities can be added before finalization.</p> <p>If the flag CMS_STREAM is set the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results.</p> <p>Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(), PEM_write_bio_CMS_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS().</p> <p>If a signer is specified it will use the default digest for the signing algorithm. This is SHA1 for both RSA and DSA keys.</p> <p>If signcert and pkey are NULL then a certificates only CMS structure is output.</p> <p>The function CMS_sign() is a basic CMS signing function whose output will be suitable for many purposes. For finer control of the output format the certs, signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set. Then one or more signers can be added using the function CMS_add1_signer(), non default digests can be used and custom attributes added. CMS_final() must then be called to finalize the structure if streaming is not enabled.</p>"},{"location":"man3/CMS_sign/#bugs","title":"BUGS","text":"<p>Some attributes such as counter signatures are not supported.</p>"},{"location":"man3/CMS_sign/#return-values","title":"RETURN VALUES","text":"<p>CMS_sign() returns either a valid CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/CMS_sign/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_verify(3)</p>"},{"location":"man3/CMS_sign/#history","title":"HISTORY","text":"<p>The CMS_STREAM flag is only supported for detached data in OpenSSL 0.9.8, it is supported for embedded data in OpenSSL 1.0.0 and later.</p>"},{"location":"man3/CMS_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2023 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_sign_receipt/","title":"CMS_sign_receipt","text":""},{"location":"man3/CMS_sign_receipt/#name","title":"NAME","text":"<p>CMS_sign_receipt - create a CMS signed receipt</p>"},{"location":"man3/CMS_sign_receipt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si, X509 *signcert,\n                                  EVP_PKEY *pkey, STACK_OF(X509) *certs,\n                                  unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_sign_receipt/#description","title":"DESCRIPTION","text":"<p>CMS_sign_receipt() creates and returns a CMS signed receipt structure. si is the CMS_SignerInfo structure containing the signed receipt request. signcert is the certificate to sign with, pkey is the corresponding private key.  certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain).</p> <p>flags is an optional set of flags.</p>"},{"location":"man3/CMS_sign_receipt/#notes","title":"NOTES","text":"<p>This functions behaves in a similar way to CMS_sign() except the flag values CMS_DETACHED, CMS_BINARY, CMS_NOATTR, CMS_TEXT and CMS_STREAM are not supported since they do not make sense in the context of signed receipts.</p>"},{"location":"man3/CMS_sign_receipt/#return-values","title":"RETURN VALUES","text":"<p>CMS_sign_receipt() returns either a valid CMS_ContentInfo structure or NULL if an error occurred.  The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/CMS_sign_receipt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_verify_receipt(3), CMS_sign(3)</p>"},{"location":"man3/CMS_sign_receipt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_uncompress/","title":"CMS_uncompress","text":""},{"location":"man3/CMS_uncompress/#name","title":"NAME","text":"<p>CMS_uncompress - uncompress a CMS CompressedData structure</p>"},{"location":"man3/CMS_uncompress/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out, unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_uncompress/#description","title":"DESCRIPTION","text":"<p>CMS_uncompress() extracts and uncompresses the content from a CMS CompressedData structure cms. data is a BIO to write the content to and flags is an optional set of flags.</p> <p>The dcont parameter is used in the rare case where the compressed content is detached. It will normally be set to NULL.</p>"},{"location":"man3/CMS_uncompress/#notes","title":"NOTES","text":"<p>The only currently supported compression algorithm is zlib: if the structure indicates the use of any other algorithm an error is returned.</p> <p>If zlib support is not compiled into OpenSSL then CMS_uncompress() will always return an error.</p> <p>The following flags can be passed in the flags parameter.</p> <p>If the CMS_TEXT flag is set MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain then an error is returned.</p>"},{"location":"man3/CMS_uncompress/#return-values","title":"RETURN VALUES","text":"<p>CMS_uncompress() returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/CMS_uncompress/#bugs","title":"BUGS","text":"<p>The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify() also applies to CMS_decompress().</p>"},{"location":"man3/CMS_uncompress/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_compress(3)</p>"},{"location":"man3/CMS_uncompress/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_verify/","title":"CMS_verify","text":""},{"location":"man3/CMS_verify/#name","title":"NAME","text":"<p>CMS_verify, CMS_get0_signers - verify a CMS SignedData structure</p>"},{"location":"man3/CMS_verify/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs, X509_STORE *store,\n               BIO *indata, BIO *out, unsigned int flags);\n\nSTACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms);\n</code></pre>"},{"location":"man3/CMS_verify/#description","title":"DESCRIPTION","text":"<p>CMS_verify() is very similar to PKCS7_verify(3). It verifies a CMS SignedData structure contained in a structure of type CMS_ContentInfo. cms points to the CMS_ContentInfo structure to verify. The optional certs parameter refers to a set of certificates in which to search for signing certificates. cms may contain extra untrusted CA certificates that may be used for chain building as well as CRLs that may be used for certificate validation. store may be NULL or point to the trusted certificate store to use for chain verification. indata refers to the signed data if the content is detached from cms. Otherwise indata should be NULL and the signed data must be in cms. The content is written to the BIO out unless it is NULL. flags is an optional set of flags, which can be used to modify the operation.</p> <p>CMS_get0_signers() retrieves the signing certificate(s) from cms, it may only be called after a successful CMS_verify() operation.</p>"},{"location":"man3/CMS_verify/#verify-process","title":"VERIFY PROCESS","text":"<p>Normally the verify process proceeds as follows.</p> <p>Initially some sanity checks are performed on cms. The type of cms must be SignedData. There must be at least one signature on the data and if the content is detached indata cannot be NULL.</p> <p>An attempt is made to locate all the signing certificate(s), first looking in the certs parameter (if it is not NULL) and then looking in any certificates contained in the cms structure unless CMS_NOINTERN is set. If any signing certificate cannot be located the operation fails.</p> <p>Each signing certificate is chain verified using the smimesign purpose and using the trusted certificate store store if supplied. Any internal certificates in the message, which may have been added using CMS_add1_cert(3), are used as untrusted CAs. If CRL checking is enabled in store and CMS_NOCRL is not set, any internal CRLs, which may have been added using CMS_add1_crl(3), are used in addition to attempting to look them up in store. If store is not NULL and any chain verify fails an error code is returned.</p> <p>Finally the signed content is read (and written to out unless it is NULL) and the signature is checked.</p> <p>If all signatures verify correctly then the function is successful.</p> <p>Any of the following flags (ored together) can be passed in the flags parameter to change the default verify behaviour.</p> <p>If CMS_NOINTERN is set the certificates in the message itself are not searched when locating the signing certificate(s). This means that all the signing certificates must be in the certs parameter.</p> <p>If CMS_NOCRL is set and CRL checking is enabled in store then any CRLs in the message itself are ignored.</p> <p>If the CMS_TEXT flag is set MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain then an error is returned.</p> <p>If CMS_NO_SIGNER_CERT_VERIFY is set the signing certificates are not chain verified.</p> <p>If CMS_NO_ATTR_VERIFY is set the signed attributes signature is not verified.</p> <p>If CMS_NO_CONTENT_VERIFY is set then the content digest is not checked.</p>"},{"location":"man3/CMS_verify/#notes","title":"NOTES","text":"<p>One application of CMS_NOINTERN is to only accept messages signed by a small number of certificates. The acceptable certificates would be passed in the certs parameter. In this case if the signer certificate is not one of the certificates supplied in certs then the verify will fail because the signer cannot be found.</p> <p>In some cases the standard techniques for looking up and validating certificates are not appropriate: for example an application may wish to lookup certificates in a database or perform customised verification. This can be achieved by setting and verifying the signer certificates manually using the signed data utility functions.</p> <p>Care should be taken when modifying the default verify behaviour, for example setting CMS_NO_CONTENT_VERIFY will totally disable all content verification and any modified content will be considered valid. This combination is however useful if one merely wishes to write the content to out and its validity is not considered important.</p> <p>Chain verification should arguably be performed using the signing time rather than the current time. However, since the signing time is supplied by the signer it cannot be trusted without additional evidence (such as a trusted timestamp).</p>"},{"location":"man3/CMS_verify/#return-values","title":"RETURN VALUES","text":"<p>CMS_verify() returns 1 for a successful verification and 0 if an error occurred.</p> <p>CMS_get0_signers() returns all signers or NULL if an error occurred.</p> <p>The error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/CMS_verify/#bugs","title":"BUGS","text":"<p>The trusted certificate store is not searched for the signing certificate. This is primarily due to the inadequacies of the current X509_STORE functionality.</p> <p>The lack of single pass processing means that the signed content must all be held in memory if it is not detached.</p>"},{"location":"man3/CMS_verify/#see-also","title":"SEE ALSO","text":"<p>PKCS7_verify(3), CMS_add1_cert(3), CMS_add1_crl(3), OSSL_ESS_check_signing_certs(3), ERR_get_error(3), CMS_sign(3)</p>"},{"location":"man3/CMS_verify/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CMS_verify_receipt/","title":"CMS_verify_receipt","text":""},{"location":"man3/CMS_verify_receipt/#name","title":"NAME","text":"<p>CMS_verify_receipt - verify a CMS signed receipt</p>"},{"location":"man3/CMS_verify_receipt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,\n                       STACK_OF(X509) *certs, X509_STORE *store,\n                       unsigned int flags);\n</code></pre>"},{"location":"man3/CMS_verify_receipt/#description","title":"DESCRIPTION","text":"<p>CMS_verify_receipt() verifies a CMS signed receipt. rcms is the signed receipt to verify. ocms is the original SignedData structure containing the receipt request. certs is a set of certificates in which to search for the signing certificate. store is a trusted certificate store (used for chain verification).</p> <p>flags is an optional set of flags, which can be used to modify the verify operation.</p>"},{"location":"man3/CMS_verify_receipt/#notes","title":"NOTES","text":"<p>This functions behaves in a similar way to CMS_verify() except the flag values CMS_DETACHED, CMS_BINARY, CMS_TEXT and CMS_STREAM are not supported since they do not make sense in the context of signed receipts.</p>"},{"location":"man3/CMS_verify_receipt/#return-values","title":"RETURN VALUES","text":"<p>CMS_verify_receipt() returns 1 for a successful verification and zero if an error occurred.</p> <p>The error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/CMS_verify_receipt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign_receipt(3), CMS_verify(3),</p>"},{"location":"man3/CMS_verify_receipt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CONF_modules_free/","title":"CONF_modules_free","text":""},{"location":"man3/CONF_modules_free/#name","title":"NAME","text":"<p>CONF_modules_free, CONF_modules_finish, CONF_modules_unload - OpenSSL configuration cleanup functions</p>"},{"location":"man3/CONF_modules_free/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/conf.h&gt;\n\nvoid CONF_modules_finish(void);\nvoid CONF_modules_unload(int all);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid CONF_modules_free(void)\n#endif\n</code></pre>"},{"location":"man3/CONF_modules_free/#description","title":"DESCRIPTION","text":"<p>CONF_modules_free() closes down and frees up all memory allocated by all configuration modules.  Normally, in versions of OpenSSL prior to 1.1.0, applications called CONF_modules_free() at exit to tidy up any configuration performed.</p> <p>CONF_modules_finish() calls each configuration modules finish handler to free up any configuration that module may have performed.</p> <p>CONF_modules_unload() finishes and unloads configuration modules. If all is set to 0 only modules loaded from DSOs will be unloads. If all is 1 all modules, including builtin modules will be unloaded.</p>"},{"location":"man3/CONF_modules_free/#return-values","title":"RETURN VALUES","text":"<p>None of the functions return a value.</p>"},{"location":"man3/CONF_modules_free/#see-also","title":"SEE ALSO","text":"<p>config(5), OPENSSL_config(3), CONF_modules_load_file(3)</p>"},{"location":"man3/CONF_modules_free/#history","title":"HISTORY","text":"<p>CONF_modules_free() was deprecated in OpenSSL 1.1.0; do not use it. For more information see OPENSSL_init_crypto(3).</p>"},{"location":"man3/CONF_modules_free/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CONF_modules_load_file/","title":"CONF_modules_load_file","text":""},{"location":"man3/CONF_modules_load_file/#name","title":"NAME","text":"<p>CONF_modules_load_file, CONF_modules_load - OpenSSL configuration functions</p>"},{"location":"man3/CONF_modules_load_file/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/conf.h&gt;\n\nint CONF_modules_load_file(const char *filename, const char *appname,\n                           unsigned long flags);\nint CONF_modules_load(const CONF *cnf, const char *appname,\n                      unsigned long flags);\n</code></pre>"},{"location":"man3/CONF_modules_load_file/#description","title":"DESCRIPTION","text":"<p>The function CONF_modules_load_file() configures OpenSSL using file filename and application name appname. If filename is NULL the standard OpenSSL configuration file is used. If appname is NULL the standard OpenSSL application name openssl_conf is used. The behaviour can be customized using flags.</p> <p>CONF_modules_load() is identical to CONF_modules_load_file() except it reads configuration information from cnf.</p>"},{"location":"man3/CONF_modules_load_file/#notes","title":"NOTES","text":"<p>The following flags are currently recognized:</p> <p>If CONF_MFLAGS_IGNORE_ERRORS is set errors returned by individual configuration modules are ignored. If not set the first module error is considered fatal and no further modules are loaded.</p> <p>Normally any modules errors will add error information to the error queue. If CONF_MFLAGS_SILENT is set no error information is added.</p> <p>If CONF_MFLAGS_IGNORE_RETURN_CODES is set the function unconditionally returns success. This is used by default in OPENSSL_init_crypto(3) to ignore any errors in the default system-wide configuration file, as having all OpenSSL applications fail to start when there are potentially minor issues in the file is too risky. Applications calling CONF_modules_load_file explicitly should not generally set this flag.</p> <p>If CONF_MFLAGS_NO_DSO is set configuration module loading from DSOs is disabled.</p> <p>CONF_MFLAGS_IGNORE_MISSING_FILE if set will make CONF_load_modules_file() ignore missing configuration files. Normally a missing configuration file return an error.</p> <p>CONF_MFLAGS_DEFAULT_SECTION if set and appname is not NULL will use the default section pointed to by openssl_conf if appname does not exist.</p> <p>By using CONF_modules_load_file() with appropriate flags an application can customise application configuration to best suit its needs. In some cases the use of a configuration file is optional and its absence is not an error: in this case CONF_MFLAGS_IGNORE_MISSING_FILE would be set.</p> <p>Errors during configuration may also be handled differently by different applications. For example in some cases an error may simply print out a warning message and the application continue. In other cases an application might consider a configuration file error as fatal and exit immediately.</p> <p>Applications can use the CONF_modules_load() function if they wish to load a configuration file themselves and have finer control over how errors are treated.</p>"},{"location":"man3/CONF_modules_load_file/#return-values","title":"RETURN VALUES","text":"<p>These functions return 1 for success and a zero or negative value for failure. If module errors are not ignored the return code will reflect the return value of the failing module (this will always be zero or negative).</p>"},{"location":"man3/CONF_modules_load_file/#examples","title":"EXAMPLES","text":"<p>Load a configuration file and print out any errors and exit (missing file considered fatal):</p> <pre><code>if (CONF_modules_load_file(NULL, NULL, 0) &lt;= 0) {\n    fprintf(stderr, \"FATAL: error loading configuration file\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n</code></pre> <p>Load default configuration file using the section indicated by \"myapp\", tolerate missing files, but exit on other errors:</p> <pre><code>if (CONF_modules_load_file(NULL, \"myapp\",\n                           CONF_MFLAGS_IGNORE_MISSING_FILE) &lt;= 0) {\n    fprintf(stderr, \"FATAL: error loading configuration file\\n\");\n    ERR_print_errors_fp(stderr);\n    exit(1);\n}\n</code></pre> <p>Load custom configuration file and section, only print warnings on error, missing configuration file ignored:</p> <pre><code>if (CONF_modules_load_file(\"/something/app.cnf\", \"myapp\",\n                           CONF_MFLAGS_IGNORE_MISSING_FILE) &lt;= 0) {\n    fprintf(stderr, \"WARNING: error loading configuration file\\n\");\n    ERR_print_errors_fp(stderr);\n}\n</code></pre> <p>Load and parse configuration file manually, custom error handling:</p> <pre><code>FILE *fp;\nCONF *cnf = NULL;\nlong eline;\n\nfp = fopen(\"/somepath/app.cnf\", \"r\");\nif (fp == NULL) {\n    fprintf(stderr, \"Error opening configuration file\\n\");\n    /* Other missing configuration file behaviour */\n} else {\n    cnf = NCONF_new(NULL);\n    if (NCONF_load_fp(cnf, fp, &amp;eline) == 0) {\n        fprintf(stderr, \"Error on line %ld of configuration file\\n\", eline);\n        ERR_print_errors_fp(stderr);\n        /* Other malformed configuration file behaviour */\n    } else if (CONF_modules_load(cnf, \"appname\", 0) &lt;= 0) {\n        fprintf(stderr, \"Error configuring application\\n\");\n        ERR_print_errors_fp(stderr);\n        /* Other configuration error behaviour */\n    }\n    fclose(fp);\n    NCONF_free(cnf);\n}\n</code></pre>"},{"location":"man3/CONF_modules_load_file/#see-also","title":"SEE ALSO","text":"<p>config(5), OPENSSL_config(3)</p>"},{"location":"man3/CONF_modules_load_file/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CRYPTO_THREAD_run_once/","title":"CRYPTO_THREAD_run_once","text":""},{"location":"man3/CRYPTO_THREAD_run_once/#name","title":"NAME","text":"<p>CRYPTO_THREAD_run_once, CRYPTO_THREAD_lock_new, CRYPTO_THREAD_read_lock, CRYPTO_THREAD_write_lock, CRYPTO_THREAD_unlock, CRYPTO_THREAD_lock_free, CRYPTO_atomic_add - OpenSSL thread support</p>"},{"location":"man3/CRYPTO_THREAD_run_once/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nCRYPTO_ONCE CRYPTO_ONCE_STATIC_INIT;\nint CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));\n\nCRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);\nint CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);\nint CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);\nint CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);\nvoid CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);\n\nint CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);\n</code></pre>"},{"location":"man3/CRYPTO_THREAD_run_once/#description","title":"DESCRIPTION","text":"<p>OpenSSL can be safely used in multi-threaded applications provided that support for the underlying OS threading API is built-in. Currently, OpenSSL supports the pthread and Windows APIs. OpenSSL can also be built without any multi-threading support, for example on platforms that don't provide any threading support or that provide a threading API that is not yet supported by OpenSSL.</p> <p>The following multi-threading function are provided:</p> <ul> <li>CRYPTO_THREAD_run_once() can be used to perform one-time initialization. The once argument must be a pointer to a static object of type CRYPTO_ONCE that was statically initialized to the value CRYPTO_ONCE_STATIC_INIT. The init argument is a pointer to a function that performs the desired exactly once initialization. In particular, this can be used to allocate locks in a thread-safe manner, which can then be used with the locking functions below.</li> <li>CRYPTO_THREAD_lock_new() allocates, initializes and returns a new read/write lock.</li> <li>CRYPTO_THREAD_read_lock() locks the provided lock for reading.</li> <li>CRYPTO_THREAD_write_lock() locks the provided lock for writing.</li> <li>CRYPTO_THREAD_unlock() unlocks the previously locked lock.</li> <li>CRYPTO_THREAD_lock_free() frees the provided lock.</li> <li>CRYPTO_atomic_add() atomically adds amount to val and returns the result of the operation in ret. lock will be locked, unless atomic operations are supported on the specific platform. Because of this, if a variable is modified by CRYPTO_atomic_add() then CRYPTO_atomic_add() must be the only way that the variable is modified.</li> </ul>"},{"location":"man3/CRYPTO_THREAD_run_once/#return-values","title":"RETURN VALUES","text":"<p>CRYPTO_THREAD_run_once() returns 1 on success, or 0 on error.</p> <p>CRYPTO_THREAD_lock_new() returns the allocated lock, or NULL on error.</p> <p>CRYPTO_THREAD_lock_free() returns no value.</p> <p>The other functions return 1 on success, or 0 on error.</p>"},{"location":"man3/CRYPTO_THREAD_run_once/#notes","title":"NOTES","text":"<p>On Windows platforms the CRYPTO_THREAD_* types and functions in the openssl/crypto.h header are dependent on some of the types customarily made available by including windows.h. The application developer is likely to require control over when the latter is included, commonly as one of the first included headers. Therefore, it is defined as an application developer's responsibility to include windows.h prior to crypto.h where use of CRYPTO_THREAD_* types and functions is required.</p>"},{"location":"man3/CRYPTO_THREAD_run_once/#examples","title":"EXAMPLES","text":"<p>This example safely initializes and uses a lock.</p> <pre><code>#ifdef _WIN32\n# include &lt;windows.h&gt;\n#endif\n#include &lt;openssl/crypto.h&gt;\n\nstatic CRYPTO_ONCE once = CRYPTO_ONCE_STATIC_INIT;\nstatic CRYPTO_RWLOCK *lock;\n\nstatic void myinit(void)\n{\n    lock = CRYPTO_THREAD_lock_new();\n}\n\nstatic int mylock(void)\n{\n    if (!CRYPTO_THREAD_run_once(&amp;once, void init) || lock == NULL)\n        return 0;\n    return CRYPTO_THREAD_write_lock(lock);\n}\n\nstatic int myunlock(void)\n{\n    return CRYPTO_THREAD_unlock(lock);\n}\n\nint serialized(void)\n{\n    int ret = 0;\n\n    if (mylock()) {\n        /* Your code here, do not return without releasing the lock! */\n        ret = ... ;\n    }\n    myunlock();\n    return ret;\n}\n</code></pre> <p>Finalization of locks is an advanced topic, not covered in this example. This can only be done at process exit or when a dynamically loaded library is no longer in use and is unloaded. The simplest solution is to just \"leak\" the lock in applications and not repeatedly load/unload shared libraries that allocate locks.</p>"},{"location":"man3/CRYPTO_THREAD_run_once/#notes_1","title":"NOTES","text":"<p>You can find out if OpenSSL was configured with thread support:</p> <pre><code>#include &lt;openssl/opensslconf.h&gt;\n#if defined(OPENSSL_THREADS)\n    /* thread support enabled */\n#else\n    /* no thread support */\n#endif\n</code></pre>"},{"location":"man3/CRYPTO_THREAD_run_once/#see-also","title":"SEE ALSO","text":"<p>crypto(7)</p>"},{"location":"man3/CRYPTO_THREAD_run_once/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CRYPTO_get_ex_new_index/","title":"CRYPTO_get_ex_new_index","text":""},{"location":"man3/CRYPTO_get_ex_new_index/#name","title":"NAME","text":"<p>CRYPTO_EX_new, CRYPTO_EX_free, CRYPTO_EX_dup, CRYPTO_free_ex_index, CRYPTO_get_ex_new_index, CRYPTO_set_ex_data, CRYPTO_get_ex_data, CRYPTO_free_ex_data, CRYPTO_new_ex_data - functions supporting application-specific data</p>"},{"location":"man3/CRYPTO_get_ex_new_index/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nint CRYPTO_get_ex_new_index(int class_index,\n                            long argl, void *argp,\n                            CRYPTO_EX_new *new_func,\n                            CRYPTO_EX_dup *dup_func,\n                            CRYPTO_EX_free *free_func);\n\ntypedef void CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad,\n                           int idx, long argl, void *argp);\ntypedef void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad,\n                            int idx, long argl, void *argp);\ntypedef int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,\n                          void *from_d, int idx, long argl, void *argp);\n\nint CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)\n\nint CRYPTO_set_ex_data(CRYPTO_EX_DATA *r, int idx, void *arg);\n\nvoid *CRYPTO_get_ex_data(CRYPTO_EX_DATA *r, int idx);\n\nvoid CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *r);\n\nint CRYPTO_free_ex_index(int class_index, int idx);\n</code></pre>"},{"location":"man3/CRYPTO_get_ex_new_index/#description","title":"DESCRIPTION","text":"<p>Several OpenSSL structures can have application-specific data attached to them, known as \"exdata.\" The specific structures are:</p> <pre><code>APP\nBIO\nDH\nDRBG\nDSA\nEC_KEY\nENGINE\nRSA\nSSL\nSSL_CTX\nSSL_SESSION\nUI\nUI_METHOD\nX509\nX509_STORE\nX509_STORE_CTX\n</code></pre> <p>Each is identified by an CRYPTO_EX_INDEX_xxx define in the crypto.h header file.  In addition, CRYPTO_EX_INDEX_APP is reserved for applications to use this facility for their own structures.</p> <p>The API described here is used by OpenSSL to manipulate exdata for specific structures.  Since the application data can be anything at all it is passed and retrieved as a void * type.</p> <p>The CRYPTO_EX_DATA type is opaque.  To initialize the exdata part of a structure, call CRYPTO_new_ex_data(). This is only necessary for CRYPTO_EX_INDEX_APP objects.</p> <p>Exdata types are identified by an index, an integer guaranteed to be unique within structures for the lifetime of the program.  Applications using exdata typically call CRYPTO_get_ex_new_index at startup, and store the result in a global variable, or write a wrapper function to provide lazy evaluation.  The class_index should be one of the CRYPTO_EX_INDEX_xxx values. The argl and argp parameters are saved to be passed to the callbacks but are otherwise not used.  In order to transparently manipulate exdata, three callbacks must be provided. The semantics of those callbacks are described below.</p> <p>When copying or releasing objects with exdata, the callback functions are called in increasing order of their index value.</p> <p>If a dynamic library can be unloaded, it should call CRYPTO_free_ex_index() when this is done. This will replace the callbacks with no-ops so that applications don't crash.  Any existing exdata will be leaked.</p> <p>To set or get the exdata on an object, the appropriate type-specific routine must be used.  This is because the containing structure is opaque and the CRYPTO_EX_DATA field is not accessible.  In both API's, the idx parameter should be an already-created index value.</p> <p>When setting exdata, the pointer specified with a particular index is saved, and returned on a subsequent \"get\" call.  If the application is going to release the data, it must make sure to set a NULL value at the index, to avoid likely double-free crashes.</p> <p>The function CRYPTO_free_ex_data is used to free all exdata attached to a structure. The appropriate type-specific routine must be used. The class_index identifies the structure type, the obj is a pointer to the actual structure, and r is a pointer to the structure's exdata field.</p>"},{"location":"man3/CRYPTO_get_ex_new_index/#callback-functions","title":"Callback Functions","text":"<p>This section describes how the callback functions are used. Applications that are defining their own exdata using CYPRTO_EX_INDEX_APP must call them as described here.</p> <p>When a structure is initially allocated (such as RSA_new()) then the new_func() is called for every defined index. There is no requirement that the entire parent, or containing, structure has been set up. The new_func() is typically used only to allocate memory to store the exdata, and perhaps an \"initialized\" flag within that memory. The exdata value should be set by calling CRYPTO_set_ex_data().</p> <p>When a structure is free'd (such as SSL_CTX_free()) then the free_func() is called for every defined index.  Again, the state of the parent structure is not guaranteed.  The free_func() may be called with a NULL pointer.</p> <p>Both new_func() and free_func() take the same parameters. The parent is the pointer to the structure that contains the exdata. The ptr is the current exdata item; for new_func() this will typically be NULL.  The r parameter is a pointer to the exdata field of the object. The idx is the index and is the value returned when the callbacks were initially registered via CRYPTO_get_ex_new_index() and can be used if the same callback handles different types of exdata.</p> <p>dup_func() is called when a structure is being copied.  This is only done for SSL, SSL_SESSION, EC_KEY objects and BIO chains via BIO_dup_chain().  The to and from parameters are pointers to the destination and source CRYPTO_EX_DATA structures, respectively.  The from_d parameter needs to be cast to a void **pptr as the API has currently the wrong signature; that will be changed in a future version.  The *pptr is a pointer to the source exdata. When the dup_func() returns, the value in *pptr is copied to the destination ex_data.  If the pointer contained in *pptr is not modified by the dup_func(), then both to and from will point to the same data. The idx, argl and argp parameters are as described for the other two callbacks.  If the dup_func() returns 0 the whole CRYPTO_dup_ex_data() will fail.</p>"},{"location":"man3/CRYPTO_get_ex_new_index/#return-values","title":"RETURN VALUES","text":"<p>CRYPTO_get_ex_new_index() returns a new index or -1 on failure.</p> <p>CRYPTO_free_ex_index() and CRYPTO_set_ex_data() return 1 on success or 0 on failure.</p> <p>CRYPTO_get_ex_data() returns the application data or NULL on failure; note that NULL may be a valid value.</p> <p>dup_func() should return 0 for failure and 1 for success.</p>"},{"location":"man3/CRYPTO_get_ex_new_index/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CRYPTO_memcmp/","title":"CRYPTO_memcmp","text":""},{"location":"man3/CRYPTO_memcmp/#name","title":"NAME","text":"<p>CRYPTO_memcmp - Constant time memory comparison</p>"},{"location":"man3/CRYPTO_memcmp/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nint CRYPTO_memcmp(const void *a, const void *b, size_t len);\n</code></pre>"},{"location":"man3/CRYPTO_memcmp/#description","title":"DESCRIPTION","text":"<p>The CRYPTO_memcmp function compares the len bytes pointed to by a and b for equality. It takes an amount of time dependent on len, but independent of the contents of the memory regions pointed to by a and b.</p>"},{"location":"man3/CRYPTO_memcmp/#return-values","title":"RETURN VALUES","text":"<p>CRYPTO_memcmp() returns 0 if the memory regions are equal and nonzero otherwise.</p>"},{"location":"man3/CRYPTO_memcmp/#notes","title":"NOTES","text":"<p>Unlike memcmp(2), this function cannot be used to order the two memory regions as the return value when they differ is undefined, other than being nonzero.</p>"},{"location":"man3/CRYPTO_memcmp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2019-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the Apache License 2.0 (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/","title":"CTLOG_STORE_get0_log_by_id","text":""},{"location":"man3/CTLOG_STORE_get0_log_by_id/#name","title":"NAME","text":"<p>CTLOG_STORE_get0_log_by_id - Get a Certificate Transparency log from a CTLOG_STORE</p>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\nconst CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,\n                                        const uint8_t *log_id,\n                                        size_t log_id_len);\n</code></pre>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/#description","title":"DESCRIPTION","text":"<p>A Signed Certificate Timestamp (SCT) identifies the Certificate Transparency (CT) log that issued it using the log's LogID (see RFC 6962, Section 3.2). Therefore, it is useful to be able to look up more information about a log (e.g. its public key) using this LogID.</p> <p>CTLOG_STORE_get0_log_by_id() provides a way to do this. It will find a CTLOG in a CTLOG_STORE that has a given LogID.</p>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/#return-values","title":"RETURN VALUES","text":"<p>CTLOG_STORE_get0_log_by_id returns a CTLOG with the given LogID, if it exists in the given CTLOG_STORE, otherwise it returns NULL.</p>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/#see-also","title":"SEE ALSO","text":"<p>ct(7), CTLOG_STORE_new(3)</p>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/#history","title":"HISTORY","text":"<p>The CTLOG_STORE_get0_log_by_id() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/CTLOG_STORE_get0_log_by_id/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CTLOG_STORE_new/","title":"CTLOG_STORE_new","text":""},{"location":"man3/CTLOG_STORE_new/#name","title":"NAME","text":"<p>CTLOG_STORE_new, CTLOG_STORE_free, CTLOG_STORE_load_default_file, CTLOG_STORE_load_file - Create and populate a Certificate Transparency log list</p>"},{"location":"man3/CTLOG_STORE_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\nCTLOG_STORE *CTLOG_STORE_new(void);\nvoid CTLOG_STORE_free(CTLOG_STORE *store);\n\nint CTLOG_STORE_load_default_file(CTLOG_STORE *store);\nint CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);\n</code></pre>"},{"location":"man3/CTLOG_STORE_new/#description","title":"DESCRIPTION","text":"<p>A CTLOG_STORE is a container for a list of CTLOGs (Certificate Transparency logs). The list can be loaded from one or more files and then searched by LogID (see RFC 6962, Section 3.2, for the definition of a LogID).</p> <p>CTLOG_STORE_new() creates an empty list of CT logs. This is then populated by CTLOG_STORE_load_default_file() or CTLOG_STORE_load_file(). CTLOG_STORE_load_default_file() loads from the default file, which is named \"ct_log_list.cnf\" in OPENSSLDIR (see the output of version). This can be overridden using an environment variable named \"CTLOG_FILE\". CTLOG_STORE_load_file() loads from a caller-specified file path instead. Both of these functions append any loaded CT logs to the CTLOG_STORE.</p> <p>The expected format of the file is:</p> <pre><code>enabled_logs=foo,bar\n\n[foo]\ndescription = Log 1\nkey = &lt;base64-encoded DER SubjectPublicKeyInfo here&gt;\n\n[bar]\ndescription = Log 2\nkey = &lt;base64-encoded DER SubjectPublicKeyInfo here&gt;\n</code></pre> <p>Once a CTLOG_STORE is no longer required, it should be passed to CTLOG_STORE_free(). This will delete all of the CTLOGs stored within, along with the CTLOG_STORE itself.</p>"},{"location":"man3/CTLOG_STORE_new/#notes","title":"NOTES","text":"<p>If there are any invalid CT logs in a file, they are skipped and the remaining valid logs will still be added to the CTLOG_STORE. A CT log will be considered invalid if it is missing a \"key\" or \"description\" field.</p>"},{"location":"man3/CTLOG_STORE_new/#return-values","title":"RETURN VALUES","text":"<p>Both CTLOG_STORE_load_default_file and CTLOG_STORE_load_file return 1 if all CT logs in the file are successfully parsed and loaded, 0 otherwise.</p>"},{"location":"man3/CTLOG_STORE_new/#see-also","title":"SEE ALSO","text":"<p>ct(7), CTLOG_STORE_get0_log_by_id(3), SSL_CTX_set_ctlog_list_file(3)</p>"},{"location":"man3/CTLOG_STORE_new/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/CTLOG_STORE_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CTLOG_new/","title":"CTLOG_new","text":""},{"location":"man3/CTLOG_new/#name","title":"NAME","text":"<p>CTLOG_new, CTLOG_new_from_base64, CTLOG_free, CTLOG_get0_name, CTLOG_get0_log_id, CTLOG_get0_public_key - encapsulates information about a Certificate Transparency log</p>"},{"location":"man3/CTLOG_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\nCTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name);\nint CTLOG_new_from_base64(CTLOG ** ct_log,\n                          const char *pkey_base64, const char *name);\nvoid CTLOG_free(CTLOG *log);\nconst char *CTLOG_get0_name(const CTLOG *log);\nvoid CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,\n                       size_t *log_id_len);\nEVP_PKEY *CTLOG_get0_public_key(const CTLOG *log);\n</code></pre>"},{"location":"man3/CTLOG_new/#description","title":"DESCRIPTION","text":"<p>CTLOG_new() returns a new CTLOG that represents the Certificate Transparency (CT) log with the given public key. A name must also be provided that can be used to help users identify this log. Ownership of the public key is transferred.</p> <p>CTLOG_new_from_base64() also creates a new CTLOG, but takes the public key in base64-encoded DER form and sets the ct_log pointer to point to the new CTLOG. The base64 will be decoded and the public key parsed.</p> <p>Regardless of whether CTLOG_new() or CTLOG_new_from_base64() is used, it is the caller's responsibility to pass the CTLOG to CTLOG_free() once it is no longer needed. This will delete it and, if created by CTLOG_new(), the EVP_PKEY that was passed to it.</p> <p>CTLOG_get0_name() returns the name of the log, as provided when the CTLOG was created. Ownership of the string remains with the CTLOG.</p> <p>CTLOG_get0_log_id() sets *log_id to point to a string containing that log's LogID (see RFC 6962). It sets *log_id_len to the length of that LogID. For a v1 CT log, the LogID will be a SHA-256 hash (i.e. 32 bytes long). Ownership of the string remains with the CTLOG.</p> <p>CTLOG_get0_public_key() returns the public key of the CT log. Ownership of the EVP_PKEY remains with the CTLOG.</p>"},{"location":"man3/CTLOG_new/#return-values","title":"RETURN VALUES","text":"<p>CTLOG_new() will return NULL if an error occurs.</p> <p>CTLOG_new_from_base64() will return 1 on success, 0 otherwise.</p>"},{"location":"man3/CTLOG_new/#see-also","title":"SEE ALSO","text":"<p>ct(7)</p>"},{"location":"man3/CTLOG_new/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/CTLOG_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/","title":"CT_POLICY_EVAL_CTX_new","text":""},{"location":"man3/CT_POLICY_EVAL_CTX_new/#name","title":"NAME","text":"<p>CT_POLICY_EVAL_CTX_new, CT_POLICY_EVAL_CTX_free, CT_POLICY_EVAL_CTX_get0_cert, CT_POLICY_EVAL_CTX_set1_cert, CT_POLICY_EVAL_CTX_get0_issuer, CT_POLICY_EVAL_CTX_set1_issuer, CT_POLICY_EVAL_CTX_get0_log_store, CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE, CT_POLICY_EVAL_CTX_get_time, CT_POLICY_EVAL_CTX_set_time - Encapsulates the data required to evaluate whether SCTs meet a Certificate Transparency policy</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\nCT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void);\nvoid CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx);\nX509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx);\nint CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert);\nX509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx);\nint CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer);\nconst CTLOG_STORE *CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx);\nvoid CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,\n                                               CTLOG_STORE *log_store);\nuint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);\nvoid CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);\n</code></pre>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#description","title":"DESCRIPTION","text":"<p>A CT_POLICY_EVAL_CTX is used by functions that evaluate whether Signed Certificate Timestamps (SCTs) fulfil a Certificate Transparency (CT) policy. This policy may be, for example, that at least one valid SCT is available. To determine this, an SCT's timestamp and signature must be verified. This requires:</p> <ul> <li>the public key of the log that issued the SCT</li> <li>the certificate that the SCT was issued for</li> <li>the issuer certificate (if the SCT was issued for a pre-certificate)</li> <li>the current time</li> </ul> <p>The above requirements are met using the setters described below.</p> <p>CT_POLICY_EVAL_CTX_new() creates an empty policy evaluation context. This should then be populated using:</p> <ul> <li> <p>CT_POLICY_EVAL_CTX_set1_cert() to provide the certificate the SCTs were issued for</p> <p>Increments the reference count of the certificate.</p> </li> <li> <p>CT_POLICY_EVAL_CTX_set1_issuer() to provide the issuer certificate</p> <p>Increments the reference count of the certificate.</p> </li> <li> <p>CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE() to provide a list of logs that are trusted as sources of SCTs</p> <p>Holds a pointer to the CTLOG_STORE, so the CTLOG_STORE must outlive the CT_POLICY_EVAL_CTX.</p> </li> <li> <p>CT_POLICY_EVAL_CTX_set_time() to set the time SCTs should be compared with to determine if they are valid</p> <p>The SCT timestamp will be compared to this time to check whether the SCT was issued in the future. RFC6962 states that \"TLS clients MUST reject SCTs whose timestamp is in the future\". By default, this will be set to 5 minutes in the future (e.g. (time() + 300) * 1000), to allow for clock drift.</p> <p>The time should be in milliseconds since the Unix epoch.</p> </li> </ul> <p>Each setter has a matching getter for accessing the current value.</p> <p>When no longer required, the CT_POLICY_EVAL_CTX should be passed to CT_POLICY_EVAL_CTX_free() to delete it.</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#notes","title":"NOTES","text":"<p>The issuer certificate only needs to be provided if at least one of the SCTs was issued for a pre-certificate. This will be the case for SCTs embedded in a certificate (i.e. those in an X.509 extension), but may not be the case for SCTs found in the TLS SCT extension or OCSP response.</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>CT_POLICY_EVAL_CTX_new() will return NULL if malloc fails.</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#see-also","title":"SEE ALSO","text":"<p>ct(7)</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/CT_POLICY_EVAL_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DEFINE_STACK_OF/","title":"DEFINE_STACK_OF","text":""},{"location":"man3/DEFINE_STACK_OF/#name","title":"NAME","text":"<p>DEFINE_STACK_OF, DEFINE_STACK_OF_CONST, DEFINE_SPECIAL_STACK_OF, DEFINE_SPECIAL_STACK_OF_CONST, sk_TYPE_num, sk_TYPE_value, sk_TYPE_new, sk_TYPE_new_null, sk_TYPE_reserve, sk_TYPE_free, sk_TYPE_zero, sk_TYPE_delete, sk_TYPE_delete_ptr, sk_TYPE_push, sk_TYPE_unshift, sk_TYPE_pop, sk_TYPE_shift, sk_TYPE_pop_free, sk_TYPE_insert, sk_TYPE_set, sk_TYPE_find, sk_TYPE_find_ex, sk_TYPE_sort, sk_TYPE_is_sorted, sk_TYPE_dup, sk_TYPE_deep_copy, sk_TYPE_set_cmp_func, sk_TYPE_new_reserve - stack container</p>"},{"location":"man3/DEFINE_STACK_OF/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/safestack.h&gt;\n\nSTACK_OF(TYPE)\nDEFINE_STACK_OF(TYPE)\nDEFINE_STACK_OF_CONST(TYPE)\nDEFINE_SPECIAL_STACK_OF(FUNCTYPE, TYPE)\nDEFINE_SPECIAL_STACK_OF_CONST(FUNCTYPE, TYPE)\n\ntypedef int (*sk_TYPE_compfunc)(const TYPE *const *a, const TYPE *const *b);\ntypedef TYPE * (*sk_TYPE_copyfunc)(const TYPE *a);\ntypedef void (*sk_TYPE_freefunc)(TYPE *a);\n\nint sk_TYPE_num(const STACK_OF(TYPE) *sk);\nTYPE *sk_TYPE_value(const STACK_OF(TYPE) *sk, int idx);\nSTACK_OF(TYPE) *sk_TYPE_new(sk_TYPE_compfunc compare);\nSTACK_OF(TYPE) *sk_TYPE_new_null(void);\nint sk_TYPE_reserve(STACK_OF(TYPE) *sk, int n);\nvoid sk_TYPE_free(const STACK_OF(TYPE) *sk);\nvoid sk_TYPE_zero(const STACK_OF(TYPE) *sk);\nTYPE *sk_TYPE_delete(STACK_OF(TYPE) *sk, int i);\nTYPE *sk_TYPE_delete_ptr(STACK_OF(TYPE) *sk, TYPE *ptr);\nint sk_TYPE_push(STACK_OF(TYPE) *sk, const TYPE *ptr);\nint sk_TYPE_unshift(STACK_OF(TYPE) *sk, const TYPE *ptr);\nTYPE *sk_TYPE_pop(STACK_OF(TYPE) *sk);\nTYPE *sk_TYPE_shift(STACK_OF(TYPE) *sk);\nvoid sk_TYPE_pop_free(STACK_OF(TYPE) *sk, sk_TYPE_freefunc freefunc);\nint sk_TYPE_insert(STACK_OF(TYPE) *sk, TYPE *ptr, int idx);\nTYPE *sk_TYPE_set(STACK_OF(TYPE) *sk, int idx, const TYPE *ptr);\nint sk_TYPE_find(STACK_OF(TYPE) *sk, TYPE *ptr);\nint sk_TYPE_find_ex(STACK_OF(TYPE) *sk, TYPE *ptr);\nvoid sk_TYPE_sort(const STACK_OF(TYPE) *sk);\nint sk_TYPE_is_sorted(const STACK_OF(TYPE) *sk);\nSTACK_OF(TYPE) *sk_TYPE_dup(const STACK_OF(TYPE) *sk);\nSTACK_OF(TYPE) *sk_TYPE_deep_copy(const STACK_OF(TYPE) *sk,\n                                  sk_TYPE_copyfunc copyfunc,\n                                  sk_TYPE_freefunc freefunc);\nsk_TYPE_compfunc (*sk_TYPE_set_cmp_func(STACK_OF(TYPE) *sk,\n                                        sk_TYPE_compfunc compare));\nSTACK_OF(TYPE) *sk_TYPE_new_reserve(sk_TYPE_compfunc compare, int n);\n</code></pre>"},{"location":"man3/DEFINE_STACK_OF/#description","title":"DESCRIPTION","text":"<p>Applications can create and use their own stacks by placing any of the macros described below in a header file. These macros define typesafe inline functions that wrap around the utility OPENSSL_sk_ API. In the description here, TYPE is used as a placeholder for any of the OpenSSL datatypes, such as X509.</p> <p>STACK_OF() returns the name for a stack of the specified TYPE. DEFINE_STACK_OF() creates set of functions for a stack of TYPE. This will mean that type TYPE is stored in each stack, the type is referenced by STACK_OF(TYPE) and each function name begins with sk_TYPE_. For example:</p> <pre><code>TYPE *sk_TYPE_value(STACK_OF(TYPE) *sk, int idx);\n</code></pre> <p>DEFINE_STACK_OF_CONST() is identical to DEFINE_STACK_OF() except each element is constant. For example:</p> <pre><code>const TYPE *sk_TYPE_value(STACK_OF(TYPE) *sk, int idx);\n</code></pre> <p>DEFINE_SPECIAL_STACK_OF() defines a stack of TYPE but each function uses FUNCNAME in the function name. For example:</p> <pre><code>TYPE *sk_FUNCNAME_value(STACK_OF(TYPE) *sk, int idx);\n</code></pre> <p>DEFINE_SPECIAL_STACK_OF_CONST() is similar except that each element is constant:</p> <pre><code>const TYPE *sk_FUNCNAME_value(STACK_OF(TYPE) *sk, int idx);\n</code></pre> <p>sk_TYPE_num() returns the number of elements in sk or -1 if sk is NULL.</p> <p>sk_TYPE_value() returns element idx in sk, where idx starts at zero. If idx is out of range then NULL is returned.</p> <p>sk_TYPE_new() allocates a new empty stack using comparison function compare. If compare is NULL then no comparison function is used. This function is equivalent to sk_TYPE_new_reserve(compare, 0).</p> <p>sk_TYPE_new_null() allocates a new empty stack with no comparison function. This function is equivalent to sk_TYPE_new_reserve(NULL, 0).</p> <p>sk_TYPE_reserve() allocates additional memory in the sk structure such that the next n calls to sk_TYPE_insert(), sk_TYPE_push() or sk_TYPE_unshift() will not fail or cause memory to be allocated or reallocated. If n is zero, any excess space allocated in the sk structure is freed. On error sk is unchanged.</p> <p>sk_TYPE_new_reserve() allocates a new stack. The new stack will have additional memory allocated to hold n elements if n is positive. The next n calls to sk_TYPE_insert(), sk_TYPE_push() or sk_TYPE_unshift() will not fail or cause memory to be allocated or reallocated. If n is zero or less than zero, no memory is allocated. sk_TYPE_new_reserve() also sets the comparison function compare to the newly created stack. If compare is NULL then no comparison function is used.</p> <p>sk_TYPE_set_cmp_func() sets the comparison function of sk to compare. The previous comparison function is returned or NULL if there was no previous comparison function.</p> <p>sk_TYPE_free() frees up the sk structure. It does not free up any elements of sk. After this call sk is no longer valid.</p> <p>sk_TYPE_zero() sets the number of elements in sk to zero. It does not free sk so after this call sk is still valid.</p> <p>sk_TYPE_pop_free() frees up all elements of sk and sk itself. The free function freefunc() is called on each element to free it.</p> <p>sk_TYPE_delete() deletes element i from sk. It returns the deleted element or NULL if i is out of range.</p> <p>sk_TYPE_delete_ptr() deletes element matching ptr from sk. It returns the deleted element or NULL if no element matching ptr was found.</p> <p>sk_TYPE_insert() inserts ptr into sk at position idx. Any existing elements at or after idx are moved downwards. If idx is out of range the new element is appended to sk. sk_TYPE_insert() either returns the number of elements in sk after the new element is inserted or zero if an error (such as memory allocation failure) occurred.</p> <p>sk_TYPE_push() appends ptr to sk it is equivalent to:</p> <pre><code>sk_TYPE_insert(sk, ptr, -1);\n</code></pre> <p>sk_TYPE_unshift() inserts ptr at the start of sk it is equivalent to:</p> <pre><code>sk_TYPE_insert(sk, ptr, 0);\n</code></pre> <p>sk_TYPE_pop() returns and removes the last element from sk.</p> <p>sk_TYPE_shift() returns and removes the first element from sk.</p> <p>sk_TYPE_set() sets element idx of sk to ptr replacing the current element. The new element value is returned or NULL if an error occurred: this will only happen if sk is NULL or idx is out of range.</p> <p>sk_TYPE_find() searches sk for the element ptr.  In the case where no comparison function has been specified, the function performs a linear search for a pointer equal to ptr. The index of the first matching element is returned or -1 if there is no match. In the case where a comparison function has been specified, sk is sorted then sk_TYPE_find() returns the index of a matching element or -1 if there is no match. Note that, in this case, the matching element returned is not guaranteed to be the first; the comparison function will usually compare the values pointed to rather than the pointers themselves and the order of elements in sk could change.</p> <p>sk_TYPE_find_ex() operates like sk_TYPE_find() except when a comparison function has been specified and no matching element is found. Instead of returning -1, sk_TYPE_find_ex() returns the index of the element either before or after the location where ptr would be if it were present in sk.</p> <p>sk_TYPE_sort() sorts sk using the supplied comparison function.</p> <p>sk_TYPE_is_sorted() returns 1 if sk is sorted and 0 otherwise.</p> <p>sk_TYPE_dup() returns a copy of sk. Note the pointers in the copy are identical to the original.</p> <p>sk_TYPE_deep_copy() returns a new stack where each element has been copied. Copying is performed by the supplied copyfunc() and freeing by freefunc(). The function freefunc() is only called if an error occurs.</p>"},{"location":"man3/DEFINE_STACK_OF/#notes","title":"NOTES","text":"<p>Care should be taken when accessing stacks in multi-threaded environments. Any operation which increases the size of a stack such as sk_TYPE_insert() or sk_push() can \"grow\" the size of an internal array and cause race conditions if the same stack is accessed in a different thread. Operations such as sk_find() and sk_sort() can also reorder the stack.</p> <p>Any comparison function supplied should use a metric suitable for use in a binary search operation. That is it should return zero, a positive or negative value if a is equal to, greater than or less than b respectively.</p> <p>Care should be taken when checking the return values of the functions sk_TYPE_find() and sk_TYPE_find_ex(). They return an index to the matching element. In particular 0 indicates a matching first element. A failed search is indicated by a -1 return value.</p> <p>STACK_OF(), DEFINE_STACK_OF(), DEFINE_STACK_OF_CONST(), and DEFINE_SPECIAL_STACK_OF() are implemented as macros.</p> <p>The underlying utility OPENSSL_sk_ API should not be used directly. It defines these functions: OPENSSL_sk_deep_copy(), OPENSSL_sk_delete(), OPENSSL_sk_delete_ptr(), OPENSSL_sk_dup(), OPENSSL_sk_find(), OPENSSL_sk_find_ex(), OPENSSL_sk_free(), OPENSSL_sk_insert(), OPENSSL_sk_is_sorted(), OPENSSL_sk_new(), OPENSSL_sk_new_null(), OPENSSL_sk_num(), OPENSSL_sk_pop(), OPENSSL_sk_pop_free(), OPENSSL_sk_push(), OPENSSL_sk_reserve(), OPENSSL_sk_set(), OPENSSL_sk_set_cmp_func(), OPENSSL_sk_shift(), OPENSSL_sk_sort(), OPENSSL_sk_unshift(), OPENSSL_sk_value(), OPENSSL_sk_zero().</p>"},{"location":"man3/DEFINE_STACK_OF/#return-values","title":"RETURN VALUES","text":"<p>sk_TYPE_num() returns the number of elements in the stack or -1 if the passed stack is NULL.</p> <p>sk_TYPE_value() returns a pointer to a stack element or NULL if the index is out of range.</p> <p>sk_TYPE_new(), sk_TYPE_new_null() and sk_TYPE_new_reserve() return an empty stack or NULL if an error occurs.</p> <p>sk_TYPE_reserve() returns 1 on successful allocation of the required memory or 0 on error.</p> <p>sk_TYPE_set_cmp_func() returns the old comparison function or NULL if there was no old comparison function.</p> <p>sk_TYPE_free(), sk_TYPE_zero(), sk_TYPE_pop_free() and sk_TYPE_sort() do not return values.</p> <p>sk_TYPE_pop(), sk_TYPE_shift(), sk_TYPE_delete() and sk_TYPE_delete_ptr() return a pointer to the deleted element or NULL on error.</p> <p>sk_TYPE_insert(), sk_TYPE_push() and sk_TYPE_unshift() return the total number of elements in the stack and 0 if an error occurred. sk_TYPE_push() further returns -1 if sk is NULL.</p> <p>sk_TYPE_set() returns a pointer to the replacement element or NULL on error.</p> <p>sk_TYPE_find() and sk_TYPE_find_ex() return an index to the found element or -1 on error.</p> <p>sk_TYPE_is_sorted() returns 1 if the stack is sorted and 0 if it is not.</p> <p>sk_TYPE_dup() and sk_TYPE_deep_copy() return a pointer to the copy of the stack.</p>"},{"location":"man3/DEFINE_STACK_OF/#history","title":"HISTORY","text":"<p>Before OpenSSL 1.1.0, this was implemented via macros and not inline functions and was not a public API.</p> <p>sk_TYPE_reserve() and sk_TYPE_new_reserve() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/DEFINE_STACK_OF/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DES_random_key/","title":"DES_random_key","text":""},{"location":"man3/DES_random_key/#name","title":"NAME","text":"<p>DES_random_key, DES_set_key, DES_key_sched, DES_set_key_checked, DES_set_key_unchecked, DES_set_odd_parity, DES_is_weak_key, DES_ecb_encrypt, DES_ecb2_encrypt, DES_ecb3_encrypt, DES_ncbc_encrypt, DES_cfb_encrypt, DES_ofb_encrypt, DES_pcbc_encrypt, DES_cfb64_encrypt, DES_ofb64_encrypt, DES_xcbc_encrypt, DES_ede2_cbc_encrypt, DES_ede2_cfb64_encrypt, DES_ede2_ofb64_encrypt, DES_ede3_cbc_encrypt, DES_ede3_cfb64_encrypt, DES_ede3_ofb64_encrypt, DES_cbc_cksum, DES_quad_cksum, DES_string_to_key, DES_string_to_2keys, DES_fcrypt, DES_crypt - DES encryption</p>"},{"location":"man3/DES_random_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/des.h&gt;\n\nvoid DES_random_key(DES_cblock *ret);\n\nint DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);\nint DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);\nint DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule);\nvoid DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule);\n\nvoid DES_set_odd_parity(DES_cblock *key);\nint DES_is_weak_key(const_DES_cblock *key);\n\nvoid DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,\n                     DES_key_schedule *ks, int enc);\nvoid DES_ecb2_encrypt(const_DES_cblock *input, DES_cblock *output,\n                      DES_key_schedule *ks1, DES_key_schedule *ks2, int enc);\nvoid DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,\n                      DES_key_schedule *ks1, DES_key_schedule *ks2,\n                      DES_key_schedule *ks3, int enc);\n\nvoid DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,\n                      long length, DES_key_schedule *schedule, DES_cblock *ivec,\n                      int enc);\nvoid DES_cfb_encrypt(const unsigned char *in, unsigned char *out,\n                     int numbits, long length, DES_key_schedule *schedule,\n                     DES_cblock *ivec, int enc);\nvoid DES_ofb_encrypt(const unsigned char *in, unsigned char *out,\n                     int numbits, long length, DES_key_schedule *schedule,\n                     DES_cblock *ivec);\nvoid DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,\n                      long length, DES_key_schedule *schedule, DES_cblock *ivec,\n                      int enc);\nvoid DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,\n                       long length, DES_key_schedule *schedule, DES_cblock *ivec,\n                       int *num, int enc);\nvoid DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,\n                       long length, DES_key_schedule *schedule, DES_cblock *ivec,\n                       int *num);\n\nvoid DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,\n                      long length, DES_key_schedule *schedule, DES_cblock *ivec,\n                      const_DES_cblock *inw, const_DES_cblock *outw, int enc);\n\nvoid DES_ede2_cbc_encrypt(const unsigned char *input, unsigned char *output,\n                          long length, DES_key_schedule *ks1,\n                          DES_key_schedule *ks2, DES_cblock *ivec, int enc);\nvoid DES_ede2_cfb64_encrypt(const unsigned char *in, unsigned char *out,\n                            long length, DES_key_schedule *ks1,\n                            DES_key_schedule *ks2, DES_cblock *ivec,\n                            int *num, int enc);\nvoid DES_ede2_ofb64_encrypt(const unsigned char *in, unsigned char *out,\n                            long length, DES_key_schedule *ks1,\n                            DES_key_schedule *ks2, DES_cblock *ivec, int *num);\n\nvoid DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,\n                          long length, DES_key_schedule *ks1,\n                          DES_key_schedule *ks2, DES_key_schedule *ks3,\n                          DES_cblock *ivec, int enc);\nvoid DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,\n                            long length, DES_key_schedule *ks1,\n                            DES_key_schedule *ks2, DES_key_schedule *ks3,\n                            DES_cblock *ivec, int *num, int enc);\nvoid DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,\n                            long length, DES_key_schedule *ks1,\n                            DES_key_schedule *ks2, DES_key_schedule *ks3,\n                            DES_cblock *ivec, int *num);\n\nDES_LONG DES_cbc_cksum(const unsigned char *input, DES_cblock *output,\n                       long length, DES_key_schedule *schedule,\n                       const_DES_cblock *ivec);\nDES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],\n                        long length, int out_count, DES_cblock *seed);\nvoid DES_string_to_key(const char *str, DES_cblock *key);\nvoid DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2);\n\nchar *DES_fcrypt(const char *buf, const char *salt, char *ret);\nchar *DES_crypt(const char *buf, const char *salt);\n</code></pre>"},{"location":"man3/DES_random_key/#description","title":"DESCRIPTION","text":"<p>This library contains a fast implementation of the DES encryption algorithm.</p> <p>There are two phases to the use of DES encryption.  The first is the generation of a DES_key_schedule from a key, the second is the actual encryption.  A DES key is of type DES_cblock. This type consists of 8 bytes with odd parity.  The least significant bit in each byte is the parity bit.  The key schedule is an expanded form of the key; it is used to speed the encryption process.</p> <p>DES_random_key() generates a random key.  The random generator must be seeded when calling this function. If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail. If the function fails, 0 is returned.</p> <p>Before a DES key can be used, it must be converted into the architecture dependent DES_key_schedule via the DES_set_key_checked() or DES_set_key_unchecked() function.</p> <p>DES_set_key_checked() will check that the key passed is of odd parity and is not a weak or semi-weak key.  If the parity is wrong, then -1 is returned.  If the key is a weak key, then -2 is returned.  If an error is returned, the key schedule is not generated.</p> <p>DES_set_key() works like DES_set_key_checked() if the DES_check_key flag is nonzero, otherwise like DES_set_key_unchecked().  These functions are available for compatibility; it is recommended to use a function that does not depend on a global variable.</p> <p>DES_set_odd_parity() sets the parity of the passed key to odd.</p> <p>DES_is_weak_key() returns 1 if the passed key is a weak key, 0 if it is ok.</p> <p>The following routines mostly operate on an input and output stream of _DES_cblock_s.</p> <p>DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_cblock in electronic code book (ECB) mode.  It always transforms the input data, pointed to by input, into the output data, pointed to by the output argument. If the encrypt argument is nonzero (DES_ENCRYPT), the input (cleartext) is encrypted in to the output (ciphertext) using the key_schedule specified by the schedule argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the input (now ciphertext) is decrypted into the output (now cleartext).  Input and output may overlap.  DES_ecb_encrypt() does not return a value.</p> <p>DES_ecb3_encrypt() encrypts/decrypts the input block by using three-key Triple-DES encryption in ECB mode.  This involves encrypting the input with ks1, decrypting with the key schedule ks2, and then encrypting with ks3.  This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key.</p> <p>The macro DES_ecb2_encrypt() is provided to perform two-key Triple-DES encryption by using ks1 for the final encryption.</p> <p>DES_ncbc_encrypt() encrypts/decrypts using the cipher-block-chaining (CBC) mode of DES.  If the encrypt argument is nonzero, the routine cipher-block-chain encrypts the cleartext data pointed to by the input argument into the ciphertext pointed to by the output argument, using the key schedule provided by the schedule argument, and initialization vector provided by the ivec argument.  If the length argument is not an integral multiple of eight bytes, the last block is copied to a temporary area and zero filled.  The output is always an integral multiple of eight bytes.</p> <p>DES_xcbc_encrypt() is RSA's DESX mode of DES.  It uses inw and outw to 'whiten' the encryption.  inw and outw are secret (unlike the iv) and are as such, part of the key.  So the key is sort of 24 bytes.  This is much better than CBC DES.</p> <p>DES_ede3_cbc_encrypt() implements outer triple CBC DES encryption with three keys. This means that each DES operation inside the CBC mode is <code>C=E(ks3,D(ks2,E(ks1,M)))</code>.  This mode is used by SSL.</p> <p>The DES_ede2_cbc_encrypt() macro implements two-key Triple-DES by reusing ks1 for the final encryption.  <code>C=E(ks1,D(ks2,E(ks1,M)))</code>. This form of Triple-DES is used by the RSAREF library.</p> <p>DES_pcbc_encrypt() encrypts/decrypts using the propagating cipher block chaining mode used by Kerberos v4. Its parameters are the same as DES_ncbc_encrypt().</p> <p>DES_cfb_encrypt() encrypts/decrypts using cipher feedback mode.  This method takes an array of characters as input and outputs an array of characters.  It does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function.  Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending a small number of characters.</p> <p>DES_cfb64_encrypt() implements CFB mode of DES with 64-bit feedback.  Why is this useful you ask?  Because this routine will allow you to encrypt an arbitrary number of bytes, without 8 byte padding.  Each call to this routine will encrypt the input bytes to output and then update ivec and num.  num contains 'how far' we are though ivec.  If this does not make much sense, read more about CFB mode of DES.</p> <p>DES_ede3_cfb64_encrypt() and DES_ede2_cfb64_encrypt() is the same as DES_cfb64_encrypt() except that Triple-DES is used.</p> <p>DES_ofb_encrypt() encrypts using output feedback mode.  This method takes an array of characters as input and outputs an array of characters.  It does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function.  Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending a small number of characters.</p> <p>DES_ofb64_encrypt() is the same as DES_cfb64_encrypt() using Output Feed Back mode.</p> <p>DES_ede3_ofb64_encrypt() and DES_ede2_ofb64_encrypt() is the same as DES_ofb64_encrypt(), using Triple-DES.</p> <p>The following functions are included in the DES library for compatibility with the MIT Kerberos library.</p> <p>DES_cbc_cksum() produces an 8 byte checksum based on the input stream (via CBC encryption).  The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in output. This function is used by Kerberos v4.  Other applications should use EVP_DigestInit(3) etc. instead.</p> <p>DES_quad_cksum() is a Kerberos v4 function.  It returns a 4 byte checksum from the input bytes.  The algorithm can be iterated over the input, depending on out_count, 1, 2, 3 or 4 times.  If output is non-NULL, the 8 bytes generated by each pass are written into output.</p> <p>The following are DES-based transformations:</p> <p>DES_fcrypt() is a fast version of the Unix crypt(3) function.  This version takes only a small amount of space relative to other fast crypt() implementations.  This is different to the normal crypt() in that the third parameter is the buffer that the return value is written into.  It needs to be at least 14 bytes long.  This function is thread safe, unlike the normal crypt().</p> <p>DES_crypt() is a faster replacement for the normal system crypt(). This function calls DES_fcrypt() with a static array passed as the third parameter.  This mostly emulates the normal non-thread-safe semantics of crypt(3). The salt must be two ASCII characters.</p> <p>The values returned by DES_fcrypt() and DES_crypt() are terminated by NUL character.</p> <p>DES_enc_write() writes len bytes to file descriptor fd from buffer buf. The data is encrypted via pcbc_encrypt (default) using sched for the key and iv as a starting vector.  The actual data send down fd consists of 4 bytes (in network byte order) containing the length of the following encrypted data.  The encrypted data then follows, padded with random data out to a multiple of 8 bytes.</p>"},{"location":"man3/DES_random_key/#bugs","title":"BUGS","text":"<p>DES_cbc_encrypt() does not modify ivec; use DES_ncbc_encrypt() instead.</p> <p>DES_cfb_encrypt() and DES_ofb_encrypt() operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte.  The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte.  The same holds for output.  This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!</p> <p>DES_string_to_key() is available for backward compatibility with the MIT library.  New applications should use a cryptographic hash function. The same applies for DES_string_to_2key().</p>"},{"location":"man3/DES_random_key/#notes","title":"NOTES","text":"<p>The des library was written to be source code compatible with the MIT Kerberos library.</p> <p>Applications should use the higher level functions EVP_EncryptInit(3) etc. instead of calling these functions directly.</p> <p>Single-key DES is insecure due to its short key size.  ECB mode is not suitable for most applications; see des_modes(7).</p>"},{"location":"man3/DES_random_key/#return-values","title":"RETURN VALUES","text":"<p>DES_set_key(), DES_key_sched(), DES_set_key_checked() and DES_is_weak_key() return 0 on success or negative values on error.</p> <p>DES_cbc_cksum() and DES_quad_cksum() return 4-byte integer representing the last 4 bytes of the checksum of the input.</p> <p>DES_fcrypt() returns a pointer to the caller-provided buffer and DES_crypt() - to a static buffer on success; otherwise they return NULL.</p>"},{"location":"man3/DES_random_key/#see-also","title":"SEE ALSO","text":"<p>des_modes(7), EVP_EncryptInit(3)</p>"},{"location":"man3/DES_random_key/#history","title":"HISTORY","text":"<p>The requirement that the salt parameter to DES_crypt() and DES_fcrypt() be two ASCII characters was first enforced in OpenSSL 1.1.0.  Previous versions tried to use the letter uppercase A if both character were not present, and could crash when given non-ASCII on some platforms.</p>"},{"location":"man3/DES_random_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_generate_key/","title":"DH_generate_key","text":""},{"location":"man3/DH_generate_key/#name","title":"NAME","text":"<p>DH_generate_key, DH_compute_key, DH_compute_key_padded - perform Diffie-Hellman key exchange</p>"},{"location":"man3/DH_generate_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nint DH_generate_key(DH *dh);\n\nint DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);\n\nint DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh);\n</code></pre>"},{"location":"man3/DH_generate_key/#description","title":"DESCRIPTION","text":"<p>DH_generate_key() performs the first step of a Diffie-Hellman key exchange by generating private and public DH values. By calling DH_compute_key() or DH_compute_key_padded(), these are combined with the other party's public value to compute the shared key.</p> <p>DH_generate_key() expects dh to contain the shared parameters dh-&gt;p and dh-&gt;g. It generates a random private DH value unless dh-&gt;priv_key is already set, and computes the corresponding public value dh-&gt;pub_key, which can then be published.</p> <p>DH_compute_key() computes the shared secret from the private DH value in dh and the other party's public value in pub_key and stores it in key. key must point to DH_size(dh) bytes of memory. The padding style is RFC 5246 (8.1.2) that strips leading zero bytes. It is not constant time due to the leading zero bytes being stripped. The return value should be considered public.</p> <p>DH_compute_key_padded() is similar but stores a fixed number of bytes. The padding style is NIST SP 800-56A (C.1) that retains leading zero bytes. It is constant time due to the leading zero bytes being retained. The return value should be considered public.</p>"},{"location":"man3/DH_generate_key/#return-values","title":"RETURN VALUES","text":"<p>DH_generate_key() returns 1 on success, 0 otherwise.</p> <p>DH_compute_key() returns the size of the shared secret on success, -1 on error.</p> <p>DH_compute_key_padded() returns DH_size(dh) on success, -1 on error.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/DH_generate_key/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), ERR_get_error(3), RAND_bytes(3), DH_size(3)</p>"},{"location":"man3/DH_generate_key/#history","title":"HISTORY","text":"<p>DH_compute_key_padded() was added in OpenSSL 1.0.2.</p>"},{"location":"man3/DH_generate_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_generate_parameters/","title":"DH_generate_parameters","text":""},{"location":"man3/DH_generate_parameters/#name","title":"NAME","text":"<p>DH_generate_parameters_ex, DH_generate_parameters, DH_check, DH_check_params, DH_check_ex, DH_check_params_ex, DH_check_pub_key_ex - generate and check Diffie-Hellman parameters</p>"},{"location":"man3/DH_generate_parameters/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nint DH_generate_parameters_ex(DH *dh, int prime_len, int generator, BN_GENCB *cb);\n\nint DH_check(DH *dh, int *codes);\nint DH_check_params(DH *dh, int *codes);\n\nint DH_check_ex(const DH *dh);\nint DH_check_params_ex(const DH *dh);\nint DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x00908000L\nDH *DH_generate_parameters(int prime_len, int generator,\n                           void (*callback)(int, int, void *), void *cb_arg);\n#endif\n</code></pre>"},{"location":"man3/DH_generate_parameters/#description","title":"DESCRIPTION","text":"<p>DH_generate_parameters_ex() generates Diffie-Hellman parameters that can be shared among a group of users, and stores them in the provided DH structure. The pseudo-random number generator must be seeded before calling it. The parameters generated by DH_generate_parameters_ex() should not be used in signature schemes.</p> <p>prime_len is the length in bits of the safe prime to be generated. generator is a small number &gt; 1, typically 2 or 5.</p> <p>A callback function may be used to provide feedback about the progress of the key generation. If cb is not NULL, it will be called as described in BN_generate_prime(3) while a random prime number is generated, and when a prime has been found, BN_GENCB_call(cb, 3, 0) is called. See BN_generate_prime_ex(3) for information on the BN_GENCB_call() function.</p> <p>DH_generate_parameters() is similar to DH_generate_prime_ex() but expects an old-style callback function; see BN_generate_prime(3) for information on the old-style callback.</p> <p>DH_check_params() confirms that the p and g are likely enough to be valid. This is a lightweight check, if a more thorough check is needed, use DH_check(). The value of *codes is updated with any problems found. If *codes is zero then no problems were found, otherwise the following bits may be set:</p> <ul> <li> <p>DH_CHECK_P_NOT_PRIME</p> <p>The parameter p has been determined to not being an odd prime. Note that the lack of this bit doesn't guarantee that p is a prime.</p> </li> <li> <p>DH_NOT_SUITABLE_GENERATOR</p> <p>The generator g is not suitable. Note that the lack of this bit doesn't guarantee that g is suitable, unless p is known to be a strong prime.</p> </li> </ul> <p>DH_check() confirms that the Diffie-Hellman parameters dh are valid. The value of *codes is updated with any problems found. If *codes is zero then no problems were found, otherwise the following bits may be set:</p> <ul> <li> <p>DH_CHECK_P_NOT_PRIME</p> <p>The parameter p is not prime.</p> </li> <li> <p>DH_CHECK_P_NOT_SAFE_PRIME</p> <p>The parameter p is not a safe prime and no q value is present.</p> </li> <li> <p>DH_UNABLE_TO_CHECK_GENERATOR</p> <p>The generator g cannot be checked for suitability.</p> </li> <li> <p>DH_NOT_SUITABLE_GENERATOR</p> <p>The generator g is not suitable.</p> </li> <li> <p>DH_CHECK_Q_NOT_PRIME</p> <p>The parameter q is not prime.</p> </li> <li> <p>DH_CHECK_INVALID_Q_VALUE</p> <p>The parameter q is invalid.</p> </li> <li> <p>DH_CHECK_INVALID_J_VALUE</p> <p>The parameter j is invalid.</p> </li> </ul> <p>DH_check_ex(), DH_check_params() and DH_check_pub_key_ex() are similar to DH_check() and DH_check_params() respectively, but the error reasons are added to the thread's error queue instead of provided as return values from the function.</p>"},{"location":"man3/DH_generate_parameters/#return-values","title":"RETURN VALUES","text":"<p>DH_generate_parameters_ex(), DH_check() and DH_check_params() return 1 if the check could be performed, 0 otherwise.</p> <p>DH_generate_parameters() returns a pointer to the DH structure or NULL if the parameter generation fails.</p> <p>DH_check_ex(), DH_check_params() and DH_check_pub_key_ex() return 1 if the check is successful, 0 for failed.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/DH_generate_parameters/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), ERR_get_error(3), RAND_bytes(3), DH_free(3)</p>"},{"location":"man3/DH_generate_parameters/#history","title":"HISTORY","text":"<p>DH_generate_parameters() was deprecated in OpenSSL 0.9.8; use DH_generate_parameters_ex() instead.</p>"},{"location":"man3/DH_generate_parameters/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_get0_pqg/","title":"DH_get0_pqg","text":""},{"location":"man3/DH_get0_pqg/#name","title":"NAME","text":"<p>DH_get0_pqg, DH_set0_pqg, DH_get0_key, DH_set0_key, DH_get0_p, DH_get0_q, DH_get0_g, DH_get0_priv_key, DH_get0_pub_key, DH_clear_flags, DH_test_flags, DH_set_flags, DH_get0_engine, DH_get_length, DH_set_length - Routines for getting and setting data in a DH object</p>"},{"location":"man3/DH_get0_pqg/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nvoid DH_get0_pqg(const DH *dh,\n                 const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);\nint DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);\nvoid DH_get0_key(const DH *dh,\n                 const BIGNUM **pub_key, const BIGNUM **priv_key);\nint DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);\nconst BIGNUM *DH_get0_p(const DH *dh);\nconst BIGNUM *DH_get0_q(const DH *dh);\nconst BIGNUM *DH_get0_g(const DH *dh);\nconst BIGNUM *DH_get0_priv_key(const DH *dh);\nconst BIGNUM *DH_get0_pub_key(const DH *dh);\nvoid DH_clear_flags(DH *dh, int flags);\nint DH_test_flags(const DH *dh, int flags);\nvoid DH_set_flags(DH *dh, int flags);\nENGINE *DH_get0_engine(DH *d);\nlong DH_get_length(const DH *dh);\nint DH_set_length(DH *dh, long length);\n</code></pre>"},{"location":"man3/DH_get0_pqg/#description","title":"DESCRIPTION","text":"<p>A DH object contains the parameters p, q and g. Note that the q parameter is optional. It also contains a public key (pub_key) and (optionally) a private key (priv_key).</p> <p>The p, q and g parameters can be obtained by calling DH_get0_pqg(). If the parameters have not yet been set then *p, *q and *g will be set to NULL. Otherwise they are set to pointers to their respective values. These point directly to the internal representations of the values and therefore should not be freed directly. Any of the out parameters p, q, and g can be NULL, in which case no value will be returned for that parameter.</p> <p>The p, q and g values can be set by calling DH_set0_pqg() and passing the new values for p, q and g as parameters to the function. Calling this function transfers the memory management of the values to the DH object, and therefore the values that have been passed in should not be freed directly after this function has been called. The q parameter may be NULL.</p> <p>To get the public and private key values use the DH_get0_key() function. A pointer to the public key will be stored in *pub_key, and a pointer to the private key will be stored in *priv_key. Either may be NULL if they have not been set yet, although if the private key has been set then the public key must be. The values point to the internal representation of the public key and private key values. This memory should not be freed directly. Any of the out parameters pub_key and priv_key can be NULL, in which case no value will be returned for that parameter.</p> <p>The public and private key values can be set using DH_set0_key(). Either parameter may be NULL, which means the corresponding DH field is left untouched. As with DH_set0_pqg() this function transfers the memory management of the key values to the DH object, and therefore they should not be freed directly after this function has been called.</p> <p>Any of the values p, q, g, priv_key, and pub_key can also be retrieved separately by the corresponding function DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key(), respectively.</p> <p>DH_set_flags() sets the flags in the flags parameter on the DH object. Multiple flags can be passed in one go (bitwise ORed together). Any flags that are already set are left set. DH_test_flags() tests to see whether the flags passed in the flags parameter are currently set in the DH object. Multiple flags can be tested in one go. All flags that are currently set are returned, or zero if none of the flags are set. DH_clear_flags() clears the specified flags within the DH object.</p> <p>DH_get0_engine() returns a handle to the ENGINE that has been set for this DH object, or NULL if no such ENGINE has been set.</p> <p>The DH_get_length() and DH_set_length() functions get and set the optional length parameter associated with this DH object. If the length is nonzero then it is used, otherwise it is ignored. The length parameter indicates the length of the secret exponent (private key) in bits.</p>"},{"location":"man3/DH_get0_pqg/#notes","title":"NOTES","text":"<p>Values retrieved with DH_get0_key() are owned by the DH object used in the call and may therefore not be passed to DH_set0_key().  If needed, duplicate the received value using BN_dup() and pass the duplicate.  The same applies to DH_get0_pqg() and DH_set0_pqg().</p>"},{"location":"man3/DH_get0_pqg/#return-values","title":"RETURN VALUES","text":"<p>DH_set0_pqg() and DH_set0_key() return 1 on success or 0 on failure.</p> <p>DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key() return the respective value, or NULL if it is unset.</p> <p>DH_test_flags() returns the current state of the flags in the DH object.</p> <p>DH_get0_engine() returns the ENGINE set for the DH object or NULL if no ENGINE has been set.</p> <p>DH_get_length() returns the length of the secret exponent (private key) in bits, or zero if no such length has been explicitly set.</p>"},{"location":"man3/DH_get0_pqg/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), DH_new(3), DH_generate_parameters(3), DH_generate_key(3), DH_set_method(3), DH_size(3), DH_meth_new(3)</p>"},{"location":"man3/DH_get0_pqg/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/DH_get0_pqg/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_get_1024_160/","title":"DH_get_1024_160","text":""},{"location":"man3/DH_get_1024_160/#name","title":"NAME","text":"<p>DH_get_1024_160, DH_get_2048_224, DH_get_2048_256, BN_get0_nist_prime_192, BN_get0_nist_prime_224, BN_get0_nist_prime_256, BN_get0_nist_prime_384, BN_get0_nist_prime_521, BN_get_rfc2409_prime_768, BN_get_rfc2409_prime_1024, BN_get_rfc3526_prime_1536, BN_get_rfc3526_prime_2048, BN_get_rfc3526_prime_3072, BN_get_rfc3526_prime_4096, BN_get_rfc3526_prime_6144, BN_get_rfc3526_prime_8192 - Create standardized public primes or DH pairs</p>"},{"location":"man3/DH_get_1024_160/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\nDH *DH_get_1024_160(void)\nDH *DH_get_2048_224(void)\nDH *DH_get_2048_256(void)\n\nconst BIGNUM *BN_get0_nist_prime_192(void)\nconst BIGNUM *BN_get0_nist_prime_224(void)\nconst BIGNUM *BN_get0_nist_prime_256(void)\nconst BIGNUM *BN_get0_nist_prime_384(void)\nconst BIGNUM *BN_get0_nist_prime_521(void)\n\nBIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn)\nBIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn)\nBIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn)\nBIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn)\nBIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn)\nBIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn)\nBIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn)\nBIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn)\n</code></pre>"},{"location":"man3/DH_get_1024_160/#description","title":"DESCRIPTION","text":"<p>DH_get_1024_160(), DH_get_2048_224(), and DH_get_2048_256() each return a DH object for the IETF RFC 5114 value.</p> <p>BN_get0_nist_prime_192(), BN_get0_nist_prime_224(), BN_get0_nist_prime_256(), BN_get0_nist_prime_384(), and BN_get0_nist_prime_521() functions return a BIGNUM for the specific NIST prime curve (e.g., P-256).</p> <p>BN_get_rfc2409_prime_768(), BN_get_rfc2409_prime_1024(), BN_get_rfc3526_prime_1536(), BN_get_rfc3526_prime_2048(), BN_get_rfc3526_prime_3072(), BN_get_rfc3526_prime_4096(), BN_get_rfc3526_prime_6144(), and BN_get_rfc3526_prime_8192() functions return a BIGNUM for the specified size from IETF RFC 2409.  If bn is not NULL, the BIGNUM will be set into that location as well.</p>"},{"location":"man3/DH_get_1024_160/#return-values","title":"RETURN VALUES","text":"<p>Defined above.</p>"},{"location":"man3/DH_get_1024_160/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_meth_new/","title":"DH_meth_new","text":""},{"location":"man3/DH_meth_new/#name","title":"NAME","text":"<p>DH_meth_new, DH_meth_free, DH_meth_dup, DH_meth_get0_name, DH_meth_set1_name, DH_meth_get_flags, DH_meth_set_flags, DH_meth_get0_app_data, DH_meth_set0_app_data, DH_meth_get_generate_key, DH_meth_set_generate_key, DH_meth_get_compute_key, DH_meth_set_compute_key, DH_meth_get_bn_mod_exp, DH_meth_set_bn_mod_exp, DH_meth_get_init, DH_meth_set_init, DH_meth_get_finish, DH_meth_set_finish, DH_meth_get_generate_params, DH_meth_set_generate_params - Routines to build up DH methods</p>"},{"location":"man3/DH_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nDH_METHOD *DH_meth_new(const char *name, int flags);\n\nvoid DH_meth_free(DH_METHOD *dhm);\n\nDH_METHOD *DH_meth_dup(const DH_METHOD *dhm);\n\nconst char *DH_meth_get0_name(const DH_METHOD *dhm);\nint DH_meth_set1_name(DH_METHOD *dhm, const char *name);\n\nint DH_meth_get_flags(const DH_METHOD *dhm);\nint DH_meth_set_flags(DH_METHOD *dhm, int flags);\n\nvoid *DH_meth_get0_app_data(const DH_METHOD *dhm);\nint DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data);\n\nint (*DH_meth_get_generate_key(const DH_METHOD *dhm))(DH *);\nint DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key)(DH *));\n\nint (*DH_meth_get_compute_key(const DH_METHOD *dhm))\n    (unsigned char *key, const BIGNUM *pub_key, DH *dh);\nint DH_meth_set_compute_key(DH_METHOD *dhm,\n    int (*compute_key)(unsigned char *key, const BIGNUM *pub_key, DH *dh));\n\nint (*DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))\n    (const DH *dh, BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);\nint DH_meth_set_bn_mod_exp(DH_METHOD *dhm,\n    int (*bn_mod_exp)(const DH *dh, BIGNUM *r, const BIGNUM *a,\n                      const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx,\n                      BN_MONT_CTX *m_ctx));\n\nint (*DH_meth_get_init(const DH_METHOD *dhm))(DH *);\nint DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *));\n\nint (*DH_meth_get_finish(const DH_METHOD *dhm))(DH *);\nint DH_meth_set_finish(DH_METHOD *dhm, int (*finish)(DH *));\n\nint (*DH_meth_get_generate_params(const DH_METHOD *dhm))\n    (DH *, int, int, BN_GENCB *);\nint DH_meth_set_generate_params(DH_METHOD *dhm,\n    int (*generate_params)(DH *, int, int, BN_GENCB *));\n</code></pre>"},{"location":"man3/DH_meth_new/#description","title":"DESCRIPTION","text":"<p>The DH_METHOD type is a structure used for the provision of custom DH implementations. It provides a set of functions used by OpenSSL for the implementation of the various DH capabilities.</p> <p>DH_meth_new() creates a new DH_METHOD structure. It should be given a unique name and a set of flags. The name should be a NULL terminated string, which will be duplicated and stored in the DH_METHOD object. It is the callers responsibility to free the original string. The flags will be used during the construction of a new DH object based on this DH_METHOD. Any new DH object will have those flags set by default.</p> <p>DH_meth_dup() creates a duplicate copy of the DH_METHOD object passed as a parameter. This might be useful for creating a new DH_METHOD based on an existing one, but with some differences.</p> <p>DH_meth_free() destroys a DH_METHOD structure and frees up any memory associated with it.</p> <p>DH_meth_get0_name() will return a pointer to the name of this DH_METHOD. This is a pointer to the internal name string and so should not be freed by the caller. DH_meth_set1_name() sets the name of the DH_METHOD to name. The string is duplicated and the copy is stored in the DH_METHOD structure, so the caller remains responsible for freeing the memory associated with the name.</p> <p>DH_meth_get_flags() returns the current value of the flags associated with this DH_METHOD. DH_meth_set_flags() provides the ability to set these flags.</p> <p>The functions DH_meth_get0_app_data() and DH_meth_set0_app_data() provide the ability to associate implementation specific data with the DH_METHOD. It is the application's responsibility to free this data before the DH_METHOD is freed via a call to DH_meth_free().</p> <p>DH_meth_get_generate_key() and DH_meth_set_generate_key() get and set the function used for generating a new DH key pair respectively. This function will be called in response to the application calling DH_generate_key(). The parameter for the function has the same meaning as for DH_generate_key().</p> <p>DH_meth_get_compute_key() and DH_meth_set_compute_key() get and set the function used for computing a new DH shared secret respectively. This function will be called in response to the application calling DH_compute_key(). The parameters for the function have the same meaning as for DH_compute_key().</p> <p>DH_meth_get_bn_mod_exp() and DH_meth_set_bn_mod_exp() get and set the function used for computing the following value:</p> <pre><code>r = a ^ p mod m\n</code></pre> <p>This function will be called by the default OpenSSL function for DH_generate_key(). The result is stored in the r parameter. This function may be NULL unless using the default generate key function, in which case it must be present.</p> <p>DH_meth_get_init() and DH_meth_set_init() get and set the function used for creating a new DH instance respectively. This function will be called in response to the application calling DH_new() (if the current default DH_METHOD is this one) or DH_new_method(). The DH_new() and DH_new_method() functions will allocate the memory for the new DH object, and a pointer to this newly allocated structure will be passed as a parameter to the function. This function may be NULL.</p> <p>DH_meth_get_finish() and DH_meth_set_finish() get and set the function used for destroying an instance of a DH object respectively. This function will be called in response to the application calling DH_free(). A pointer to the DH to be destroyed is passed as a parameter. The destroy function should be used for DH implementation specific clean up. The memory for the DH itself should not be freed by this function. This function may be NULL.</p> <p>DH_meth_get_generate_params() and DH_meth_set_generate_params() get and set the function used for generating DH parameters respectively. This function will be called in response to the application calling DH_generate_parameters_ex() (or DH_generate_parameters()). The parameters for the function have the same meaning as for DH_generate_parameters_ex(). This function may be NULL.</p>"},{"location":"man3/DH_meth_new/#return-values","title":"RETURN VALUES","text":"<p>DH_meth_new() and DH_meth_dup() return the newly allocated DH_METHOD object or NULL on failure.</p> <p>DH_meth_get0_name() and DH_meth_get_flags() return the name and flags associated with the DH_METHOD respectively.</p> <p>All other DH_meth_get_*() functions return the appropriate function pointer that has been set in the DH_METHOD, or NULL if no such pointer has yet been set.</p> <p>DH_meth_set1_name() and all DH_meth_set_*() functions return 1 on success or 0 on failure.</p>"},{"location":"man3/DH_meth_new/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), DH_new(3), DH_generate_parameters(3), DH_generate_key(3), DH_set_method(3), DH_size(3), DH_get0_pqg(3)</p>"},{"location":"man3/DH_meth_new/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/DH_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_new/","title":"DH_new","text":""},{"location":"man3/DH_new/#name","title":"NAME","text":"<p>DH_new, DH_free - allocate and free DH objects</p>"},{"location":"man3/DH_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nDH* DH_new(void);\n\nvoid DH_free(DH *dh);\n</code></pre>"},{"location":"man3/DH_new/#description","title":"DESCRIPTION","text":"<p>DH_new() allocates and initializes a DH structure.</p> <p>DH_free() frees the DH structure and its components. The values are erased before the memory is returned to the system. If dh is NULL nothing is done.</p>"},{"location":"man3/DH_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, DH_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3). Otherwise it returns a pointer to the newly allocated structure.</p> <p>DH_free() returns no value.</p>"},{"location":"man3/DH_new/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), ERR_get_error(3), DH_generate_parameters(3), DH_generate_key(3)</p>"},{"location":"man3/DH_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_new_by_nid/","title":"DH_new_by_nid","text":""},{"location":"man3/DH_new_by_nid/#name","title":"NAME","text":"<p>DH_new_by_nid, DH_get_nid - get or find DH named parameters</p>"},{"location":"man3/DH_new_by_nid/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\nDH *DH_new_by_nid(int nid);\nint *DH_get_nid(const DH *dh);\n</code></pre>"},{"location":"man3/DH_new_by_nid/#description","title":"DESCRIPTION","text":"<p>DH_new_by_nid() creates and returns a DH structure containing named parameters nid. Currently nid must be NID_ffdhe2048, NID_ffdhe3072, NID_ffdhe4096, NID_ffdhe6144 or NID_ffdhe8192.</p> <p>DH_get_nid() determines if the parameters contained in dh match any named set. It returns the NID corresponding to the matching parameters or NID_undef if there is no match.</p>"},{"location":"man3/DH_new_by_nid/#return-values","title":"RETURN VALUES","text":"<p>DH_new_by_nid() returns a set of DH parameters or NULL if an error occurred.</p> <p>DH_get_nid() returns the NID of the matching set of parameters or NID_undef if there is no match.</p>"},{"location":"man3/DH_new_by_nid/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_set_method/","title":"DH_set_method","text":""},{"location":"man3/DH_set_method/#name","title":"NAME","text":"<p>DH_set_default_method, DH_get_default_method, DH_set_method, DH_new_method, DH_OpenSSL - select DH method</p>"},{"location":"man3/DH_set_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nvoid DH_set_default_method(const DH_METHOD *meth);\n\nconst DH_METHOD *DH_get_default_method(void);\n\nint DH_set_method(DH *dh, const DH_METHOD *meth);\n\nDH *DH_new_method(ENGINE *engine);\n\nconst DH_METHOD *DH_OpenSSL(void);\n</code></pre>"},{"location":"man3/DH_set_method/#description","title":"DESCRIPTION","text":"<p>A DH_METHOD specifies the functions that OpenSSL uses for Diffie-Hellman operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these DH API functions are affected by the use of ENGINE API calls.</p> <p>Initially, the default DH_METHOD is the OpenSSL internal implementation, as returned by DH_OpenSSL().</p> <p>DH_set_default_method() makes meth the default method for all DH structures created later. NB: This is true only whilst no ENGINE has been set as a default for DH, so this function is no longer recommended. This function is not thread-safe and should not be called at the same time as other OpenSSL functions.</p> <p>DH_get_default_method() returns a pointer to the current default DH_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended.</p> <p>DH_set_method() selects meth to perform all operations using the key dh. This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DH keys that only work with certain DH_METHOD implementations (e.g. from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DH_METHOD for the key can have unexpected results.</p> <p>DH_new_method() allocates and initializes a DH structure so that engine will be used for the DH operations. If engine is NULL, the default ENGINE for DH operations is used, and if no default ENGINE is set, the DH_METHOD controlled by DH_set_default_method() is used.</p> <p>A new DH_METHOD object may be constructed using DH_meth_new() (see DH_meth_new(3)).</p>"},{"location":"man3/DH_set_method/#return-values","title":"RETURN VALUES","text":"<p>DH_OpenSSL() and DH_get_default_method() return pointers to the respective DH_METHODs.</p> <p>DH_set_default_method() returns no value.</p> <p>DH_set_method() returns nonzero if the provided meth was successfully set as the method for dh (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).</p> <p>DH_new_method() returns NULL and sets an error code that can be obtained by ERR_get_error(3) if the allocation fails. Otherwise it returns a pointer to the newly allocated structure.</p>"},{"location":"man3/DH_set_method/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), DH_new(3), DH_meth_new(3)</p>"},{"location":"man3/DH_set_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DH_size/","title":"DH_size","text":""},{"location":"man3/DH_size/#name","title":"NAME","text":"<p>DH_size, DH_bits, DH_security_bits - get Diffie-Hellman prime size and security bits</p>"},{"location":"man3/DH_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nint DH_size(const DH *dh);\n\nint DH_bits(const DH *dh);\n\nint DH_security_bits(const DH *dh);\n</code></pre>"},{"location":"man3/DH_size/#description","title":"DESCRIPTION","text":"<p>DH_size() returns the Diffie-Hellman prime size in bytes. It can be used to determine how much memory must be allocated for the shared secret computed by DH_compute_key(3).</p> <p>DH_bits() returns the number of significant bits.</p> <p>dh and dh-&gt;p must not be NULL.</p> <p>DH_security_bits() returns the number of security bits of the given dh key. See BN_security_bits(3).</p>"},{"location":"man3/DH_size/#return-values","title":"RETURN VALUES","text":"<p>DH_size() returns the prime size of Diffie-Hellman in bytes.</p> <p>DH_bits() returns the number of bits in the key.</p> <p>DH_security_bits() returns the number of security bits.</p>"},{"location":"man3/DH_size/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), DH_generate_key(3), BN_num_bits(3)</p>"},{"location":"man3/DH_size/#history","title":"HISTORY","text":"<p>The DH_bits() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/DH_size/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_SIG_new/","title":"DSA_SIG_new","text":""},{"location":"man3/DSA_SIG_new/#name","title":"NAME","text":"<p>DSA_SIG_get0, DSA_SIG_set0, DSA_SIG_new, DSA_SIG_free - allocate and free DSA signature objects</p>"},{"location":"man3/DSA_SIG_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nDSA_SIG *DSA_SIG_new(void);\nvoid DSA_SIG_free(DSA_SIG *a);\nvoid DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);\nint DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);\n</code></pre>"},{"location":"man3/DSA_SIG_new/#description","title":"DESCRIPTION","text":"<p>DSA_SIG_new() allocates an empty DSA_SIG structure.</p> <p>DSA_SIG_free() frees the DSA_SIG structure and its components. The values are erased before the memory is returned to the system.</p> <p>DSA_SIG_get0() returns internal pointers to the r and s values contained in sig.</p> <p>The r and s values can be set by calling DSA_SIG_set0() and passing the new values for r and s as parameters to the function. Calling this function transfers the memory management of the values to the DSA_SIG object, and therefore the values that have been passed in should not be freed directly after this function has been called.</p>"},{"location":"man3/DSA_SIG_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, DSA_SIG_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3). Otherwise it returns a pointer to the newly allocated structure.</p> <p>DSA_SIG_free() returns no value.</p> <p>DSA_SIG_set0() returns 1 on success or 0 on failure.</p>"},{"location":"man3/DSA_SIG_new/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), ERR_get_error(3), DSA_do_sign(3)</p>"},{"location":"man3/DSA_SIG_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_do_sign/","title":"DSA_do_sign","text":""},{"location":"man3/DSA_do_sign/#name","title":"NAME","text":"<p>DSA_do_sign, DSA_do_verify - raw DSA signature operations</p>"},{"location":"man3/DSA_do_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nDSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);\n\nint DSA_do_verify(const unsigned char *dgst, int dgst_len,\n                  DSA_SIG *sig, DSA *dsa);\n</code></pre>"},{"location":"man3/DSA_do_sign/#description","title":"DESCRIPTION","text":"<p>DSA_do_sign() computes a digital signature on the len byte message digest dgst using the private key dsa and returns it in a newly allocated DSA_SIG structure.</p> <p>DSA_sign_setup(3) may be used to precompute part of the signing operation in case signature generation is time-critical.</p> <p>DSA_do_verify() verifies that the signature sig matches a given message digest dgst of size len.  dsa is the signer's public key.</p>"},{"location":"man3/DSA_do_sign/#return-values","title":"RETURN VALUES","text":"<p>DSA_do_sign() returns the signature, NULL on error.  DSA_do_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/DSA_do_sign/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), ERR_get_error(3), RAND_bytes(3), DSA_SIG_new(3), DSA_sign(3)</p>"},{"location":"man3/DSA_do_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_dup_DH/","title":"DSA_dup_DH","text":""},{"location":"man3/DSA_dup_DH/#name","title":"NAME","text":"<p>DSA_dup_DH - create a DH structure out of DSA structure</p>"},{"location":"man3/DSA_dup_DH/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nDH *DSA_dup_DH(const DSA *r);\n</code></pre>"},{"location":"man3/DSA_dup_DH/#description","title":"DESCRIPTION","text":"<p>DSA_dup_DH() duplicates DSA parameters/keys as DH parameters/keys. q is lost during that conversion, but the resulting DH parameters contain its length.</p>"},{"location":"man3/DSA_dup_DH/#return-values","title":"RETURN VALUES","text":"<p>DSA_dup_DH() returns the new DH structure, and NULL on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/DSA_dup_DH/#note","title":"NOTE","text":"<p>Be careful to avoid small subgroup attacks when using this.</p>"},{"location":"man3/DSA_dup_DH/#see-also","title":"SEE ALSO","text":"<p>DH_new(3), DSA_new(3), ERR_get_error(3)</p>"},{"location":"man3/DSA_dup_DH/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_generate_key/","title":"DSA_generate_key","text":""},{"location":"man3/DSA_generate_key/#name","title":"NAME","text":"<p>DSA_generate_key - generate DSA key pair</p>"},{"location":"man3/DSA_generate_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nint DSA_generate_key(DSA *a);\n</code></pre>"},{"location":"man3/DSA_generate_key/#description","title":"DESCRIPTION","text":"<p>DSA_generate_key() expects a to contain DSA parameters. It generates a new key pair and stores it in a-&gt;pub_key and a-&gt;priv_key.</p> <p>The random generator must be seeded prior to calling DSA_generate_key(). If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p>"},{"location":"man3/DSA_generate_key/#return-values","title":"RETURN VALUES","text":"<p>DSA_generate_key() returns 1 on success, 0 otherwise. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/DSA_generate_key/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), ERR_get_error(3), RAND_bytes(3), DSA_generate_parameters_ex(3)</p>"},{"location":"man3/DSA_generate_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_generate_parameters/","title":"DSA_generate_parameters","text":""},{"location":"man3/DSA_generate_parameters/#name","title":"NAME","text":"<p>DSA_generate_parameters_ex, DSA_generate_parameters - generate DSA parameters</p>"},{"location":"man3/DSA_generate_parameters/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nint DSA_generate_parameters_ex(DSA *dsa, int bits,\n                               const unsigned char *seed, int seed_len,\n                               int *counter_ret, unsigned long *h_ret,\n                               BN_GENCB *cb);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x00908000L\nDSA *DSA_generate_parameters(int bits, unsigned char *seed, int seed_len,\n                             int *counter_ret, unsigned long *h_ret,\n                             void (*callback)(int, int, void *), void *cb_arg);\n#endif\n</code></pre>"},{"location":"man3/DSA_generate_parameters/#description","title":"DESCRIPTION","text":"<p>DSA_generate_parameters_ex() generates primes p and q and a generator g for use in the DSA and stores the result in dsa.</p> <p>bits is the length of the prime p to be generated. For lengths under 2048 bits, the length of q is 160 bits; for lengths greater than or equal to 2048 bits, the length of q is set to 256 bits.</p> <p>If seed is NULL, the primes will be generated at random. If seed_len is less than the length of q, an error is returned.</p> <p>DSA_generate_parameters_ex() places the iteration count in *counter_ret and a counter used for finding a generator in *h_ret, unless these are NULL.</p> <p>A callback function may be used to provide feedback about the progress of the key generation. If cb is not NULL, it will be called as shown below. For information on the BN_GENCB structure and the BN_GENCB_call function discussed below, refer to BN_generate_prime(3).</p> <p>DSA_generate_prime() is similar to DSA_generate_prime_ex() but expects an old-style callback function; see BN_generate_prime(3) for information on the old-style callback.</p> <ul> <li>When a candidate for q is generated, BN_GENCB_call(cb, 0, m++) is called (m is 0 for the first candidate).</li> <li>When a candidate for q has passed a test by trial division, BN_GENCB_call(cb, 1, -1) is called. While a candidate for q is tested by Miller-Rabin primality tests, BN_GENCB_call(cb, 1, i) is called in the outer loop (once for each witness that confirms that the candidate may be prime); i is the loop counter (starting at 0).</li> <li>When a prime q has been found, BN_GENCB_call(cb, 2, 0) and BN_GENCB_call(cb, 3, 0) are called.</li> <li>Before a candidate for p (other than the first) is generated and tested, BN_GENCB_call(cb, 0, counter) is called.</li> <li>When a candidate for p has passed the test by trial division, BN_GENCB_call(cb, 1, -1) is called. While it is tested by the Miller-Rabin primality test, BN_GENCB_call(cb, 1, i) is called in the outer loop (once for each witness that confirms that the candidate may be prime). i is the loop counter (starting at 0).</li> <li>When p has been found, BN_GENCB_call(cb, 2, 1) is called.</li> <li>When the generator has been found, BN_GENCB_call(cb, 3, 1) is called.</li> </ul>"},{"location":"man3/DSA_generate_parameters/#return-values","title":"RETURN VALUES","text":"<p>DSA_generate_parameters_ex() returns a 1 on success, or 0 otherwise. The error codes can be obtained by ERR_get_error(3).</p> <p>DSA_generate_parameters() returns a pointer to the DSA structure or NULL if the parameter generation fails.</p>"},{"location":"man3/DSA_generate_parameters/#bugs","title":"BUGS","text":"<p>Seed lengths greater than 20 are not supported.</p>"},{"location":"man3/DSA_generate_parameters/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), ERR_get_error(3), RAND_bytes(3), DSA_free(3), BN_generate_prime(3)</p>"},{"location":"man3/DSA_generate_parameters/#history","title":"HISTORY","text":"<p>DSA_generate_parameters() was deprecated in OpenSSL 0.9.8; use DSA_generate_parameters_ex() instead.</p>"},{"location":"man3/DSA_generate_parameters/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_get0_pqg/","title":"DSA_get0_pqg","text":""},{"location":"man3/DSA_get0_pqg/#name","title":"NAME","text":"<p>DSA_get0_pqg, DSA_set0_pqg, DSA_get0_key, DSA_set0_key, DSA_get0_p, DSA_get0_q, DSA_get0_g, DSA_get0_pub_key, DSA_get0_priv_key, DSA_clear_flags, DSA_test_flags, DSA_set_flags, DSA_get0_engine - Routines for getting and setting data in a DSA object</p>"},{"location":"man3/DSA_get0_pqg/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nvoid DSA_get0_pqg(const DSA *d,\n                  const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);\nint DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);\nvoid DSA_get0_key(const DSA *d,\n                  const BIGNUM **pub_key, const BIGNUM **priv_key);\nint DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);\nconst BIGNUM *DSA_get0_p(const DSA *d);\nconst BIGNUM *DSA_get0_q(const DSA *d);\nconst BIGNUM *DSA_get0_g(const DSA *d);\nconst BIGNUM *DSA_get0_pub_key(const DSA *d);\nconst BIGNUM *DSA_get0_priv_key(const DSA *d);\nvoid DSA_clear_flags(DSA *d, int flags);\nint DSA_test_flags(const DSA *d, int flags);\nvoid DSA_set_flags(DSA *d, int flags);\nENGINE *DSA_get0_engine(DSA *d);\n</code></pre>"},{"location":"man3/DSA_get0_pqg/#description","title":"DESCRIPTION","text":"<p>A DSA object contains the parameters p, q and g. It also contains a public key (pub_key) and (optionally) a private key (priv_key).</p> <p>The p, q and g parameters can be obtained by calling DSA_get0_pqg(). If the parameters have not yet been set then *p, *q and *g will be set to NULL. Otherwise they are set to pointers to their respective values. These point directly to the internal representations of the values and therefore should not be freed directly.</p> <p>The p, q and g values can be set by calling DSA_set0_pqg() and passing the new values for p, q and g as parameters to the function. Calling this function transfers the memory management of the values to the DSA object, and therefore the values that have been passed in should not be freed directly after this function has been called.</p> <p>To get the public and private key values use the DSA_get0_key() function. A pointer to the public key will be stored in *pub_key, and a pointer to the private key will be stored in *priv_key. Either may be NULL if they have not been set yet, although if the private key has been set then the public key must be. The values point to the internal representation of the public key and private key values. This memory should not be freed directly.</p> <p>The public and private key values can be set using DSA_set0_key(). The public key must be non-NULL the first time this function is called on a given DSA object. The private key may be NULL.  On subsequent calls, either may be NULL, which means the corresponding DSA field is left untouched. As for DSA_set0_pqg() this function transfers the memory management of the key values to the DSA object, and therefore they should not be freed directly after this function has been called.</p> <p>Any of the values p, q, g, priv_key, and pub_key can also be retrieved separately by the corresponding function DSA_get0_p(), DSA_get0_q(), DSA_get0_g(), DSA_get0_priv_key(), and DSA_get0_pub_key(), respectively.</p> <p>DSA_set_flags() sets the flags in the flags parameter on the DSA object. Multiple flags can be passed in one go (bitwise ORed together). Any flags that are already set are left set. DSA_test_flags() tests to see whether the flags passed in the flags parameter are currently set in the DSA object. Multiple flags can be tested in one go. All flags that are currently set are returned, or zero if none of the flags are set. DSA_clear_flags() clears the specified flags within the DSA object.</p> <p>DSA_get0_engine() returns a handle to the ENGINE that has been set for this DSA object, or NULL if no such ENGINE has been set.</p>"},{"location":"man3/DSA_get0_pqg/#notes","title":"NOTES","text":"<p>Values retrieved with DSA_get0_key() are owned by the DSA object used in the call and may therefore not be passed to DSA_set0_key().  If needed, duplicate the received value using BN_dup() and pass the duplicate.  The same applies to DSA_get0_pqg() and DSA_set0_pqg().</p>"},{"location":"man3/DSA_get0_pqg/#return-values","title":"RETURN VALUES","text":"<p>DSA_set0_pqg() and DSA_set0_key() return 1 on success or 0 on failure.</p> <p>DSA_test_flags() returns the current state of the flags in the DSA object.</p> <p>DSA_get0_engine() returns the ENGINE set for the DSA object or NULL if no ENGINE has been set.</p>"},{"location":"man3/DSA_get0_pqg/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), DSA_new(3), DSA_generate_parameters(3), DSA_generate_key(3), DSA_dup_DH(3), DSA_do_sign(3), DSA_set_method(3), DSA_SIG_new(3), DSA_sign(3), DSA_size(3), DSA_meth_new(3)</p>"},{"location":"man3/DSA_get0_pqg/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/DSA_get0_pqg/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_meth_new/","title":"DSA_meth_new","text":""},{"location":"man3/DSA_meth_new/#name","title":"NAME","text":"<p>DSA_meth_new, DSA_meth_free, DSA_meth_dup, DSA_meth_get0_name, DSA_meth_set1_name, DSA_meth_get_flags, DSA_meth_set_flags, DSA_meth_get0_app_data, DSA_meth_set0_app_data, DSA_meth_get_sign, DSA_meth_set_sign, DSA_meth_get_sign_setup, DSA_meth_set_sign_setup, DSA_meth_get_verify, DSA_meth_set_verify, DSA_meth_get_mod_exp, DSA_meth_set_mod_exp, DSA_meth_get_bn_mod_exp, DSA_meth_set_bn_mod_exp, DSA_meth_get_init, DSA_meth_set_init, DSA_meth_get_finish, DSA_meth_set_finish, DSA_meth_get_paramgen, DSA_meth_set_paramgen, DSA_meth_get_keygen, DSA_meth_set_keygen - Routines to build up DSA methods</p>"},{"location":"man3/DSA_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nDSA_METHOD *DSA_meth_new(const char *name, int flags);\n\nvoid DSA_meth_free(DSA_METHOD *dsam);\n\nDSA_METHOD *DSA_meth_dup(const DSA_METHOD *meth);\n\nconst char *DSA_meth_get0_name(const DSA_METHOD *dsam);\nint DSA_meth_set1_name(DSA_METHOD *dsam, const char *name);\n\nint DSA_meth_get_flags(const DSA_METHOD *dsam);\nint DSA_meth_set_flags(DSA_METHOD *dsam, int flags);\n\nvoid *DSA_meth_get0_app_data(const DSA_METHOD *dsam);\nint DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data);\n\nDSA_SIG *(*DSA_meth_get_sign(const DSA_METHOD *dsam))(const unsigned char *,\n                                                      int, DSA *);\nint DSA_meth_set_sign(DSA_METHOD *dsam, DSA_SIG *(*sign)(const unsigned char *,\n                                                         int, DSA *));\n\nint (*DSA_meth_get_sign_setup(const DSA_METHOD *dsam))(DSA *, BN_CTX *,$\n                                                       BIGNUM **, BIGNUM **);\nint DSA_meth_set_sign_setup(DSA_METHOD *dsam, int (*sign_setup)(DSA *, BN_CTX *,\n                                                                BIGNUM **, BIGNUM **));\n\nint (*DSA_meth_get_verify(const DSA_METHOD *dsam))(const unsigned char *,\n                                                   int, DSA_SIG *, DSA *);\nint DSA_meth_set_verify(DSA_METHOD *dsam, int (*verify)(const unsigned char *,\n                                                        int, DSA_SIG *, DSA *));\n\nint (*DSA_meth_get_mod_exp(const DSA_METHOD *dsam))(DSA *dsa, BIGNUM *rr, BIGNUM *a1,\n                                                    BIGNUM *p1, BIGNUM *a2, BIGNUM *p2,\n                                                    BIGNUM *m, BN_CTX *ctx,\n                                                    BN_MONT_CTX *in_mont);\nint DSA_meth_set_mod_exp(DSA_METHOD *dsam, int (*mod_exp)(DSA *dsa, BIGNUM *rr,\n                                                          BIGNUM *a1, BIGNUM *p1,\n                                                          BIGNUM *a2, BIGNUM *p2,\n                                                          BIGNUM *m, BN_CTX *ctx,\n                                                          BN_MONT_CTX *mont));\n\nint (*DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))(DSA *dsa, BIGNUM *r, BIGNUM *a,\n                                                       const BIGNUM *p, const BIGNUM *m,\n                                                       BN_CTX *ctx, BN_MONT_CTX *mont);\nint DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam, int (*bn_mod_exp)(DSA *dsa,\n                                                                BIGNUM *r,\n                                                                BIGNUM *a,\n                                                                const BIGNUM *p,\n                                                                const BIGNUM *m,\n                                                                BN_CTX *ctx,\n                                                                BN_MONT_CTX *mont));\n\nint (*DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *);\nint DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *));\n\nint (*DSA_meth_get_finish(const DSA_METHOD *dsam))(DSA *);\nint DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish)(DSA *));\n\nint (*DSA_meth_get_paramgen(const DSA_METHOD *dsam))(DSA *, int,\n                                                     const unsigned char *,\n                                                     int, int *, unsigned long *,\n                                                     BN_GENCB *);\nint DSA_meth_set_paramgen(DSA_METHOD *dsam,\n                          int (*paramgen)(DSA *, int, const unsigned char *,\n                                          int, int *, unsigned long *, BN_GENCB *));\n\nint (*DSA_meth_get_keygen(const DSA_METHOD *dsam))(DSA *);\nint DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen)(DSA *));\n</code></pre>"},{"location":"man3/DSA_meth_new/#description","title":"DESCRIPTION","text":"<p>The DSA_METHOD type is a structure used for the provision of custom DSA implementations. It provides a set of functions used by OpenSSL for the implementation of the various DSA capabilities. See the dsa page for more information.</p> <p>DSA_meth_new() creates a new DSA_METHOD structure. It should be given a unique name and a set of flags. The name should be a NULL terminated string, which will be duplicated and stored in the DSA_METHOD object. It is the callers responsibility to free the original string. The flags will be used during the construction of a new DSA object based on this DSA_METHOD. Any new DSA object will have those flags set by default.</p> <p>DSA_meth_dup() creates a duplicate copy of the DSA_METHOD object passed as a parameter. This might be useful for creating a new DSA_METHOD based on an existing one, but with some differences.</p> <p>DSA_meth_free() destroys a DSA_METHOD structure and frees up any memory associated with it.</p> <p>DSA_meth_get0_name() will return a pointer to the name of this DSA_METHOD. This is a pointer to the internal name string and so should not be freed by the caller. DSA_meth_set1_name() sets the name of the DSA_METHOD to name. The string is duplicated and the copy is stored in the DSA_METHOD structure, so the caller remains responsible for freeing the memory associated with the name.</p> <p>DSA_meth_get_flags() returns the current value of the flags associated with this DSA_METHOD. DSA_meth_set_flags() provides the ability to set these flags.</p> <p>The functions DSA_meth_get0_app_data() and DSA_meth_set0_app_data() provide the ability to associate implementation specific data with the DSA_METHOD. It is the application's responsibility to free this data before the DSA_METHOD is freed via a call to DSA_meth_free().</p> <p>DSA_meth_get_sign() and DSA_meth_set_sign() get and set the function used for creating a DSA signature respectively. This function will be called in response to the application calling DSA_do_sign() (or DSA_sign()). The parameters for the function have the same meaning as for DSA_do_sign().</p> <p>DSA_meth_get_sign_setup() and DSA_meth_set_sign_setup() get and set the function used for precalculating the DSA signature values k^-1 and r. This function will be called in response to the application calling DSA_sign_setup(). The parameters for the function have the same meaning as for DSA_sign_setup().</p> <p>DSA_meth_get_verify() and DSA_meth_set_verify() get and set the function used for verifying a DSA signature respectively. This function will be called in response to the application calling DSA_do_verify() (or DSA_verify()). The parameters for the function have the same meaning as for DSA_do_verify().</p> <p>DSA_meth_get_mod_exp() and DSA_meth_set_mod_exp() get and set the function used for computing the following value:</p> <pre><code>rr = a1^p1 * a2^p2 mod m\n</code></pre> <p>This function will be called by the default OpenSSL method during verification of a DSA signature. The result is stored in the rr parameter. This function may be NULL.</p> <p>DSA_meth_get_bn_mod_exp() and DSA_meth_set_bn_mod_exp() get and set the function used for computing the following value:</p> <pre><code>r = a ^ p mod m\n</code></pre> <p>This function will be called by the default OpenSSL function for DSA_sign_setup(). The result is stored in the r parameter. This function may be NULL.</p> <p>DSA_meth_get_init() and DSA_meth_set_init() get and set the function used for creating a new DSA instance respectively. This function will be called in response to the application calling DSA_new() (if the current default DSA_METHOD is this one) or DSA_new_method(). The DSA_new() and DSA_new_method() functions will allocate the memory for the new DSA object, and a pointer to this newly allocated structure will be passed as a parameter to the function. This function may be NULL.</p> <p>DSA_meth_get_finish() and DSA_meth_set_finish() get and set the function used for destroying an instance of a DSA object respectively. This function will be called in response to the application calling DSA_free(). A pointer to the DSA to be destroyed is passed as a parameter. The destroy function should be used for DSA implementation specific clean up. The memory for the DSA itself should not be freed by this function. This function may be NULL.</p> <p>DSA_meth_get_paramgen() and DSA_meth_set_paramgen() get and set the function used for generating DSA parameters respectively. This function will be called in response to the application calling DSA_generate_parameters_ex() (or DSA_generate_parameters()). The parameters for the function have the same meaning as for DSA_generate_parameters_ex().</p> <p>DSA_meth_get_keygen() and DSA_meth_set_keygen() get and set the function used for generating a new DSA key pair respectively. This function will be called in response to the application calling DSA_generate_key(). The parameter for the function has the same meaning as for DSA_generate_key().</p>"},{"location":"man3/DSA_meth_new/#return-values","title":"RETURN VALUES","text":"<p>DSA_meth_new() and DSA_meth_dup() return the newly allocated DSA_METHOD object or NULL on failure.</p> <p>DSA_meth_get0_name() and DSA_meth_get_flags() return the name and flags associated with the DSA_METHOD respectively.</p> <p>All other DSA_meth_get_*() functions return the appropriate function pointer that has been set in the DSA_METHOD, or NULL if no such pointer has yet been set.</p> <p>DSA_meth_set1_name() and all DSA_meth_set_*() functions return 1 on success or 0 on failure.</p>"},{"location":"man3/DSA_meth_new/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), DSA_new(3), DSA_generate_parameters(3), DSA_generate_key(3), DSA_dup_DH(3), DSA_do_sign(3), DSA_set_method(3), DSA_SIG_new(3), DSA_sign(3), DSA_size(3), DSA_get0_pqg(3)</p>"},{"location":"man3/DSA_meth_new/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/DSA_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_new/","title":"DSA_new","text":""},{"location":"man3/DSA_new/#name","title":"NAME","text":"<p>DSA_new, DSA_free - allocate and free DSA objects</p>"},{"location":"man3/DSA_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nDSA* DSA_new(void);\n\nvoid DSA_free(DSA *dsa);\n</code></pre>"},{"location":"man3/DSA_new/#description","title":"DESCRIPTION","text":"<p>DSA_new() allocates and initializes a DSA structure. It is equivalent to calling DSA_new_method(NULL).</p> <p>DSA_free() frees the DSA structure and its components. The values are erased before the memory is returned to the system. If dsa is NULL nothing is done.</p>"},{"location":"man3/DSA_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, DSA_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3). Otherwise it returns a pointer to the newly allocated structure.</p> <p>DSA_free() returns no value.</p>"},{"location":"man3/DSA_new/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), ERR_get_error(3), DSA_generate_parameters(3), DSA_generate_key(3)</p>"},{"location":"man3/DSA_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_set_method/","title":"DSA_set_method","text":""},{"location":"man3/DSA_set_method/#name","title":"NAME","text":"<p>DSA_set_default_method, DSA_get_default_method, DSA_set_method, DSA_new_method, DSA_OpenSSL - select DSA method</p>"},{"location":"man3/DSA_set_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nvoid DSA_set_default_method(const DSA_METHOD *meth);\n\nconst DSA_METHOD *DSA_get_default_method(void);\n\nint DSA_set_method(DSA *dsa, const DSA_METHOD *meth);\n\nDSA *DSA_new_method(ENGINE *engine);\n\nDSA_METHOD *DSA_OpenSSL(void);\n</code></pre>"},{"location":"man3/DSA_set_method/#description","title":"DESCRIPTION","text":"<p>A DSA_METHOD specifies the functions that OpenSSL uses for DSA operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these DSA API functions are affected by the use of ENGINE API calls.</p> <p>Initially, the default DSA_METHOD is the OpenSSL internal implementation, as returned by DSA_OpenSSL().</p> <p>DSA_set_default_method() makes meth the default method for all DSA structures created later. NB: This is true only whilst no ENGINE has been set as a default for DSA, so this function is no longer recommended. This function is not thread-safe and should not be called at the same time as other OpenSSL functions.</p> <p>DSA_get_default_method() returns a pointer to the current default DSA_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended.</p> <p>DSA_set_method() selects meth to perform all operations using the key rsa. This will replace the DSA_METHOD used by the DSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DSA keys that only work with certain DSA_METHOD implementations (e.g. from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DSA_METHOD for the key can have unexpected results. See DSA_meth_new for information on constructing custom DSA_METHOD objects;</p> <p>DSA_new_method() allocates and initializes a DSA structure so that engine will be used for the DSA operations. If engine is NULL, the default engine for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD controlled by DSA_set_default_method() is used.</p>"},{"location":"man3/DSA_set_method/#return-values","title":"RETURN VALUES","text":"<p>DSA_OpenSSL() and DSA_get_default_method() return pointers to the respective DSA_METHODs.</p> <p>DSA_set_default_method() returns no value.</p> <p>DSA_set_method() returns nonzero if the provided meth was successfully set as the method for dsa (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).</p> <p>DSA_new_method() returns NULL and sets an error code that can be obtained by ERR_get_error(3) if the allocation fails. Otherwise it returns a pointer to the newly allocated structure.</p>"},{"location":"man3/DSA_set_method/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), DSA_new(3), DSA_meth_new(3)</p>"},{"location":"man3/DSA_set_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_sign/","title":"DSA_sign","text":""},{"location":"man3/DSA_sign/#name","title":"NAME","text":"<p>DSA_sign, DSA_sign_setup, DSA_verify - DSA signatures</p>"},{"location":"man3/DSA_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nint DSA_sign(int type, const unsigned char *dgst, int len,\n             unsigned char *sigret, unsigned int *siglen, DSA *dsa);\n\nint DSA_sign_setup(DSA *dsa, BN_CTX *ctx, BIGNUM **kinvp, BIGNUM **rp);\n\nint DSA_verify(int type, const unsigned char *dgst, int len,\n               unsigned char *sigbuf, int siglen, DSA *dsa);\n</code></pre>"},{"location":"man3/DSA_sign/#description","title":"DESCRIPTION","text":"<p>DSA_sign() computes a digital signature on the len byte message digest dgst using the private key dsa and places its ASN.1 DER encoding at sigret. The length of the signature is places in *siglen. sigret must point to DSA_size(dsa) bytes of memory.</p> <p>DSA_sign_setup() is defined only for backward binary compatibility and should not be used. Since OpenSSL 1.1.0 the DSA type is opaque and the output of DSA_sign_setup() cannot be used anyway: calling this function will only cause overhead, and does not affect the actual signature (pre-)computation.</p> <p>DSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest dgst of size len. dsa is the signer's public key.</p> <p>The type parameter is ignored.</p> <p>The random generator must be seeded when DSA_sign() (or DSA_sign_setup()) is called. If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p>"},{"location":"man3/DSA_sign/#return-values","title":"RETURN VALUES","text":"<p>DSA_sign() and DSA_sign_setup() return 1 on success, 0 on error. DSA_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/DSA_sign/#conforming-to","title":"CONFORMING TO","text":"<p>US Federal Information Processing Standard FIPS 186 (Digital Signature Standard, DSS), ANSI X9.30</p>"},{"location":"man3/DSA_sign/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), ERR_get_error(3), RAND_bytes(3), DSA_do_sign(3), RAND(7)</p>"},{"location":"man3/DSA_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DSA_size/","title":"DSA_size","text":""},{"location":"man3/DSA_size/#name","title":"NAME","text":"<p>DSA_size, DSA_bits, DSA_security_bits - get DSA signature size, key bits or security bits</p>"},{"location":"man3/DSA_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dsa.h&gt;\n\nint DSA_size(const DSA *dsa);\nint DSA_bits(const DSA *dsa);\nint DSA_security_bits(const DSA *dsa);\n</code></pre>"},{"location":"man3/DSA_size/#description","title":"DESCRIPTION","text":"<p>DSA_size() returns the maximum size of an ASN.1 encoded DSA signature for key dsa in bytes. It can be used to determine how much memory must be allocated for a DSA signature.</p> <p>dsa-&gt;q must not be NULL.</p> <p>DSA_bits() returns the number of bits in key dsa: this is the number of bits in the p parameter.</p> <p>DSA_security_bits() returns the number of security bits of the given dsa key. See BN_security_bits(3).</p>"},{"location":"man3/DSA_size/#return-values","title":"RETURN VALUES","text":"<p>DSA_size() returns the signature size in bytes.</p> <p>DSA_bits() returns the number of bits in the key.</p>"},{"location":"man3/DSA_size/#see-also","title":"SEE ALSO","text":"<p>DSA_new(3), DSA_sign(3)</p>"},{"location":"man3/DSA_size/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DTLS_get_data_mtu/","title":"DTLS_get_data_mtu","text":""},{"location":"man3/DTLS_get_data_mtu/#name","title":"NAME","text":"<p>DTLS_get_data_mtu - Get maximum data payload size</p>"},{"location":"man3/DTLS_get_data_mtu/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nsize_t DTLS_get_data_mtu(const SSL *ssl);\n</code></pre>"},{"location":"man3/DTLS_get_data_mtu/#description","title":"DESCRIPTION","text":"<p>This function obtains the maximum data payload size for the established DTLS connection ssl, based on the DTLS record MTU and the overhead of the DTLS record header, encryption and authentication currently in use.</p>"},{"location":"man3/DTLS_get_data_mtu/#return-values","title":"RETURN VALUES","text":"<p>Returns the maximum data payload size on success, or 0 on failure.</p>"},{"location":"man3/DTLS_get_data_mtu/#history","title":"HISTORY","text":"<p>The DTLS_get_data_mtu() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/DTLS_get_data_mtu/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DTLS_set_timer_cb/","title":"DTLS_set_timer_cb","text":""},{"location":"man3/DTLS_set_timer_cb/#name","title":"NAME","text":"<p>DTLS_timer_cb, DTLS_set_timer_cb - Set callback for controlling DTLS timer duration</p>"},{"location":"man3/DTLS_set_timer_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef unsigned int (*DTLS_timer_cb)(SSL *s, unsigned int timer_us);\n\nvoid DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb);\n</code></pre>"},{"location":"man3/DTLS_set_timer_cb/#description","title":"DESCRIPTION","text":"<p>This function sets an optional callback function for controlling the timeout interval on the DTLS protocol. The callback function will be called by DTLS for every new DTLS packet that is sent.</p>"},{"location":"man3/DTLS_set_timer_cb/#return-values","title":"RETURN VALUES","text":"<p>Returns void.</p>"},{"location":"man3/DTLS_set_timer_cb/#history","title":"HISTORY","text":"<p>The DTLS_set_timer_cb() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/DTLS_set_timer_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/DTLSv1_listen/","title":"DTLSv1_listen","text":""},{"location":"man3/DTLSv1_listen/#name","title":"NAME","text":"<p>SSL_stateless, DTLSv1_listen - Statelessly listen for incoming connections</p>"},{"location":"man3/DTLSv1_listen/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_stateless(SSL *s);\nint DTLSv1_listen(SSL *ssl, BIO_ADDR *peer);\n</code></pre>"},{"location":"man3/DTLSv1_listen/#description","title":"DESCRIPTION","text":"<p>SSL_stateless() statelessly listens for new incoming TLSv1.3 connections. DTLSv1_listen() statelessly listens for new incoming DTLS connections. If a ClientHello is received that does not contain a cookie, then they respond with a request for a new ClientHello that does contain a cookie. If a ClientHello is received with a cookie that is verified then the function returns in order to enable the handshake to be completed (for example by using SSL_accept()).</p>"},{"location":"man3/DTLSv1_listen/#notes","title":"NOTES","text":"<p>Some transport protocols (such as UDP) can be susceptible to amplification attacks. Unlike TCP there is no initial connection setup in UDP that validates that the client can actually receive messages on its advertised source address. An attacker could forge its source IP address and then send handshake initiation messages to the server. The server would then send its response to the forged source IP. If the response messages are larger than the original message then the amplification attack has succeeded.</p> <p>If DTLS is used over UDP (or any datagram based protocol that does not validate the source IP) then it is susceptible to this type of attack. TLSv1.3 is designed to operate over a stream-based transport protocol (such as TCP). If TCP is being used then there is no need to use SSL_stateless(). However, some stream-based transport protocols (e.g. QUIC) may not validate the source address. In this case a TLSv1.3 application would be susceptible to this attack.</p> <p>As a countermeasure to this issue TLSv1.3 and DTLS include a stateless cookie mechanism. The idea is that when a client attempts to connect to a server it sends a ClientHello message. The server responds with a HelloRetryRequest (in TLSv1.3) or a HelloVerifyRequest (in DTLS) which contains a unique cookie. The client then resends the ClientHello, but this time includes the cookie in the message thus proving that the client is capable of receiving messages sent to that address. All of this can be done by the server without allocating any state, and thus without consuming expensive resources.</p> <p>OpenSSL implements this capability via the SSL_stateless() and DTLSv1_listen() functions. The ssl parameter should be a newly allocated SSL object with its read and write BIOs set, in the same way as might be done for a call to SSL_accept(). Typically, for DTLS, the read BIO will be in an \"unconnected\" state and thus capable of receiving messages from any peer.</p> <p>When a ClientHello is received that contains a cookie that has been verified, then these functions will return with the ssl parameter updated into a state where the handshake can be continued by a call to (for example) SSL_accept(). Additionally, for DTLSv1_listen(), the BIO_ADDR pointed to by peer will be filled in with details of the peer that sent the ClientHello. If the underlying BIO is unable to obtain the BIO_ADDR of the peer (for example because the BIO does not support this), then *peer will be cleared and the family set to AF_UNSPEC. Typically user code is expected to \"connect\" the underlying socket to the peer and continue the handshake in a connected state.</p> <p>Prior to calling DTLSv1_listen() user code must ensure that cookie generation and verification callbacks have been set up using SSL_CTX_set_cookie_generate_cb(3) and SSL_CTX_set_cookie_verify_cb(3) respectively. For SSL_stateless(), SSL_CTX_set_stateless_cookie_generate_cb(3) and SSL_CTX_set_stateless_cookie_verify_cb(3) must be used instead.</p> <p>Since DTLSv1_listen() operates entirely statelessly whilst processing incoming ClientHellos it is unable to process fragmented messages (since this would require the allocation of state). An implication of this is that DTLSv1_listen() only supports ClientHellos that fit inside a single datagram.</p> <p>For SSL_stateless() if an entire ClientHello message cannot be read without the \"read\" BIO becoming empty then the SSL_stateless() call will fail. It is the application's responsibility to ensure that data read from the \"read\" BIO during a single SSL_stateless() call is all from the same peer.</p> <p>SSL_stateless() will fail (with a 0 return value) if some TLS version less than TLSv1.3 is used.</p> <p>Both SSL_stateless() and DTLSv1_listen() will clear the error queue when they start.</p>"},{"location":"man3/DTLSv1_listen/#return-values","title":"RETURN VALUES","text":"<p>For SSL_stateless() a return value of 1 indicates success and the ssl object will be set up ready to continue the handshake. A return value of 0 or -1 indicates failure. If the value is 0 then a HelloRetryRequest was sent. A value of -1 indicates any other error. User code may retry the SSL_stateless() call.</p> <p>For DTLSv1_listen() a return value of &gt;= 1 indicates success. The ssl object will be set up ready to continue the handshake.  the peer value will also be filled in.</p> <p>A return value of 0 indicates a non-fatal error. This could (for example) be because of nonblocking IO, or some invalid message having been received from a peer. Errors may be placed on the OpenSSL error queue with further information if appropriate. Typically user code is expected to retry the call to DTLSv1_listen() in the event of a non-fatal error.</p> <p>A return value of &lt;0 indicates a fatal error. This could (for example) be because of a failure to allocate sufficient memory for the operation.</p> <p>For DTLSv1_listen(), prior to OpenSSL 1.1.0, fatal and non-fatal errors both produce return codes &lt;= 0 (in typical implementations user code treats all errors as non-fatal), whilst return codes &gt;0 indicate success.</p>"},{"location":"man3/DTLSv1_listen/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_cookie_generate_cb(3), SSL_CTX_set_cookie_verify_cb(3), SSL_CTX_set_stateless_cookie_generate_cb(3), SSL_CTX_set_stateless_cookie_verify_cb(3), SSL_get_error(3), SSL_accept(3), ssl(7), bio(7)</p>"},{"location":"man3/DTLSv1_listen/#history","title":"HISTORY","text":"<p>The SSL_stateless() function was added in OpenSSL 1.1.1.</p> <p>The DTLSv1_listen() return codes were clarified in OpenSSL 1.1.0. The type of \"peer\" also changed in OpenSSL 1.1.0.</p>"},{"location":"man3/DTLSv1_listen/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ECDSA_SIG_new/","title":"ECDSA_SIG_new","text":""},{"location":"man3/ECDSA_SIG_new/#name","title":"NAME","text":"<p>ECDSA_SIG_get0, ECDSA_SIG_get0_r, ECDSA_SIG_get0_s, ECDSA_SIG_set0, ECDSA_SIG_new, ECDSA_SIG_free, ECDSA_size, ECDSA_sign, ECDSA_do_sign, ECDSA_verify, ECDSA_do_verify, ECDSA_sign_setup, ECDSA_sign_ex, ECDSA_do_sign_ex - low-level elliptic curve digital signature algorithm (ECDSA) functions</p>"},{"location":"man3/ECDSA_SIG_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ecdsa.h&gt;\n\nECDSA_SIG *ECDSA_SIG_new(void);\nvoid ECDSA_SIG_free(ECDSA_SIG *sig);\nvoid ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);\nconst BIGNUM *ECDSA_SIG_get0_r(const ECDSA_SIG *sig);\nconst BIGNUM *ECDSA_SIG_get0_s(const ECDSA_SIG *sig);\nint ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s);\nint ECDSA_size(const EC_KEY *eckey);\n\nint ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,\n               unsigned char *sig, unsigned int *siglen, EC_KEY *eckey);\nECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst, int dgst_len,\n                         EC_KEY *eckey);\n\nint ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,\n                 const unsigned char *sig, int siglen, EC_KEY *eckey);\nint ECDSA_do_verify(const unsigned char *dgst, int dgst_len,\n                    const ECDSA_SIG *sig, EC_KEY* eckey);\n\nECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,\n                            const BIGNUM *kinv, const BIGNUM *rp,\n                            EC_KEY *eckey);\nint ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp);\nint ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,\n                  unsigned char *sig, unsigned int *siglen,\n                  const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);\n</code></pre>"},{"location":"man3/ECDSA_SIG_new/#description","title":"DESCRIPTION","text":"<p>Note: these functions provide a low-level interface to ECDSA. Most applications should use the higher level EVP interface such as EVP_DigestSignInit(3) or EVP_DigestVerifyInit(3) instead.</p> <p>ECDSA_SIG is an opaque structure consisting of two BIGNUMs for the r and s value of an ECDSA signature (see X9.62 or FIPS 186-2).</p> <p>ECDSA_SIG_new() allocates an empty ECDSA_SIG structure. Note: before OpenSSL 1.1.0 the: the r and s components were initialised.</p> <p>ECDSA_SIG_free() frees the ECDSA_SIG structure sig.</p> <p>ECDSA_SIG_get0() returns internal pointers the r and s values contained in sig and stores them in *pr and *ps, respectively. The pointer pr or ps can be NULL, in which case the corresponding value is not returned.</p> <p>The values r, s can also be retrieved separately by the corresponding function ECDSA_SIG_get0_r() and ECDSA_SIG_get0_s(), respectively.</p> <p>The r and s values can be set by calling ECDSA_SIG_set0() and passing the new values for r and s as parameters to the function. Calling this function transfers the memory management of the values to the ECDSA_SIG object, and therefore the values that have been passed in should not be freed directly after this function has been called.</p> <p>See i2d_ECDSA_SIG(3) and d2i_ECDSA_SIG(3) for information about encoding and decoding ECDSA signatures to/from DER.</p> <p>ECDSA_size() returns the maximum length of a DER encoded ECDSA signature created with the private EC key eckey.</p> <p>ECDSA_sign() computes a digital signature of the dgstlen bytes hash value dgst using the private EC key eckey. The DER encoded signatures is stored in sig and its length is returned in sig_len. Note: sig must point to ECDSA_size(eckey) bytes of memory. The parameter type is currently ignored. ECDSA_sign() is wrapper function for ECDSA_sign_ex() with kinv and rp set to NULL.</p> <p>ECDSA_do_sign() is similar to ECDSA_sign() except the signature is returned as a newly allocated ECDSA_SIG structure (or NULL on error). ECDSA_do_sign() is a wrapper function for ECDSA_do_sign_ex() with kinv and rp set to NULL.</p> <p>ECDSA_verify() verifies that the signature in sig of size siglen is a valid ECDSA signature of the hash value dgst of size dgstlen using the public key eckey.  The parameter type is ignored.</p> <p>ECDSA_do_verify() is similar to ECDSA_verify() except the signature is presented in the form of a pointer to an ECDSA_SIG structure.</p> <p>The remaining functions utilise the internal kinv and r values used during signature computation. Most applications will never need to call these and some external ECDSA ENGINE implementations may not support them at all if either kinv or r is not NULL.</p> <p>ECDSA_sign_setup() may be used to precompute parts of the signing operation. eckey is the private EC key and ctx is a pointer to BN_CTX structure (or NULL). The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex() or ECDSA_do_sign_ex().</p> <p>ECDSA_sign_ex() computes a digital signature of the dgstlen bytes hash value dgst using the private EC key eckey and the optional pre-computed values kinv and rp. The DER encoded signature is stored in sig and its length is returned in sig_len. Note: sig must point to ECDSA_size(eckey) bytes of memory. The parameter type is ignored.</p> <p>ECDSA_do_sign_ex() is similar to ECDSA_sign_ex() except the signature is returned as a newly allocated ECDSA_SIG structure (or NULL on error).</p>"},{"location":"man3/ECDSA_SIG_new/#return-values","title":"RETURN VALUES","text":"<p>ECDSA_SIG_new() returns NULL if the allocation fails.</p> <p>ECDSA_SIG_set0() returns 1 on success or 0 on failure.</p> <p>ECDSA_SIG_get0_r() and ECDSA_SIG_get0_s() return the corresponding value, or NULL if it is unset.</p> <p>ECDSA_size() returns the maximum length signature or 0 on error.</p> <p>ECDSA_sign(), ECDSA_sign_ex() and ECDSA_sign_setup() return 1 if successful or 0 on error.</p> <p>ECDSA_do_sign() and ECDSA_do_sign_ex() return a pointer to an allocated ECDSA_SIG structure or NULL on error.</p> <p>ECDSA_verify() and ECDSA_do_verify() return 1 for a valid signature, 0 for an invalid signature and -1 on error. The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/ECDSA_SIG_new/#examples","title":"EXAMPLES","text":"<p>Creating an ECDSA signature of a given SHA-256 hash value using the named curve prime256v1 (aka P-256).</p> <p>First step: create an EC_KEY object (note: this part is not ECDSA specific)</p> <pre><code>int ret;\nECDSA_SIG *sig;\nEC_KEY *eckey;\n\neckey = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);\nif (eckey == NULL)\n    /* error */\nif (EC_KEY_generate_key(eckey) == 0)\n    /* error */\n</code></pre> <p>Second step: compute the ECDSA signature of a SHA-256 hash value using ECDSA_do_sign():</p> <pre><code>sig = ECDSA_do_sign(digest, 32, eckey);\nif (sig == NULL)\n    /* error */\n</code></pre> <p>or using ECDSA_sign():</p> <pre><code>unsigned char *buffer, *pp;\nint buf_len;\n\nbuf_len = ECDSA_size(eckey);\nbuffer = OPENSSL_malloc(buf_len);\npp = buffer;\nif (ECDSA_sign(0, dgst, dgstlen, pp, &amp;buf_len, eckey) == 0)\n    /* error */\n</code></pre> <p>Third step: verify the created ECDSA signature using ECDSA_do_verify():</p> <pre><code>ret = ECDSA_do_verify(digest, 32, sig, eckey);\n</code></pre> <p>or using ECDSA_verify():</p> <pre><code>ret = ECDSA_verify(0, digest, 32, buffer, buf_len, eckey);\n</code></pre> <p>and finally evaluate the return value:</p> <pre><code>if (ret == 1)\n    /* signature ok */\nelse if (ret == 0)\n    /* incorrect signature */\nelse\n    /* error */\n</code></pre>"},{"location":"man3/ECDSA_SIG_new/#conforming-to","title":"CONFORMING TO","text":"<p>ANSI X9.62, US Federal Information Processing Standard FIPS 186-2 (Digital Signature Standard, DSS)</p>"},{"location":"man3/ECDSA_SIG_new/#see-also","title":"SEE ALSO","text":"<p>EC_KEY_new(3), EVP_DigestSignInit(3), EVP_DigestVerifyInit(3), i2d_ECDSA_SIG(3), d2i_ECDSA_SIG(3)</p>"},{"location":"man3/ECDSA_SIG_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ECPKParameters_print/","title":"ECPKParameters_print","text":""},{"location":"man3/ECPKParameters_print/#name","title":"NAME","text":"<p>ECPKParameters_print, ECPKParameters_print_fp - Functions for decoding and encoding ASN1 representations of elliptic curve entities</p>"},{"location":"man3/ECPKParameters_print/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nint ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off);\nint ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);\n</code></pre>"},{"location":"man3/ECPKParameters_print/#description","title":"DESCRIPTION","text":"<p>The ECPKParameters represent the public parameters for an EC_GROUP structure, which represents a curve.</p> <p>The ECPKParameters_print() and ECPKParameters_print_fp() functions print a human-readable output of the public parameters of the EC_GROUP to bp or fp. The output lines are indented by off spaces.</p>"},{"location":"man3/ECPKParameters_print/#return-values","title":"RETURN VALUES","text":"<p>ECPKParameters_print() and ECPKParameters_print_fp() return 1 for success and 0 if an error occurs.</p>"},{"location":"man3/ECPKParameters_print/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_GROUP_copy(3), EC_POINT_new(3), EC_POINT_add(3), EC_KEY_new(3), EC_GFp_simple_method(3),</p>"},{"location":"man3/ECPKParameters_print/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_GFp_simple_method/","title":"EC_GFp_simple_method","text":""},{"location":"man3/EC_GFp_simple_method/#name","title":"NAME","text":"<p>EC_GFp_simple_method, EC_GFp_mont_method, EC_GFp_nist_method, EC_GFp_nistp224_method, EC_GFp_nistp256_method, EC_GFp_nistp521_method, EC_GF2m_simple_method, EC_METHOD_get_field_type - Functions for obtaining EC_METHOD objects</p>"},{"location":"man3/EC_GFp_simple_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nconst EC_METHOD *EC_GFp_simple_method(void);\nconst EC_METHOD *EC_GFp_mont_method(void);\nconst EC_METHOD *EC_GFp_nist_method(void);\nconst EC_METHOD *EC_GFp_nistp224_method(void);\nconst EC_METHOD *EC_GFp_nistp256_method(void);\nconst EC_METHOD *EC_GFp_nistp521_method(void);\n\nconst EC_METHOD *EC_GF2m_simple_method(void);\n\nint EC_METHOD_get_field_type(const EC_METHOD *meth);\n</code></pre>"},{"location":"man3/EC_GFp_simple_method/#description","title":"DESCRIPTION","text":"<p>The Elliptic Curve library provides a number of different implementations through a single common interface. When constructing a curve using EC_GROUP_new (see EC_GROUP_new(3)) an implementation method must be provided. The functions described here all return a const pointer to an EC_METHOD structure that can be passed to EC_GROUP_NEW. It is important that the correct implementation type for the form of curve selected is used.</p> <p>For F2^m curves there is only one implementation choice, i.e. EC_GF2_simple_method.</p> <p>For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation. All other implementations are based on this one. EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication (see BN_mod_mul_montgomery(3)). EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves (NIST curves are available through EC_GROUP_new_by_curve_name as described in EC_GROUP_new(3)).</p> <p>The functions EC_GFp_nistp224_method, EC_GFp_nistp256_method and EC_GFp_nistp521_method offer 64 bit optimised implementations for the NIST P224, P256 and P521 curves respectively. Note, however, that these implementations are not available on all platforms.</p> <p>EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports, which will be either F2^m or Fp. If the field type is Fp then the value NID_X9_62_prime_field is returned. If the field type is F2^m then the value NID_X9_62_characteristic_two_field is returned. These values are defined in the obj_mac.h header file.</p>"},{"location":"man3/EC_GFp_simple_method/#return-values","title":"RETURN VALUES","text":"<p>All EC_GFp* functions and EC_GF2m_simple_method always return a const pointer to an EC_METHOD structure.</p> <p>EC_METHOD_get_field_type returns an integer that identifies the type of field the EC_METHOD structure supports.</p>"},{"location":"man3/EC_GFp_simple_method/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_GROUP_copy(3), EC_POINT_new(3), EC_POINT_add(3), EC_KEY_new(3), d2i_ECPKParameters(3), BN_mod_mul_montgomery(3)</p>"},{"location":"man3/EC_GFp_simple_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_GROUP_copy/","title":"EC_GROUP_copy","text":""},{"location":"man3/EC_GROUP_copy/#name","title":"NAME","text":"<p>EC_GROUP_get0_order, EC_GROUP_order_bits, EC_GROUP_get0_cofactor, EC_GROUP_copy, EC_GROUP_dup, EC_GROUP_method_of, EC_GROUP_set_generator, EC_GROUP_get0_generator, EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_set_curve_name, EC_GROUP_get_curve_name, EC_GROUP_set_asn1_flag, EC_GROUP_get_asn1_flag, EC_GROUP_set_point_conversion_form, EC_GROUP_get_point_conversion_form, EC_GROUP_get0_seed, EC_GROUP_get_seed_len, EC_GROUP_set_seed, EC_GROUP_get_degree, EC_GROUP_check, EC_GROUP_check_discriminant, EC_GROUP_cmp, EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis, EC_GROUP_get_pentanomial_basis - Functions for manipulating EC_GROUP objects</p>"},{"location":"man3/EC_GROUP_copy/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nint EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src);\nEC_GROUP *EC_GROUP_dup(const EC_GROUP *src);\n\nconst EC_METHOD *EC_GROUP_method_of(const EC_GROUP *group);\n\nint EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,\n                           const BIGNUM *order, const BIGNUM *cofactor);\nconst EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *group);\n\nint EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx);\nconst BIGNUM *EC_GROUP_get0_order(const EC_GROUP *group);\nint EC_GROUP_order_bits(const EC_GROUP *group);\nint EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx);\nconst BIGNUM *EC_GROUP_get0_cofactor(const EC_GROUP *group);\n\nvoid EC_GROUP_set_curve_name(EC_GROUP *group, int nid);\nint EC_GROUP_get_curve_name(const EC_GROUP *group);\n\nvoid EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag);\nint EC_GROUP_get_asn1_flag(const EC_GROUP *group);\n\nvoid EC_GROUP_set_point_conversion_form(EC_GROUP *group, point_conversion_form_t form);\npoint_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP *group);\n\nunsigned char *EC_GROUP_get0_seed(const EC_GROUP *x);\nsize_t EC_GROUP_get_seed_len(const EC_GROUP *);\nsize_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len);\n\nint EC_GROUP_get_degree(const EC_GROUP *group);\n\nint EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx);\n\nint EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx);\n\nint EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx);\n\nint EC_GROUP_get_basis_type(const EC_GROUP *);\nint EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k);\nint EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,\n                                   unsigned int *k2, unsigned int *k3);\n</code></pre>"},{"location":"man3/EC_GROUP_copy/#description","title":"DESCRIPTION","text":"<p>EC_GROUP_copy() copies the curve src into dst. Both src and dst must use the same EC_METHOD.</p> <p>EC_GROUP_dup() creates a new EC_GROUP object and copies the content from src to the newly created EC_GROUP object.</p> <p>EC_GROUP_method_of() obtains the EC_METHOD of group.</p> <p>EC_GROUP_set_generator() sets curve parameters that must be agreed by all participants using the curve. These parameters include the generator, the order and the cofactor. The generator is a well defined point on the curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and n-1 where n is the order. The order multiplied by the cofactor gives the number of points on the curve.</p> <p>EC_GROUP_get0_generator() returns the generator for the identified group.</p> <p>EC_GROUP_get_order() retrieves the order of group and copies its value into order.  It fails in case group is not fully initialized (i.e., its order is not set or set to zero).</p> <p>EC_GROUP_get_cofactor() retrieves the cofactor of group and copies its value into cofactor. It fails in case  group is not fully initialized or if the cofactor is not set (or set to zero).</p> <p>The functions EC_GROUP_set_curve_name() and EC_GROUP_get_curve_name(), set and get the NID for the curve respectively (see EC_GROUP_new(3)). If a curve does not have a NID associated with it, then EC_GROUP_get_curve_name will return NID_undef.</p> <p>The asn1_flag value is used to determine whether the curve encoding uses explicit parameters or a named curve using an ASN1 OID: many applications only support the latter form. If asn1_flag is OPENSSL_EC_NAMED_CURVE then the named curve form is used and the parameters must have a corresponding named curve NID set. If asn1_flags is OPENSSL_EC_EXPLICIT_CURVE the parameters are explicitly encoded. The functions EC_GROUP_get_asn1_flag() and EC_GROUP_set_asn1_flag() get and set the status of the asn1_flag for the curve. Note: OPENSSL_EC_EXPLICIT_CURVE was added in OpenSSL 1.1.0, for previous versions of OpenSSL the value 0 must be used instead. Before OpenSSL 1.1.0 the default form was to use explicit parameters (meaning that applications would have to explicitly set the named curve form) in OpenSSL 1.1.0 and later the named curve form is the default.</p> <p>The point_conversion_form for a curve controls how EC_POINT data is encoded as ASN1 as defined in X9.62 (ECDSA). point_conversion_form_t is an enum defined as follows:</p> <pre><code>typedef enum {\n       /** the point is encoded as z||x, where the octet z specifies\n        *   which solution of the quadratic equation y is  */\n       POINT_CONVERSION_COMPRESSED = 2,\n       /** the point is encoded as z||x||y, where z is the octet 0x04  */\n       POINT_CONVERSION_UNCOMPRESSED = 4,\n       /** the point is encoded as z||x||y, where the octet z specifies\n        *  which solution of the quadratic equation y is  */\n       POINT_CONVERSION_HYBRID = 6\n} point_conversion_form_t;\n</code></pre> <p>For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet signifying the UNCOMPRESSED form has been used followed by the octets for x, followed by the octets for y.</p> <p>For any given x co-ordinate for a point on a curve it is possible to derive two possible y values. For POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of the two possible solutions for y has been used, followed by the octets for x.</p> <p>For POINT_CONVERSION_HYBRID the point is encoded as an octet signifying the HYBRID form has been used AND which of the two possible solutions for y has been used, followed by the octets for x, followed by the octets for y.</p> <p>The functions EC_GROUP_set_point_conversion_form() and EC_GROUP_get_point_conversion_form(), set and get the point_conversion_form for the curve respectively.</p> <p>ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed(). This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len(). A number of the built-in curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed() and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications.</p> <p>EC_GROUP_get_degree() gets the degree of the field. For Fp fields this will be the number of bits in p.  For F2^m fields this will be the value m.</p> <p>The function EC_GROUP_check_discriminant() calculates the discriminant for the curve and verifies that it is valid. For a curve defined over Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for F2^m curves the discriminant is simply b. In either case for the curve to be valid the discriminant must be non zero.</p> <p>The function EC_GROUP_check() performs a number of checks on a curve to verify that it is valid. Checks performed include verifying that the discriminant is non zero; that a generator has been defined; that the generator is on the curve and has the correct order.</p> <p>EC_GROUP_cmp() compares a and b to determine whether they represent the same curve or not.</p> <p>The functions EC_GROUP_get_basis_type(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis() should only be called for curves defined over an F2^m field. Addition and multiplication operations within an F2^m field are performed using an irreducible polynomial function f(x). This function is either a trinomial of the form:</p> <p>f(x) = x^m + x^k + 1 with m &gt; k &gt;= 1</p> <p>or a pentanomial of the form:</p> <p>f(x) = x^m + x^k3 + x^k2 + x^k1 + 1 with m &gt; k3 &gt; k2 &gt; k1 &gt;= 1</p> <p>The function EC_GROUP_get_basis_type() returns a NID identifying whether a trinomial or pentanomial is in use for the field. The function EC_GROUP_get_trinomial_basis() must only be called where f(x) is of the trinomial form, and returns the value of k. Similarly the function EC_GROUP_get_pentanomial_basis() must only be called where f(x) is of the pentanomial form, and returns the values of k1, k2 and k3 respectively.</p>"},{"location":"man3/EC_GROUP_copy/#return-values","title":"RETURN VALUES","text":"<p>The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().</p> <p>EC_GROUP_dup() returns a pointer to the duplicated curve, or NULL on error.</p> <p>EC_GROUP_method_of() returns the EC_METHOD implementation in use for the given curve or NULL on error.</p> <p>EC_GROUP_get0_generator() returns the generator for the given curve or NULL on error.</p> <p>EC_GROUP_get_order() returns 0 if the order is not set (or set to zero) for group or if copying into order fails, 1 otherwise.</p> <p>EC_GROUP_get_cofactor() returns 0 if the cofactor is not set (or is set to zero) for group or if copying into cofactor fails, 1 otherwise.</p> <p>EC_GROUP_get_curve_name() returns the curve name (NID) for group or will return NID_undef if no curve name is associated.</p> <p>EC_GROUP_get_asn1_flag() returns the ASN1 flag for the specified group .</p> <p>EC_GROUP_get_point_conversion_form() returns the point_conversion_form for group.</p> <p>EC_GROUP_get_degree() returns the degree for group or 0 if the operation is not supported by the underlying group implementation.</p> <p>EC_GROUP_get0_order() returns an internal pointer to the group order. EC_GROUP_order_bits() returns the number of bits in the group order. EC_GROUP_get0_cofactor() returns an internal pointer to the group cofactor.</p> <p>EC_GROUP_get0_seed() returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified. EC_GROUP_get_seed_len() returns the length of the seed or 0 if the seed is not specified.</p> <p>EC_GROUP_set_seed() returns the length of the seed that has been set. If the supplied seed is NULL, or the supplied seed length is 0, the return value will be 1. On error 0 is returned.</p> <p>EC_GROUP_cmp() returns 0 if the curves are equal, 1 if they are not equal, or -1 on error.</p> <p>EC_GROUP_get_basis_type() returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis (as defined in &lt;openssl/obj_mac.h&gt;) for a trinomial or pentanomial respectively. Alternatively in the event of an error a 0 is returned.</p>"},{"location":"man3/EC_GROUP_copy/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_POINT_new(3), EC_POINT_add(3), EC_KEY_new(3), EC_GFp_simple_method(3), d2i_ECPKParameters(3)</p>"},{"location":"man3/EC_GROUP_copy/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_GROUP_new/","title":"EC_GROUP_new","text":""},{"location":"man3/EC_GROUP_new/#name","title":"NAME","text":"<p>EC_GROUP_get_ecparameters, EC_GROUP_get_ecpkparameters, EC_GROUP_new, EC_GROUP_new_from_ecparameters, EC_GROUP_new_from_ecpkparameters, EC_GROUP_free, EC_GROUP_clear_free, EC_GROUP_new_curve_GFp, EC_GROUP_new_curve_GF2m, EC_GROUP_new_by_curve_name, EC_GROUP_set_curve, EC_GROUP_get_curve, EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp, EC_GROUP_set_curve_GF2m, EC_GROUP_get_curve_GF2m, EC_get_builtin_curves - Functions for creating and destroying EC_GROUP objects</p>"},{"location":"man3/EC_GROUP_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nEC_GROUP *EC_GROUP_new(const EC_METHOD *meth);\nEC_GROUP *EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params)\nEC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params)\nvoid EC_GROUP_free(EC_GROUP *group);\nvoid EC_GROUP_clear_free(EC_GROUP *group);\n\nEC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,\n                                 const BIGNUM *b, BN_CTX *ctx);\nEC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,\n                                  const BIGNUM *b, BN_CTX *ctx);\nEC_GROUP *EC_GROUP_new_by_curve_name(int nid);\n\nint EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,\n                       const BIGNUM *b, BN_CTX *ctx);\nint EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,\n                       BN_CTX *ctx);\nint EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p,\n                           const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);\nint EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p,\n                           BIGNUM *a, BIGNUM *b, BN_CTX *ctx);\nint EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p,\n                            const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);\nint EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p,\n                            BIGNUM *a, BIGNUM *b, BN_CTX *ctx);\n\nECPARAMETERS *EC_GROUP_get_ecparameters(const EC_GROUP *group, ECPARAMETERS *params)\nECPKPARAMETERS *EC_GROUP_get_ecpkparameters(const EC_GROUP *group, ECPKPARAMETERS *params)\n\nsize_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);\n</code></pre>"},{"location":"man3/EC_GROUP_new/#description","title":"DESCRIPTION","text":"<p>Within the library there are two forms of elliptic curve that are of interest. The first form is those defined over the prime field Fp. The elements of Fp are the integers 0 to p-1, where p is a prime number. This gives us a revised elliptic curve equation as follows:</p> <p>y^2 mod p = x^3 +ax + b mod p</p> <p>The second form is those defined over a binary field F2^m where the elements of the field are integers of length at most m bits. For this form the elliptic curve equation is modified to:</p> <p>y^2 + xy = x^3 + ax^2 + b (where b != 0)</p> <p>Operations in a binary field are performed relative to an irreducible polynomial. All such curves with OpenSSL use a trinomial or a pentanomial for this parameter.</p> <p>A new curve can be constructed by calling EC_GROUP_new(), using the implementation provided by meth (see EC_GFp_simple_method(3)). It is then necessary to call EC_GROUP_set_curve() to set the curve parameters. EC_GROUP_new_from_ecparameters() will create a group from the specified params and EC_GROUP_new_from_ecpkparameters() will create a group from the specific PK params.</p> <p>EC_GROUP_set_curve() sets the curve parameters p, a and b. For a curve over Fp p is the prime for the field. For a curve over F2^m p represents the irreducible polynomial - each bit represents a term in the polynomial. Therefore, there will either be three or five bits set dependent on whether the polynomial is a trinomial or a pentanomial. In either case, a and b represents the coefficients a and b from the relevant equation introduced above.</p> <p>EC_group_get_curve() obtains the previously set curve parameters.</p> <p>EC_GROUP_set_curve_GFp() and EC_GROUP_set_curve_GF2m() are synonyms for EC_GROUP_set_curve(). They are defined for backwards compatibility only and should not be used.</p> <p>EC_GROUP_get_curve_GFp() and EC_GROUP_get_curve_GF2m() are synonyms for EC_GROUP_get_curve(). They are defined for backwards compatibility only and should not be used.</p> <p>The functions EC_GROUP_new_curve_GFp() and EC_GROUP_new_curve_GF2m() are shortcuts for calling EC_GROUP_new() and then the EC_GROUP_set_curve() function. An appropriate default implementation method will be used.</p> <p>Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves(). The parameter r should be an array of EC_builtin_curve structures of size nitems. The function will populate the r array with information about the builtin curves. If nitems is less than the total number of curves available, then the first nitems curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in r or not). Passing a NULL r, or setting nitems to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:</p> <pre><code>typedef struct {\n       int nid;\n       const char *comment;\n       } EC_builtin_curve;\n</code></pre> <p>Each EC_builtin_curve item has a unique integer id (nid), and a human readable comment string describing the curve.</p> <p>In order to construct a builtin curve use the function EC_GROUP_new_by_curve_name() and provide the nid of the curve to be constructed.</p> <p>EC_GROUP_free() frees the memory associated with the EC_GROUP. If group is NULL nothing is done.</p> <p>EC_GROUP_clear_free() destroys any sensitive data held within the EC_GROUP and then frees its memory. If group is NULL nothing is done.</p>"},{"location":"man3/EC_GROUP_new/#return-values","title":"RETURN VALUES","text":"<p>All EC_GROUP_new* functions return a pointer to the newly constructed group, or NULL on error.</p> <p>EC_get_builtin_curves() returns the number of builtin curves that are available.</p> <p>EC_GROUP_set_curve_GFp(), EC_GROUP_get_curve_GFp(), EC_GROUP_set_curve_GF2m(), EC_GROUP_get_curve_GF2m() return 1 on success or 0 on error.</p>"},{"location":"man3/EC_GROUP_new/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_copy(3), EC_POINT_new(3), EC_POINT_add(3), EC_KEY_new(3), EC_GFp_simple_method(3), d2i_ECPKParameters(3)</p>"},{"location":"man3/EC_GROUP_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_KEY_get_enc_flags/","title":"EC_KEY_get_enc_flags","text":""},{"location":"man3/EC_KEY_get_enc_flags/#name","title":"NAME","text":"<p>EC_KEY_get_enc_flags, EC_KEY_set_enc_flags - Get and set flags for encoding EC_KEY structures</p>"},{"location":"man3/EC_KEY_get_enc_flags/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nunsigned int EC_KEY_get_enc_flags(const EC_KEY *key);\nvoid EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned int flags);\n</code></pre>"},{"location":"man3/EC_KEY_get_enc_flags/#description","title":"DESCRIPTION","text":"<p>The format of the external representation of the public key written by i2d_ECPrivateKey() (such as whether it is stored in a compressed form or not) is described by the point_conversion_form. See EC_GROUP_copy(3) for a description of point_conversion_form.</p> <p>When reading a private key encoded without an associated public key (e.g. if EC_PKEY_NO_PUBKEY has been used - see below), then d2i_ECPrivateKey() generates the missing public key automatically. Private keys encoded without parameters (e.g. if EC_PKEY_NO_PARAMETERS has been used - see below) cannot be loaded using d2i_ECPrivateKey().</p> <p>The functions EC_KEY_get_enc_flags() and EC_KEY_set_enc_flags() get and set the value of the encoding flags for the key. There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY.  These flags define the behaviour of how the  key is converted into ASN1 in a call to i2d_ECPrivateKey(). If EC_PKEY_NO_PARAMETERS is set then the public parameters for the curve are not encoded along with the private key. If EC_PKEY_NO_PUBKEY is set then the public key is not encoded along with the private key.</p>"},{"location":"man3/EC_KEY_get_enc_flags/#return-values","title":"RETURN VALUES","text":"<p>EC_KEY_get_enc_flags() returns the value of the current encoding flags for the EC_KEY.</p>"},{"location":"man3/EC_KEY_get_enc_flags/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_GROUP_copy(3), EC_POINT_new(3), EC_POINT_add(3), EC_GFp_simple_method(3), d2i_ECPKParameters(3), d2i_ECPrivateKey(3)</p>"},{"location":"man3/EC_KEY_get_enc_flags/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_KEY_new/","title":"EC_KEY_new","text":""},{"location":"man3/EC_KEY_new/#name","title":"NAME","text":"<p>EC_KEY_get_method, EC_KEY_set_method, EC_KEY_new, EC_KEY_get_flags, EC_KEY_set_flags, EC_KEY_clear_flags, EC_KEY_new_by_curve_name, EC_KEY_free, EC_KEY_copy, EC_KEY_dup, EC_KEY_up_ref, EC_KEY_get0_engine, EC_KEY_get0_group, EC_KEY_set_group, EC_KEY_get0_private_key, EC_KEY_set_private_key, EC_KEY_get0_public_key, EC_KEY_set_public_key, EC_KEY_get_conv_form, EC_KEY_set_conv_form, EC_KEY_set_asn1_flag, EC_KEY_decoded_from_explicit_params, EC_KEY_precompute_mult, EC_KEY_generate_key, EC_KEY_check_key, EC_KEY_set_public_key_affine_coordinates, EC_KEY_oct2key, EC_KEY_key2buf, EC_KEY_oct2priv, EC_KEY_priv2oct, EC_KEY_priv2buf - Functions for creating, destroying and manipulating EC_KEY objects</p>"},{"location":"man3/EC_KEY_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nEC_KEY *EC_KEY_new(void);\nint EC_KEY_get_flags(const EC_KEY *key);\nvoid EC_KEY_set_flags(EC_KEY *key, int flags);\nvoid EC_KEY_clear_flags(EC_KEY *key, int flags);\nEC_KEY *EC_KEY_new_by_curve_name(int nid);\nvoid EC_KEY_free(EC_KEY *key);\nEC_KEY *EC_KEY_copy(EC_KEY *dst, const EC_KEY *src);\nEC_KEY *EC_KEY_dup(const EC_KEY *src);\nint EC_KEY_up_ref(EC_KEY *key);\nENGINE *EC_KEY_get0_engine(const EC_KEY *eckey);\nconst EC_GROUP *EC_KEY_get0_group(const EC_KEY *key);\nint EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group);\nconst BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key);\nint EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *priv_key);\nconst EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key);\nint EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);\npoint_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *key);\nvoid EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform);\nvoid EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag);\nint EC_KEY_decoded_from_explicit_params(const EC_KEY *key);\nint EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx);\nint EC_KEY_generate_key(EC_KEY *key);\nint EC_KEY_check_key(const EC_KEY *key);\nint EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x, BIGNUM *y);\nconst EC_KEY_METHOD *EC_KEY_get_method(const EC_KEY *key);\nint EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth);\n\nint EC_KEY_oct2key(EC_KEY *eckey, const unsigned char *buf, size_t len, BN_CTX *ctx);\nsize_t EC_KEY_key2buf(const EC_KEY *eckey, point_conversion_form_t form,\n                      unsigned char **pbuf, BN_CTX *ctx);\n\nint EC_KEY_oct2priv(EC_KEY *eckey, const unsigned char *buf, size_t len);\nsize_t EC_KEY_priv2oct(const EC_KEY *eckey, unsigned char *buf, size_t len);\n\nsize_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf);\n</code></pre>"},{"location":"man3/EC_KEY_new/#description","title":"DESCRIPTION","text":"<p>An EC_KEY represents a public key and, optionally, the associated private key. A new EC_KEY with no associated curve can be constructed by calling EC_KEY_new(). The reference count for the newly created EC_KEY is initially set to 1. A curve can be associated with the EC_KEY by calling EC_KEY_set_group().</p> <p>Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name() and supplying the nid of the associated curve. See EC_GROUP_new(3) for a description of curve names. This function simply wraps calls to EC_KEY_new() and EC_GROUP_new_by_curve_name().</p> <p>Calling EC_KEY_free() decrements the reference count for the EC_KEY object, and if it has dropped to zero then frees the memory associated with it.  If key is NULL nothing is done.</p> <p>EC_KEY_copy() copies the contents of the EC_KEY in src into dest.</p> <p>EC_KEY_dup() creates a new EC_KEY object and copies ec_key into it.</p> <p>EC_KEY_up_ref() increments the reference count associated with the EC_KEY object.</p> <p>EC_KEY_get0_engine() returns a handle to the ENGINE that has been set for this EC_KEY object.</p> <p>EC_KEY_generate_key() generates a new public and private key for the supplied eckey object. eckey must have an EC_GROUP object associated with it before calling this function. The private key is a random integer (0 &lt; priv_key &lt; order, where order is the order of the EC_GROUP object). The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key.</p> <p>EC_KEY_check_key() performs various sanity checks on the EC_KEY object to confirm that it is valid.</p> <p>EC_KEY_set_public_key_affine_coordinates() sets the public key for key based on its affine co-ordinates; i.e., it constructs an EC_POINT object based on the supplied x and y values and sets the public key to be this EC_POINT. It also performs certain sanity checks on the key to confirm that it is valid.</p> <p>The functions EC_KEY_get0_group(), EC_KEY_set_group(), EC_KEY_get0_private_key(), EC_KEY_set_private_key(), EC_KEY_get0_public_key(), and EC_KEY_set_public_key() get and set the EC_GROUP object, the private key, and the EC_POINT public key for the key respectively. The function EC_KEY_set_private_key() accepts NULL as the priv_key argument to securely clear the private key component from the EC_KEY.</p> <p>The functions EC_KEY_get_conv_form() and EC_KEY_set_conv_form() get and set the point_conversion_form for the key. For a description of point_conversion_forms please see EC_POINT_new(3).</p> <p>EC_KEY_set_flags() sets the flags in the flags parameter on the EC_KEY object. Any flags that are already set are left set. The flags currently defined are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH. EC_KEY_get_flags() returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags() clears the flags indicated by the flags parameter; all other flags are left in their existing state.</p> <p>EC_KEY_set_asn1_flag() sets the asn1_flag on the underlying EC_GROUP object (if set). Refer to EC_GROUP_copy(3) for further information on the asn1_flag.</p> <p>EC_KEY_decoded_from_explicit_params() returns 1 if the group of the key was decoded from data with explicitly encoded group parameters, -1 if the key is NULL or the group parameters are missing, and 0 otherwise.</p> <p>EC_KEY_precompute_mult() stores multiples of the underlying EC_GROUP generator for faster point multiplication. See also EC_POINT_add(3).</p> <p>EC_KEY_oct2key() and EC_KEY_key2buf() are identical to the functions EC_POINT_oct2point() and EC_POINT_point2buf() except they use the public key EC_POINT in eckey.</p> <p>EC_KEY_oct2priv() and EC_KEY_priv2oct() convert between the private key component of eckey and octet form. The octet form consists of the content octets of the privateKey OCTET STRING in an ECPrivateKey ASN.1 structure.</p> <p>The function EC_KEY_priv2oct() must be supplied with a buffer long enough to store the octet form. The return value provides the number of octets stored. Calling the function with a NULL buffer will not perform the conversion but will just return the required buffer length.</p> <p>The function EC_KEY_priv2buf() allocates a buffer of suitable length and writes an EC_KEY to it in octet format. The allocated buffer is written to *pbuf and its length is returned. The caller must free up the allocated buffer with a call to OPENSSL_free(). Since the allocated buffer value is written to *pbuf the pbuf parameter MUST NOT be NULL.</p> <p>EC_KEY_priv2buf() converts an EC_KEY private key into an allocated buffer.</p>"},{"location":"man3/EC_KEY_new/#return-values","title":"RETURN VALUES","text":"<p>EC_KEY_new(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a pointer to the newly created EC_KEY object, or NULL on error.</p> <p>EC_KEY_get_flags() returns the flags associated with the EC_KEY object as an integer.</p> <p>EC_KEY_copy() returns a pointer to the destination key, or NULL on error.</p> <p>EC_KEY_get0_engine() returns a pointer to an ENGINE, or NULL if it wasn't set.</p> <p>EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.</p> <p>EC_KEY_set_private_key() returns 1 on success or 0 on error except when the priv_key argument is NULL, in that case it returns 0, for legacy compatibility, and should not be treated as an error.</p> <p>EC_KEY_get0_group() returns the EC_GROUP associated with the EC_KEY.</p> <p>EC_KEY_get0_private_key() returns the private key associated with the EC_KEY.</p> <p>EC_KEY_get_conv_form() return the point_conversion_form for the EC_KEY.</p> <p>EC_KEY_key2buf(), EC_KEY_priv2oct() and EC_KEY_priv2buf() return the length of the buffer or 0 on error.</p>"},{"location":"man3/EC_KEY_new/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_GROUP_copy(3), EC_POINT_new(3), EC_POINT_add(3), EC_GFp_simple_method(3), d2i_ECPKParameters(3)</p>"},{"location":"man3/EC_KEY_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_POINT_add/","title":"EC_POINT_add","text":""},{"location":"man3/EC_POINT_add/#name","title":"NAME","text":"<p>EC_POINT_add, EC_POINT_dbl, EC_POINT_invert, EC_POINT_is_at_infinity, EC_POINT_is_on_curve, EC_POINT_cmp, EC_POINT_make_affine, EC_POINTs_make_affine, EC_POINTs_mul, EC_POINT_mul, EC_GROUP_precompute_mult, EC_GROUP_have_precompute_mult - Functions for performing mathematical operations and tests on EC_POINT objects</p>"},{"location":"man3/EC_POINT_add/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nint EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,\n                 const EC_POINT *b, BN_CTX *ctx);\nint EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, BN_CTX *ctx);\nint EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx);\nint EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p);\nint EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point, BN_CTX *ctx);\nint EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx);\nint EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx);\nint EC_POINTs_make_affine(const EC_GROUP *group, size_t num,\n                          EC_POINT *points[], BN_CTX *ctx);\nint EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, size_t num,\n                  const EC_POINT *p[], const BIGNUM *m[], BN_CTX *ctx);\nint EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,\n                 const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx);\nint EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx);\nint EC_GROUP_have_precompute_mult(const EC_GROUP *group);\n</code></pre>"},{"location":"man3/EC_POINT_add/#description","title":"DESCRIPTION","text":"<p>EC_POINT_add adds the two points a and b and places the result in r. Similarly EC_POINT_dbl doubles the point a and places the result in r. In both cases it is valid for r to be one of a or b.</p> <p>EC_POINT_invert calculates the inverse of the supplied point a. The result is placed back in a.</p> <p>The function EC_POINT_is_at_infinity tests whether the supplied point is at infinity or not.</p> <p>EC_POINT_is_on_curve tests whether the supplied point is on the curve or not.</p> <p>EC_POINT_cmp compares the two supplied points and tests whether or not they are equal.</p> <p>The functions EC_POINT_make_affine and EC_POINTs_make_affine force the internal representation of the EC_POINT(s) into the affine co-ordinate system. In the case of EC_POINTs_make_affine the value num provides the number of points in the array points to be forced.</p> <p>EC_POINT_mul is a convenient interface to EC_POINTs_mul: it calculates the value generator * n + q * m and stores the result in r. The value n may be NULL in which case the result is just q * m (variable point multiplication). Alternatively, both q and m may be NULL, and n non-NULL, in which case the result is just generator * n (fixed point multiplication). When performing a single fixed or variable point multiplication, the underlying implementation uses a constant time algorithm, when the input scalar (either n or m) is in the range [0, ec_group_order).</p> <p>EC_POINTs_mul calculates the value generator * n + q[0] * m[0] + ... + q[num-1] * m[num-1]. As for EC_POINT_mul the value n may be NULL or num may be zero. When performing a fixed point multiplication (n is non-NULL and num is 0) or a variable point multiplication (n is NULL and num is 1), the underlying implementation uses a constant time algorithm, when the input scalar (either n or m[0]) is in the range [0, ec_group_order).</p> <p>The function EC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication, whilst EC_GROUP_have_precompute_mult tests whether precomputation has already been done. See EC_GROUP_copy(3) for information about the generator.</p>"},{"location":"man3/EC_POINT_add/#return-values","title":"RETURN VALUES","text":"<p>The following functions return 1 on success or 0 on error: EC_POINT_add, EC_POINT_dbl, EC_POINT_invert, EC_POINT_make_affine, EC_POINTs_make_affine, EC_POINTs_make_affine, EC_POINT_mul, EC_POINTs_mul and EC_GROUP_precompute_mult.</p> <p>EC_POINT_is_at_infinity returns 1 if the point is at infinity, or 0 otherwise.</p> <p>EC_POINT_is_on_curve returns 1 if the point is on the curve, 0 if not, or -1 on error.</p> <p>EC_POINT_cmp returns 1 if the points are not equal, 0 if they are, or -1 on error.</p> <p>EC_GROUP_have_precompute_mult return 1 if a precomputation has been done, or 0 if not.</p>"},{"location":"man3/EC_POINT_add/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_GROUP_copy(3), EC_POINT_new(3), EC_KEY_new(3), EC_GFp_simple_method(3), d2i_ECPKParameters(3)</p>"},{"location":"man3/EC_POINT_add/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EC_POINT_new/","title":"EC_POINT_new","text":""},{"location":"man3/EC_POINT_new/#name","title":"NAME","text":"<p>EC_POINT_set_Jprojective_coordinates_GFp, EC_POINT_point2buf, EC_POINT_new, EC_POINT_free, EC_POINT_clear_free, EC_POINT_copy, EC_POINT_dup, EC_POINT_method_of, EC_POINT_set_to_infinity, EC_POINT_get_Jprojective_coordinates_GFp, EC_POINT_set_affine_coordinates, EC_POINT_get_affine_coordinates, EC_POINT_set_compressed_coordinates, EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp, EC_POINT_set_compressed_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m, EC_POINT_get_affine_coordinates_GF2m, EC_POINT_set_compressed_coordinates_GF2m, EC_POINT_point2oct, EC_POINT_oct2point, EC_POINT_point2bn, EC_POINT_bn2point, EC_POINT_point2hex, EC_POINT_hex2point - Functions for creating, destroying and manipulating EC_POINT objects</p>"},{"location":"man3/EC_POINT_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ec.h&gt;\n\nEC_POINT *EC_POINT_new(const EC_GROUP *group);\nvoid EC_POINT_free(EC_POINT *point);\nvoid EC_POINT_clear_free(EC_POINT *point);\nint EC_POINT_copy(EC_POINT *dst, const EC_POINT *src);\nEC_POINT *EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group);\nconst EC_METHOD *EC_POINT_method_of(const EC_POINT *point);\nint EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point);\nint EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,\n                                             EC_POINT *p,\n                                             const BIGNUM *x, const BIGNUM *y,\n                                             const BIGNUM *z, BN_CTX *ctx);\nint EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,\n                                             const EC_POINT *p,\n                                             BIGNUM *x, BIGNUM *y, BIGNUM *z,\n                                             BN_CTX *ctx);\nint EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *p,\n                                    const BIGNUM *x, const BIGNUM *y,\n                                    BN_CTX *ctx);\nint EC_POINT_get_affine_coordinates(const EC_GROUP *group, const EC_POINT *p,\n                                    BIGNUM *x, BIGNUM *y, BN_CTX *ctx);\nint EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *p,\n                                        const BIGNUM *x, int y_bit,\n                                        BN_CTX *ctx);\nint EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group, EC_POINT *p,\n                                        const BIGNUM *x, const BIGNUM *y,\n                                        BN_CTX *ctx);\nint EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,\n                                        const EC_POINT *p,\n                                        BIGNUM *x, BIGNUM *y, BN_CTX *ctx);\nint EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,\n                                            EC_POINT *p,\n                                            const BIGNUM *x, int y_bit,\n                                            BN_CTX *ctx);\nint EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p,\n                                         const BIGNUM *x, const BIGNUM *y,\n                                         BN_CTX *ctx);\nint EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,\n                                         const EC_POINT *p,\n                                         BIGNUM *x, BIGNUM *y, BN_CTX *ctx);\nint EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,\n                                             EC_POINT *p,\n                                             const BIGNUM *x, int y_bit,\n                                             BN_CTX *ctx);\nsize_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,\n                          point_conversion_form_t form,\n                          unsigned char *buf, size_t len, BN_CTX *ctx);\nsize_t EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,\n                          point_conversion_form_t form,\n                          unsigned char **pbuf, BN_CTX *ctx);\nint EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,\n                       const unsigned char *buf, size_t len, BN_CTX *ctx);\nBIGNUM *EC_POINT_point2bn(const EC_GROUP *group, const EC_POINT *p,\n                          point_conversion_form_t form, BIGNUM *bn,\n                          BN_CTX *ctx);\nEC_POINT *EC_POINT_bn2point(const EC_GROUP *group, const BIGNUM *bn,\n                            EC_POINT *p, BN_CTX *ctx);\nchar *EC_POINT_point2hex(const EC_GROUP *group, const EC_POINT *p,\n                         point_conversion_form_t form, BN_CTX *ctx);\nEC_POINT *EC_POINT_hex2point(const EC_GROUP *group, const char *hex,\n                             EC_POINT *p, BN_CTX *ctx);\n</code></pre>"},{"location":"man3/EC_POINT_new/#description","title":"DESCRIPTION","text":"<p>An EC_POINT structure represents a point on a curve. A new point is constructed by calling the function EC_POINT_new() and providing the group object that the point relates to.</p> <p>EC_POINT_free() frees the memory associated with the EC_POINT. if point is NULL nothing is done.</p> <p>EC_POINT_clear_free() destroys any sensitive data held within the EC_POINT and then frees its memory. If point is NULL nothing is done.</p> <p>EC_POINT_copy() copies the point src into dst. Both src and dst must use the same EC_METHOD.</p> <p>EC_POINT_dup() creates a new EC_POINT object and copies the content from src to the newly created EC_POINT object.</p> <p>EC_POINT_method_of() obtains the EC_METHOD associated with point.</p> <p>A valid point on a curve is the special point at infinity. A point is set to be at infinity by calling EC_POINT_set_to_infinity().</p> <p>The affine co-ordinates for a point describe a point in terms of its x and y position. The function EC_POINT_set_affine_coordinates() sets the x and y co-ordinates for the point p defined over the curve given in group. The function EC_POINT_get_affine_coordinates() sets x and y, either of which may be NULL, to the corresponding coordinates of p.</p> <p>The functions EC_POINT_set_affine_coordinates_GFp() and EC_POINT_set_affine_coordinates_GF2m() are synonyms for EC_POINT_set_affine_coordinates(). They are defined for backwards compatibility only and should not be used.</p> <p>The functions EC_POINT_get_affine_coordinates_GFp() and EC_POINT_get_affine_coordinates_GF2m() are synonyms for EC_POINT_get_affine_coordinates(). They are defined for backwards compatibility only and should not be used.</p> <p>As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations.  A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective from affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp() and EC_POINT_get_Jprojective_coordinates_GFp() respectively.</p> <p>Points can also be described in terms of their compressed co-ordinates. For a point (x, y), for any given value for x such that the point is on the curve there will only ever be two possible values for y. Therefore, a point can be set using the EC_POINT_set_compressed_coordinates() function where x is the x co-ordinate and y_bit is a value 0 or 1 to identify which of the two possible values for y should be used.</p> <p>The functions EC_POINT_set_compressed_coordinates_GFp() and EC_POINT_set_compressed_coordinates_GF2m() are synonyms for EC_POINT_set_compressed_coordinates(). They are defined for backwards compatibility only and should not be used.</p> <p>In addition EC_POINT can be converted to and from various external representations. The octet form is the binary encoding of the ECPoint structure (as defined in RFC5480 and used in certificates and TLS records): only the content octets are present, the OCTET STRING tag and length are not included. BIGNUM form is the octet form interpreted as a big endian integer converted to a BIGNUM structure. Hexadecimal form is the octet form converted to a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f).</p> <p>The functions EC_POINT_point2oct(), EC_POINT_oct2point(), EC_POINT_point2bn(), EC_POINT_bn2point(), EC_POINT_point2hex() and EC_POINT_hex2point() convert from and to EC_POINTs for the formats: octet, BIGNUM and hexadecimal respectively.</p> <p>The function EC_POINT_point2oct() encodes the given curve point p as an octet string into the buffer buf of size len, using the specified conversion form form. The encoding conforms with Sec. 2.3.3 of the SECG SEC 1 (\"Elliptic Curve Cryptography\") standard. Similarly the function EC_POINT_oct2point() decodes a curve point into p from the octet string contained in the given buffer buf of size len, conforming to Sec. 2.3.4 of the SECG SEC 1 (\"Elliptic Curve Cryptography\") standard.</p> <p>The functions EC_POINT_point2hex() and EC_POINT_point2bn() convert a point p, respectively, to the hexadecimal or BIGNUM representation of the same encoding of the function EC_POINT_point2oct(). Vice versa, similarly to the function EC_POINT_oct2point(), the functions EC_POINT_hex2point() and EC_POINT_point2bn() decode the hexadecimal or BIGNUM representation into the EC_POINT p.</p> <p>Notice that, according to the standard, the octet string encoding of the point at infinity for a given curve is fixed to a single octet of value zero and that, vice versa, a single octet of size zero is decoded as the point at infinity.</p> <p>The function EC_POINT_point2oct() must be supplied with a buffer long enough to store the octet form. The return value provides the number of octets stored. Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length.</p> <p>The function EC_POINT_point2buf() allocates a buffer of suitable length and writes an EC_POINT to it in octet format. The allocated buffer is written to *pbuf and its length is returned. The caller must free up the allocated buffer with a call to OPENSSL_free(). Since the allocated buffer value is written to *pbuf the pbuf parameter MUST NOT be NULL.</p> <p>The function EC_POINT_point2hex() will allocate sufficient memory to store the hexadecimal string. It is the caller's responsibility to free this memory with a subsequent call to OPENSSL_free().</p>"},{"location":"man3/EC_POINT_new/#return-values","title":"RETURN VALUES","text":"<p>EC_POINT_new() and EC_POINT_dup() return the newly allocated EC_POINT or NULL on error.</p> <p>The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().</p> <p>EC_POINT_method_of returns the EC_METHOD associated with the supplied EC_POINT.</p> <p>EC_POINT_point2oct() and EC_POINT_point2buf() return the length of the required buffer or 0 on error.</p> <p>EC_POINT_point2bn() returns the pointer to the BIGNUM supplied, or NULL on error.</p> <p>EC_POINT_bn2point() returns the pointer to the EC_POINT supplied, or NULL on error.</p> <p>EC_POINT_point2hex() returns a pointer to the hex string, or NULL on error.</p> <p>EC_POINT_hex2point() returns the pointer to the EC_POINT supplied, or NULL on error.</p>"},{"location":"man3/EC_POINT_new/#see-also","title":"SEE ALSO","text":"<p>crypto(7), EC_GROUP_new(3), EC_GROUP_copy(3), EC_POINT_add(3), EC_KEY_new(3), EC_GFp_simple_method(3), d2i_ECPKParameters(3)</p>"},{"location":"man3/EC_POINT_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ENGINE_add/","title":"ENGINE_add","text":""},{"location":"man3/ENGINE_add/#name","title":"NAME","text":"<p>ENGINE_get_DH, ENGINE_get_DSA, ENGINE_by_id, ENGINE_get_cipher_engine, ENGINE_get_default_DH, ENGINE_get_default_DSA, ENGINE_get_default_RAND, ENGINE_get_default_RSA, ENGINE_get_digest_engine, ENGINE_get_first, ENGINE_get_last, ENGINE_get_next, ENGINE_get_prev, ENGINE_new, ENGINE_get_ciphers, ENGINE_get_ctrl_function, ENGINE_get_digests, ENGINE_get_destroy_function, ENGINE_get_finish_function, ENGINE_get_init_function, ENGINE_get_load_privkey_function, ENGINE_get_load_pubkey_function, ENGINE_load_private_key, ENGINE_load_public_key, ENGINE_get_RAND, ENGINE_get_RSA, ENGINE_get_id, ENGINE_get_name, ENGINE_get_cmd_defns, ENGINE_get_cipher, ENGINE_get_digest, ENGINE_add, ENGINE_cmd_is_executable, ENGINE_ctrl, ENGINE_ctrl_cmd, ENGINE_ctrl_cmd_string, ENGINE_finish, ENGINE_free, ENGINE_get_flags, ENGINE_init, ENGINE_register_DH, ENGINE_register_DSA, ENGINE_register_RAND, ENGINE_register_RSA, ENGINE_register_all_complete, ENGINE_register_ciphers, ENGINE_register_complete, ENGINE_register_digests, ENGINE_remove, ENGINE_set_DH, ENGINE_set_DSA, ENGINE_set_RAND, ENGINE_set_RSA, ENGINE_set_ciphers, ENGINE_set_cmd_defns, ENGINE_set_ctrl_function, ENGINE_set_default, ENGINE_set_default_DH, ENGINE_set_default_DSA, ENGINE_set_default_RAND, ENGINE_set_default_RSA, ENGINE_set_default_ciphers, ENGINE_set_default_digests, ENGINE_set_default_string, ENGINE_set_destroy_function, ENGINE_set_digests, ENGINE_set_finish_function, ENGINE_set_flags, ENGINE_set_id, ENGINE_set_init_function, ENGINE_set_load_privkey_function, ENGINE_set_load_pubkey_function, ENGINE_set_name, ENGINE_up_ref, ENGINE_get_table_flags, ENGINE_cleanup, ENGINE_load_builtin_engines, ENGINE_register_all_DH, ENGINE_register_all_DSA, ENGINE_register_all_RAND, ENGINE_register_all_RSA, ENGINE_register_all_ciphers, ENGINE_register_all_digests, ENGINE_set_table_flags, ENGINE_unregister_DH, ENGINE_unregister_DSA, ENGINE_unregister_RAND, ENGINE_unregister_RSA, ENGINE_unregister_ciphers, ENGINE_unregister_digests - ENGINE cryptographic module support</p>"},{"location":"man3/ENGINE_add/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/engine.h&gt;\n\nENGINE *ENGINE_get_first(void);\nENGINE *ENGINE_get_last(void);\nENGINE *ENGINE_get_next(ENGINE *e);\nENGINE *ENGINE_get_prev(ENGINE *e);\n\nint ENGINE_add(ENGINE *e);\nint ENGINE_remove(ENGINE *e);\n\nENGINE *ENGINE_by_id(const char *id);\n\nint ENGINE_init(ENGINE *e);\nint ENGINE_finish(ENGINE *e);\n\nvoid ENGINE_load_builtin_engines(void);\n\nENGINE *ENGINE_get_default_RSA(void);\nENGINE *ENGINE_get_default_DSA(void);\nENGINE *ENGINE_get_default_DH(void);\nENGINE *ENGINE_get_default_RAND(void);\nENGINE *ENGINE_get_cipher_engine(int nid);\nENGINE *ENGINE_get_digest_engine(int nid);\n\nint ENGINE_set_default_RSA(ENGINE *e);\nint ENGINE_set_default_DSA(ENGINE *e);\nint ENGINE_set_default_DH(ENGINE *e);\nint ENGINE_set_default_RAND(ENGINE *e);\nint ENGINE_set_default_ciphers(ENGINE *e);\nint ENGINE_set_default_digests(ENGINE *e);\nint ENGINE_set_default_string(ENGINE *e, const char *list);\n\nint ENGINE_set_default(ENGINE *e, unsigned int flags);\n\nunsigned int ENGINE_get_table_flags(void);\nvoid ENGINE_set_table_flags(unsigned int flags);\n\nint ENGINE_register_RSA(ENGINE *e);\nvoid ENGINE_unregister_RSA(ENGINE *e);\nvoid ENGINE_register_all_RSA(void);\nint ENGINE_register_DSA(ENGINE *e);\nvoid ENGINE_unregister_DSA(ENGINE *e);\nvoid ENGINE_register_all_DSA(void);\nint ENGINE_register_DH(ENGINE *e);\nvoid ENGINE_unregister_DH(ENGINE *e);\nvoid ENGINE_register_all_DH(void);\nint ENGINE_register_RAND(ENGINE *e);\nvoid ENGINE_unregister_RAND(ENGINE *e);\nvoid ENGINE_register_all_RAND(void);\nint ENGINE_register_ciphers(ENGINE *e);\nvoid ENGINE_unregister_ciphers(ENGINE *e);\nvoid ENGINE_register_all_ciphers(void);\nint ENGINE_register_digests(ENGINE *e);\nvoid ENGINE_unregister_digests(ENGINE *e);\nvoid ENGINE_register_all_digests(void);\nint ENGINE_register_complete(ENGINE *e);\nint ENGINE_register_all_complete(void);\n\nint ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f)(void));\nint ENGINE_cmd_is_executable(ENGINE *e, int cmd);\nint ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,\n                    long i, void *p, void (*f)(void), int cmd_optional);\nint ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,\n                           int cmd_optional);\n\nENGINE *ENGINE_new(void);\nint ENGINE_free(ENGINE *e);\nint ENGINE_up_ref(ENGINE *e);\n\nint ENGINE_set_id(ENGINE *e, const char *id);\nint ENGINE_set_name(ENGINE *e, const char *name);\nint ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth);\nint ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth);\nint ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth);\nint ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth);\nint ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f);\nint ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f);\nint ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f);\nint ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f);\nint ENGINE_set_load_privkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpriv_f);\nint ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f);\nint ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f);\nint ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f);\nint ENGINE_set_flags(ENGINE *e, int flags);\nint ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns);\n\nconst char *ENGINE_get_id(const ENGINE *e);\nconst char *ENGINE_get_name(const ENGINE *e);\nconst RSA_METHOD *ENGINE_get_RSA(const ENGINE *e);\nconst DSA_METHOD *ENGINE_get_DSA(const ENGINE *e);\nconst DH_METHOD *ENGINE_get_DH(const ENGINE *e);\nconst RAND_METHOD *ENGINE_get_RAND(const ENGINE *e);\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e);\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e);\nENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e);\nENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e);\nENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE *e);\nENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE *e);\nENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE *e);\nENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE *e);\nconst EVP_CIPHER *ENGINE_get_cipher(ENGINE *e, int nid);\nconst EVP_MD *ENGINE_get_digest(ENGINE *e, int nid);\nint ENGINE_get_flags(const ENGINE *e);\nconst ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e);\n\nEVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,\n                                  UI_METHOD *ui_method, void *callback_data);\nEVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,\n                                 UI_METHOD *ui_method, void *callback_data);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid ENGINE_cleanup(void)\n#endif\n</code></pre>"},{"location":"man3/ENGINE_add/#description","title":"DESCRIPTION","text":"<p>These functions create, manipulate, and use cryptographic modules in the form of ENGINE objects. These objects act as containers for implementations of cryptographic algorithms, and support a reference-counted mechanism to allow them to be dynamically loaded in and out of the running application.</p> <p>The cryptographic functionality that can be provided by an ENGINE implementation includes the following abstractions;</p> <pre><code>RSA_METHOD - for providing alternative RSA implementations\nDSA_METHOD, DH_METHOD, RAND_METHOD, ECDH_METHOD, ECDSA_METHOD,\n      - similarly for other OpenSSL APIs\nEVP_CIPHER - potentially multiple cipher algorithms (indexed by 'nid')\nEVP_DIGEST - potentially multiple hash algorithms (indexed by 'nid')\nkey-loading - loading public and/or private EVP_PKEY keys\n</code></pre>"},{"location":"man3/ENGINE_add/#reference-counting-and-handles","title":"Reference counting and handles","text":"<p>Due to the modular nature of the ENGINE API, pointers to ENGINEs need to be treated as handles - i.e. not only as pointers, but also as references to the underlying ENGINE object. Ie. one should obtain a new reference when making copies of an ENGINE pointer if the copies will be used (and released) independently.</p> <p>ENGINE objects have two levels of reference-counting to match the way in which the objects are used. At the most basic level, each ENGINE pointer is inherently a structural reference - a structural reference is required to use the pointer value at all, as this kind of reference is a guarantee that the structure can not be deallocated until the reference is released.</p> <p>However, a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations. Indeed it's quite possible that most ENGINEs will not initialise at all in typical environments, as ENGINEs are typically used to support specialised hardware. To use an ENGINE's functionality, you need a functional reference. This kind of reference can be considered a specialised form of structural reference, because each functional reference implicitly contains a structural reference as well - however to avoid difficult-to-find programming bugs, it is recommended to treat the two kinds of reference independently. If you have a functional reference to an ENGINE, you have a guarantee that the ENGINE has been initialised and is ready to perform cryptographic operations, and will remain initialised until after you have released your reference.</p> <p>Structural references</p> <p>This basic type of reference is used for instantiating new ENGINEs, iterating across OpenSSL's internal linked-list of loaded ENGINEs, reading information about an ENGINE, etc. Essentially a structural reference is sufficient if you only need to query or manipulate the data of an ENGINE implementation rather than use its functionality.</p> <p>The ENGINE_new() function returns a structural reference to a new (empty) ENGINE object. There are other ENGINE API functions that return structural references such as; ENGINE_by_id(), ENGINE_get_first(), ENGINE_get_last(), ENGINE_get_next(), ENGINE_get_prev(). All structural references should be released by a corresponding to call to the ENGINE_free() function - the ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released.</p> <p>It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned. Eg. the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add() - if this function returns success, then OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free() when they are finished with it. In a similar way, some functions will automatically release the structural reference passed to it if part of the function's job is to do so. Eg. the ENGINE_get_next() and ENGINE_get_prev() functions are used for iterating across the internal ENGINE list - they will return a new structural reference to the next (or previous) ENGINE in the list or NULL if at the end (or beginning) of the list, but in either case the structural reference passed to the function is released on behalf of the caller.</p> <p>To clarify a particular function's handling of references, one should always consult that function's documentation \"man\" page, or failing that the openssl/engine.h header file includes some hints.</p> <p>Functional references</p> <p>As mentioned, functional references exist when the cryptographic functionality of an ENGINE is required to be available. A functional reference can be obtained in one of two ways; from an existing structural reference to the required ENGINE, or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose.</p> <p>To obtain a functional reference from an existing structural reference, call the ENGINE_init() function. This returns zero if the ENGINE was not already operational and couldn't be successfully initialised (e.g. lack of system drivers, no special hardware attached, etc), otherwise it will return nonzero to indicate that the ENGINE is now operational and will have allocated a new functional reference to the ENGINE. All functional references are released by calling ENGINE_finish() (which removes the implicit structural reference as well).</p> <p>The second way to get a functional reference is by asking OpenSSL for a default implementation for a given task, e.g. by ENGINE_get_default_RSA(), ENGINE_get_default_cipher_engine(), etc. These are discussed in the next section, though they are not usually required by application programmers as they are used automatically when creating and using the relevant algorithm-specific types in OpenSSL, such as RSA, DSA, EVP_CIPHER_CTX, etc.</p>"},{"location":"man3/ENGINE_add/#default-implementations","title":"Default implementations","text":"<p>For each supported abstraction, the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default. These implementations are registered in the tables and indexed by an 'nid' value, because abstractions like EVP_CIPHER and EVP_DIGEST support many distinct algorithms and modes, and ENGINEs can support arbitrarily many of them. In the case of other abstractions like RSA, DSA, etc, there is only one \"algorithm\" so all implementations implicitly register using the same 'nid' index.</p> <p>When a default ENGINE is requested for a given abstraction/algorithm/mode, (e.g. when calling RSA_new_method(NULL)), a \"get_default\" call will be made to the ENGINE subsystem to process the corresponding state table and return a functional reference to an initialised ENGINE whose implementation should be used. If no ENGINE should (or can) be used, it will return NULL and the caller will operate with a NULL ENGINE handle - this usually equates to using the conventional software implementation. In the latter case, OpenSSL will from then on behave the way it used to before the ENGINE API existed.</p> <p>Each state table has a flag to note whether it has processed this \"get_default\" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags()), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the \"get_default\" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA() does the same job as ENGINE_register_RSA() except that it also sets the state table's cached response for the \"get_default\" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value.</p>"},{"location":"man3/ENGINE_add/#application-requirements","title":"Application requirements","text":"<p>This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user. The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user. OpenSSL maintains an internal linked list of \"visible\" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all. So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various \"load\" functions.</p> <p>The fact that ENGINEs are made visible to OpenSSL (and thus are linked into the program and loaded into memory at run-time) does not mean they are \"registered\" or called into use by OpenSSL automatically - that behaviour is something for the application to control. Some applications will want to allow the user to specify exactly which ENGINE they want used if any is to be used at all. Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - i.e. to assume that this corresponds to acceleration hardware attached to the machine or some such thing. There are probably numerous other ways in which applications may prefer to handle things, so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl's builtin utilities as guides.</p> <p>If no ENGINE API functions are called within an application, then OpenSSL will not allocate any internal resources.  Prior to OpenSSL 1.1.0, however, if any ENGINEs are loaded, even if not registered or used, it was necessary to call ENGINE_cleanup() before the program exits.</p> <p>Using a specific ENGINE implementation</p> <p>Here we'll assume an application has been configured by its user or admin to want to use the \"ACME\" ENGINE if it is available in the version of OpenSSL the application was compiled with. If it is available, it should be used by default for all RSA, DSA, and symmetric cipher operations, otherwise OpenSSL should use its builtin software as per usual. The following code illustrates how to approach this;</p> <pre><code>ENGINE *e;\nconst char *engine_id = \"ACME\";\nENGINE_load_builtin_engines();\ne = ENGINE_by_id(engine_id);\nif (!e)\n    /* the engine isn't available */\n    return;\nif (!ENGINE_init(e)) {\n    /* the engine couldn't initialise, release 'e' */\n    ENGINE_free(e);\n    return;\n}\nif (!ENGINE_set_default_RSA(e))\n    /*\n     * This should only happen when 'e' can't initialise, but the previous\n     * statement suggests it did.\n     */\n    abort();\nENGINE_set_default_DSA(e);\nENGINE_set_default_ciphers(e);\n/* Release the functional reference from ENGINE_init() */\nENGINE_finish(e);\n/* Release the structural reference from ENGINE_by_id() */\nENGINE_free(e);\n</code></pre> <p>Automatically using builtin ENGINE implementations</p> <p>Here we'll assume we want to load and register all ENGINE implementations bundled with OpenSSL, such that for any cryptographic algorithm required by OpenSSL - if there is an ENGINE that implements it and can be initialised, it should be used. The following code illustrates how this can work;</p> <pre><code>/* Load all bundled ENGINEs into memory and make them visible */\nENGINE_load_builtin_engines();\n/* Register all of them for every algorithm they collectively implement */\nENGINE_register_all_complete();\n</code></pre> <p>That's all that's required. Eg. the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init() and if any of those succeed, that ENGINE will be set as the default for RSA use from then on.</p>"},{"location":"man3/ENGINE_add/#advanced-configuration-support","title":"Advanced configuration support","text":"<p>There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration \"commands\" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now!), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration \"directives\" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available \"control commands\", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user.</p> <p>Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc. This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, i.e. before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation.</p> <p>Issuing control commands to an ENGINE</p> <p>Let's illustrate by example; a function for which the caller supplies the name of the ENGINE it wishes to use, a table of string-pairs for use before initialisation, and another table for use after initialisation. Note that the string-pairs used for control commands consist of a command \"name\" followed by the command \"parameter\" - the parameter could be NULL in some cases but the name can not. This function should initialise the ENGINE (issuing the \"pre\" commands beforehand and the \"post\" commands afterwards) and set it as the default for everything except RAND and then return a boolean success or failure.</p> <pre><code>int generic_load_engine_fn(const char *engine_id,\n                           const char **pre_cmds, int pre_num,\n                           const char **post_cmds, int post_num)\n{\n    ENGINE *e = ENGINE_by_id(engine_id);\n    if (!e) return 0;\n    while (pre_num--) {\n        if (!ENGINE_ctrl_cmd_string(e, pre_cmds[0], pre_cmds[1], 0)) {\n            fprintf(stderr, \"Failed command (%s - %s:%s)\\n\", engine_id,\n                    pre_cmds[0], pre_cmds[1] ? pre_cmds[1] : \"(NULL)\");\n            ENGINE_free(e);\n            return 0;\n        }\n        pre_cmds += 2;\n    }\n    if (!ENGINE_init(e)) {\n        fprintf(stderr, \"Failed initialisation\\n\");\n        ENGINE_free(e);\n        return 0;\n    }\n    /*\n     * ENGINE_init() returned a functional reference, so free the structural\n     * reference from ENGINE_by_id().\n     */\n    ENGINE_free(e);\n    while (post_num--) {\n        if (!ENGINE_ctrl_cmd_string(e, post_cmds[0], post_cmds[1], 0)) {\n            fprintf(stderr, \"Failed command (%s - %s:%s)\\n\", engine_id,\n                    post_cmds[0], post_cmds[1] ? post_cmds[1] : \"(NULL)\");\n            ENGINE_finish(e);\n            return 0;\n        }\n        post_cmds += 2;\n    }\n    ENGINE_set_default(e, ENGINE_METHOD_ALL &amp; ~ENGINE_METHOD_RAND);\n    /* Success */\n    return 1;\n}\n</code></pre> <p>Note that ENGINE_ctrl_cmd_string() accepts a boolean argument that can relax the semantics of the function - if set nonzero it will only return failure if the ENGINE supported the given command name but failed while executing it, if the ENGINE doesn't support the command name it will simply return success without doing anything. In this case we assume the user is only supplying commands specific to the given ENGINE so we set this to FALSE.</p> <p>Discovering supported control commands</p> <p>It is possible to discover at run-time the names, numerical-ids, descriptions and input parameters of the control commands supported by an ENGINE using a structural reference. Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE, i.e. the ENGINE's ctrl() handler is not used for the control command. openssl/engine.h defines an index, ENGINE_CMD_BASE, that all control commands implemented by ENGINEs should be numbered from. Any command value lower than this symbol is considered a \"generic\" command is handled directly by the OpenSSL core routines.</p> <p>It is using these \"core\" control commands that one can discover the control commands implemented by a given ENGINE, specifically the commands:</p> <pre><code>ENGINE_HAS_CTRL_FUNCTION\nENGINE_CTRL_GET_FIRST_CMD_TYPE\nENGINE_CTRL_GET_NEXT_CMD_TYPE\nENGINE_CTRL_GET_CMD_FROM_NAME\nENGINE_CTRL_GET_NAME_LEN_FROM_CMD\nENGINE_CTRL_GET_NAME_FROM_CMD\nENGINE_CTRL_GET_DESC_LEN_FROM_CMD\nENGINE_CTRL_GET_DESC_FROM_CMD\nENGINE_CTRL_GET_CMD_FLAGS\n</code></pre> <p>Whilst these commands are automatically processed by the OpenSSL framework code, they use various properties exposed by each ENGINE to process these queries. An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl() handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions. If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these \"core\" control commands directly to the ENGINE's ctrl() handler (and thus, it must have supplied one), so it is up to the ENGINE to reply to these \"discovery\" commands itself. If that flag is not set, then the OpenSSL framework code will work with the following rules:</p> <pre><code>if no ctrl() handler supplied;\n    ENGINE_HAS_CTRL_FUNCTION returns FALSE (zero),\n    all other commands fail.\nif a ctrl() handler was supplied but no array of control commands;\n    ENGINE_HAS_CTRL_FUNCTION returns TRUE,\n    all other commands fail.\nif a ctrl() handler and array of control commands was supplied;\n    ENGINE_HAS_CTRL_FUNCTION returns TRUE,\n    all other commands proceed processing ...\n</code></pre> <p>If the ENGINE's array of control commands is empty then all other commands will fail, otherwise; ENGINE_CTRL_GET_FIRST_CMD_TYPE returns the identifier of the first command supported by the ENGINE, ENGINE_GET_NEXT_CMD_TYPE takes the identifier of a command supported by the ENGINE and returns the next command identifier or fails if there are no more, ENGINE_CMD_FROM_NAME takes a string name for a command and returns the corresponding identifier or fails if no such command name exists, and the remaining commands take a command identifier and return properties of the corresponding commands. All except ENGINE_CTRL_GET_FLAGS return the string length of a command name or description, or populate a supplied character buffer with a copy of the command name or description. ENGINE_CTRL_GET_FLAGS returns a bitwise-OR'd mask of the following possible values:</p> <pre><code>ENGINE_CMD_FLAG_NUMERIC\nENGINE_CMD_FLAG_STRING\nENGINE_CMD_FLAG_NO_INPUT\nENGINE_CMD_FLAG_INTERNAL\n</code></pre> <p>If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string(). \"INTERNAL\" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc. These can support arbitrary operations via ENGINE_ctrl(), including passing to and/or from the control commands data of any arbitrary type. These commands are supported in the discovery mechanisms simply to allow applications to determine if an ENGINE supports certain specific commands it might want to use (e.g. application \"foo\" might query various ENGINEs to see if they implement \"FOO_GET_VENDOR_LOGO_GIF\" - and ENGINE could therefore decide whether or not to support this \"foo\"-specific extension).</p>"},{"location":"man3/ENGINE_add/#environment","title":"ENVIRONMENT","text":"<ul> <li> <p>OPENSSL_ENGINES</p> <p>The path to the engines directory. Ignored in set-user-ID and set-group-ID programs.</p> </li> </ul>"},{"location":"man3/ENGINE_add/#return-values","title":"RETURN VALUES","text":"<p>ENGINE_get_first(), ENGINE_get_last(), ENGINE_get_next() and ENGINE_get_prev() return a valid ENGINE structure or NULL if an error occurred.</p> <p>ENGINE_add() and ENGINE_remove() return 1 on success or 0 on error.</p> <p>ENGINE_by_id() returns a valid ENGINE structure or NULL if an error occurred.</p> <p>ENGINE_init() and ENGINE_finish() return 1 on success or 0 on error.</p> <p>All ENGINE_get_default_TYPE() functions, ENGINE_get_cipher_engine() and ENGINE_get_digest_engine() return a valid ENGINE structure on success or NULL if an error occurred.</p> <p>All ENGINE_set_default_TYPE() functions return 1 on success or 0 on error.</p> <p>ENGINE_set_default() returns 1 on success or 0 on error.</p> <p>ENGINE_get_table_flags() returns an unsigned integer value representing the global table flags which are used to control the registration behaviour of ENGINE implementations.</p> <p>All ENGINE_register_TYPE() functions return 1 on success or 0 on error.</p> <p>ENGINE_register_complete() and ENGINE_register_all_complete() always return 1.</p> <p>ENGINE_ctrl() returns a positive value on success or others on error.</p> <p>ENGINE_cmd_is_executable() returns 1 if cmd is executable or 0 otherwise.</p> <p>ENGINE_ctrl_cmd() and ENGINE_ctrl_cmd_string() return 1 on success or 0 on error.</p> <p>ENGINE_new() returns a valid ENGINE structure on success or NULL if an error occurred.</p> <p>ENGINE_free() always returns 1.</p> <p>ENGINE_up_ref() returns 1 on success or 0 on error.</p> <p>ENGINE_set_id() and ENGINE_set_name() return 1 on success or 0 on error.</p> <p>All other ENGINE_set_* functions return 1 on success or 0 on error.</p> <p>ENGINE_get_id() and ENGINE_get_name() return a string representing the identifier and the name of the ENGINE e respectively.</p> <p>ENGINE_get_RSA(), ENGINE_get_DSA(), ENGINE_get_DH() and ENGINE_get_RAND() return corresponding method structures for each algorithms.</p> <p>ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.</p> <p>ENGINE_get_cipher() returns a valid EVP_CIPHER structure on success or NULL if an error occurred.</p> <p>ENGINE_get_digest() returns a valid EVP_MD structure on success or NULL if an error occurred.</p> <p>ENGINE_get_flags() returns an integer representing the ENGINE flags which are used to control various behaviours of an ENGINE.</p> <p>ENGINE_get_cmd_defns() returns an ENGINE_CMD_DEFN structure or NULL if it's not set.</p> <p>ENGINE_load_private_key() and ENGINE_load_public_key() return a valid EVP_PKEY structure on success or NULL if an error occurred.</p>"},{"location":"man3/ENGINE_add/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_init_crypto(3), RSA_new_method(3), DSA_new(3), DH_new(3), RAND_bytes(3), config(5)</p>"},{"location":"man3/ENGINE_add/#history","title":"HISTORY","text":"<p>ENGINE_cleanup() was deprecated in OpenSSL 1.1.0 by the automatic cleanup done by OPENSSL_cleanup() and should not be used.</p>"},{"location":"man3/ENGINE_add/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_GET_LIB/","title":"ERR_GET_LIB","text":""},{"location":"man3/ERR_GET_LIB/#name","title":"NAME","text":"<p>ERR_GET_LIB, ERR_GET_FUNC, ERR_GET_REASON, ERR_FATAL_ERROR - get information from error codes</p>"},{"location":"man3/ERR_GET_LIB/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nint ERR_GET_LIB(unsigned long e);\n\nint ERR_GET_FUNC(unsigned long e);\n\nint ERR_GET_REASON(unsigned long e);\n\nint ERR_FATAL_ERROR(unsigned long e);\n</code></pre>"},{"location":"man3/ERR_GET_LIB/#description","title":"DESCRIPTION","text":"<p>The error code returned by ERR_get_error() consists of a library number, function code and reason code. ERR_GET_LIB(), ERR_GET_FUNC() and ERR_GET_REASON() can be used to extract these.</p> <p>ERR_FATAL_ERROR() indicates whether a given error code is a fatal error.</p> <p>The library number and function code describe where the error occurred, the reason code is the information about what went wrong.</p> <p>Each sub-library of OpenSSL has a unique library number; function and reason codes are unique within each sub-library.  Note that different libraries may use the same value to signal different functions and reasons.</p> <p>ERR_R_... reason codes such as ERR_R_MALLOC_FAILURE are globally unique. However, when checking for sub-library specific reason codes, be sure to also compare the library number.</p> <p>ERR_GET_LIB(), ERR_GET_FUNC(), ERR_GET_REASON(), and ERR_FATAL_ERROR()  are macros.</p>"},{"location":"man3/ERR_GET_LIB/#return-values","title":"RETURN VALUES","text":"<p>The library number, function code, reason code, and whether the error is fatal, respectively.</p>"},{"location":"man3/ERR_GET_LIB/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ERR_GET_LIB/#history","title":"HISTORY","text":"<p>ERR_GET_LIB(), ERR_GET_FUNC() and ERR_GET_REASON() are available in all versions of OpenSSL.</p>"},{"location":"man3/ERR_GET_LIB/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_clear_error/","title":"ERR_clear_error","text":""},{"location":"man3/ERR_clear_error/#name","title":"NAME","text":"<p>ERR_clear_error - clear the error queue</p>"},{"location":"man3/ERR_clear_error/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nvoid ERR_clear_error(void);\n</code></pre>"},{"location":"man3/ERR_clear_error/#description","title":"DESCRIPTION","text":"<p>ERR_clear_error() empties the current thread's error queue.</p>"},{"location":"man3/ERR_clear_error/#return-values","title":"RETURN VALUES","text":"<p>ERR_clear_error() has no return value.</p>"},{"location":"man3/ERR_clear_error/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/ERR_clear_error/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_error_string/","title":"ERR_error_string","text":""},{"location":"man3/ERR_error_string/#name","title":"NAME","text":"<p>ERR_error_string, ERR_error_string_n, ERR_lib_error_string, ERR_func_error_string, ERR_reason_error_string - obtain human-readable error message</p>"},{"location":"man3/ERR_error_string/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nchar *ERR_error_string(unsigned long e, char *buf);\nvoid ERR_error_string_n(unsigned long e, char *buf, size_t len);\n\nconst char *ERR_lib_error_string(unsigned long e);\nconst char *ERR_func_error_string(unsigned long e);\nconst char *ERR_reason_error_string(unsigned long e);\n</code></pre>"},{"location":"man3/ERR_error_string/#description","title":"DESCRIPTION","text":"<p>ERR_error_string() generates a human-readable string representing the error code e, and places it at buf. buf must be at least 256 bytes long. If buf is NULL, the error string is placed in a static buffer. Note that this function is not thread-safe and does no checks on the size of the buffer; use ERR_error_string_n() instead.</p> <p>ERR_error_string_n() is a variant of ERR_error_string() that writes at most len characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n(), buf may not be NULL.</p> <p>The string will have the following format:</p> <pre><code>error:[error code]:[library name]:[function name]:[reason string]\n</code></pre> <p>error code is an 8 digit hexadecimal number, library name, function name and reason string are ASCII text.</p> <p>ERR_lib_error_string(), ERR_func_error_string() and ERR_reason_error_string() return the library name, function name and reason string respectively.</p> <p>If there is no text string registered for the given error code, the error string will contain the numeric code.</p> <p>ERR_print_errors(3) can be used to print all error codes currently in the queue.</p>"},{"location":"man3/ERR_error_string/#return-values","title":"RETURN VALUES","text":"<p>ERR_error_string() returns a pointer to a static buffer containing the string if buf == NULL, buf otherwise.</p> <p>ERR_lib_error_string(), ERR_func_error_string() and ERR_reason_error_string() return the strings, and NULL if none is registered for the error code.</p>"},{"location":"man3/ERR_error_string/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), ERR_print_errors(3)</p>"},{"location":"man3/ERR_error_string/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_get_error/","title":"ERR_get_error","text":""},{"location":"man3/ERR_get_error/#name","title":"NAME","text":"<p>ERR_get_error, ERR_peek_error, ERR_peek_last_error, ERR_get_error_line, ERR_peek_error_line, ERR_peek_last_error_line, ERR_get_error_line_data, ERR_peek_error_line_data, ERR_peek_last_error_line_data - obtain error code and data</p>"},{"location":"man3/ERR_get_error/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nunsigned long ERR_get_error(void);\nunsigned long ERR_peek_error(void);\nunsigned long ERR_peek_last_error(void);\n\nunsigned long ERR_get_error_line(const char **file, int *line);\nunsigned long ERR_peek_error_line(const char **file, int *line);\nunsigned long ERR_peek_last_error_line(const char **file, int *line);\n\nunsigned long ERR_get_error_line_data(const char **file, int *line,\n                                      const char **data, int *flags);\nunsigned long ERR_peek_error_line_data(const char **file, int *line,\n                                       const char **data, int *flags);\nunsigned long ERR_peek_last_error_line_data(const char **file, int *line,\n                                            const char **data, int *flags);\n</code></pre>"},{"location":"man3/ERR_get_error/#description","title":"DESCRIPTION","text":"<p>ERR_get_error() returns the earliest error code from the thread's error queue and removes the entry. This function can be called repeatedly until there are no more error codes to return.</p> <p>ERR_peek_error() returns the earliest error code from the thread's error queue without modifying it.</p> <p>ERR_peek_last_error() returns the latest error code from the thread's error queue without modifying it.</p> <p>See ERR_GET_LIB(3) for obtaining information about location and reason of the error, and ERR_error_string(3) for human-readable error messages.</p> <p>ERR_get_error_line(), ERR_peek_error_line() and ERR_peek_last_error_line() are the same as the above, but they additionally store the filename and line number where the error occurred in *file and *line, unless these are NULL.</p> <p>ERR_get_error_line_data(), ERR_peek_error_line_data() and ERR_peek_last_error_line_data() store additional data and flags associated with the error code in *data and *flags, unless these are NULL. *data contains a string if *flags&amp;ERR_TXT_STRING is true.</p> <p>An application MUST NOT free the *data pointer (or any other pointers returned by these functions) with OPENSSL_free() as freeing is handled automatically by the error library.</p>"},{"location":"man3/ERR_get_error/#return-values","title":"RETURN VALUES","text":"<p>The error code, or 0 if there is no error in the queue.</p>"},{"location":"man3/ERR_get_error/#see-also","title":"SEE ALSO","text":"<p>ERR_error_string(3), ERR_GET_LIB(3)</p>"},{"location":"man3/ERR_get_error/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_load_crypto_strings/","title":"ERR_load_crypto_strings","text":""},{"location":"man3/ERR_load_crypto_strings/#name","title":"NAME","text":"<p>ERR_load_crypto_strings, SSL_load_error_strings, ERR_free_strings - load and free error strings</p>"},{"location":"man3/ERR_load_crypto_strings/#synopsis","title":"SYNOPSIS","text":"<p>Deprecated:</p> <pre><code>#include &lt;openssl/err.h&gt;\n\n#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid ERR_load_crypto_strings(void);\nvoid ERR_free_strings(void);\n#endif\n\n#include &lt;openssl/ssl.h&gt;\n\n#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid SSL_load_error_strings(void);\n#endif\n</code></pre>"},{"location":"man3/ERR_load_crypto_strings/#description","title":"DESCRIPTION","text":"<p>ERR_load_crypto_strings() registers the error strings for all libcrypto functions. SSL_load_error_strings() does the same, but also registers the libssl error strings.</p> <p>In versions prior to OpenSSL 1.1.0, ERR_free_strings() releases any resources created by the above functions.</p>"},{"location":"man3/ERR_load_crypto_strings/#return-values","title":"RETURN VALUES","text":"<p>ERR_load_crypto_strings(), SSL_load_error_strings() and ERR_free_strings() return no values.</p>"},{"location":"man3/ERR_load_crypto_strings/#see-also","title":"SEE ALSO","text":"<p>ERR_error_string(3)</p>"},{"location":"man3/ERR_load_crypto_strings/#history","title":"HISTORY","text":"<p>The ERR_load_crypto_strings(), SSL_load_error_strings(), and ERR_free_strings() functions were deprecated in OpenSSL 1.1.0 by OPENSSL_init_crypto() and OPENSSL_init_ssl() and should not be used.</p>"},{"location":"man3/ERR_load_crypto_strings/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_load_strings/","title":"ERR_load_strings","text":""},{"location":"man3/ERR_load_strings/#name","title":"NAME","text":"<p>ERR_load_strings, ERR_PACK, ERR_get_next_error_library - load arbitrary error strings</p>"},{"location":"man3/ERR_load_strings/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nint ERR_load_strings(int lib, ERR_STRING_DATA *str);\n\nint ERR_get_next_error_library(void);\n\nunsigned long ERR_PACK(int lib, int func, int reason);\n</code></pre>"},{"location":"man3/ERR_load_strings/#description","title":"DESCRIPTION","text":"<p>ERR_load_strings() registers error strings for library number lib.</p> <p>str is an array of error string data:</p> <pre><code>typedef struct ERR_string_data_st\n{\n    unsigned long error;\n    char *string;\n} ERR_STRING_DATA;\n</code></pre> <p>The error code is generated from the library number and a function and reason code: error = ERR_PACK(lib, func, reason). ERR_PACK() is a macro.</p> <p>The last entry in the array is {0,0}.</p> <p>ERR_get_next_error_library() can be used to assign library numbers to user libraries at runtime.</p>"},{"location":"man3/ERR_load_strings/#return-values","title":"RETURN VALUES","text":"<p>ERR_load_strings() returns 1 for success and 0 for failure. ERR_PACK() returns the error code. ERR_get_next_error_library() returns zero on failure, otherwise a new library number.</p>"},{"location":"man3/ERR_load_strings/#see-also","title":"SEE ALSO","text":"<p>ERR_load_strings(3)</p>"},{"location":"man3/ERR_load_strings/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_print_errors/","title":"ERR_print_errors","text":""},{"location":"man3/ERR_print_errors/#name","title":"NAME","text":"<p>ERR_print_errors, ERR_print_errors_fp, ERR_print_errors_cb - print error messages</p>"},{"location":"man3/ERR_print_errors/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nvoid ERR_print_errors(BIO *bp);\nvoid ERR_print_errors_fp(FILE *fp);\nvoid ERR_print_errors_cb(int (*cb)(const char *str, size_t len, void *u), void *u)\n</code></pre>"},{"location":"man3/ERR_print_errors/#description","title":"DESCRIPTION","text":"<p>ERR_print_errors() is a convenience function that prints the error strings for all errors that OpenSSL has recorded to bp, thus emptying the error queue.</p> <p>ERR_print_errors_fp() is the same, except that the output goes to a FILE.</p> <p>ERR_print_errors_cb() is the same, except that the callback function, cb, is called for each error line with the string, length, and userdata u as the callback parameters.</p> <p>The error strings will have the following format:</p> <pre><code>[pid]:error:[error code]:[library name]:[function name]:[reason string]:[filename]:[line]:[optional text message]\n</code></pre> <p>error code is an 8 digit hexadecimal number. library name, function name and reason string are ASCII text, as is optional text message if one was set for the respective error code.</p> <p>If there is no text string registered for the given error code, the error string will contain the numeric code.</p>"},{"location":"man3/ERR_print_errors/#return-values","title":"RETURN VALUES","text":"<p>ERR_print_errors() and ERR_print_errors_fp() return no values.</p>"},{"location":"man3/ERR_print_errors/#see-also","title":"SEE ALSO","text":"<p>ERR_error_string(3), ERR_get_error(3)</p>"},{"location":"man3/ERR_print_errors/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_put_error/","title":"ERR_put_error","text":""},{"location":"man3/ERR_put_error/#name","title":"NAME","text":"<p>ERR_put_error, ERR_add_error_data, ERR_add_error_vdata - record an error</p>"},{"location":"man3/ERR_put_error/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nvoid ERR_put_error(int lib, int func, int reason, const char *file, int line);\n\nvoid ERR_add_error_data(int num, ...);\nvoid ERR_add_error_vdata(int num, va_list arg);\n</code></pre>"},{"location":"man3/ERR_put_error/#description","title":"DESCRIPTION","text":"<p>ERR_put_error() adds an error code to the thread's error queue. It signals that the error of reason code reason occurred in function func of library lib, in line number line of file. This function is usually called by a macro.</p> <p>ERR_add_error_data() associates the concatenation of its num string arguments with the error code added last. ERR_add_error_vdata() is similar except the argument is a va_list.</p> <p>ERR_load_strings(3) can be used to register error strings so that the application can a generate human-readable error messages for the error code.</p>"},{"location":"man3/ERR_put_error/#reporting-errors","title":"Reporting errors","text":"<p>Each sub-library has a specific macro XXXerr() that is used to report errors. Its first argument is a function code XXX_F_..., the second argument is a reason code XXX_R_.... Function codes are derived from the function names; reason codes consist of textual error descriptions. For example, the function ssl3_read_bytes() reports a \"handshake failure\" as follows:</p> <pre><code>SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_SSL_HANDSHAKE_FAILURE);\n</code></pre> <p>Function and reason codes should consist of uppercase characters, numbers and underscores only. The error file generation script translates function codes into function names by looking in the header files for an appropriate function name, if none is found it just uses the capitalized form such as \"SSL3_READ_BYTES\" in the above example.</p> <p>The trailing section of a reason code (after the \"_R_\") is translated into lowercase and underscores changed to spaces.</p> <p>Although a library will normally report errors using its own specific XXXerr macro, another library's macro can be used. This is normally only done when a library wants to include ASN1 code which must use the ASN1err() macro.</p>"},{"location":"man3/ERR_put_error/#return-values","title":"RETURN VALUES","text":"<p>ERR_put_error() and ERR_add_error_data() return no values.</p>"},{"location":"man3/ERR_put_error/#see-also","title":"SEE ALSO","text":"<p>ERR_load_strings(3)</p>"},{"location":"man3/ERR_put_error/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_remove_state/","title":"ERR_remove_state","text":""},{"location":"man3/ERR_remove_state/#name","title":"NAME","text":"<p>ERR_remove_thread_state, ERR_remove_state - DEPRECATED</p>"},{"location":"man3/ERR_remove_state/#synopsis","title":"SYNOPSIS","text":"<p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10000000L\nvoid ERR_remove_state(unsigned long tid);\n#endif\n\n#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid ERR_remove_thread_state(void *tid);\n#endif\n</code></pre>"},{"location":"man3/ERR_remove_state/#description","title":"DESCRIPTION","text":"<p>ERR_remove_state() frees the error queue associated with the specified thread, identified by tid. ERR_remove_thread_state() does the same thing, except the identifier is an opaque pointer.</p>"},{"location":"man3/ERR_remove_state/#return-values","title":"RETURN VALUES","text":"<p>ERR_remove_state() and ERR_remove_thread_state() return no value.</p>"},{"location":"man3/ERR_remove_state/#see-also","title":"SEE ALSO","text":"<p>LOPENSSL_init_crypto(3)</p>"},{"location":"man3/ERR_remove_state/#history","title":"HISTORY","text":"<p>ERR_remove_state() was deprecated in OpenSSL 1.0.0 and ERR_remove_thread_state() was deprecated in OpenSSL 1.1.0; these functions and should not be used.</p>"},{"location":"man3/ERR_remove_state/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/ERR_set_mark/","title":"ERR_set_mark","text":""},{"location":"man3/ERR_set_mark/#name","title":"NAME","text":"<p>ERR_set_mark, ERR_pop_to_mark - set marks and pop errors until mark</p>"},{"location":"man3/ERR_set_mark/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/err.h&gt;\n\nint ERR_set_mark(void);\n\nint ERR_pop_to_mark(void);\n</code></pre>"},{"location":"man3/ERR_set_mark/#description","title":"DESCRIPTION","text":"<p>ERR_set_mark() sets a mark on the current topmost error record if there is one.</p> <p>ERR_pop_to_mark() will pop the top of the error stack until a mark is found. The mark is then removed.  If there is no mark, the whole stack is removed.</p>"},{"location":"man3/ERR_set_mark/#return-values","title":"RETURN VALUES","text":"<p>ERR_set_mark() returns 0 if the error stack is empty, otherwise 1.</p> <p>ERR_pop_to_mark() returns 0 if there was no mark in the error stack, which implies that the stack became empty, otherwise 1.</p>"},{"location":"man3/ERR_set_mark/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2003-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_BytesToKey/","title":"EVP_BytesToKey","text":""},{"location":"man3/EVP_BytesToKey/#name","title":"NAME","text":"<p>EVP_BytesToKey - password based encryption routine</p>"},{"location":"man3/EVP_BytesToKey/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,\n                   const unsigned char *salt,\n                   const unsigned char *data, int datal, int count,\n                   unsigned char *key, unsigned char *iv);\n</code></pre>"},{"location":"man3/EVP_BytesToKey/#description","title":"DESCRIPTION","text":"<p>EVP_BytesToKey() derives a key and IV from various parameters. type is the cipher to derive the key and IV for. md is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.</p>"},{"location":"man3/EVP_BytesToKey/#notes","title":"NOTES","text":"<p>A typical application of this function is to derive keying material for an encryption algorithm from a password in the data parameter.</p> <p>Increasing the count parameter slows down the algorithm which makes it harder for an attacker to perform a brute force attack using a large number of candidate passwords.</p> <p>If the total key and IV length is less than the digest length and MD5 is used then the derivation algorithm is compatible with PKCS#5 v1.5 otherwise a non standard extension is used to derive the extra data.</p> <p>Newer applications should use a more modern algorithm such as PBKDF2 as defined in PKCS#5v2.1 and provided by PKCS5_PBKDF2_HMAC.</p>"},{"location":"man3/EVP_BytesToKey/#key-derivation-algorithm","title":"KEY DERIVATION ALGORITHM","text":"<p>The key and IV is derived by concatenating D_1, D_2, etc until enough data is available for the key and IV. D_i is defined as:</p> <pre><code>    D_i = HASH^count(D_(i-1) || data || salt)\n</code></pre> <p>where || denotes concatenation, D_0 is empty, HASH is the digest algorithm in use, HASH^1(data) is simply HASH(data), HASH^2(data) is HASH(HASH(data)) and so on.</p> <p>The initial bytes are used for the key and the subsequent bytes for the IV.</p>"},{"location":"man3/EVP_BytesToKey/#return-values","title":"RETURN VALUES","text":"<p>If data is NULL, then EVP_BytesToKey() returns the number of bytes needed to store the derived key. Otherwise, EVP_BytesToKey() returns the size of the derived key in bytes, or 0 on error.</p>"},{"location":"man3/EVP_BytesToKey/#see-also","title":"SEE ALSO","text":"<p>evp(7), RAND_bytes(3), PKCS5_PBKDF2_HMAC(3), EVP_EncryptInit(3)</p>"},{"location":"man3/EVP_BytesToKey/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/","title":"EVP_CIPHER_CTX_get_cipher_data","text":""},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/#name","title":"NAME","text":"<p>EVP_CIPHER_CTX_get_cipher_data, EVP_CIPHER_CTX_set_cipher_data - Routines to inspect and modify EVP_CIPHER_CTX objects</p>"},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nvoid *EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX *ctx);\nvoid *EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data);\n</code></pre>"},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/#description","title":"DESCRIPTION","text":"<p>The EVP_CIPHER_CTX_get_cipher_data() function returns a pointer to the cipher data relevant to EVP_CIPHER_CTX. The contents of this data is specific to the particular implementation of the cipher. For example this data can be used by engines to store engine specific information. The data is automatically allocated and freed by OpenSSL, so applications and engines should not normally free this directly (but see below).</p> <p>The EVP_CIPHER_CTX_set_cipher_data() function allows an application or engine to replace the cipher data with new data. A pointer to any existing cipher data is returned from this function. If the old data is no longer required then it should be freed through a call to OPENSSL_free().</p>"},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/#return-values","title":"RETURN VALUES","text":"<p>The EVP_CIPHER_CTX_get_cipher_data() function returns a pointer to the current cipher data for the EVP_CIPHER_CTX.</p> <p>The EVP_CIPHER_CTX_set_cipher_data() function returns a pointer to the old cipher data for the EVP_CIPHER_CTX.</p>"},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/#history","title":"HISTORY","text":"<p>The EVP_CIPHER_CTX_get_cipher_data() and EVP_CIPHER_CTX_set_cipher_data() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/EVP_CIPHER_CTX_get_cipher_data/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_CIPHER_meth_new/","title":"EVP_CIPHER_meth_new","text":""},{"location":"man3/EVP_CIPHER_meth_new/#name","title":"NAME","text":"<p>EVP_CIPHER_meth_new, EVP_CIPHER_meth_dup, EVP_CIPHER_meth_free, EVP_CIPHER_meth_set_iv_length, EVP_CIPHER_meth_set_flags, EVP_CIPHER_meth_set_impl_ctx_size, EVP_CIPHER_meth_set_init, EVP_CIPHER_meth_set_do_cipher, EVP_CIPHER_meth_set_cleanup, EVP_CIPHER_meth_set_set_asn1_params, EVP_CIPHER_meth_set_get_asn1_params, EVP_CIPHER_meth_set_ctrl, EVP_CIPHER_meth_get_init, EVP_CIPHER_meth_get_do_cipher, EVP_CIPHER_meth_get_cleanup, EVP_CIPHER_meth_get_set_asn1_params, EVP_CIPHER_meth_get_get_asn1_params, EVP_CIPHER_meth_get_ctrl - Routines to build up EVP_CIPHER methods</p>"},{"location":"man3/EVP_CIPHER_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_CIPHER *EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len);\nEVP_CIPHER *EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher);\nvoid EVP_CIPHER_meth_free(EVP_CIPHER *cipher);\n\nint EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len);\nint EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags);\nint EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size);\nint EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher,\n                             int (*init)(EVP_CIPHER_CTX *ctx,\n                                         const unsigned char *key,\n                                         const unsigned char *iv,\n                                         int enc));\nint EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher,\n                                  int (*do_cipher)(EVP_CIPHER_CTX *ctx,\n                                                   unsigned char *out,\n                                                   const unsigned char *in,\n                                                   size_t inl));\nint EVP_CIPHER_meth_set_cleanup(EVP_CIPHER *cipher,\n                                int (*cleanup)(EVP_CIPHER_CTX *));\nint EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER *cipher,\n                                        int (*set_asn1_parameters)(EVP_CIPHER_CTX *,\n                                                                   ASN1_TYPE *));\nint EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER *cipher,\n                                        int (*get_asn1_parameters)(EVP_CIPHER_CTX *,\n                                                                   ASN1_TYPE *));\nint EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher,\n                             int (*ctrl)(EVP_CIPHER_CTX *, int type,\n                                         int arg, void *ptr));\n\nint (*EVP_CIPHER_meth_get_init(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx,\n                                                          const unsigned char *key,\n                                                          const unsigned char *iv,\n                                                          int enc);\nint (*EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx,\n                                                               unsigned char *out,\n                                                               const unsigned char *in,\n                                                               size_t inl);\nint (*EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *);\nint (*EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,\n                                                                     ASN1_TYPE *);\nint (*EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,\n                                                                     ASN1_TYPE *);\nint (*EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,\n                                                          int type, int arg,\n                                                          void *ptr);\n</code></pre>"},{"location":"man3/EVP_CIPHER_meth_new/#description","title":"DESCRIPTION","text":"<p>The EVP_CIPHER type is a structure for symmetric cipher method implementation.</p> <p>EVP_CIPHER_meth_new() creates a new EVP_CIPHER structure.</p> <p>EVP_CIPHER_meth_dup() creates a copy of cipher.</p> <p>EVP_CIPHER_meth_free() destroys a EVP_CIPHER structure.</p> <p>EVP_CIPHER_meth_set_iv_length() sets the length of the IV. This is only needed when the implemented cipher mode requires it.</p> <p>EVP_CIPHER_meth_set_flags() sets the flags to describe optional behaviours in the particular cipher. With the exception of cipher modes, of which only one may be present, several flags can be or'd together. The available flags are:</p> <ul> <li> <p>EVP_CIPH_STREAM_CIPHER, EVP_CIPH_ECB_MODE EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE, EVP_CIPH_OFB_MODE, EVP_CIPH_CTR_MODE, EVP_CIPH_GCM_MODE, EVP_CIPH_CCM_MODE, EVP_CIPH_XTS_MODE, EVP_CIPH_WRAP_MODE, EVP_CIPH_OCB_MODE</p> <p>The cipher mode.</p> </li> <li> <p>EVP_CIPH_VARIABLE_LENGTH</p> <p>This cipher is of variable length.</p> </li> <li> <p>EVP_CIPH_CUSTOM_IV</p> <p>Storing and initialising the IV is left entirely to the implementation.</p> </li> <li> <p>EVP_CIPH_ALWAYS_CALL_INIT</p> <p>Set this if the implementation's init() function should be called even if key is NULL.</p> </li> <li> <p>EVP_CIPH_CTRL_INIT</p> <p>Set this to have the implementation's ctrl() function called with command code EVP_CTRL_INIT early in its setup.</p> </li> <li> <p>EVP_CIPH_CUSTOM_KEY_LENGTH</p> <p>Checking and setting the key length after creating the EVP_CIPHER is left to the implementation. Whenever someone uses EVP_CIPHER_CTX_set_key_length() on a EVP_CIPHER with this flag set, the implementation's ctrl() function will be called with the control code EVP_CTRL_SET_KEY_LENGTH and the key length in arg.</p> </li> <li> <p>EVP_CIPH_NO_PADDING</p> <p>Don't use standard block padding.</p> </li> <li> <p>EVP_CIPH_RAND_KEY</p> <p>Making a key with random content is left to the implementation. This is done by calling the implementation's ctrl() function with the control code EVP_CTRL_RAND_KEY and the pointer to the key memory storage in ptr.</p> </li> <li> <p>EVP_CIPH_CUSTOM_COPY</p> <p>Set this to have the implementation's ctrl() function called with command code EVP_CTRL_COPY at the end of EVP_CIPHER_CTX_copy(). The intended use is for further things to deal with after the implementation specific data block has been copied. The destination EVP_CIPHER_CTX is passed to the control with the ptr parameter. The implementation specific data block is reached with EVP_CIPHER_CTX_get_cipher_data().</p> </li> <li> <p>EVP_CIPH_FLAG_DEFAULT_ASN1</p> <p>Use the default EVP routines to pass IV to and from ASN.1.</p> </li> <li> <p>EVP_CIPH_FLAG_LENGTH_BITS</p> <p>Signals that the length of the input buffer for encryption / decryption is to be understood as the number of bits instead of bytes for this implementation. This is only useful for CFB1 ciphers.</p> </li> <li> <p>EVP_CIPH_FLAG_CUSTOM_CIPHER</p> <p>This indicates that the implementation takes care of everything, including padding, buffering and finalization. The EVP routines will simply give them control and do nothing more.</p> </li> <li> <p>EVP_CIPH_FLAG_AEAD_CIPHER</p> <p>This indicates that this is an AEAD cipher implementation.</p> </li> <li> <p>EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK</p> <p>Allow interleaving of crypto blocks, a particular optimization only applicable to certain TLS ciphers.</p> </li> </ul> <p>EVP_CIPHER_meth_set_impl_ctx_size() sets the size of the EVP_CIPHER's implementation context so that it can be automatically allocated.</p> <p>EVP_CIPHER_meth_set_init() sets the cipher init function for cipher. The cipher init function is called by EVP_CipherInit(), EVP_CipherInit_ex(), EVP_EncryptInit(), EVP_EncryptInit_ex(), EVP_DecryptInit(), EVP_DecryptInit_ex().</p> <p>EVP_CIPHER_meth_set_do_cipher() sets the cipher function for cipher. The cipher function is called by EVP_CipherUpdate(), EVP_EncryptUpdate(), EVP_DecryptUpdate(), EVP_CipherFinal(), EVP_EncryptFinal(), EVP_EncryptFinal_ex(), EVP_DecryptFinal() and EVP_DecryptFinal_ex().</p> <p>EVP_CIPHER_meth_set_cleanup() sets the function for cipher to do extra cleanup before the method's private data structure is cleaned out and freed. Note that the cleanup function is passed a EVP_CIPHER_CTX *, the private data structure is then available with EVP_CIPHER_CTX_get_cipher_data(). This cleanup function is called by EVP_CIPHER_CTX_reset() and EVP_CIPHER_CTX_free().</p> <p>EVP_CIPHER_meth_set_set_asn1_params() sets the function for cipher to set the AlgorithmIdentifier \"parameter\" based on the passed cipher. This function is called by EVP_CIPHER_param_to_asn1(). EVP_CIPHER_meth_set_get_asn1_params() sets the function for cipher that sets the cipher parameters based on an ASN.1 AlgorithmIdentifier \"parameter\". Both these functions are needed when there is a need for custom data (more or other than the cipher IV). They are called by EVP_CIPHER_param_to_asn1() and EVP_CIPHER_asn1_to_param() respectively if defined.</p> <p>EVP_CIPHER_meth_set_ctrl() sets the control function for cipher.</p> <p>EVP_CIPHER_meth_get_init(), EVP_CIPHER_meth_get_do_cipher(), EVP_CIPHER_meth_get_cleanup(), EVP_CIPHER_meth_get_set_asn1_params(), EVP_CIPHER_meth_get_get_asn1_params() and EVP_CIPHER_meth_get_ctrl() are all used to retrieve the method data given with the EVP_CIPHER_meth_set_*() functions above.</p>"},{"location":"man3/EVP_CIPHER_meth_new/#return-values","title":"RETURN VALUES","text":"<p>EVP_CIPHER_meth_new() and EVP_CIPHER_meth_dup() return a pointer to a newly created EVP_CIPHER, or NULL on failure. All EVP_CIPHER_meth_set_*() functions return 1. All EVP_CIPHER_meth_get_*() functions return pointers to their respective cipher function.</p>"},{"location":"man3/EVP_CIPHER_meth_new/#see-also","title":"SEE ALSO","text":"<p>EVP_EncryptInit</p>"},{"location":"man3/EVP_CIPHER_meth_new/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/EVP_CIPHER_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_DigestInit/","title":"EVP_DigestInit","text":""},{"location":"man3/EVP_DigestInit/#name","title":"NAME","text":"<p>EVP_MD_CTX_new, EVP_MD_CTX_reset, EVP_MD_CTX_free, EVP_MD_CTX_copy, EVP_MD_CTX_copy_ex, EVP_MD_CTX_ctrl, EVP_MD_CTX_set_flags, EVP_MD_CTX_clear_flags, EVP_MD_CTX_test_flags, EVP_Digest, EVP_DigestInit_ex, EVP_DigestInit, EVP_DigestUpdate, EVP_DigestFinal_ex, EVP_DigestFinalXOF, EVP_DigestFinal, EVP_MD_type, EVP_MD_pkey_type, EVP_MD_size, EVP_MD_block_size, EVP_MD_flags, EVP_MD_CTX_md, EVP_MD_CTX_type, EVP_MD_CTX_size, EVP_MD_CTX_block_size, EVP_MD_CTX_md_data, EVP_MD_CTX_update_fn, EVP_MD_CTX_set_update_fn, EVP_md_null, EVP_get_digestbyname, EVP_get_digestbynid, EVP_get_digestbyobj, EVP_MD_CTX_pkey_ctx, EVP_MD_CTX_set_pkey_ctx - EVP digest routines</p>"},{"location":"man3/EVP_DigestInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_MD_CTX *EVP_MD_CTX_new(void);\nint EVP_MD_CTX_reset(EVP_MD_CTX *ctx);\nvoid EVP_MD_CTX_free(EVP_MD_CTX *ctx);\nvoid EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void* p2);\nvoid EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags);\nvoid EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags);\nint EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags);\n\nint EVP_Digest(const void *data, size_t count, unsigned char *md,\n               unsigned int *size, const EVP_MD *type, ENGINE *impl);\nint EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);\nint EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);\nint EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);\nint EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md, size_t len);\n\nint EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in);\n\nint EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);\nint EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);\n\nint EVP_MD_CTX_copy(EVP_MD_CTX *out, EVP_MD_CTX *in);\n\nint EVP_MD_type(const EVP_MD *md);\nint EVP_MD_pkey_type(const EVP_MD *md);\nint EVP_MD_size(const EVP_MD *md);\nint EVP_MD_block_size(const EVP_MD *md);\nunsigned long EVP_MD_flags(const EVP_MD *md);\n\nconst EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx);\nint EVP_MD_CTX_size(const EVP_MD_CTX *ctx);\nint EVP_MD_CTX_block_size(const EVP_MD_CTX *ctx);\nint EVP_MD_CTX_type(const EVP_MD_CTX *ctx);\nvoid *EVP_MD_CTX_md_data(const EVP_MD_CTX *ctx);\nint (*EVP_MD_CTX_update_fn(EVP_MD_CTX *ctx))(EVP_MD_CTX *ctx,\n                                             const void *data, size_t count);\nvoid EVP_MD_CTX_set_update_fn(EVP_MD_CTX *ctx,\n                              int (*update)(EVP_MD_CTX *ctx,\n                                            const void *data, size_t count));\n\nconst EVP_MD *EVP_md_null(void);\n\nconst EVP_MD *EVP_get_digestbyname(const char *name);\nconst EVP_MD *EVP_get_digestbynid(int type);\nconst EVP_MD *EVP_get_digestbyobj(const ASN1_OBJECT *o);\n\nEVP_PKEY_CTX *EVP_MD_CTX_pkey_ctx(const EVP_MD_CTX *ctx);\nvoid EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx);\n</code></pre>"},{"location":"man3/EVP_DigestInit/#description","title":"DESCRIPTION","text":"<p>The EVP digest routines are a high-level interface to message digests, and should be used instead of the cipher-specific functions.</p> <ul> <li> <p>EVP_MD_CTX_new()</p> <p>Allocates and returns a digest context.</p> </li> <li> <p>EVP_MD_CTX_reset()</p> <p>Resets the digest context ctx.  This can be used to reuse an already existing context.</p> </li> <li> <p>EVP_MD_CTX_free()</p> <p>Cleans up digest context ctx and frees up the space allocated to it.</p> </li> <li> <p>EVP_MD_CTX_ctrl()</p> <p>Performs digest-specific control actions on context ctx. The control command is indicated in cmd and any additional arguments in p1 and p2. EVP_MD_CTX_ctrl() must be called after EVP_DigestInit_ex(). Other restrictions may apply depending on the control type and digest implementation. See \"CONTROLS\" below for more information.</p> </li> <li> <p>EVP_MD_CTX_set_flags(), EVP_MD_CTX_clear_flags(), EVP_MD_CTX_test_flags()</p> <p>Sets, clears and tests ctx flags.  See \"FLAGS\" below for more information.</p> </li> <li> <p>EVP_Digest()</p> <p>A wrapper around the Digest Init_ex, Update and Final_ex functions. Hashes count bytes of data at data using a digest type from ENGINE impl. The digest value is placed in md and its length is written at size if the pointer is not NULL. At most EVP_MAX_MD_SIZE bytes will be written. If impl is NULL the default implementation of digest type is used.</p> </li> <li> <p>EVP_DigestInit_ex()</p> <p>Sets up digest context ctx to use a digest type from ENGINE impl. type will typically be supplied by a function such as EVP_sha1().  If impl is NULL then the default implementation of digest type is used.</p> </li> <li> <p>EVP_DigestUpdate()</p> <p>Hashes cnt bytes of data at d into the digest context ctx. This function can be called several times on the same ctx to hash additional data.</p> </li> <li> <p>EVP_DigestFinal_ex()</p> <p>Retrieves the digest value from ctx and places it in md. If the s parameter is not NULL then the number of bytes of data written (i.e. the length of the digest) will be written to the integer at s, at most EVP_MAX_MD_SIZE bytes will be written.  After calling EVP_DigestFinal_ex() no additional calls to EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called to initialize a new digest operation.</p> </li> <li> <p>EVP_DigestFinalXOF()</p> <p>Interfaces to extendable-output functions, XOFs, such as SHAKE128 and SHAKE256. It retrieves the digest value from ctx and places it in len-sized &lt;B&gt;md. After calling this function no additional calls to EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called to initialize a new operation.</p> </li> <li> <p>EVP_MD_CTX_copy_ex()</p> <p>Can be used to copy the message digest state from in to out. This is useful if large amounts of data are to be hashed which only differ in the last few bytes.</p> </li> <li> <p>EVP_DigestInit()</p> <p>Behaves in the same way as EVP_DigestInit_ex() except it always uses the default digest implementation and calls EVP_MD_CTX_reset().</p> </li> <li> <p>EVP_DigestFinal()</p> <p>Similar to EVP_DigestFinal_ex() except the digest context ctx is automatically cleaned up.</p> </li> <li> <p>EVP_MD_CTX_copy()</p> <p>Similar to EVP_MD_CTX_copy_ex() except the destination out does not have to be initialized.</p> </li> <li> <p>EVP_MD_size(), EVP_MD_CTX_size()</p> <p>Return the size of the message digest when passed an EVP_MD or an EVP_MD_CTX structure, i.e. the size of the hash.</p> </li> <li> <p>EVP_MD_block_size(), EVP_MD_CTX_block_size()</p> <p>Return the block size of the message digest when passed an EVP_MD or an EVP_MD_CTX structure.</p> </li> <li> <p>EVP_MD_type(), EVP_MD_CTX_type()</p> <p>Return the NID of the OBJECT IDENTIFIER representing the given message digest when passed an EVP_MD structure.  For example, <code>EVP_MD_type(EVP_sha1())</code> returns NID_sha1. This function is normally used when setting ASN1 OIDs.</p> </li> <li> <p>EVP_MD_CTX_md_data()</p> <p>Return the digest method private data for the passed EVP_MD_CTX. The space is allocated by OpenSSL and has the size originally set with EVP_MD_meth_set_app_datasize().</p> </li> <li> <p>EVP_MD_CTX_md()</p> <p>Returns the EVP_MD structure corresponding to the passed EVP_MD_CTX.</p> </li> <li> <p>EVP_MD_CTX_set_update_fn()</p> <p>Sets the update function for ctx to update. This is the function that is called by EVP_DigestUpdate. If not set, the update function from the EVP_MD type specified at initialization is used.</p> </li> <li> <p>EVP_MD_CTX_update_fn()</p> <p>Returns the update function for ctx.</p> </li> <li> <p>EVP_MD_flags()</p> <p>Returns the md flags. Note that these are different from the EVP_MD_CTX ones. See EVP_MD_meth_set_flags(3) for more information.</p> </li> <li> <p>EVP_MD_pkey_type()</p> <p>Returns the NID of the public key signing algorithm associated with this digest. For example EVP_sha1() is associated with RSA so this will return NID_sha1WithRSAEncryption. Since digests and signature algorithms are no longer linked this function is only retained for compatibility reasons.</p> </li> <li> <p>EVP_md_null()</p> <p>A \"null\" message digest that does nothing: i.e. the hash it returns is of zero length.</p> </li> <li> <p>EVP_get_digestbyname(), EVP_get_digestbynid(), EVP_get_digestbyobj()</p> <p>Returns an EVP_MD structure when passed a digest name, a digest NID or an ASN1_OBJECT structure respectively.</p> </li> <li> <p>EVP_MD_CTX_pkey_ctx()</p> <p>Returns the EVP_PKEY_CTX assigned to ctx. The returned pointer should not be freed by the caller.</p> </li> <li> <p>EVP_MD_CTX_set_pkey_ctx()</p> <p>Assigns an EVP_PKEY_CTX to EVP_MD_CTX. This is usually used to provide a customized EVP_PKEY_CTX to EVP_DigestSignInit(3) or EVP_DigestVerifyInit(3). The pctx passed to this function should be freed by the caller. A NULL pctx pointer is also allowed to clear the EVP_PKEY_CTX assigned to ctx. In such case, freeing the cleared EVP_PKEY_CTX or not depends on how the EVP_PKEY_CTX is created.</p> </li> </ul>"},{"location":"man3/EVP_DigestInit/#controls","title":"CONTROLS","text":"<p>EVP_MD_CTX_ctrl() can be used to send the following standard controls:</p> <ul> <li> <p>EVP_MD_CTRL_MICALG</p> <p>Gets the digest Message Integrity Check algorithm string. This is used when creating S/MIME multipart/signed messages, as specified in RFC 3851. The string value is written to p2.</p> </li> <li> <p>EVP_MD_CTRL_XOF_LEN</p> <p>This control sets the digest length for extendable output functions to p1. Sending this control directly should not be necessary, the use of <code>EVP_DigestFinalXOF()</code> is preferred. Currently used by SHAKE.</p> </li> </ul>"},{"location":"man3/EVP_DigestInit/#flags","title":"FLAGS","text":"<p>EVP_MD_CTX_set_flags(), EVP_MD_CTX_clear_flags() and EVP_MD_CTX_test_flags() can be used the manipulate and test these EVP_MD_CTX flags:</p> <ul> <li> <p>EVP_MD_CTX_FLAG_ONESHOT</p> <p>This flag instructs the digest to optimize for one update only, if possible.</p> </li> <li> <p>EVP_MD_CTX_FLAG_NO_INIT</p> <p>This flag instructs EVP_DigestInit() and similar not to initialise the implementation specific data.</p> </li> <li> <p>EVP_MD_CTX_FLAG_FINALISE</p> <p>Some functions such as EVP_DigestSign only finalise copies of internal contexts so additional data can be included after the finalisation call. This is inefficient if this functionality is not required, and can be disabled with this flag.</p> </li> </ul>"},{"location":"man3/EVP_DigestInit/#return-values","title":"RETURN VALUES","text":"<ul> <li> <p>EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex()</p> <p>Returns 1 for success and 0 for failure.</p> </li> <li> <p>EVP_MD_CTX_ctrl()</p> <p>Returns 1 if successful or 0 for failure.</p> </li> <li> <p>EVP_MD_CTX_copy_ex()</p> <p>Returns 1 if successful or 0 for failure.</p> </li> <li> <p>EVP_MD_type(), EVP_MD_pkey_type()</p> <p>Returns the NID of the corresponding OBJECT IDENTIFIER or NID_undef if none exists.</p> </li> <li> <p>EVP_MD_size(), EVP_MD_block_size(), EVP_MD_CTX_size(), EVP_MD_CTX_block_size()</p> <p>Returns the digest or block size in bytes.</p> </li> <li> <p>EVP_md_null()</p> <p>Returns a pointer to the EVP_MD structure of the \"null\" message digest.</p> </li> <li> <p>EVP_get_digestbyname(), EVP_get_digestbynid(), EVP_get_digestbyobj()</p> <p>Returns either an EVP_MD structure or NULL if an error occurs.</p> </li> <li> <p>EVP_MD_CTX_set_pkey_ctx()</p> <p>This function has no return value.</p> </li> </ul>"},{"location":"man3/EVP_DigestInit/#notes","title":"NOTES","text":"<p>The EVP interface to message digests should almost always be used in preference to the low-level interfaces. This is because the code then becomes transparent to the digest used and much more flexible.</p> <p>New applications should use the SHA-2 (such as EVP_sha256(3)) or the SHA-3 digest algorithms (such as EVP_sha3_512(3)). The other digest algorithms are still in common use.</p> <p>For most applications the impl parameter to EVP_DigestInit_ex() will be set to NULL to use the default digest implementation.</p> <p>The functions EVP_DigestInit(), EVP_DigestFinal() and EVP_MD_CTX_copy() are obsolete but are retained to maintain compatibility with existing code. New applications should use EVP_DigestInit_ex(), EVP_DigestFinal_ex() and EVP_MD_CTX_copy_ex() because they can efficiently reuse a digest context instead of initializing and cleaning it up on each call and allow non default implementations of digests to be specified.</p> <p>If digest contexts are not cleaned up after use, memory leaks will occur.</p> <p>EVP_MD_CTX_size(), EVP_MD_CTX_block_size(), EVP_MD_CTX_type(), EVP_get_digestbynid() and EVP_get_digestbyobj() are defined as macros.</p> <p>EVP_MD_CTX_ctrl() sends commands to message digests for additional configuration or control.</p>"},{"location":"man3/EVP_DigestInit/#examples","title":"EXAMPLES","text":"<p>This example digests the data \"Test Message\\n\" and \"Hello World\\n\", using the digest name passed on the command line.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;openssl/evp.h&gt;\n\nint main(int argc, char *argv[])\n{\n    EVP_MD_CTX *mdctx;\n    const EVP_MD *md;\n    char mess1[] = \"Test Message\\n\";\n    char mess2[] = \"Hello World\\n\";\n    unsigned char md_value[EVP_MAX_MD_SIZE];\n    unsigned int md_len, i;\n\n    if (argv[1] == NULL) {\n        printf(\"Usage: mdtest digestname\\n\");\n        exit(1);\n    }\n\n    md = EVP_get_digestbyname(argv[1]);\n    if (md == NULL) {\n        printf(\"Unknown message digest %s\\n\", argv[1]);\n        exit(1);\n    }\n\n    mdctx = EVP_MD_CTX_new();\n    EVP_DigestInit_ex(mdctx, md, NULL);\n    EVP_DigestUpdate(mdctx, mess1, strlen(mess1));\n    EVP_DigestUpdate(mdctx, mess2, strlen(mess2));\n    EVP_DigestFinal_ex(mdctx, md_value, &amp;md_len);\n    EVP_MD_CTX_free(mdctx);\n\n    printf(\"Digest is: \");\n    for (i = 0; i &lt; md_len; i++)\n        printf(\"%02x\", md_value[i]);\n    printf(\"\\n\");\n\n    exit(0);\n}\n</code></pre>"},{"location":"man3/EVP_DigestInit/#see-also","title":"SEE ALSO","text":"<p>EVP_MD_meth_new(3), dgst(1), evp(7)</p> <p>The full list of digest algorithms are provided below.</p> <p>EVP_blake2b512(3), EVP_md2(3), EVP_md4(3), EVP_md5(3), EVP_mdc2(3), EVP_ripemd160(3), EVP_sha1(3), EVP_sha224(3), EVP_sha3_224(3), EVP_sm3(3), EVP_whirlpool(3)</p>"},{"location":"man3/EVP_DigestInit/#history","title":"HISTORY","text":"<p>The EVP_MD_CTX_create() and EVP_MD_CTX_destroy() functions were renamed to EVP_MD_CTX_new() and EVP_MD_CTX_free() in OpenSSL 1.1.0, respectively.</p> <p>The link between digests and signing algorithms was fixed in OpenSSL 1.0 and later, so now EVP_sha1() can be used with RSA and DSA.</p> <p>The EVP_dss1() function was removed in OpenSSL 1.1.0.</p> <p>The EVP_MD_CTX_set_pkey_ctx() function was added in 1.1.1.</p>"},{"location":"man3/EVP_DigestInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_DigestSignInit/","title":"EVP_DigestSignInit","text":""},{"location":"man3/EVP_DigestSignInit/#name","title":"NAME","text":"<p>EVP_DigestSignInit, EVP_DigestSignUpdate, EVP_DigestSignFinal, EVP_DigestSign - EVP signing functions</p>"},{"location":"man3/EVP_DigestSignInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,\n                       const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);\nint EVP_DigestSignUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);\nint EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen);\n\nint EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret,\n                   size_t *siglen, const unsigned char *tbs,\n                   size_t tbslen);\n</code></pre>"},{"location":"man3/EVP_DigestSignInit/#description","title":"DESCRIPTION","text":"<p>The EVP signature routines are a high-level interface to digital signatures.</p> <p>EVP_DigestSignInit() sets up signing context ctx to use digest type from ENGINE e and private key pkey. ctx must be created with EVP_MD_CTX_new() before calling this function. If pctx is not NULL, the EVP_PKEY_CTX of the signing operation will be written to *pctx: this can be used to set alternative signing options. Note that any existing value in *pctx is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application if ctx is not assigned an EVP_PKEY_CTX value before being passed to EVP_DigestSignInit() (which means the EVP_PKEY_CTX is created inside EVP_DigestSignInit() and it will be freed automatically when the EVP_MD_CTX is freed).</p> <p>The digest type may be NULL if the signing algorithm supports it.</p> <p>No EVP_PKEY_CTX will be created by EVP_DigestSignInit() if the passed ctx has already been assigned one via EVP_MD_CTX_set_pkey_ctx(3). See also SM2(7).</p> <p>Only EVP_PKEY types that support signing can be used with these functions. This includes MAC algorithms where the MAC generation is considered as a form of \"signing\". Built-in EVP_PKEY types supported by these functions are CMAC, Poly1305, DSA, ECDSA, HMAC, RSA, SipHash, Ed25519 and Ed448.</p> <p>Not all digests can be used for all key types. The following combinations apply.</p> <ul> <li> <p>DSA</p> <p>Supports SHA1, SHA224, SHA256, SHA384 and SHA512</p> </li> <li> <p>ECDSA</p> <p>Supports SHA1, SHA224, SHA256, SHA384, SHA512 and SM3</p> </li> <li> <p>RSA with no padding</p> <p>Supports no digests (the digest type must be NULL)</p> </li> <li> <p>RSA with X931 padding</p> <p>Supports SHA1, SHA256, SHA384 and SHA512</p> </li> <li> <p>All other RSA padding types</p> <p>Support SHA1, SHA224, SHA256, SHA384, SHA512, MD5, MD5_SHA1, MD2, MD4, MDC2, SHA3-224, SHA3-256, SHA3-384, SHA3-512</p> </li> <li> <p>Ed25519 and Ed448</p> <p>Support no digests (the digest type must be NULL)</p> </li> <li> <p>HMAC</p> <p>Supports any digest</p> </li> <li> <p>CMAC, Poly1305 and SipHash</p> <p>Will ignore any digest provided.</p> </li> </ul> <p>If RSA-PSS is used and restrictions apply then the digest must match.</p> <p>EVP_DigestSignUpdate() hashes cnt bytes of data at d into the signature context ctx. This function can be called several times on the same ctx to include additional data. This function is currently implemented using a macro.</p> <p>EVP_DigestSignFinal() signs the data in ctx and places the signature in sig. If sig is NULL then the maximum size of the output buffer is written to the siglen parameter. If sig is not NULL then before the call the siglen parameter should contain the length of the sig buffer. If the call is successful the signature is written to sig and the amount of data written to siglen.</p> <p>EVP_DigestSign() signs tbslen bytes of data at tbs and places the signature in sig and its length in siglen in a similar way to EVP_DigestSignFinal().</p>"},{"location":"man3/EVP_DigestSignInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_DigestSignInit(), EVP_DigestSignUpdate(), EVP_DigestSignFinal() and EVP_DigestSign() return 1 for success and 0 for failure.</p> <p>The error codes can be obtained from ERR_get_error(3).</p>"},{"location":"man3/EVP_DigestSignInit/#notes","title":"NOTES","text":"<p>The EVP interface to digital signatures should almost always be used in preference to the low-level interfaces. This is because the code then becomes transparent to the algorithm used and much more flexible.</p> <p>EVP_DigestSign() is a one shot operation which signs a single block of data in one function. For algorithms that support streaming it is equivalent to calling EVP_DigestSignUpdate() and EVP_DigestSignFinal(). For algorithms which do not support streaming (e.g. PureEdDSA) it is the only way to sign data.</p> <p>In previous versions of OpenSSL there was a link between message digest types and public key algorithms. This meant that \"clone\" digests such as EVP_dss1() needed to be used to sign using SHA1 and DSA. This is no longer necessary and the use of clone digest is now discouraged.</p> <p>For some key types and parameters the random number generator must be seeded. If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>The call to EVP_DigestSignFinal() internally finalizes a copy of the digest context. This means that calls to EVP_DigestSignUpdate() and EVP_DigestSignFinal() can be called later to digest and sign additional data.</p> <p>Since only a copy of the digest context is ever finalized, the context must be cleaned up after use by calling EVP_MD_CTX_free() or a memory leak will occur.</p> <p>The use of EVP_PKEY_size() with these functions is discouraged because some signature operations may have a signature length which depends on the parameters set. As a result EVP_PKEY_size() would have to return a value which indicates the maximum possible signature for any set of parameters.</p>"},{"location":"man3/EVP_DigestSignInit/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestVerifyInit(3), EVP_DigestInit(3), evp(7), HMAC(3), MD2(3), MD5(3), MDC2(3), RIPEMD160(3), SHA1(3), dgst(1), RAND(7)</p>"},{"location":"man3/EVP_DigestSignInit/#history","title":"HISTORY","text":"<p>EVP_DigestSignInit(), EVP_DigestSignUpdate() and EVP_DigestSignFinal() were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_DigestSignInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_DigestVerifyInit/","title":"EVP_DigestVerifyInit","text":""},{"location":"man3/EVP_DigestVerifyInit/#name","title":"NAME","text":"<p>EVP_DigestVerifyInit, EVP_DigestVerifyUpdate, EVP_DigestVerifyFinal, EVP_DigestVerify - EVP signature verification functions</p>"},{"location":"man3/EVP_DigestVerifyInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,\n                         const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);\nint EVP_DigestVerifyUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);\nint EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,\n                          size_t siglen);\nint EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret,\n                     size_t siglen, const unsigned char *tbs, size_t tbslen);\n</code></pre>"},{"location":"man3/EVP_DigestVerifyInit/#description","title":"DESCRIPTION","text":"<p>The EVP signature routines are a high-level interface to digital signatures.</p> <p>EVP_DigestVerifyInit() sets up verification context ctx to use digest type from ENGINE e and public key pkey. ctx must be created with EVP_MD_CTX_new() before calling this function. If pctx is not NULL, the EVP_PKEY_CTX of the verification operation will be written to *pctx: this can be used to set alternative verification options. Note that any existing value in *pctx is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application if ctx is not assigned an EVP_PKEY_CTX value before being passed to EVP_DigestVerifyInit() (which means the EVP_PKEY_CTX is created inside EVP_DigestVerifyInit() and it will be freed automatically when the EVP_MD_CTX is freed).</p> <p>No EVP_PKEY_CTX will be created by EVP_DigestSignInit() if the passed ctx has already been assigned one via EVP_MD_CTX_set_pkey_ctx(3). See also SM2(7).</p> <p>EVP_DigestVerifyUpdate() hashes cnt bytes of data at d into the verification context ctx. This function can be called several times on the same ctx to include additional data. This function is currently implemented using a macro.</p> <p>EVP_DigestVerifyFinal() verifies the data in ctx against the signature in sig of length siglen.</p> <p>EVP_DigestVerify() verifies tbslen bytes at tbs against the signature in sig of length siglen.</p>"},{"location":"man3/EVP_DigestVerifyInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_DigestVerifyInit() and EVP_DigestVerifyUpdate() return 1 for success and 0 for failure.</p> <p>EVP_DigestVerifyFinal() and EVP_DigestVerify() return 1 for success; any other value indicates failure.  A return value of zero indicates that the signature did not verify successfully (that is, tbs did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form).</p> <p>The error codes can be obtained from ERR_get_error(3).</p>"},{"location":"man3/EVP_DigestVerifyInit/#notes","title":"NOTES","text":"<p>The EVP interface to digital signatures should almost always be used in preference to the low-level interfaces. This is because the code then becomes transparent to the algorithm used and much more flexible.</p> <p>EVP_DigestVerify() is a one shot operation which verifies a single block of data in one function. For algorithms that support streaming it is equivalent to calling EVP_DigestVerifyUpdate() and EVP_DigestVerifyFinal(). For algorithms which do not support streaming (e.g. PureEdDSA) it is the only way to verify data.</p> <p>In previous versions of OpenSSL there was a link between message digest types and public key algorithms. This meant that \"clone\" digests such as EVP_dss1() needed to be used to sign using SHA1 and DSA. This is no longer necessary and the use of clone digest is now discouraged.</p> <p>For some key types and parameters the random number generator must be seeded. If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>The call to EVP_DigestVerifyFinal() internally finalizes a copy of the digest context. This means that EVP_VerifyUpdate() and EVP_VerifyFinal() can be called later to digest and verify additional data.</p> <p>Since only a copy of the digest context is ever finalized, the context must be cleaned up after use by calling EVP_MD_CTX_free() or a memory leak will occur.</p>"},{"location":"man3/EVP_DigestVerifyInit/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestSignInit(3), EVP_DigestInit(3), evp(7), HMAC(3), MD2(3), MD5(3), MDC2(3), RIPEMD160(3), SHA1(3), dgst(1), RAND(7)</p>"},{"location":"man3/EVP_DigestVerifyInit/#history","title":"HISTORY","text":"<p>EVP_DigestVerifyInit(), EVP_DigestVerifyUpdate() and EVP_DigestVerifyFinal() were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_DigestVerifyInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_EncodeInit/","title":"EVP_EncodeInit","text":""},{"location":"man3/EVP_EncodeInit/#name","title":"NAME","text":"<p>EVP_ENCODE_CTX_new, EVP_ENCODE_CTX_free, EVP_ENCODE_CTX_copy, EVP_ENCODE_CTX_num, EVP_EncodeInit, EVP_EncodeUpdate, EVP_EncodeFinal, EVP_EncodeBlock, EVP_DecodeInit, EVP_DecodeUpdate, EVP_DecodeFinal, EVP_DecodeBlock - EVP base 64 encode/decode routines</p>"},{"location":"man3/EVP_EncodeInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_ENCODE_CTX *EVP_ENCODE_CTX_new(void);\nvoid EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx);\nint EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx);\nint EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx);\nvoid EVP_EncodeInit(EVP_ENCODE_CTX *ctx);\nint EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,\n                     const unsigned char *in, int inl);\nvoid EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);\nint EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n);\n\nvoid EVP_DecodeInit(EVP_ENCODE_CTX *ctx);\nint EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,\n                     const unsigned char *in, int inl);\nint EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);\nint EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n);\n</code></pre>"},{"location":"man3/EVP_EncodeInit/#description","title":"DESCRIPTION","text":"<p>The EVP encode routines provide a high-level interface to base 64 encoding and decoding. Base 64 encoding converts binary data into a printable form that uses the characters A-Z, a-z, 0-9, \"+\" and \"/\" to represent the data. For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines (see below). If the input data length is not a multiple of 3 then the output data will be padded at the end using the \"=\" character.</p> <p>EVP_ENCODE_CTX_new() allocates, initializes and returns a context to be used for the encode/decode functions.</p> <p>EVP_ENCODE_CTX_free() cleans up an encode/decode context ctx and frees up the space allocated to it.</p> <p>Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block). For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (i.e. 65 bytes in total). The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input. If the data length is not divisible by 3 then a full 4 bytes is still output for the final 1 or 2 bytes of input. Similarly a newline character will also be output.</p> <p>EVP_EncodeInit() initialises ctx for the start of a new encoding operation.</p> <p>EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by in. The output is stored in the buffer out and the number of bytes output is stored in *outl. It is the caller's responsibility to ensure that the buffer at out is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the ctx object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in ctx and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set *outl to 0 and return 0. On success 1 will be returned.</p> <p>EVP_EncodeFinal() must be called at the end of an encoding operation. It will process any partial block of data remaining in the ctx object. The output data will be stored in out and the length of the data written will be stored in *outl. It is the caller's responsibility to ensure that out is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator (i.e. 66 bytes in total).</p> <p>EVP_ENCODE_CTX_copy() can be used to copy a context sctx to a context dctx. dctx must be initialized before calling this function.</p> <p>EVP_ENCODE_CTX_num() will return the number of as yet unprocessed bytes still to be encoded or decoded that are pending in the ctx object.</p> <p>EVP_EncodeBlock() encodes a full block of input data in f and of length n and stores it in t. For every 3 bytes of input provided 4 bytes of output data will be produced. If n is not divisible by 3 then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4. Additionally a NUL terminator character will be added. For example if 16 bytes of input data is provided then 24 bytes of encoded data is created plus 1 byte for a NUL terminator (i.e. 25 bytes in total). The length of the data generated without the NUL terminator is returned from the function.</p> <p>EVP_DecodeInit() initialises ctx for the start of a new decoding operation.</p> <p>EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by in. The output is stored in the buffer out and the number of bytes output is stored in *outl. It is the caller's responsibility to ensure that the buffer at out is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the ctx object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character \"=\" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character \"=\" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character \"=\" has been used).</p> <p>EVP_DecodeFinal() must be called at the end of a decoding operation. If there is any unprocessed data still in ctx then the input data must not have been a multiple of 4 and therefore an error has occurred. The function will return -1 in this case. Otherwise the function returns 1 on success.</p> <p>EVP_DecodeBlock() will decode the block of n characters of base 64 data contained in f and store the result in t. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in f must be divisible by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error.</p>"},{"location":"man3/EVP_EncodeInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_ENCODE_CTX_new() returns a pointer to the newly allocated EVP_ENCODE_CTX object or NULL on error.</p> <p>EVP_ENCODE_CTX_num() returns the number of bytes pending encoding or decoding in ctx.</p> <p>EVP_EncodeUpdate() returns 0 on error or 1 on success.</p> <p>EVP_EncodeBlock() returns the number of bytes encoded excluding the NUL terminator.</p> <p>EVP_DecodeUpdate() returns -1 on error and 0 or 1 on success. If 0 is returned then no more non-padding base 64 characters are expected.</p> <p>EVP_DecodeFinal() returns -1 on error or 1 on success.</p> <p>EVP_DecodeBlock() returns the length of the data decoded or -1 on error.</p>"},{"location":"man3/EVP_EncodeInit/#see-also","title":"SEE ALSO","text":"<p>evp(7)</p>"},{"location":"man3/EVP_EncodeInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_EncryptInit/","title":"EVP_EncryptInit","text":""},{"location":"man3/EVP_EncryptInit/#name","title":"NAME","text":"<p>EVP_CIPHER_CTX_new, EVP_CIPHER_CTX_reset, EVP_CIPHER_CTX_free, EVP_EncryptInit_ex, EVP_EncryptUpdate, EVP_EncryptFinal_ex, EVP_DecryptInit_ex, EVP_DecryptUpdate, EVP_DecryptFinal_ex, EVP_CipherInit_ex, EVP_CipherUpdate, EVP_CipherFinal_ex, EVP_CIPHER_CTX_set_key_length, EVP_CIPHER_CTX_ctrl, EVP_EncryptInit, EVP_EncryptFinal, EVP_DecryptInit, EVP_DecryptFinal, EVP_CipherInit, EVP_CipherFinal, EVP_get_cipherbyname, EVP_get_cipherbynid, EVP_get_cipherbyobj, EVP_CIPHER_nid, EVP_CIPHER_block_size, EVP_CIPHER_key_length, EVP_CIPHER_iv_length, EVP_CIPHER_flags, EVP_CIPHER_mode, EVP_CIPHER_type, EVP_CIPHER_CTX_cipher, EVP_CIPHER_CTX_nid, EVP_CIPHER_CTX_block_size, EVP_CIPHER_CTX_key_length, EVP_CIPHER_CTX_iv_length, EVP_CIPHER_CTX_get_app_data, EVP_CIPHER_CTX_set_app_data, EVP_CIPHER_CTX_type, EVP_CIPHER_CTX_flags, EVP_CIPHER_CTX_mode, EVP_CIPHER_param_to_asn1, EVP_CIPHER_asn1_to_param, EVP_CIPHER_CTX_set_padding, EVP_enc_null - EVP cipher routines</p>"},{"location":"man3/EVP_EncryptInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);\nint EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *ctx);\nvoid EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx);\n\nint EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                       ENGINE *impl, const unsigned char *key, const unsigned char *iv);\nint EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                      int *outl, const unsigned char *in, int inl);\nint EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);\n\nint EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                       ENGINE *impl, const unsigned char *key, const unsigned char *iv);\nint EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                      int *outl, const unsigned char *in, int inl);\nint EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);\n\nint EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                      ENGINE *impl, const unsigned char *key, const unsigned char *iv, int enc);\nint EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                     int *outl, const unsigned char *in, int inl);\nint EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);\n\nint EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                    const unsigned char *key, const unsigned char *iv);\nint EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);\n\nint EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                    const unsigned char *key, const unsigned char *iv);\nint EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);\n\nint EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                   const unsigned char *key, const unsigned char *iv, int enc);\nint EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);\n\nint EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *x, int padding);\nint EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);\nint EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);\nint EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key);\n\nconst EVP_CIPHER *EVP_get_cipherbyname(const char *name);\nconst EVP_CIPHER *EVP_get_cipherbynid(int nid);\nconst EVP_CIPHER *EVP_get_cipherbyobj(const ASN1_OBJECT *a);\n\nint EVP_CIPHER_nid(const EVP_CIPHER *e);\nint EVP_CIPHER_block_size(const EVP_CIPHER *e);\nint EVP_CIPHER_key_length(const EVP_CIPHER *e);\nint EVP_CIPHER_iv_length(const EVP_CIPHER *e);\nunsigned long EVP_CIPHER_flags(const EVP_CIPHER *e);\nunsigned long EVP_CIPHER_mode(const EVP_CIPHER *e);\nint EVP_CIPHER_type(const EVP_CIPHER *ctx);\n\nconst EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx);\nint EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx);\nint EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx);\nint EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx);\nint EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx);\nvoid *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx);\nvoid EVP_CIPHER_CTX_set_app_data(const EVP_CIPHER_CTX *ctx, void *data);\nint EVP_CIPHER_CTX_type(const EVP_CIPHER_CTX *ctx);\nint EVP_CIPHER_CTX_mode(const EVP_CIPHER_CTX *ctx);\n\nint EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);\nint EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);\n</code></pre>"},{"location":"man3/EVP_EncryptInit/#description","title":"DESCRIPTION","text":"<p>The EVP cipher routines are a high-level interface to certain symmetric ciphers.</p> <p>EVP_CIPHER_CTX_new() creates a cipher context.</p> <p>EVP_CIPHER_CTX_free() clears all information from a cipher context and free up any allocated memory associate with it, including ctx itself. This function should be called after all operations using a cipher are complete so sensitive information does not remain in memory.</p> <p>EVP_EncryptInit_ex() sets up cipher context ctx for encryption with cipher type from ENGINE impl. ctx must be created before calling this function. type is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except type in an initial call and supply the remaining parameters in subsequent calls, all of which have type set to NULL. This is done when the default cipher parameters are not appropriate.</p> <p>EVP_EncryptUpdate() encrypts inl bytes from the buffer in and writes the encrypted version to out. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data. For most ciphers and modes, the amount of data written can be anything from zero bytes to (inl + cipher_block_size - 1) bytes. For wrap cipher modes, the amount of data written can be anything from zero bytes to (inl + cipher_block_size) bytes. For stream ciphers, the amount of data written can be anything from zero bytes to inl bytes. Thus, out should contain sufficient room for the operation being performed. The actual number of bytes written is placed in outl. It also checks if in and out are partially overlapping, and if they are 0 is returned to indicate failure.</p> <p>If padding is enabled (the default) then EVP_EncryptFinal_ex() encrypts the \"final\" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding) as described in the NOTES section, below. The encrypted final data is written to out which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made.</p> <p>If padding is disabled then EVP_EncryptFinal_ex() will not encrypt any more data and it will return an error if any data remains in a partial block: that is if the total data length is not a multiple of the block size.</p> <p>EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex() are the corresponding decryption operations. EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted. The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer out passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient.</p> <p>EVP_CipherInit_ex(), EVP_CipherUpdate() and EVP_CipherFinal_ex() are functions that can be used for decryption or encryption. The operation performed depends on the value of the enc parameter. It should be set to 1 for encryption, 0 for decryption and -1 to leave the value unchanged (the actual value of 'enc' being supplied in a previous call).</p> <p>EVP_CIPHER_CTX_reset() clears all information from a cipher context and free up any allocated memory associate with it, except the ctx itself. This function should be called anytime ctx is to be reused for another EVP_CipherInit() / EVP_CipherUpdate() / EVP_CipherFinal() series of calls.</p> <p>EVP_EncryptInit(), EVP_DecryptInit() and EVP_CipherInit() behave in a similar way to EVP_EncryptInit_ex(), EVP_DecryptInit_ex() and EVP_CipherInit_ex() except they always use the default cipher implementation.</p> <p>EVP_EncryptFinal(), EVP_DecryptFinal() and EVP_CipherFinal() are identical to EVP_EncryptFinal_ex(), EVP_DecryptFinal_ex() and EVP_CipherFinal_ex(). In previous releases they also cleaned up the ctx, but this is no longer done and EVP_CIPHER_CTX_clean() must be called to free any context resources.</p> <p>EVP_get_cipherbyname(), EVP_get_cipherbynid() and EVP_get_cipherbyobj() return an EVP_CIPHER structure when passed a cipher name, a NID or an ASN1_OBJECT structure.</p> <p>EVP_CIPHER_nid() and EVP_CIPHER_CTX_nid() return the NID of a cipher when passed an EVP_CIPHER or EVP_CIPHER_CTX structure.  The actual NID value is an internal value which may not have a corresponding OBJECT IDENTIFIER.</p> <p>EVP_CIPHER_CTX_set_padding() enables or disables padding. This function should be called after the context is set up for encryption or decryption with EVP_EncryptInit_ex(), EVP_DecryptInit_ex() or EVP_CipherInit_ex(). By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur.</p> <p>EVP_CIPHER_key_length() and EVP_CIPHER_CTX_key_length() return the key length of a cipher when passed an EVP_CIPHER or EVP_CIPHER_CTX structure. The constant EVP_MAX_KEY_LENGTH is the maximum key length for all ciphers. Note: although EVP_CIPHER_key_length() is fixed for a given cipher, the value of EVP_CIPHER_CTX_key_length() may be different for variable key length ciphers.</p> <p>EVP_CIPHER_CTX_set_key_length() sets the key length of the cipher ctx. If the cipher is a fixed length cipher then attempting to set the key length to any value other than the fixed value is an error.</p> <p>EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() return the IV length of a cipher when passed an EVP_CIPHER or EVP_CIPHER_CTX. It will return zero if the cipher does not use an IV.  The constant EVP_MAX_IV_LENGTH is the maximum IV length for all ciphers.</p> <p>EVP_CIPHER_block_size() and EVP_CIPHER_CTX_block_size() return the block size of a cipher when passed an EVP_CIPHER or EVP_CIPHER_CTX structure. The constant EVP_MAX_BLOCK_LENGTH is also the maximum block length for all ciphers.</p> <p>EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the type of the passed cipher or context. This \"type\" is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID. If the cipher does not have an object identifier or does not have ASN1 support this function will return NID_undef.</p> <p>EVP_CIPHER_CTX_cipher() returns the EVP_CIPHER structure when passed an EVP_CIPHER_CTX structure.</p> <p>EVP_CIPHER_mode() and EVP_CIPHER_CTX_mode() return the block cipher mode: EVP_CIPH_ECB_MODE, EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE, EVP_CIPH_OFB_MODE, EVP_CIPH_CTR_MODE, EVP_CIPH_GCM_MODE, EVP_CIPH_CCM_MODE, EVP_CIPH_XTS_MODE, EVP_CIPH_WRAP_MODE or EVP_CIPH_OCB_MODE. If the cipher is a stream cipher then EVP_CIPH_STREAM_CIPHER is returned.</p> <p>EVP_CIPHER_param_to_asn1() sets the AlgorithmIdentifier \"parameter\" based on the passed cipher. This will typically include any parameters and an IV. The cipher IV (if any) must be set when this call is made. This call should be made before the cipher is actually \"used\" (before any EVP_EncryptUpdate(), EVP_DecryptUpdate() calls for example). This function may fail if the cipher does not have any ASN1 support.</p> <p>EVP_CIPHER_asn1_to_param() sets the cipher parameters based on an ASN1 AlgorithmIdentifier \"parameter\". The precise effect depends on the cipher In the case of RC2, for example, it will set the IV and effective key length. This function should be called after the base cipher type is set but before the key is set. For example EVP_CipherInit() will be called with the IV and key set to NULL, EVP_CIPHER_asn1_to_param() will be called and finally EVP_CipherInit() again with all parameters except the key set to NULL. It is possible for this function to fail if the cipher does not have any ASN1 support or the parameters cannot be set (for example the RC2 effective key length is not supported.</p> <p>EVP_CIPHER_CTX_ctrl() allows various cipher specific parameters to be determined and set.</p> <p>EVP_CIPHER_CTX_rand_key() generates a random key of the appropriate length based on the cipher context. The EVP_CIPHER can provide its own random key generation routine to support keys of a specific form. Key must point to a buffer at least as big as the value returned by EVP_CIPHER_CTX_key_length().</p>"},{"location":"man3/EVP_EncryptInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_CIPHER_CTX_new() returns a pointer to a newly created EVP_CIPHER_CTX for success and NULL for failure.</p> <p>EVP_EncryptInit_ex(), EVP_EncryptUpdate() and EVP_EncryptFinal_ex() return 1 for success and 0 for failure.</p> <p>EVP_DecryptInit_ex() and EVP_DecryptUpdate() return 1 for success and 0 for failure. EVP_DecryptFinal_ex() returns 0 if the decrypt failed or 1 for success.</p> <p>EVP_CipherInit_ex() and EVP_CipherUpdate() return 1 for success and 0 for failure. EVP_CipherFinal_ex() returns 0 for a decryption failure or 1 for success.</p> <p>EVP_CIPHER_CTX_reset() returns 1 for success and 0 for failure.</p> <p>EVP_get_cipherbyname(), EVP_get_cipherbynid() and EVP_get_cipherbyobj() return an EVP_CIPHER structure or NULL on error.</p> <p>EVP_CIPHER_nid() and EVP_CIPHER_CTX_nid() return a NID.</p> <p>EVP_CIPHER_block_size() and EVP_CIPHER_CTX_block_size() return the block size.</p> <p>EVP_CIPHER_key_length() and EVP_CIPHER_CTX_key_length() return the key length.</p> <p>EVP_CIPHER_CTX_set_padding() always returns 1.</p> <p>EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() return the IV length, zero if the cipher does not use an IV and a negative value on error.</p> <p>EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if it has no defined OBJECT IDENTIFIER.</p> <p>EVP_CIPHER_CTX_cipher() returns an EVP_CIPHER structure.</p> <p>EVP_CIPHER_param_to_asn1() and EVP_CIPHER_asn1_to_param() return greater than zero for success and zero or a negative number on failure.</p> <p>EVP_CIPHER_CTX_rand_key() returns 1 for success.</p>"},{"location":"man3/EVP_EncryptInit/#cipher-listing","title":"CIPHER LISTING","text":"<p>All algorithms have a fixed key length unless otherwise stated.</p> <p>Refer to \"SEE ALSO\" for the full list of ciphers available through the EVP interface.</p> <ul> <li> <p>EVP_enc_null()</p> <p>Null cipher: does nothing.</p> </li> </ul>"},{"location":"man3/EVP_EncryptInit/#aead-interface","title":"AEAD Interface","text":"<p>The EVP interface for Authenticated Encryption with Associated Data (AEAD) modes are subtly altered and several additional ctrl operations are supported depending on the mode specified.</p> <p>To specify additional authenticated data (AAD), a call to EVP_CipherUpdate(), EVP_EncryptUpdate() or EVP_DecryptUpdate() should be made with the output parameter out set to NULL.</p> <p>When decrypting, the return value of EVP_DecryptFinal() or EVP_CipherFinal() indicates whether the operation was successful. If it does not indicate success, the authentication operation has failed and any output data MUST NOT be used as it is corrupted.</p>"},{"location":"man3/EVP_EncryptInit/#gcm-and-ocb-modes","title":"GCM and OCB Modes","text":"<p>The following _ctrl_s are supported in GCM and OCB modes.</p> <ul> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL)</p> <p>Sets the IV length. This call can only be made before specifying an IV. If not called a default IV length is used.</p> <p>For GCM AES and OCB AES the default is 12 (i.e. 96 bits). For OCB mode the maximum is 15.</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG, taglen, tag)</p> <p>Writes <code>taglen</code> bytes of the tag value to the buffer indicated by <code>tag</code>. This call can only be made when encrypting data and after all data has been processed (e.g. after an EVP_EncryptFinal() call).</p> <p>For OCB, <code>taglen</code> must either be 16 or the value previously set via EVP_CTRL_AEAD_SET_TAG.</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, taglen, tag)</p> <p>When decrypting, this call sets the expected tag to <code>taglen</code> bytes from <code>tag</code>. <code>taglen</code> must be between 1 and 16 inclusive. The tag must be set prior to any call to EVP_DecryptFinal() or EVP_DecryptFinal_ex().</p> <p>For GCM, this call is only valid when decrypting data.</p> <p>For OCB, this call is valid when decrypting data to set the expected tag, and when encrypting to set the desired tag length.</p> <p>In OCB mode, calling this when encrypting with <code>tag</code> set to <code>NULL</code> sets the tag length. The tag length can only be set before specifying an IV. If this is not called prior to setting the IV during encryption, then a default tag length is used.</p> <p>For OCB AES, the default tag length is 16 (i.e. 128 bits).  It is also the maximum tag length for OCB.</p> </li> </ul>"},{"location":"man3/EVP_EncryptInit/#ccm-mode","title":"CCM Mode","text":"<p>The EVP interface for CCM mode is similar to that of the GCM mode but with a few additional requirements and different ctrl values.</p> <p>For CCM mode, the total plaintext or ciphertext length MUST be passed to EVP_CipherUpdate(), EVP_EncryptUpdate() or EVP_DecryptUpdate() with the output and input parameters (in and out) set to NULL and the length passed in the inl parameter.</p> <p>The following _ctrl_s are supported in CCM mode.</p> <ul> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, taglen, tag)</p> <p>This call is made to set the expected CCM tag value when decrypting or the length of the tag (with the <code>tag</code> parameter set to NULL) when encrypting. The tag length is often referred to as M. If not set a default value is used (12 for AES). When decrypting, the tag needs to be set before passing in data to be decrypted, but as in GCM and OCB mode, it can be set after passing additional authenticated data (see \"AEAD Interface\").</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_L, ivlen, NULL)</p> <p>Sets the CCM L value. If not set a default is used (8 for AES).</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL)</p> <p>Sets the CCM nonce (IV) length. This call can only be made before specifying  a nonce value. The nonce length is given by 15 - L so it is 7 by default for AES.</p> </li> </ul>"},{"location":"man3/EVP_EncryptInit/#chacha20-poly1305","title":"ChaCha20-Poly1305","text":"<p>The following _ctrl_s are supported for the ChaCha20-Poly1305 AEAD algorithm.</p> <ul> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL)</p> <p>Sets the nonce length. This call can only be made before specifying the nonce. If not called a default nonce length of 12 (i.e. 96 bits) is used. The maximum nonce length is 12 bytes (i.e. 96-bits). If a nonce of less than 12 bytes is set then the nonce is automatically padded with leading 0 bytes to make it 12 bytes in length.</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG, taglen, tag)</p> <p>Writes <code>taglen</code> bytes of the tag value to the buffer indicated by <code>tag</code>. This call can only be made when encrypting data and after all data has been processed (e.g. after an EVP_EncryptFinal() call).</p> <p><code>taglen</code> specified here must be 16 (POLY1305_BLOCK_SIZE, i.e. 128-bits) or less.</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, taglen, tag)</p> <p>Sets the expected tag to <code>taglen</code> bytes from <code>tag</code>. The tag length can only be set before specifying an IV. <code>taglen</code> must be between 1 and 16 (POLY1305_BLOCK_SIZE) inclusive. This call is only valid when decrypting data.</p> </li> </ul>"},{"location":"man3/EVP_EncryptInit/#notes","title":"NOTES","text":"<p>Where possible the EVP interface to symmetric ciphers should be used in preference to the low-level interfaces. This is because the code then becomes transparent to the cipher used and much more flexible. Additionally, the EVP interface will ensure the use of platform specific cryptographic acceleration such as AES-NI (the low-level interfaces do not provide the guarantee).</p> <p>PKCS padding works by adding n padding bytes of value n to make the total length of the encrypted data a multiple of the block size. Padding is always added so if the data is already a multiple of the block size n will equal the block size. For example if the block size is 8 and 11 bytes are to be encrypted then 5 padding bytes of value 5 will be added.</p> <p>When decrypting the final block is checked to see if it has the correct form.</p> <p>Although the decryption operation can produce an error if padding is enabled, it is not a strong test that the input data or key is correct. A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error.</p> <p>If padding is disabled then the decryption operation will always succeed if the total amount of data decrypted is a multiple of the block size.</p> <p>The functions EVP_EncryptInit(), EVP_EncryptFinal(), EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete but are retained for compatibility with existing code. New code should use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(), EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex() because they can reuse an existing context without allocating and freeing it up on each call.</p> <p>There are some differences between functions EVP_CipherInit() and EVP_CipherInit_ex(), significant in some circumstances. EVP_CipherInit() fills the passed context object with zeros.  As a consequence, EVP_CipherInit() does not allow step-by-step initialization of the ctx when the key and iv are passed in separate calls. It also means that the flags set for the CTX are removed, and it is especially important for the EVP_CIPHER_CTX_FLAG_WRAP_ALLOW flag treated specially in EVP_CipherInit_ex().</p> <p>EVP_get_cipherbynid(), and EVP_get_cipherbyobj() are implemented as macros.</p>"},{"location":"man3/EVP_EncryptInit/#bugs","title":"BUGS","text":"<p>EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal ciphers with default key lengths. If custom ciphers exceed these values the results are unpredictable. This is because it has become standard practice to define a generic key as a fixed unsigned char array containing EVP_MAX_KEY_LENGTH bytes.</p> <p>The ASN1 code is incomplete (and sometimes inaccurate) it has only been tested for certain common S/MIME ciphers (RC2, DES, triple DES) in CBC mode.</p>"},{"location":"man3/EVP_EncryptInit/#examples","title":"EXAMPLES","text":"<p>Encrypt a string using IDEA:</p> <pre><code>int do_crypt(char *outfile)\n{\n    unsigned char outbuf[1024];\n    int outlen, tmplen;\n    /*\n     * Bogus key and IV: we'd normally set these from\n     * another source.\n     */\n    unsigned char key[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    unsigned char iv[] = {1,2,3,4,5,6,7,8};\n    char intext[] = \"Some Crypto Text\";\n    EVP_CIPHER_CTX *ctx;\n    FILE *out;\n\n    ctx = EVP_CIPHER_CTX_new();\n    EVP_EncryptInit_ex(ctx, EVP_idea_cbc(), NULL, key, iv);\n\n    if (!EVP_EncryptUpdate(ctx, outbuf, &amp;outlen, intext, strlen(intext))) {\n        /* Error */\n        EVP_CIPHER_CTX_free(ctx);\n        return 0;\n    }\n    /*\n     * Buffer passed to EVP_EncryptFinal() must be after data just\n     * encrypted to avoid overwriting it.\n     */\n    if (!EVP_EncryptFinal_ex(ctx, outbuf + outlen, &amp;tmplen)) {\n        /* Error */\n        EVP_CIPHER_CTX_free(ctx);\n        return 0;\n    }\n    outlen += tmplen;\n    EVP_CIPHER_CTX_free(ctx);\n    /*\n     * Need binary mode for fopen because encrypted data is\n     * binary data. Also cannot use strlen() on it because\n     * it won't be NUL terminated and may contain embedded\n     * NULs.\n     */\n    out = fopen(outfile, \"wb\");\n    if (out == NULL) {\n        /* Error */\n        return 0;\n    }\n    fwrite(outbuf, 1, outlen, out);\n    fclose(out);\n    return 1;\n}\n</code></pre> <p>The ciphertext from the above example can be decrypted using the openssl utility with the command line (shown on two lines for clarity):</p> <pre><code>openssl idea -d \\\n    -K 000102030405060708090A0B0C0D0E0F -iv 0102030405060708 &lt;filename\n</code></pre> <p>General encryption and decryption function example using FILE I/O and AES128 with a 128-bit key:</p> <pre><code>int do_crypt(FILE *in, FILE *out, int do_encrypt)\n{\n    /* Allow enough space in output buffer for additional block */\n    unsigned char inbuf[1024], outbuf[1024 + EVP_MAX_BLOCK_LENGTH];\n    int inlen, outlen;\n    EVP_CIPHER_CTX *ctx;\n    /*\n     * Bogus key and IV: we'd normally set these from\n     * another source.\n     */\n    unsigned char key[] = \"0123456789abcdeF\";\n    unsigned char iv[] = \"1234567887654321\";\n\n    /* Don't set key or IV right away; we want to check lengths */\n    ctx = EVP_CIPHER_CTX_new();\n    EVP_CipherInit_ex(ctx, EVP_aes_128_cbc(), NULL, NULL, NULL,\n                      do_encrypt);\n    OPENSSL_assert(EVP_CIPHER_CTX_key_length(ctx) == 16);\n    OPENSSL_assert(EVP_CIPHER_CTX_iv_length(ctx) == 16);\n\n    /* Now we can set key and IV */\n    EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, do_encrypt);\n\n    for (;;) {\n        inlen = fread(inbuf, 1, 1024, in);\n        if (inlen &lt;= 0)\n            break;\n        if (!EVP_CipherUpdate(ctx, outbuf, &amp;outlen, inbuf, inlen)) {\n            /* Error */\n            EVP_CIPHER_CTX_free(ctx);\n            return 0;\n        }\n        fwrite(outbuf, 1, outlen, out);\n    }\n    if (!EVP_CipherFinal_ex(ctx, outbuf, &amp;outlen)) {\n        /* Error */\n        EVP_CIPHER_CTX_free(ctx);\n        return 0;\n    }\n    fwrite(outbuf, 1, outlen, out);\n\n    EVP_CIPHER_CTX_free(ctx);\n    return 1;\n}\n</code></pre>"},{"location":"man3/EVP_EncryptInit/#see-also","title":"SEE ALSO","text":"<p>evp(7)</p> <p>Supported ciphers are listed in:</p> <p>EVP_aes(3), EVP_aria(3), EVP_bf(3), EVP_camellia(3), EVP_cast5(3), EVP_chacha20(3), EVP_des(3), EVP_desx(3), EVP_idea(3), EVP_rc2(3), EVP_rc4(3), EVP_rc5(3), EVP_seed(3), EVP_sm4(3)</p>"},{"location":"man3/EVP_EncryptInit/#history","title":"HISTORY","text":"<p>Support for OCB mode was added in OpenSSL 1.1.0.</p> <p>EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0.  As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared.  EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().</p>"},{"location":"man3/EVP_EncryptInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_MD_meth_new/","title":"EVP_MD_meth_new","text":""},{"location":"man3/EVP_MD_meth_new/#name","title":"NAME","text":"<p>EVP_MD_meth_dup, EVP_MD_meth_new, EVP_MD_meth_free, EVP_MD_meth_set_input_blocksize, EVP_MD_meth_set_result_size, EVP_MD_meth_set_app_datasize, EVP_MD_meth_set_flags, EVP_MD_meth_set_init, EVP_MD_meth_set_update, EVP_MD_meth_set_final, EVP_MD_meth_set_copy, EVP_MD_meth_set_cleanup, EVP_MD_meth_set_ctrl, EVP_MD_meth_get_input_blocksize, EVP_MD_meth_get_result_size, EVP_MD_meth_get_app_datasize, EVP_MD_meth_get_flags, EVP_MD_meth_get_init, EVP_MD_meth_get_update, EVP_MD_meth_get_final, EVP_MD_meth_get_copy, EVP_MD_meth_get_cleanup, EVP_MD_meth_get_ctrl - Routines to build up EVP_MD methods</p>"},{"location":"man3/EVP_MD_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_MD *EVP_MD_meth_new(int md_type, int pkey_type);\nvoid EVP_MD_meth_free(EVP_MD *md);\nEVP_MD *EVP_MD_meth_dup(const EVP_MD *md);\n\nint EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize);\nint EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize);\nint EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize);\nint EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags);\nint EVP_MD_meth_set_init(EVP_MD *md, int (*init)(EVP_MD_CTX *ctx));\nint EVP_MD_meth_set_update(EVP_MD *md, int (*update)(EVP_MD_CTX *ctx,\n                                                     const void *data,\n                                                     size_t count));\nint EVP_MD_meth_set_final(EVP_MD *md, int (*final)(EVP_MD_CTX *ctx,\n                                                   unsigned char *md));\nint EVP_MD_meth_set_copy(EVP_MD *md, int (*copy)(EVP_MD_CTX *to,\n                                                 const EVP_MD_CTX *from));\nint EVP_MD_meth_set_cleanup(EVP_MD *md, int (*cleanup)(EVP_MD_CTX *ctx));\nint EVP_MD_meth_set_ctrl(EVP_MD *md, int (*ctrl)(EVP_MD_CTX *ctx, int cmd,\n                                                 int p1, void *p2));\n\nint EVP_MD_meth_get_input_blocksize(const EVP_MD *md);\nint EVP_MD_meth_get_result_size(const EVP_MD *md);\nint EVP_MD_meth_get_app_datasize(const EVP_MD *md);\nunsigned long EVP_MD_meth_get_flags(const EVP_MD *md);\nint (*EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx);\nint (*EVP_MD_meth_get_update(const EVP_MD *md))(EVP_MD_CTX *ctx,\n                                                const void *data,\n                                                size_t count);\nint (*EVP_MD_meth_get_final(const EVP_MD *md))(EVP_MD_CTX *ctx,\n                                               unsigned char *md);\nint (*EVP_MD_meth_get_copy(const EVP_MD *md))(EVP_MD_CTX *to,\n                                              const EVP_MD_CTX *from);\nint (*EVP_MD_meth_get_cleanup(const EVP_MD *md))(EVP_MD_CTX *ctx);\nint (*EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd,\n                                              int p1, void *p2);\n</code></pre>"},{"location":"man3/EVP_MD_meth_new/#description","title":"DESCRIPTION","text":"<p>The EVP_MD type is a structure for digest method implementation. It can also have associated public/private key signing and verifying routines.</p> <p>EVP_MD_meth_new() creates a new EVP_MD structure.</p> <p>EVP_MD_meth_dup() creates a copy of md.</p> <p>EVP_MD_meth_free() destroys a EVP_MD structure.</p> <p>EVP_MD_meth_set_input_blocksize() sets the internal input block size for the method md to blocksize bytes.</p> <p>EVP_MD_meth_set_result_size() sets the size of the result that the digest method in md is expected to produce to resultsize bytes.</p> <p>The digest method may have its own private data, which OpenSSL will allocate for it.  EVP_MD_meth_set_app_datasize() should be used to set the size for it to datasize.</p> <p>EVP_MD_meth_set_flags() sets the flags to describe optional behaviours in the particular md.  Several flags can be or'd together.  The available flags are:</p> <ul> <li> <p>EVP_MD_FLAG_ONESHOT</p> <p>This digest method can only handle one block of input.</p> </li> <li> <p>EVP_MD_FLAG_XOF</p> <p>This digest method is an extensible-output function (XOF) and supports the EVP_MD_CTRL_XOF_LEN control.</p> </li> <li> <p>EVP_MD_FLAG_DIGALGID_NULL</p> <p>When setting up a DigestAlgorithmIdentifier, this flag will have the parameter set to NULL by default.  Use this for PKCS#1.  Note: if combined with EVP_MD_FLAG_DIGALGID_ABSENT, the latter will override.</p> </li> <li> <p>EVP_MD_FLAG_DIGALGID_ABSENT</p> <p>When setting up a DigestAlgorithmIdentifier, this flag will have the parameter be left absent by default.  Note: if combined with EVP_MD_FLAG_DIGALGID_NULL, the latter will be overridden.</p> </li> <li> <p>EVP_MD_FLAG_DIGALGID_CUSTOM</p> <p>Custom DigestAlgorithmIdentifier handling via ctrl, with EVP_MD_FLAG_DIGALGID_ABSENT as default.  Note: if combined with EVP_MD_FLAG_DIGALGID_NULL, the latter will be overridden. Currently unused.</p> </li> <li> <p>EVP_MD_FLAG_FIPS</p> <p>This digest method is suitable for use in FIPS mode. Currently unused.</p> </li> </ul> <p>EVP_MD_meth_set_init() sets the digest init function for md. The digest init function is called by EVP_Digest(), EVP_DigestInit(), EVP_DigestInit_ex(), EVP_SignInit, EVP_SignInit_ex(), EVP_VerifyInit() and EVP_VerifyInit_ex().</p> <p>EVP_MD_meth_set_update() sets the digest update function for md. The digest update function is called by EVP_Digest(), EVP_DigestUpdate() and EVP_SignUpdate().</p> <p>EVP_MD_meth_set_final() sets the digest final function for md. The digest final function is called by EVP_Digest(), EVP_DigestFinal(), EVP_DigestFinal_ex(), EVP_SignFinal() and EVP_VerifyFinal().</p> <p>EVP_MD_meth_set_copy() sets the function for md to do extra computations after the method's private data structure has been copied from one EVP_MD_CTX to another.  If all that's needed is to copy the data, there is no need for this copy function. Note that the copy function is passed two EVP_MD_CTX *, the private data structure is then available with EVP_MD_CTX_md_data(). This copy function is called by EVP_MD_CTX_copy() and EVP_MD_CTX_copy_ex().</p> <p>EVP_MD_meth_set_cleanup() sets the function for md to do extra cleanup before the method's private data structure is cleaned out and freed. Note that the cleanup function is passed a EVP_MD_CTX *, the private data structure is then available with EVP_MD_CTX_md_data(). This cleanup function is called by EVP_MD_CTX_reset() and EVP_MD_CTX_free().</p> <p>EVP_MD_meth_set_ctrl() sets the control function for md. See EVP_MD_CTX_ctrl(3) for the available controls.</p> <p>EVP_MD_meth_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize(), EVP_MD_meth_get_flags(), EVP_MD_meth_get_init(), EVP_MD_meth_get_update(), EVP_MD_meth_get_final(), EVP_MD_meth_get_copy(), EVP_MD_meth_get_cleanup() and EVP_MD_meth_get_ctrl() are all used to retrieve the method data given with the EVP_MD_meth_set_*() functions above.</p>"},{"location":"man3/EVP_MD_meth_new/#return-values","title":"RETURN VALUES","text":"<p>EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created EVP_MD, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective md function.</p>"},{"location":"man3/EVP_MD_meth_new/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestInit(3), EVP_SignInit(3), EVP_VerifyInit(3)</p>"},{"location":"man3/EVP_MD_meth_new/#history","title":"HISTORY","text":"<p>The EVP_MD structure was openly available in OpenSSL before version 1.1.  The functions described here were added in OpenSSL 1.1.</p>"},{"location":"man3/EVP_MD_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_OpenInit/","title":"EVP_OpenInit","text":""},{"location":"man3/EVP_OpenInit/#name","title":"NAME","text":"<p>EVP_OpenInit, EVP_OpenUpdate, EVP_OpenFinal - EVP envelope decryption</p>"},{"location":"man3/EVP_OpenInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_OpenInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *type, unsigned char *ek,\n                 int ekl, unsigned char *iv, EVP_PKEY *priv);\nint EVP_OpenUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                   int *outl, unsigned char *in, int inl);\nint EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);\n</code></pre>"},{"location":"man3/EVP_OpenInit/#description","title":"DESCRIPTION","text":"<p>The EVP envelope routines are a high-level interface to envelope decryption. They decrypt a public key encrypted symmetric key and then decrypt data using it.</p> <p>EVP_OpenInit() initializes a cipher context ctx for decryption with cipher type. It decrypts the encrypted symmetric key of length ekl bytes passed in the ek parameter using the private key priv. The IV is supplied in the iv parameter.</p> <p>EVP_OpenUpdate() and EVP_OpenFinal() have exactly the same properties as the EVP_DecryptUpdate() and EVP_DecryptFinal() routines, as documented on the EVP_EncryptInit(3) manual page.</p>"},{"location":"man3/EVP_OpenInit/#notes","title":"NOTES","text":"<p>It is possible to call EVP_OpenInit() twice in the same way as EVP_DecryptInit(). The first call should have priv set to NULL and (after setting any cipher parameters) it should be called again with type set to NULL.</p> <p>If the cipher passed in the type parameter is a variable length cipher then the key length will be set to the value of the recovered key length. If the cipher is a fixed length cipher then the recovered key length must match the fixed cipher length.</p>"},{"location":"man3/EVP_OpenInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_OpenInit() returns 0 on error or a non zero integer (actually the recovered secret key size) if successful.</p> <p>EVP_OpenUpdate() returns 1 for success or 0 for failure.</p> <p>EVP_OpenFinal() returns 0 if the decrypt failed or 1 for success.</p>"},{"location":"man3/EVP_OpenInit/#see-also","title":"SEE ALSO","text":"<p>evp(7), RAND_bytes(3), EVP_EncryptInit(3), EVP_SealInit(3)</p>"},{"location":"man3/EVP_OpenInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/","title":"EVP_PKEY_ASN1_METHOD","text":""},{"location":"man3/EVP_PKEY_ASN1_METHOD/#name","title":"NAME","text":"<p>EVP_PKEY_ASN1_METHOD, EVP_PKEY_asn1_new, EVP_PKEY_asn1_copy, EVP_PKEY_asn1_free, EVP_PKEY_asn1_add0, EVP_PKEY_asn1_add_alias, EVP_PKEY_asn1_set_public, EVP_PKEY_asn1_set_private, EVP_PKEY_asn1_set_param, EVP_PKEY_asn1_set_free, EVP_PKEY_asn1_set_ctrl, EVP_PKEY_asn1_set_item, EVP_PKEY_asn1_set_siginf, EVP_PKEY_asn1_set_check, EVP_PKEY_asn1_set_public_check, EVP_PKEY_asn1_set_param_check, EVP_PKEY_asn1_set_security_bits, EVP_PKEY_asn1_set_set_priv_key, EVP_PKEY_asn1_set_set_pub_key, EVP_PKEY_asn1_set_get_priv_key, EVP_PKEY_asn1_set_get_pub_key, EVP_PKEY_get0_asn1 - manipulating and registering EVP_PKEY_ASN1_METHOD structure</p>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\ntypedef struct evp_pkey_asn1_method_st EVP_PKEY_ASN1_METHOD;\n\nEVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_new(int id, int flags,\n                                        const char *pem_str,\n                                        const char *info);\nvoid EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,\n                        const EVP_PKEY_ASN1_METHOD *src);\nvoid EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth);\nint EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth);\nint EVP_PKEY_asn1_add_alias(int to, int from);\n\nvoid EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,\n                              int (*pub_decode) (EVP_PKEY *pk,\n                                                 X509_PUBKEY *pub),\n                              int (*pub_encode) (X509_PUBKEY *pub,\n                                                 const EVP_PKEY *pk),\n                              int (*pub_cmp) (const EVP_PKEY *a,\n                                              const EVP_PKEY *b),\n                              int (*pub_print) (BIO *out,\n                                                const EVP_PKEY *pkey,\n                                                int indent, ASN1_PCTX *pctx),\n                              int (*pkey_size) (const EVP_PKEY *pk),\n                              int (*pkey_bits) (const EVP_PKEY *pk));\nvoid EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,\n                               int (*priv_decode) (EVP_PKEY *pk,\n                                                   const PKCS8_PRIV_KEY_INFO\n                                                   *p8inf),\n                               int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8,\n                                                   const EVP_PKEY *pk),\n                               int (*priv_print) (BIO *out,\n                                                  const EVP_PKEY *pkey,\n                                                  int indent,\n                                                  ASN1_PCTX *pctx));\nvoid EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,\n                             int (*param_decode) (EVP_PKEY *pkey,\n                                                  const unsigned char **pder,\n                                                  int derlen),\n                             int (*param_encode) (const EVP_PKEY *pkey,\n                                                  unsigned char **pder),\n                             int (*param_missing) (const EVP_PKEY *pk),\n                             int (*param_copy) (EVP_PKEY *to,\n                                                const EVP_PKEY *from),\n                             int (*param_cmp) (const EVP_PKEY *a,\n                                               const EVP_PKEY *b),\n                             int (*param_print) (BIO *out,\n                                                 const EVP_PKEY *pkey,\n                                                 int indent,\n                                                 ASN1_PCTX *pctx));\n\nvoid EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,\n                            void (*pkey_free) (EVP_PKEY *pkey));\nvoid EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,\n                            int (*pkey_ctrl) (EVP_PKEY *pkey, int op,\n                                              long arg1, void *arg2));\nvoid EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,\n                            int (*item_verify) (EVP_MD_CTX *ctx,\n                                                const ASN1_ITEM *it,\n                                                void *asn,\n                                                X509_ALGOR *a,\n                                                ASN1_BIT_STRING *sig,\n                                                EVP_PKEY *pkey),\n                            int (*item_sign) (EVP_MD_CTX *ctx,\n                                              const ASN1_ITEM *it,\n                                              void *asn,\n                                              X509_ALGOR *alg1,\n                                              X509_ALGOR *alg2,\n                                              ASN1_BIT_STRING *sig));\n\nvoid EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD *ameth,\n                              int (*siginf_set) (X509_SIG_INFO *siginf,\n                                                 const X509_ALGOR *alg,\n                                                 const ASN1_STRING *sig));\n\nvoid EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD *ameth,\n                             int (*pkey_check) (const EVP_PKEY *pk));\n\nvoid EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD *ameth,\n                                    int (*pkey_pub_check) (const EVP_PKEY *pk));\n\nvoid EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD *ameth,\n                                   int (*pkey_param_check) (const EVP_PKEY *pk));\n\nvoid EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,\n                                     int (*pkey_security_bits) (const EVP_PKEY\n                                                                *pk));\n\nvoid EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth,\n                                    int (*set_priv_key) (EVP_PKEY *pk,\n                                                         const unsigned char\n                                                            *priv,\n                                                         size_t len));\n\nvoid EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD *ameth,\n                                   int (*set_pub_key) (EVP_PKEY *pk,\n                                                       const unsigned char *pub,\n                                                       size_t len));\n\nvoid EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD *ameth,\n                                    int (*get_priv_key) (const EVP_PKEY *pk,\n                                                         unsigned char *priv,\n                                                         size_t *len));\n\nvoid EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD *ameth,\n                                   int (*get_pub_key) (const EVP_PKEY *pk,\n                                                       unsigned char *pub,\n                                                       size_t *len));\n\nconst EVP_PKEY_ASN1_METHOD *EVP_PKEY_get0_asn1(const EVP_PKEY *pkey);\n</code></pre>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/#description","title":"DESCRIPTION","text":"<p>EVP_PKEY_ASN1_METHOD is a structure which holds a set of ASN.1 conversion, printing and information methods for a specific public key algorithm.</p> <p>There are two places where the EVP_PKEY_ASN1_METHOD objects are stored: one is a built-in array representing the standard methods for different algorithms, and the other one is a stack of user-defined application-specific methods, which can be manipulated by using EVP_PKEY_asn1_add0(3).</p>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/#methods","title":"Methods","text":"<p>The methods are the underlying implementations of a particular public key algorithm present by the EVP_PKEY object.</p> <pre><code>int (*pub_decode) (EVP_PKEY *pk, X509_PUBKEY *pub);\nint (*pub_encode) (X509_PUBKEY *pub, const EVP_PKEY *pk);\nint (*pub_cmp) (const EVP_PKEY *a, const EVP_PKEY *b);\nint (*pub_print) (BIO *out, const EVP_PKEY *pkey, int indent,\n                  ASN1_PCTX *pctx);\n</code></pre> <p>The pub_decode() and pub_encode() methods are called to decode / encode X509_PUBKEY ASN.1 parameters to / from pk. They MUST return 0 on error, 1 on success. They're called by X509_PUBKEY_get0(3) and X509_PUBKEY_set(3).</p> <p>The pub_cmp() method is called when two public keys are to be compared. It MUST return 1 when the keys are equal, 0 otherwise. It's called by EVP_PKEY_cmp(3).</p> <p>The pub_print() method is called to print a public key in humanly readable text to out, indented indent spaces. It MUST return 0 on error, 1 on success. It's called by EVP_PKEY_print_public(3).</p> <pre><code>int (*priv_decode) (EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf);\nint (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk);\nint (*priv_print) (BIO *out, const EVP_PKEY *pkey, int indent,\n                   ASN1_PCTX *pctx);\n</code></pre> <p>The priv_decode() and priv_encode() methods are called to decode / encode PKCS8_PRIV_KEY_INFO form private key to / from pk. They MUST return 0 on error, 1 on success. They're called by EVP_PKCS82PKEY(3) and EVP_PKEY2PKCS8(3).</p> <p>The priv_print() method is called to print a private key in humanly readable text to out, indented indent spaces. It MUST return 0 on error, 1 on success. It's called by EVP_PKEY_print_private(3).</p> <pre><code>int (*pkey_size) (const EVP_PKEY *pk);\nint (*pkey_bits) (const EVP_PKEY *pk);\nint (*pkey_security_bits) (const EVP_PKEY *pk);\n</code></pre> <p>The pkey_size() method returns the key size in bytes. It's called by EVP_PKEY_size(3).</p> <p>The pkey_bits() method returns the key size in bits. It's called by EVP_PKEY_bits(3).</p> <pre><code>int (*param_decode) (EVP_PKEY *pkey,\n                     const unsigned char **pder, int derlen);\nint (*param_encode) (const EVP_PKEY *pkey, unsigned char **pder);\nint (*param_missing) (const EVP_PKEY *pk);\nint (*param_copy) (EVP_PKEY *to, const EVP_PKEY *from);\nint (*param_cmp) (const EVP_PKEY *a, const EVP_PKEY *b);\nint (*param_print) (BIO *out, const EVP_PKEY *pkey, int indent,\n                    ASN1_PCTX *pctx);\n</code></pre> <p>The param_decode() and param_encode() methods are called to decode / encode DER formatted parameters to / from pk. They MUST return 0 on error, 1 on success. They're called by PEM_read_bio_Parameters(3) and the file: OSSL_STORE_LOADER(3).</p> <p>The param_missing() method returns 0 if a key parameter is missing, otherwise 1. It's called by EVP_PKEY_missing_parameters(3).</p> <p>The param_copy() method copies key parameters from from to to. It MUST return 0 on error, 1 on success. It's called by EVP_PKEY_copy_parameters(3).</p> <p>The param_cmp() method compares the parameters of keys a and b. It MUST return 1 when the keys are equal, 0 when not equal, or a negative number on error. It's called by EVP_PKEY_cmp_parameters(3).</p> <p>The param_print() method prints the private key parameters in humanly readable text to out, indented indent spaces. It MUST return 0 on error, 1 on success. It's called by EVP_PKEY_print_params(3).</p> <pre><code>int (*sig_print) (BIO *out,\n                  const X509_ALGOR *sigalg, const ASN1_STRING *sig,\n                  int indent, ASN1_PCTX *pctx);\n</code></pre> <p>The sig_print() method prints a signature in humanly readable text to out, indented indent spaces. sigalg contains the exact signature algorithm. If the signature in sig doesn't correspond to what this method expects, X509_signature_dump() must be used as a last resort. It MUST return 0 on error, 1 on success. It's called by X509_signature_print(3).</p> <pre><code>void (*pkey_free) (EVP_PKEY *pkey);\n</code></pre> <p>The pkey_free() method helps freeing the internals of pkey. It's called by EVP_PKEY_free(3), EVP_PKEY_set_type(3), EVP_PKEY_set_type_str(3), and EVP_PKEY_assign(3).</p> <pre><code>int (*pkey_ctrl) (EVP_PKEY *pkey, int op, long arg1, void *arg2);\n</code></pre> <p>The pkey_ctrl() method adds extra algorithm specific control. It's called by EVP_PKEY_get_default_digest_nid(3), EVP_PKEY_set1_tls_encodedpoint(3), EVP_PKEY_get1_tls_encodedpoint(3), PKCS7_SIGNER_INFO_set(3), PKCS7_RECIP_INFO_set(3), ...</p> <pre><code>int (*old_priv_decode) (EVP_PKEY *pkey,\n                        const unsigned char **pder, int derlen);\nint (*old_priv_encode) (const EVP_PKEY *pkey, unsigned char **pder);\n</code></pre> <p>The old_priv_decode() and old_priv_encode() methods decode / encode they private key pkey from / to a DER formatted array. These are exclusively used to help decoding / encoding older (pre PKCS#8) PEM formatted encrypted private keys. old_priv_decode() MUST return 0 on error, 1 on success. old_priv_encode() MUST the return same kind of values as i2d_PrivateKey(). They're called by d2i_PrivateKey(3) and i2d_PrivateKey(3).</p> <pre><code>int (*item_verify) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,\n                    X509_ALGOR *a, ASN1_BIT_STRING *sig, EVP_PKEY *pkey);\nint (*item_sign) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,\n                  X509_ALGOR *alg1, X509_ALGOR *alg2,\n                  ASN1_BIT_STRING *sig);\n</code></pre> <p>The item_sign() and  item_verify() methods make it possible to have algorithm specific signatures and verification of them.</p> <p>item_sign() MUST return one of:</p> <ul> <li> <p>&lt;=0</p> <p>error</p> </li> <li> <p>1</p> <p>item_sign() did everything, OpenSSL internals just needs to pass the signature length back.</p> </li> <li> <p>2</p> <p>item_sign() did nothing, OpenSSL internal standard routines are expected to continue with the default signature production.</p> </li> <li> <p>3</p> <p>item_sign() set the algorithm identifier algor1 and algor2, OpenSSL internals should just sign using those algorithms.</p> </li> </ul> <p>item_verify() MUST return one of:</p> <ul> <li> <p>&lt;=0</p> <p>error</p> </li> <li> <p>1</p> <p>item_sign() did everything, OpenSSL internals just needs to pass the signature length back.</p> </li> <li> <p>2</p> <p>item_sign() did nothing, OpenSSL internal standard routines are expected to continue with the default signature production.</p> </li> </ul> <p>item_verify() and item_sign() are called by ASN1_item_verify(3) and ASN1_item_sign(3), and by extension, X509_verify(3), X509_REQ_verify(3), X509_sign(3), X509_REQ_sign(3), ...</p> <pre><code>int (*siginf_set) (X509_SIG_INFO *siginf, const X509_ALGOR *alg,\n                   const ASN1_STRING *sig);\n</code></pre> <p>The siginf_set() method is used to set custom X509_SIG_INFO parameters. It MUST return 0 on error, or 1 on success. It's called as part of X509_check_purpose(3), X509_check_ca(3) and X509_check_issued(3).</p> <pre><code>int (*pkey_check) (const EVP_PKEY *pk);\nint (*pkey_public_check) (const EVP_PKEY *pk);\nint (*pkey_param_check) (const EVP_PKEY *pk);\n</code></pre> <p>The pkey_check(), pkey_public_check() and pkey_param_check() methods are used to check the validity of pk for key-pair, public component and parameters, respectively. They MUST return 0 for an invalid key, or 1 for a valid key. They are called by EVP_PKEY_check(3), EVP_PKEY_public_check(3) and EVP_PKEY_param_check(3) respectively.</p> <pre><code>int (*set_priv_key) (EVP_PKEY *pk, const unsigned char *priv, size_t len);\nint (*set_pub_key) (EVP_PKEY *pk, const unsigned char *pub, size_t len);\n</code></pre> <p>The set_priv_key() and set_pub_key() methods are used to set the raw private and public key data for an EVP_PKEY. They MUST return 0 on error, or 1 on success. They are called by EVP_PKEY_new_raw_private_key(3), and EVP_PKEY_new_raw_public_key(3) respectively.</p>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/#functions","title":"Functions","text":"<p>EVP_PKEY_asn1_new() creates and returns a new EVP_PKEY_ASN1_METHOD object, and associates the given id, flags, pem_str and info. id is a NID, pem_str is the PEM type string, info is a descriptive string. The following flags are supported:</p> <pre><code>ASN1_PKEY_SIGPARAM_NULL\n</code></pre> <p>If ASN1_PKEY_SIGPARAM_NULL is set, then the signature algorithm parameters are given the type V_ASN1_NULL by default, otherwise they will be given the type V_ASN1_UNDEF (i.e. the parameter is omitted). See X509_ALGOR_set0(3) for more information.</p> <p>EVP_PKEY_asn1_copy() copies an EVP_PKEY_ASN1_METHOD object from src to dst. This function is not thread safe, it's recommended to only use this when initializing the application.</p> <p>EVP_PKEY_asn1_free() frees an existing EVP_PKEY_ASN1_METHOD pointed by ameth.</p> <p>EVP_PKEY_asn1_add0() adds ameth to the user defined stack of methods unless another EVP_PKEY_ASN1_METHOD with the same NID is already there. This function is not thread safe, it's recommended to only use this when initializing the application.</p> <p>EVP_PKEY_asn1_add_alias() creates an alias with the NID to for the EVP_PKEY_ASN1_METHOD with NID from unless another EVP_PKEY_ASN1_METHOD with the same NID is already added. This function is not thread safe, it's recommended to only use this when initializing the application.</p> <p>EVP_PKEY_asn1_set_public(), EVP_PKEY_asn1_set_private(), EVP_PKEY_asn1_set_param(), EVP_PKEY_asn1_set_free(), EVP_PKEY_asn1_set_ctrl(), EVP_PKEY_asn1_set_item(), EVP_PKEY_asn1_set_siginf(), EVP_PKEY_asn1_set_check(), EVP_PKEY_asn1_set_public_check(), EVP_PKEY_asn1_set_param_check(), EVP_PKEY_asn1_set_security_bits(), EVP_PKEY_asn1_set_set_priv_key(), EVP_PKEY_asn1_set_set_pub_key(), EVP_PKEY_asn1_set_get_priv_key() and EVP_PKEY_asn1_set_get_pub_key() set the diverse methods of the given EVP_PKEY_ASN1_METHOD object.</p> <p>EVP_PKEY_get0_asn1() finds the EVP_PKEY_ASN1_METHOD associated with the key pkey.</p>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_asn1_new() returns NULL on error, or a pointer to an EVP_PKEY_ASN1_METHOD object otherwise.</p> <p>EVP_PKEY_asn1_add0() and EVP_PKEY_asn1_add_alias() return 0 on error, or 1 on success.</p> <p>EVP_PKEY_get0_asn1() returns NULL on error, or a pointer to a constant EVP_PKEY_ASN1_METHOD object otherwise.</p>"},{"location":"man3/EVP_PKEY_ASN1_METHOD/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/","title":"EVP_PKEY_CTX_ctrl","text":""},{"location":"man3/EVP_PKEY_CTX_ctrl/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_ctrl, EVP_PKEY_CTX_ctrl_str, EVP_PKEY_CTX_ctrl_uint64, EVP_PKEY_CTX_md, EVP_PKEY_CTX_set_signature_md, EVP_PKEY_CTX_get_signature_md, EVP_PKEY_CTX_set_mac_key, EVP_PKEY_CTX_set_rsa_padding, EVP_PKEY_CTX_get_rsa_padding, EVP_PKEY_CTX_set_rsa_pss_saltlen, EVP_PKEY_CTX_get_rsa_pss_saltlen, EVP_PKEY_CTX_set_rsa_keygen_bits, EVP_PKEY_CTX_set_rsa_keygen_pubexp, EVP_PKEY_CTX_set_rsa_keygen_primes, EVP_PKEY_CTX_set_rsa_mgf1_md, EVP_PKEY_CTX_get_rsa_mgf1_md, EVP_PKEY_CTX_set_rsa_oaep_md, EVP_PKEY_CTX_get_rsa_oaep_md, EVP_PKEY_CTX_set0_rsa_oaep_label, EVP_PKEY_CTX_get0_rsa_oaep_label, EVP_PKEY_CTX_set_dsa_paramgen_bits, EVP_PKEY_CTX_set_dsa_paramgen_q_bits, EVP_PKEY_CTX_set_dsa_paramgen_md, EVP_PKEY_CTX_set_dh_paramgen_prime_len, EVP_PKEY_CTX_set_dh_paramgen_subprime_len, EVP_PKEY_CTX_set_dh_paramgen_generator, EVP_PKEY_CTX_set_dh_paramgen_type, EVP_PKEY_CTX_set_dh_rfc5114, EVP_PKEY_CTX_set_dhx_rfc5114, EVP_PKEY_CTX_set_dh_pad, EVP_PKEY_CTX_set_dh_nid, EVP_PKEY_CTX_set_dh_kdf_type, EVP_PKEY_CTX_get_dh_kdf_type, EVP_PKEY_CTX_set0_dh_kdf_oid, EVP_PKEY_CTX_get0_dh_kdf_oid, EVP_PKEY_CTX_set_dh_kdf_md, EVP_PKEY_CTX_get_dh_kdf_md, EVP_PKEY_CTX_set_dh_kdf_outlen, EVP_PKEY_CTX_get_dh_kdf_outlen, EVP_PKEY_CTX_set0_dh_kdf_ukm, EVP_PKEY_CTX_get0_dh_kdf_ukm, EVP_PKEY_CTX_set_ec_paramgen_curve_nid, EVP_PKEY_CTX_set_ec_param_enc, EVP_PKEY_CTX_set_ecdh_cofactor_mode, EVP_PKEY_CTX_get_ecdh_cofactor_mode, EVP_PKEY_CTX_set_ecdh_kdf_type, EVP_PKEY_CTX_get_ecdh_kdf_type, EVP_PKEY_CTX_set_ecdh_kdf_md, EVP_PKEY_CTX_get_ecdh_kdf_md, EVP_PKEY_CTX_set_ecdh_kdf_outlen, EVP_PKEY_CTX_get_ecdh_kdf_outlen, EVP_PKEY_CTX_set0_ecdh_kdf_ukm, EVP_PKEY_CTX_get0_ecdh_kdf_ukm, EVP_PKEY_CTX_set1_id, EVP_PKEY_CTX_get1_id, EVP_PKEY_CTX_get1_id_len - algorithm specific control operations</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,\n                      int cmd, int p1, void *p2);\nint EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype,\n                             int cmd, uint64_t value);\nint EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,\n                          const char *value);\n\nint EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md);\n\nint EVP_PKEY_CTX_set_signature_md(EVP_PKEY_CTX *ctx, const EVP_MD *md);\nint EVP_PKEY_CTX_get_signature_md(EVP_PKEY_CTX *ctx, const EVP_MD **pmd);\n\nint EVP_PKEY_CTX_set_mac_key(EVP_PKEY_CTX *ctx, unsigned char *key, int len);\n\n#include &lt;openssl/rsa.h&gt;\n\nint EVP_PKEY_CTX_set_rsa_padding(EVP_PKEY_CTX *ctx, int pad);\nint EVP_PKEY_CTX_get_rsa_padding(EVP_PKEY_CTX *ctx, int *pad);\nint EVP_PKEY_CTX_set_rsa_pss_saltlen(EVP_PKEY_CTX *ctx, int len);\nint EVP_PKEY_CTX_get_rsa_pss_saltlen(EVP_PKEY_CTX *ctx, int *len);\nint EVP_PKEY_CTX_set_rsa_keygen_bits(EVP_PKEY_CTX *ctx, int mbits);\nint EVP_PKEY_CTX_set_rsa_keygen_pubexp(EVP_PKEY_CTX *ctx, BIGNUM *pubexp);\nint EVP_PKEY_CTX_set_rsa_keygen_primes(EVP_PKEY_CTX *ctx, int primes);\nint EVP_PKEY_CTX_set_rsa_mgf1_md(EVP_PKEY_CTX *ctx, const EVP_MD *md);\nint EVP_PKEY_CTX_get_rsa_mgf1_md(EVP_PKEY_CTX *ctx, const EVP_MD **md);\nint EVP_PKEY_CTX_set_rsa_oaep_md(EVP_PKEY_CTX *ctx, const EVP_MD *md);\nint EVP_PKEY_CTX_get_rsa_oaep_md(EVP_PKEY_CTX *ctx, const EVP_MD **md);\nint EVP_PKEY_CTX_set0_rsa_oaep_label(EVP_PKEY_CTX *ctx, unsigned char *label, int len);\nint EVP_PKEY_CTX_get0_rsa_oaep_label(EVP_PKEY_CTX *ctx, unsigned char **label);\n\n#include &lt;openssl/dsa.h&gt;\n\nint EVP_PKEY_CTX_set_dsa_paramgen_bits(EVP_PKEY_CTX *ctx, int nbits);\nint EVP_PKEY_CTX_set_dsa_paramgen_q_bits(EVP_PKEY_CTX *ctx, int qbits);\nint EVP_PKEY_CTX_set_dsa_paramgen_md(EVP_PKEY_CTX *ctx, const EVP_MD *md);\n\n#include &lt;openssl/dh.h&gt;\n\nint EVP_PKEY_CTX_set_dh_paramgen_prime_len(EVP_PKEY_CTX *ctx, int len);\nint EVP_PKEY_CTX_set_dh_paramgen_subprime_len(EVP_PKEY_CTX *ctx, int len);\nint EVP_PKEY_CTX_set_dh_paramgen_generator(EVP_PKEY_CTX *ctx, int gen);\nint EVP_PKEY_CTX_set_dh_paramgen_type(EVP_PKEY_CTX *ctx, int type);\nint EVP_PKEY_CTX_set_dh_pad(EVP_PKEY_CTX *ctx, int pad);\nint EVP_PKEY_CTX_set_dh_nid(EVP_PKEY_CTX *ctx, int nid);\nint EVP_PKEY_CTX_set_dh_rfc5114(EVP_PKEY_CTX *ctx, int rfc5114);\nint EVP_PKEY_CTX_set_dhx_rfc5114(EVP_PKEY_CTX *ctx, int rfc5114);\nint EVP_PKEY_CTX_set_dh_kdf_type(EVP_PKEY_CTX *ctx, int kdf);\nint EVP_PKEY_CTX_get_dh_kdf_type(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_CTX_set0_dh_kdf_oid(EVP_PKEY_CTX *ctx, ASN1_OBJECT *oid);\nint EVP_PKEY_CTX_get0_dh_kdf_oid(EVP_PKEY_CTX *ctx, ASN1_OBJECT **oid);\nint EVP_PKEY_CTX_set_dh_kdf_md(EVP_PKEY_CTX *ctx, const EVP_MD *md);\nint EVP_PKEY_CTX_get_dh_kdf_md(EVP_PKEY_CTX *ctx, const EVP_MD **md);\nint EVP_PKEY_CTX_set_dh_kdf_outlen(EVP_PKEY_CTX *ctx, int len);\nint EVP_PKEY_CTX_get_dh_kdf_outlen(EVP_PKEY_CTX *ctx, int *len);\nint EVP_PKEY_CTX_set0_dh_kdf_ukm(EVP_PKEY_CTX *ctx, unsigned char *ukm, int len);\nint EVP_PKEY_CTX_get0_dh_kdf_ukm(EVP_PKEY_CTX *ctx, unsigned char **ukm);\n\n#include &lt;openssl/ec.h&gt;\n\nint EVP_PKEY_CTX_set_ec_paramgen_curve_nid(EVP_PKEY_CTX *ctx, int nid);\nint EVP_PKEY_CTX_set_ec_param_enc(EVP_PKEY_CTX *ctx, int param_enc);\nint EVP_PKEY_CTX_set_ecdh_cofactor_mode(EVP_PKEY_CTX *ctx, int cofactor_mode);\nint EVP_PKEY_CTX_get_ecdh_cofactor_mode(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_CTX_set_ecdh_kdf_type(EVP_PKEY_CTX *ctx, int kdf);\nint EVP_PKEY_CTX_get_ecdh_kdf_type(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_CTX_set_ecdh_kdf_md(EVP_PKEY_CTX *ctx, const EVP_MD *md);\nint EVP_PKEY_CTX_get_ecdh_kdf_md(EVP_PKEY_CTX *ctx, const EVP_MD **md);\nint EVP_PKEY_CTX_set_ecdh_kdf_outlen(EVP_PKEY_CTX *ctx, int len);\nint EVP_PKEY_CTX_get_ecdh_kdf_outlen(EVP_PKEY_CTX *ctx, int *len);\nint EVP_PKEY_CTX_set0_ecdh_kdf_ukm(EVP_PKEY_CTX *ctx, unsigned char *ukm, int len);\nint EVP_PKEY_CTX_get0_ecdh_kdf_ukm(EVP_PKEY_CTX *ctx, unsigned char **ukm);\n\nint EVP_PKEY_CTX_set1_id(EVP_PKEY_CTX *ctx, void *id, size_t id_len);\nint EVP_PKEY_CTX_get1_id(EVP_PKEY_CTX *ctx, void *id);\nint EVP_PKEY_CTX_get1_id_len(EVP_PKEY_CTX *ctx, size_t *id_len);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#description","title":"DESCRIPTION","text":"<p>The function EVP_PKEY_CTX_ctrl() sends a control operation to the context ctx. The key type used must match keytype if it is not -1. The parameter optype is a mask indicating which operations the control can be applied to. The control command is indicated in cmd and any additional arguments in p1 and p2.</p> <p>For cmd = EVP_PKEY_CTRL_SET_MAC_KEY, p1 is the length of the MAC key, and p2 is MAC key. This is used by Poly1305, SipHash, HMAC and CMAC.</p> <p>Applications will not normally call EVP_PKEY_CTX_ctrl() directly but will instead call one of the algorithm specific macros below.</p> <p>The function EVP_PKEY_CTX_ctrl_uint64() is a wrapper that directly passes a uint64 value as p2 to EVP_PKEY_CTX_ctrl().</p> <p>The function EVP_PKEY_CTX_ctrl_str() allows an application to send an algorithm specific control operation to a context ctx in string form. This is intended to be used for options specified on the command line or in text files. The commands supported are documented in the openssl utility command line pages for the option -pkeyopt which is supported by the pkeyutl, genpkey and req commands.</p> <p>The function EVP_PKEY_CTX_md() sends a message digest control operation to the context ctx. The message digest is specified by its name md.</p> <p>All the remaining \"functions\" are implemented as macros.</p> <p>The EVP_PKEY_CTX_set_signature_md() macro sets the message digest type used in a signature. It can be used in the RSA, DSA and ECDSA algorithms.</p> <p>The EVP_PKEY_CTX_get_signature_md() macro gets the message digest type used in a signature. It can be used in the RSA, DSA and ECDSA algorithms.</p> <p>Key generation typically involves setting up parameters to be used and generating the private and public key data. Some algorithm implementations allow private key data to be set explicitly using the EVP_PKEY_CTX_set_mac_key() macro. In this case key generation is simply the process of setting up the parameters for the key and then setting the raw key data to the value explicitly provided by that macro. Normally applications would call EVP_PKEY_new_raw_private_key(3) or similar functions instead of this macro.</p> <p>The EVP_PKEY_CTX_set_mac_key() macro can be used with any of the algorithms supported by the EVP_PKEY_new_raw_private_key(3) function.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#rsa-parameters","title":"RSA parameters","text":"<p>The EVP_PKEY_CTX_set_rsa_padding() macro sets the RSA padding mode for ctx. The pad parameter can take the value RSA_PKCS1_PADDING for PKCS#1 padding, RSA_SSLV23_PADDING for SSLv23 padding, RSA_NO_PADDING for no padding, RSA_PKCS1_OAEP_PADDING for OAEP padding (encrypt and decrypt only), RSA_X931_PADDING for X9.31 padding (signature operations only) and RSA_PKCS1_PSS_PADDING (sign and verify only).</p> <p>Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md() is used. If this macro is called for PKCS#1 padding the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying. If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated. In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called. If it is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte.</p> <p>The EVP_PKEY_CTX_get_rsa_padding() macro gets the RSA padding mode for ctx.</p> <p>The EVP_PKEY_CTX_set_rsa_pss_saltlen() macro sets the RSA PSS salt length to len. As its name implies it is only supported for PSS padding. Three special values are supported: RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest length, RSA_PSS_SALTLEN_MAX sets the salt length to the maximum permissible value. When verifying RSA_PSS_SALTLEN_AUTO causes the salt length to be automatically determined based on the PSS block structure. If this macro is not called maximum salt length is used when signing and auto detection when verifying is used by default.</p> <p>The EVP_PKEY_CTX_get_rsa_pss_saltlen() macro gets the RSA PSS salt length for ctx. The padding mode must have been set to RSA_PKCS1_PSS_PADDING.</p> <p>The EVP_PKEY_CTX_set_rsa_keygen_bits() macro sets the RSA key length for RSA key generation to bits. If not specified 1024 bits is used.</p> <p>The EVP_PKEY_CTX_set_rsa_keygen_pubexp() macro sets the public exponent value for RSA key generation to pubexp. Currently it should be an odd integer. The pubexp pointer is used internally by this function so it should not be modified or freed after the call. If not specified 65537 is used.</p> <p>The EVP_PKEY_CTX_set_rsa_keygen_primes() macro sets the number of primes for RSA key generation to primes. If not specified 2 is used.</p> <p>The EVP_PKEY_CTX_set_rsa_mgf1_md() macro sets the MGF1 digest for RSA padding schemes to md. If not explicitly set the signing digest is used. The padding mode must have been set to RSA_PKCS1_OAEP_PADDING or RSA_PKCS1_PSS_PADDING.</p> <p>The EVP_PKEY_CTX_get_rsa_mgf1_md() macro gets the MGF1 digest for ctx. If not explicitly set the signing digest is used. The padding mode must have been set to RSA_PKCS1_OAEP_PADDING or RSA_PKCS1_PSS_PADDING.</p> <p>The EVP_PKEY_CTX_set_rsa_oaep_md() macro sets the message digest type used in RSA OAEP to md. The padding mode must have been set to RSA_PKCS1_OAEP_PADDING.</p> <p>The EVP_PKEY_CTX_get_rsa_oaep_md() macro gets the message digest type used in RSA OAEP to md. The padding mode must have been set to RSA_PKCS1_OAEP_PADDING.</p> <p>The EVP_PKEY_CTX_set0_rsa_oaep_label() macro sets the RSA OAEP label to label and its length to len. If label is NULL or len is 0, the label is cleared. The library takes ownership of the label so the caller should not free the original memory pointed to by label. The padding mode must have been set to RSA_PKCS1_OAEP_PADDING.</p> <p>The EVP_PKEY_CTX_get0_rsa_oaep_label() macro gets the RSA OAEP label to label. The return value is the label length. The padding mode must have been set to RSA_PKCS1_OAEP_PADDING. The resulting pointer is owned by the library and should not be freed by the caller.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#dsa-parameters","title":"DSA parameters","text":"<p>The EVP_PKEY_CTX_set_dsa_paramgen_bits() macro sets the number of bits used for DSA parameter generation to nbits. If not specified, 1024 is used.</p> <p>The EVP_PKEY_CTX_set_dsa_paramgen_q_bits() macro sets the number of bits in the subprime parameter q for DSA parameter generation to qbits. If not specified, 160 is used. If a digest function is specified below, this parameter is ignored and instead, the number of bits in q matches the size of the digest.</p> <p>The EVP_PKEY_CTX_set_dsa_paramgen_md() macro sets the digest function used for DSA parameter generation to md. If not specified, one of SHA-1, SHA-224, or SHA-256 is selected to match the bit length of q above.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#dh-parameters","title":"DH parameters","text":"<p>The EVP_PKEY_CTX_set_dh_paramgen_prime_len() macro sets the length of the DH prime parameter p for DH parameter generation. If this macro is not called then 1024 is used. Only accepts lengths greater than or equal to 256.</p> <p>The EVP_PKEY_CTX_set_dh_paramgen_subprime_len() macro sets the length of the DH optional subprime parameter q for DH parameter generation. The default is 256 if the prime is at least 2048 bits long or 160 otherwise. The DH paramgen type must have been set to x9.42.</p> <p>The EVP_PKEY_CTX_set_dh_paramgen_generator() macro sets DH generator to gen for DH parameter generation. If not specified 2 is used.</p> <p>The EVP_PKEY_CTX_set_dh_paramgen_type() macro sets the key type for DH parameter generation. Use 0 for PKCS#3 DH and 1 for X9.42 DH. The default is 0.</p> <p>The EVP_PKEY_CTX_set_dh_pad() macro sets the DH padding mode. If pad is 1 the shared secret is padded with zeros up to the size of the DH prime p. If pad is zero (the default) then no padding is performed.</p> <p>EVP_PKEY_CTX_set_dh_nid() sets the DH parameters to values corresponding to nid as defined in RFC7919. The nid parameter must be NID_ffdhe2048, NID_ffdhe3072, NID_ffdhe4096, NID_ffdhe6144, NID_ffdhe8192 or NID_undef to clear the stored value. This macro can be called during parameter or key generation. The nid parameter and the rfc5114 parameter are mutually exclusive.</p> <p>The EVP_PKEY_CTX_set_dh_rfc5114() and EVP_PKEY_CTX_set_dhx_rfc5114() macros are synonymous. They set the DH parameters to the values defined in RFC5114. The rfc5114 parameter must be 1, 2 or 3 corresponding to RFC5114 sections 2.1, 2.2 and 2.3. or 0 to clear the stored value. This macro can be called during parameter generation. The ctx must have a key type of EVP_PKEY_DHX. The rfc5114 parameter and the nid parameter are mutually exclusive.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#dh-key-derivation-function-parameters","title":"DH key derivation function parameters","text":"<p>Note that all of the following functions require that the ctx parameter has a private key type of EVP_PKEY_DHX. When using key derivation, the output of EVP_PKEY_derive() is the output of the KDF instead of the DH shared secret. The KDF output is typically used as a Key Encryption Key (KEK) that in turn encrypts a Content Encryption Key (CEK).</p> <p>The EVP_PKEY_CTX_set_dh_kdf_type() macro sets the key derivation function type to kdf for DH key derivation. Possible values are EVP_PKEY_DH_KDF_NONE and EVP_PKEY_DH_KDF_X9_42 which uses the key derivation specified in RFC2631 (based on the keying algorithm described in X9.42). When using key derivation, the kdf_oid, kdf_md and kdf_outlen parameters must also be specified.</p> <p>The EVP_PKEY_CTX_get_dh_kdf_type() macro gets the key derivation function type for ctx used for DH key derivation. Possible values are EVP_PKEY_DH_KDF_NONE and EVP_PKEY_DH_KDF_X9_42.</p> <p>The EVP_PKEY_CTX_set0_dh_kdf_oid() macro sets the key derivation function object identifier to oid for DH key derivation. This OID should identify the algorithm to be used with the Content Encryption Key. The library takes ownership of the object identifier so the caller should not free the original memory pointed to by oid.</p> <p>The EVP_PKEY_CTX_get0_dh_kdf_oid() macro gets the key derivation function oid for ctx used for DH key derivation. The resulting pointer is owned by the library and should not be freed by the caller.</p> <p>The EVP_PKEY_CTX_set_dh_kdf_md() macro sets the key derivation function message digest to md for DH key derivation. Note that RFC2631 specifies that this digest should be SHA1 but OpenSSL tolerates other digests.</p> <p>The EVP_PKEY_CTX_get_dh_kdf_md() macro gets the key derivation function message digest for ctx used for DH key derivation.</p> <p>The EVP_PKEY_CTX_set_dh_kdf_outlen() macro sets the key derivation function output length to len for DH key derivation.</p> <p>The EVP_PKEY_CTX_get_dh_kdf_outlen() macro gets the key derivation function output length for ctx used for DH key derivation.</p> <p>The EVP_PKEY_CTX_set0_dh_kdf_ukm() macro sets the user key material to ukm and its length to len for DH key derivation. This parameter is optional and corresponds to the partyAInfo field in RFC2631 terms. The specification requires that it is 512 bits long but this is not enforced by OpenSSL. The library takes ownership of the user key material so the caller should not free the original memory pointed to by ukm.</p> <p>The EVP_PKEY_CTX_get0_dh_kdf_ukm() macro gets the user key material for ctx. The return value is the user key material length. The resulting pointer is owned by the library and should not be freed by the caller.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#ec-parameters","title":"EC parameters","text":"<p>The EVP_PKEY_CTX_set_ec_paramgen_curve_nid() sets the EC curve for EC parameter generation to nid. For EC parameter generation this macro must be called or an error occurs because there is no default curve. This function can also be called to set the curve explicitly when generating an EC key.</p> <p>The EVP_PKEY_CTX_set_ec_param_enc() macro sets the EC parameter encoding to param_enc when generating EC parameters or an EC key. The encoding can be OPENSSL_EC_EXPLICIT_CURVE for explicit parameters (the default in versions of OpenSSL before 1.1.0) or OPENSSL_EC_NAMED_CURVE to use named curve form. For maximum compatibility the named curve form should be used. Note: the OPENSSL_EC_NAMED_CURVE value was added in OpenSSL 1.1.0; previous versions should use 0 instead.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#ecdh-parameters","title":"ECDH parameters","text":"<p>The EVP_PKEY_CTX_set_ecdh_cofactor_mode() macro sets the cofactor mode to cofactor_mode for ECDH key derivation. Possible values are 1 to enable cofactor key derivation, 0 to disable it and -1 to clear the stored cofactor mode and fallback to the private key cofactor mode.</p> <p>The EVP_PKEY_CTX_get_ecdh_cofactor_mode() macro returns the cofactor mode for ctx used for ECDH key derivation. Possible values are 1 when cofactor key derivation is enabled and 0 otherwise.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#ecdh-key-derivation-function-parameters","title":"ECDH key derivation function parameters","text":"<p>The EVP_PKEY_CTX_set_ecdh_kdf_type() macro sets the key derivation function type to kdf for ECDH key derivation. Possible values are EVP_PKEY_ECDH_KDF_NONE and EVP_PKEY_ECDH_KDF_X9_63 which uses the key derivation specified in X9.63. When using key derivation, the kdf_md and kdf_outlen parameters must also be specified.</p> <p>The EVP_PKEY_CTX_get_ecdh_kdf_type() macro returns the key derivation function type for ctx used for ECDH key derivation. Possible values are EVP_PKEY_ECDH_KDF_NONE and EVP_PKEY_ECDH_KDF_X9_63.</p> <p>The EVP_PKEY_CTX_set_ecdh_kdf_md() macro sets the key derivation function message digest to md for ECDH key derivation. Note that X9.63 specifies that this digest should be SHA1 but OpenSSL tolerates other digests.</p> <p>The EVP_PKEY_CTX_get_ecdh_kdf_md() macro gets the key derivation function message digest for ctx used for ECDH key derivation.</p> <p>The EVP_PKEY_CTX_set_ecdh_kdf_outlen() macro sets the key derivation function output length to len for ECDH key derivation.</p> <p>The EVP_PKEY_CTX_get_ecdh_kdf_outlen() macro gets the key derivation function output length for ctx used for ECDH key derivation.</p> <p>The EVP_PKEY_CTX_set0_ecdh_kdf_ukm() macro sets the user key material to ukm for ECDH key derivation. This parameter is optional and corresponds to the shared info in X9.63 terms. The library takes ownership of the user key material so the caller should not free the original memory pointed to by ukm.</p> <p>The EVP_PKEY_CTX_get0_ecdh_kdf_ukm() macro gets the user key material for ctx. The return value is the user key material length. The resulting pointer is owned by the library and should not be freed by the caller.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#other-parameters","title":"Other parameters","text":"<p>The EVP_PKEY_CTX_set1_id(), EVP_PKEY_CTX_get1_id() and EVP_PKEY_CTX_get1_id_len() macros are used to manipulate the special identifier field for specific signature algorithms such as SM2. The EVP_PKEY_CTX_set1_id() sets an ID pointed by id with the length id_len to the library. The library takes a copy of the id so that the caller can safely free the original memory pointed to by id. The EVP_PKEY_CTX_get1_id_len() macro returns the length of the ID set via a previous call to EVP_PKEY_CTX_set1_id(). The length is usually used to allocate adequate memory for further calls to EVP_PKEY_CTX_get1_id(). The EVP_PKEY_CTX_get1_id() macro returns the previously set ID value to caller in id. The caller should allocate adequate memory space for the id before calling EVP_PKEY_CTX_get1_id().</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_CTX_ctrl() and its macros return a positive value for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3), EVP_PKEY_keygen(3)</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#history","title":"HISTORY","text":"<p>The EVP_PKEY_CTX_set1_id(), EVP_PKEY_CTX_get1_id() and EVP_PKEY_CTX_get1_id_len() macros were added in 1.1.1, other functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_CTX_ctrl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_new/","title":"EVP_PKEY_CTX_new","text":""},{"location":"man3/EVP_PKEY_CTX_new/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_new, EVP_PKEY_CTX_new_id, EVP_PKEY_CTX_dup, EVP_PKEY_CTX_free - public key algorithm context functions</p>"},{"location":"man3/EVP_PKEY_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_PKEY_CTX *EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e);\nEVP_PKEY_CTX *EVP_PKEY_CTX_new_id(int id, ENGINE *e);\nEVP_PKEY_CTX *EVP_PKEY_CTX_dup(EVP_PKEY_CTX *ctx);\nvoid EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_new/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_CTX_new() function allocates public key algorithm context using the algorithm specified in pkey and ENGINE e.</p> <p>The EVP_PKEY_CTX_new_id() function allocates public key algorithm context using the algorithm specified by id and ENGINE e. It is normally used when no EVP_PKEY structure is associated with the operations, for example during parameter generation of key generation for some algorithms.</p> <p>EVP_PKEY_CTX_dup() duplicates the context ctx.</p> <p>EVP_PKEY_CTX_free() frees up the context ctx. If ctx is NULL, nothing is done.</p>"},{"location":"man3/EVP_PKEY_CTX_new/#notes","title":"NOTES","text":"<p>The EVP_PKEY_CTX structure is an opaque public key algorithm context used by the OpenSSL high-level public key API. Contexts MUST NOT be shared between threads: that is it is not permissible to use the same context simultaneously in two threads.</p>"},{"location":"man3/EVP_PKEY_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_CTX_new(), EVP_PKEY_CTX_new_id(), EVP_PKEY_CTX_dup() returns either the newly allocated EVP_PKEY_CTX structure of NULL if an error occurred.</p> <p>EVP_PKEY_CTX_free() does not return a value.</p>"},{"location":"man3/EVP_PKEY_CTX_new/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_new(3)</p>"},{"location":"man3/EVP_PKEY_CTX_new/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/","title":"EVP_PKEY_CTX_set1_pbe_pass","text":""},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_set1_pbe_pass - generic KDF support functions</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/kdf.h&gt;\n\nint EVP_PKEY_CTX_set1_pbe_pass(EVP_PKEY_CTX *pctx, unsigned char *pass,\n                               int passlen);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#description","title":"DESCRIPTION","text":"<p>These functions are generic support functions for all KDF algorithms.</p> <p>EVP_PKEY_CTX_set1_pbe_pass() sets the password to the passlen first bytes from pass.</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#string-ctrls","title":"STRING CTRLS","text":"<p>There is also support for string based control operations via EVP_PKEY_CTX_ctrl_str(3). The password can be directly specified using the type parameter \"pass\" or given in hex encoding using the \"hexpass\" parameter.</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#notes","title":"NOTES","text":"<p>All these functions are implemented as macros.</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_CTX_set1_pbe_pass/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/","title":"EVP_PKEY_CTX_set_hkdf_md","text":""},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_set_hkdf_md, EVP_PKEY_CTX_set1_hkdf_salt, EVP_PKEY_CTX_set1_hkdf_key, EVP_PKEY_CTX_add1_hkdf_info, EVP_PKEY_CTX_hkdf_mode - HMAC-based Extract-and-Expand key derivation algorithm</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/kdf.h&gt;\n\nint EVP_PKEY_CTX_hkdf_mode(EVP_PKEY_CTX *pctx, int mode);\n\nint EVP_PKEY_CTX_set_hkdf_md(EVP_PKEY_CTX *pctx, const EVP_MD *md);\n\nint EVP_PKEY_CTX_set1_hkdf_salt(EVP_PKEY_CTX *pctx, unsigned char *salt,\n                                int saltlen);\n\nint EVP_PKEY_CTX_set1_hkdf_key(EVP_PKEY_CTX *pctx, unsigned char *key,\n                               int keylen);\n\nint EVP_PKEY_CTX_add1_hkdf_info(EVP_PKEY_CTX *pctx, unsigned char *info,\n                                int infolen);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_HKDF algorithm implements the HKDF key derivation function. HKDF follows the \"extract-then-expand\" paradigm, where the KDF logically consists of two modules. The first stage takes the input keying material and \"extracts\" from it a fixed-length pseudorandom key K. The second stage \"expands\" the key K into several additional pseudorandom keys (the output of the KDF).</p> <p>EVP_PKEY_CTX_hkdf_mode() sets the mode for the HKDF operation. There are three modes that are currently defined:</p> <ul> <li> <p>EVP_PKEY_HKDEF_MODE_EXTRACT_AND_EXPAND</p> <p>This is the default mode. Calling EVP_PKEY_derive(3) on an EVP_PKEY_CTX set up for HKDF will perform an extract followed by an expand operation in one go. The derived key returned will be the result after the expand operation. The intermediate fixed-length pseudorandom key K is not returned.</p> <p>In this mode the digest, key, salt and info values must be set before a key is derived or an error occurs.</p> </li> <li> <p>EVP_PKEY_HKDEF_MODE_EXTRACT_ONLY</p> <p>In this mode calling EVP_PKEY_derive(3) will just perform the extract operation. The value returned will be the intermediate fixed-length pseudorandom key K.</p> <p>The digest, key and salt values must be set before a key is derived or an error occurs.</p> </li> <li> <p>EVP_PKEY_HKDEF_MODE_EXPAND_ONLY</p> <p>In this mode calling EVP_PKEY_derive(3) will just perform the expand operation. The input key should be set to the intermediate fixed-length pseudorandom key K returned from a previous extract operation.</p> <p>The digest, key and info values must be set before a key is derived or an error occurs.</p> </li> </ul> <p>EVP_PKEY_CTX_set_hkdf_md() sets the message digest associated with the HKDF.</p> <p>EVP_PKEY_CTX_set1_hkdf_salt() sets the salt to saltlen bytes of the buffer salt. Any existing value is replaced.</p> <p>EVP_PKEY_CTX_set1_hkdf_key() sets the key to keylen bytes of the buffer key. Any existing value is replaced.</p> <p>EVP_PKEY_CTX_add1_hkdf_info() sets the info value to infolen bytes of the buffer info. If a value is already set, it is appended to the existing value.</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#string-ctrls","title":"STRING CTRLS","text":"<p>HKDF also supports string based control operations via EVP_PKEY_CTX_ctrl_str(3). The type parameter \"md\" uses the supplied value as the name of the digest algorithm to use. The type parameter \"mode\" uses the values \"EXTRACT_AND_EXPAND\", \"EXTRACT_ONLY\" and \"EXPAND_ONLY\" to determine the mode to use. The type parameters \"salt\", \"key\" and \"info\" use the supplied value parameter as a seed, key or info value. The names \"hexsalt\", \"hexkey\" and \"hexinfo\" are similar except they take a hex string which is converted to binary.</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#notes","title":"NOTES","text":"<p>All these functions are implemented as macros.</p> <p>A context for HKDF can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_HKDF, NULL);\n</code></pre> <p>The total length of the info buffer cannot exceed 1024 bytes in length: this should be more than enough for any normal use of HKDF.</p> <p>The output length of an HKDF expand operation is specified via the length parameter to the EVP_PKEY_derive(3) function. Since the HKDF output length is variable, passing a NULL buffer as a means to obtain the requisite length is not meaningful with HKDF in any mode that performs an expand operation. Instead, the caller must allocate a buffer of the desired length, and pass that buffer to EVP_PKEY_derive(3) along with (a pointer initialized to) the desired length. Passing a NULL buffer to obtain the length is allowed when using EVP_PKEY_HKDEF_MODE_EXTRACT_ONLY.</p> <p>Optimised versions of HKDF can be implemented in an ENGINE.</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#examples","title":"EXAMPLES","text":"<p>This example derives 10 bytes using SHA-256 with the secret key \"secret\", salt value \"salt\" and info value \"label\":</p> <pre><code>EVP_PKEY_CTX *pctx;\nunsigned char out[10];\nsize_t outlen = sizeof(out);\npctx = EVP_PKEY_CTX_new_id(EVP_PKEY_HKDF, NULL);\n\nif (EVP_PKEY_derive_init(pctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_hkdf_md(pctx, EVP_sha256()) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set1_hkdf_salt(pctx, \"salt\", 4) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set1_hkdf_key(pctx, \"secret\", 6) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_add1_hkdf_info(pctx, \"label\", 5) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_derive(pctx, out, &amp;outlen) &lt;= 0)\n    /* Error */\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#conforming-to","title":"CONFORMING TO","text":"<p>RFC 5869</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_CTX_set_hkdf_md/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/","title":"EVP_PKEY_CTX_set_rsa_pss_keygen_md","text":""},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_set_rsa_pss_keygen_md, EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md, EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen - EVP_PKEY RSA-PSS algorithm support functions</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint EVP_PKEY_CTX_set_rsa_pss_keygen_md(EVP_PKEY_CTX *pctx,\n                                       const EVP_MD *md);\nint EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(EVP_PKEY_CTX *pctx,\n                                            const EVP_MD *md);\nint EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(EVP_PKEY_CTX *pctx,\n                                            int saltlen);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#description","title":"DESCRIPTION","text":"<p>These are the functions that implement RSA-PSS(7).</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#signing-and-verification","title":"Signing and Verification","text":"<p>The macro EVP_PKEY_CTX_set_rsa_padding() is supported but an error is returned if an attempt is made to set the padding mode to anything other than PSS. It is otherwise similar to the RSA version.</p> <p>The EVP_PKEY_CTX_set_rsa_pss_saltlen() macro is used to set the salt length. If the key has usage restrictions then an error is returned if an attempt is made to set the salt length below the minimum value. It is otherwise similar to the RSA operation except detection of the salt length (using RSA_PSS_SALTLEN_AUTO) is not supported for verification if the key has usage restrictions.</p> <p>The EVP_PKEY_CTX_set_signature_md() and EVP_PKEY_CTX_set_rsa_mgf1_md() macros are used to set the digest and MGF1 algorithms respectively. If the key has usage restrictions then an error is returned if an attempt is made to set the digest to anything other than the restricted value. Otherwise these are similar to the RSA versions.</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#key-generation","title":"Key Generation","text":"<p>As with RSA key generation the EVP_PKEY_CTX_set_rsa_keygen_bits() and EVP_PKEY_CTX_set_rsa_keygen_pubexp() macros are supported for RSA-PSS: they have exactly the same meaning as for the RSA algorithm.</p> <p>Optional parameter restrictions can be specified when generating a PSS key. If any restrictions are set (using the macros described below) then all parameters are restricted. For example, setting a minimum salt length also restricts the digest and MGF1 algorithms. If any restrictions are in place then they are reflected in the corresponding parameters of the public key when (for example) a certificate request is signed.</p> <p>EVP_PKEY_CTX_set_rsa_pss_keygen_md() restricts the digest algorithm the generated key can use to md.</p> <p>EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md() restricts the MGF1 algorithm the generated key can use to md.</p> <p>EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen() restricts the minimum salt length to saltlen.</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#notes","title":"NOTES","text":"<p>A context for the RSA-PSS algorithm can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA_PSS, NULL);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#see-also","title":"SEE ALSO","text":"<p>RSA-PSS(7), EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_CTX_set_rsa_pss_keygen_md/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/","title":"EVP_PKEY_CTX_set_scrypt_N","text":""},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_set1_scrypt_salt, EVP_PKEY_CTX_set_scrypt_N, EVP_PKEY_CTX_set_scrypt_r, EVP_PKEY_CTX_set_scrypt_p, EVP_PKEY_CTX_set_scrypt_maxmem_bytes - EVP_PKEY scrypt KDF support functions</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/kdf.h&gt;\n\nint EVP_PKEY_CTX_set1_scrypt_salt(EVP_PKEY_CTX *pctx, unsigned char *salt,\n                                  int saltlen);\n\nint EVP_PKEY_CTX_set_scrypt_N(EVP_PKEY_CTX *pctx, uint64_t N);\n\nint EVP_PKEY_CTX_set_scrypt_r(EVP_PKEY_CTX *pctx, uint64_t r);\n\nint EVP_PKEY_CTX_set_scrypt_p(EVP_PKEY_CTX *pctx, uint64_t p);\n\nint EVP_PKEY_CTX_set_scrypt_maxmem_bytes(EVP_PKEY_CTX *pctx,\n                                         uint64_t maxmem);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#description","title":"DESCRIPTION","text":"<p>These functions are used to set up the necessary data to use the scrypt KDF. For more information on scrypt, see scrypt(7).</p> <p>EVP_PKEY_CTX_set1_scrypt_salt() sets the saltlen bytes long salt value.</p> <p>EVP_PKEY_CTX_set_scrypt_N(), EVP_PKEY_CTX_set_scrypt_r() and EVP_PKEY_CTX_set_scrypt_p() configure the work factors N, r and p.</p> <p>EVP_PKEY_CTX_set_scrypt_maxmem_bytes() sets how much RAM key derivation may maximally use, given in bytes. If RAM is exceeded because the load factors are chosen too high, the key derivation will fail.</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#string-ctrls","title":"STRING CTRLS","text":"<p>scrypt also supports string based control operations via EVP_PKEY_CTX_ctrl_str(3). Similarly, the salt can either be specified using the type parameter \"salt\" or in hex encoding by using the \"hexsalt\" parameter. The work factors N, r and p as well as maxmem_bytes can be set by using the parameters \"N\", \"r\", \"p\" and \"maxmem_bytes\", respectively.</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#notes","title":"NOTES","text":"<p>The scrypt KDF also uses EVP_PKEY_CTX_set1_pbe_pass() as well as the value from the string controls \"pass\" and \"hexpass\". See EVP_PKEY_CTX_set1_pbe_pass(3).</p> <p>All the functions described here are implemented as macros.</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#see-also","title":"SEE ALSO","text":"<p>scrypt(7), EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_CTX_set_scrypt_N/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/","title":"EVP_PKEY_CTX_set_tls1_prf_md","text":""},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#name","title":"NAME","text":"<p>EVP_PKEY_CTX_set_tls1_prf_md, EVP_PKEY_CTX_set1_tls1_prf_secret, EVP_PKEY_CTX_add1_tls1_prf_seed - TLS PRF key derivation algorithm</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/kdf.h&gt;\n\nint EVP_PKEY_CTX_set_tls1_prf_md(EVP_PKEY_CTX *pctx, const EVP_MD *md);\nint EVP_PKEY_CTX_set1_tls1_prf_secret(EVP_PKEY_CTX *pctx,\n                                      unsigned char *sec, int seclen);\nint EVP_PKEY_CTX_add1_tls1_prf_seed(EVP_PKEY_CTX *pctx,\n                                    unsigned char *seed, int seedlen);\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_TLS1_PRF algorithm implements the PRF key derivation function for TLS. It has no associated private key and only implements key derivation using EVP_PKEY_derive(3).</p> <p>EVP_PKEY_set_tls1_prf_md() sets the message digest associated with the TLS PRF. EVP_md5_sha1() is treated as a special case which uses the PRF algorithm using both MD5 and SHA1 as used in TLS 1.0 and 1.1.</p> <p>EVP_PKEY_CTX_set_tls1_prf_secret() sets the secret value of the TLS PRF to seclen bytes of the buffer sec. Any existing secret value is replaced and any seed is reset.</p> <p>EVP_PKEY_CTX_add1_tls1_prf_seed() sets the seed to seedlen bytes of seed. If a seed is already set it is appended to the existing value.</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#string-ctrls","title":"STRING CTRLS","text":"<p>The TLS PRF also supports string based control operations using EVP_PKEY_CTX_ctrl_str(3). The type parameter \"md\" uses the supplied value as the name of the digest algorithm to use. The type parameters \"secret\" and \"seed\" use the supplied value parameter as a secret or seed value. The names \"hexsecret\" and \"hexseed\" are similar except they take a hex string which is converted to binary.</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#notes","title":"NOTES","text":"<p>All these functions are implemented as macros.</p> <p>A context for the TLS PRF can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_TLS1_PRF, NULL);\n</code></pre> <p>The digest, secret value and seed must be set before a key is derived or an error occurs.</p> <p>The total length of all seeds cannot exceed 1024 bytes in length: this should be more than enough for any normal use of the TLS PRF.</p> <p>The output length of the PRF is specified by the length parameter in the EVP_PKEY_derive() function. Since the output length is variable, setting the buffer to NULL is not meaningful for the TLS PRF.</p> <p>Optimised versions of the TLS PRF can be implemented in an ENGINE.</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#examples","title":"EXAMPLES","text":"<p>This example derives 10 bytes using SHA-256 with the secret key \"secret\" and seed value \"seed\":</p> <pre><code>EVP_PKEY_CTX *pctx;\nunsigned char out[10];\nsize_t outlen = sizeof(out);\n\npctx = EVP_PKEY_CTX_new_id(EVP_PKEY_TLS1_PRF, NULL);\nif (EVP_PKEY_derive_init(pctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_tls1_prf_md(pctx, EVP_sha256()) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set1_tls1_prf_secret(pctx, \"secret\", 6) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, \"seed\", 4) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_derive(pctx, out, &amp;outlen) &lt;= 0)\n    /* Error */\n</code></pre>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_CTX_set_tls1_prf_md/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_asn1_get_count/","title":"EVP_PKEY_asn1_get_count","text":""},{"location":"man3/EVP_PKEY_asn1_get_count/#name","title":"NAME","text":"<p>EVP_PKEY_asn1_find, EVP_PKEY_asn1_find_str, EVP_PKEY_asn1_get_count, EVP_PKEY_asn1_get0, EVP_PKEY_asn1_get0_info - enumerate public key ASN.1 methods</p>"},{"location":"man3/EVP_PKEY_asn1_get_count/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_asn1_get_count(void);\nconst EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_get0(int idx);\nconst EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE **pe, int type);\nconst EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE **pe,\n                                                   const char *str, int len);\nint EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id,\n                            int *ppkey_flags, const char **pinfo,\n                            const char **ppem_str,\n                            const EVP_PKEY_ASN1_METHOD *ameth);\n</code></pre>"},{"location":"man3/EVP_PKEY_asn1_get_count/#description","title":"DESCRIPTION","text":"<p>EVP_PKEY_asn1_count() returns a count of the number of public key ASN.1 methods available: it includes standard methods and any methods added by the application.</p> <p>EVP_PKEY_asn1_get0() returns the public key ASN.1 method idx. The value of idx must be between zero and EVP_PKEY_asn1_get_count() - 1.</p> <p>EVP_PKEY_asn1_find() looks up the EVP_PKEY_ASN1_METHOD with NID type. If pe isn't NULL, then it will look up an engine implementing a EVP_PKEY_ASN1_METHOD for the NID type and return that instead, and also set *pe to point at the engine that implements it.</p> <p>EVP_PKEY_asn1_find_str() looks up the EVP_PKEY_ASN1_METHOD with PEM type string str. Just like EVP_PKEY_asn1_find(), if pe isn't NULL, then it will look up an engine implementing a EVP_PKEY_ASN1_METHOD for the NID type and return that instead, and also set *pe to point at the engine that implements it.</p> <p>EVP_PKEY_asn1_get0_info() returns the public key ID, base public key ID (both NIDs), any flags, the method description and PEM type string associated with the public key ASN.1 method *ameth.</p> <p>EVP_PKEY_asn1_count(), EVP_PKEY_asn1_get0(), EVP_PKEY_asn1_find() and EVP_PKEY_asn1_find_str() are not thread safe, but as long as all EVP_PKEY_ASN1_METHOD objects are added before the application gets threaded, using them is safe.  See EVP_PKEY_asn1_add0(3).</p>"},{"location":"man3/EVP_PKEY_asn1_get_count/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_asn1_count() returns the number of available public key methods.</p> <p>EVP_PKEY_asn1_get0() return a public key method or NULL if idx is out of range.</p> <p>EVP_PKEY_asn1_get0_info() returns 0 on failure, 1 on success.</p>"},{"location":"man3/EVP_PKEY_asn1_get_count/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_asn1_new(3), EVP_PKEY_asn1_add0(3)</p>"},{"location":"man3/EVP_PKEY_asn1_get_count/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_cmp/","title":"EVP_PKEY_cmp","text":""},{"location":"man3/EVP_PKEY_cmp/#name","title":"NAME","text":"<p>EVP_PKEY_copy_parameters, EVP_PKEY_missing_parameters, EVP_PKEY_cmp_parameters, EVP_PKEY_cmp - public key parameter and comparison functions</p>"},{"location":"man3/EVP_PKEY_cmp/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);\nint EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);\n\nint EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b);\nint EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);\n</code></pre>"},{"location":"man3/EVP_PKEY_cmp/#description","title":"DESCRIPTION","text":"<p>The function EVP_PKEY_missing_parameters() returns 1 if the public key parameters of pkey are missing and 0 if they are present or the algorithm doesn't use parameters.</p> <p>The function EVP_PKEY_copy_parameters() copies the parameters from key from to key to. An error is returned if the parameters are missing in from or present in both from and to and mismatch. If the parameters in from and to are both present and match this function has no effect.</p> <p>The function EVP_PKEY_cmp_parameters() compares the parameters of keys a and b.</p> <p>The function EVP_PKEY_cmp() compares the public key components and parameters (if present) of keys a and b.</p>"},{"location":"man3/EVP_PKEY_cmp/#notes","title":"NOTES","text":"<p>The main purpose of the functions EVP_PKEY_missing_parameters() and EVP_PKEY_copy_parameters() is to handle public keys in certificates where the parameters are sometimes omitted from a public key if they are inherited from the CA that signed it.</p> <p>Since OpenSSL private keys contain public key components too the function EVP_PKEY_cmp() can also be used to determine if a private key matches a public key.</p>"},{"location":"man3/EVP_PKEY_cmp/#return-values","title":"RETURN VALUES","text":"<p>The function EVP_PKEY_missing_parameters() returns 1 if the public key parameters of pkey are missing and 0 if they are present or the algorithm doesn't use parameters.</p> <p>These functions EVP_PKEY_copy_parameters() returns 1 for success and 0 for failure.</p> <p>The function EVP_PKEY_cmp_parameters() and EVP_PKEY_cmp() return 1 if the keys match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported.</p>"},{"location":"man3/EVP_PKEY_cmp/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_keygen(3)</p>"},{"location":"man3/EVP_PKEY_cmp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_decrypt/","title":"EVP_PKEY_decrypt","text":""},{"location":"man3/EVP_PKEY_decrypt/#name","title":"NAME","text":"<p>EVP_PKEY_decrypt_init, EVP_PKEY_decrypt - decrypt using a public key algorithm</p>"},{"location":"man3/EVP_PKEY_decrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,\n                     unsigned char *out, size_t *outlen,\n                     const unsigned char *in, size_t inlen);\n</code></pre>"},{"location":"man3/EVP_PKEY_decrypt/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_decrypt_init() function initializes a public key algorithm context using key pkey for a decryption operation.</p> <p>The EVP_PKEY_decrypt() function performs a public key decryption operation using ctx. The data to be decrypted is specified using the in and inlen parameters. If out is NULL then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen.</p>"},{"location":"man3/EVP_PKEY_decrypt/#notes","title":"NOTES","text":"<p>After the call to EVP_PKEY_decrypt_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation.</p> <p>The function EVP_PKEY_decrypt() can be called more than once on the same context if several operations are performed using the same parameters.</p>"},{"location":"man3/EVP_PKEY_decrypt/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_decrypt_init() and EVP_PKEY_decrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_decrypt/#examples","title":"EXAMPLES","text":"<p>Decrypt data using OAEP (for RSA keys):</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\nENGINE *eng;\nunsigned char *out, *in;\nsize_t outlen, inlen;\nEVP_PKEY *key;\n\n/*\n * NB: assumes key, eng, in, inlen are already set up\n * and that key is an RSA private key\n */\nctx = EVP_PKEY_CTX_new(key, eng);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_decrypt_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_OAEP_PADDING) &lt;= 0)\n    /* Error */\n\n/* Determine buffer length */\nif (EVP_PKEY_decrypt(ctx, NULL, &amp;outlen, in, inlen) &lt;= 0)\n    /* Error */\n\nout = OPENSSL_malloc(outlen);\n\nif (!out)\n    /* malloc failure */\n\nif (EVP_PKEY_decrypt(ctx, out, &amp;outlen, in, inlen) &lt;= 0)\n    /* Error */\n\n/* Decrypted data is outlen bytes written to buffer out */\n</code></pre>"},{"location":"man3/EVP_PKEY_decrypt/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_decrypt/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_decrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_derive/","title":"EVP_PKEY_derive","text":""},{"location":"man3/EVP_PKEY_derive/#name","title":"NAME","text":"<p>EVP_PKEY_derive_init, EVP_PKEY_derive_set_peer, EVP_PKEY_derive - derive public key algorithm shared secret</p>"},{"location":"man3/EVP_PKEY_derive/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);\nint EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);\n</code></pre>"},{"location":"man3/EVP_PKEY_derive/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_derive_init() function initializes a public key algorithm context using key pkey for shared secret derivation.</p> <p>The EVP_PKEY_derive_set_peer() function sets the peer key: this will normally be a public key.</p> <p>The EVP_PKEY_derive() derives a shared secret using ctx. If key is NULL then the maximum size of the output buffer is written to the keylen parameter. If key is not NULL then before the call the keylen parameter should contain the length of the key buffer, if the call is successful the shared secret is written to key and the amount of data written to keylen.</p>"},{"location":"man3/EVP_PKEY_derive/#notes","title":"NOTES","text":"<p>After the call to EVP_PKEY_derive_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation.</p> <p>The function EVP_PKEY_derive() can be called more than once on the same context if several operations are performed using the same parameters.</p>"},{"location":"man3/EVP_PKEY_derive/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_derive_init() and EVP_PKEY_derive() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_derive/#examples","title":"EXAMPLES","text":"<p>Derive shared secret (for example DH or EC keys):</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\nENGINE *eng;\nunsigned char *skey;\nsize_t skeylen;\nEVP_PKEY *pkey, *peerkey;\n/* NB: assumes pkey, eng, peerkey have been already set up */\n\nctx = EVP_PKEY_CTX_new(pkey, eng);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_derive_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_derive_set_peer(ctx, peerkey) &lt;= 0)\n    /* Error */\n\n/* Determine buffer length */\nif (EVP_PKEY_derive(ctx, NULL, &amp;skeylen) &lt;= 0)\n    /* Error */\n\nskey = OPENSSL_malloc(skeylen);\n\nif (!skey)\n    /* malloc failure */\n\nif (EVP_PKEY_derive(ctx, skey, &amp;skeylen) &lt;= 0)\n    /* Error */\n\n/* Shared secret is skey bytes written to buffer skey */\n</code></pre>"},{"location":"man3/EVP_PKEY_derive/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3),</p>"},{"location":"man3/EVP_PKEY_derive/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_derive/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_encrypt/","title":"EVP_PKEY_encrypt","text":""},{"location":"man3/EVP_PKEY_encrypt/#name","title":"NAME","text":"<p>EVP_PKEY_encrypt_init, EVP_PKEY_encrypt - encrypt using a public key algorithm</p>"},{"location":"man3/EVP_PKEY_encrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,\n                     unsigned char *out, size_t *outlen,\n                     const unsigned char *in, size_t inlen);\n</code></pre>"},{"location":"man3/EVP_PKEY_encrypt/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_encrypt_init() function initializes a public key algorithm context using key pkey for an encryption operation.</p> <p>The EVP_PKEY_encrypt() function performs a public key encryption operation using ctx. The data to be encrypted is specified using the in and inlen parameters. If out is NULL then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the encrypted data is written to out and the amount of data written to outlen.</p>"},{"location":"man3/EVP_PKEY_encrypt/#notes","title":"NOTES","text":"<p>After the call to EVP_PKEY_encrypt_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation.</p> <p>The function EVP_PKEY_encrypt() can be called more than once on the same context if several operations are performed using the same parameters.</p>"},{"location":"man3/EVP_PKEY_encrypt/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_encrypt_init() and EVP_PKEY_encrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_encrypt/#examples","title":"EXAMPLES","text":"<p>Encrypt data using OAEP (for RSA keys). See also PEM_read_PUBKEY(3) or d2i_X509(3) for means to load a public key. You may also simply set 'eng = NULL;' to start with the default OpenSSL RSA implementation:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n#include &lt;openssl/engine.h&gt;\n\nEVP_PKEY_CTX *ctx;\nENGINE *eng;\nunsigned char *out, *in;\nsize_t outlen, inlen;\nEVP_PKEY *key;\n\n/*\n * NB: assumes eng, key, in, inlen are already set up,\n * and that key is an RSA public key\n */\nctx = EVP_PKEY_CTX_new(key, eng);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_encrypt_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_OAEP_PADDING) &lt;= 0)\n    /* Error */\n\n/* Determine buffer length */\nif (EVP_PKEY_encrypt(ctx, NULL, &amp;outlen, in, inlen) &lt;= 0)\n    /* Error */\n\nout = OPENSSL_malloc(outlen);\n\nif (!out)\n    /* malloc failure */\n\nif (EVP_PKEY_encrypt(ctx, out, &amp;outlen, in, inlen) &lt;= 0)\n    /* Error */\n\n/* Encrypted data is outlen bytes written to buffer out */\n</code></pre>"},{"location":"man3/EVP_PKEY_encrypt/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ENGINE_by_id(3), EVP_PKEY_CTX_new(3), EVP_PKEY_decrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_encrypt/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_encrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/","title":"EVP_PKEY_get_default_digest_nid","text":""},{"location":"man3/EVP_PKEY_get_default_digest_nid/#name","title":"NAME","text":"<p>EVP_PKEY_get_default_digest_nid - get default signature digest</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\nint EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid);\n</code></pre>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_get_default_digest_nid() function sets pnid to the default message digest NID for the public key signature operations associated with key pkey. Note that some signature algorithms (i.e. Ed25519 and Ed448) do not use a digest during signing. In this case pnid will be set to NID_undef.</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#notes","title":"NOTES","text":"<p>For all current standard OpenSSL public key algorithms SHA1 is returned.</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#return-values","title":"RETURN VALUES","text":"<p>The EVP_PKEY_get_default_digest_nid() function returns 1 if the message digest is advisory (that is other digests can be used) and 2 if it is mandatory (other digests can not be used).  It returns 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3),</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#history","title":"HISTORY","text":"<p>This function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_get_default_digest_nid/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_keygen/","title":"EVP_PKEY_keygen","text":""},{"location":"man3/EVP_PKEY_keygen/#name","title":"NAME","text":"<p>EVP_PKEY_keygen_init, EVP_PKEY_keygen, EVP_PKEY_paramgen_init, EVP_PKEY_paramgen, EVP_PKEY_CTX_set_cb, EVP_PKEY_CTX_get_cb, EVP_PKEY_CTX_get_keygen_info, EVP_PKEY_CTX_set_app_data, EVP_PKEY_CTX_get_app_data, EVP_PKEY_gen_cb, EVP_PKEY_check, EVP_PKEY_public_check, EVP_PKEY_param_check - key and parameter generation and check functions</p>"},{"location":"man3/EVP_PKEY_keygen/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);\nint EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);\n\ntypedef int EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx);\n\nvoid EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);\nEVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx);\n\nint EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx);\n\nvoid EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data);\nvoid *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx);\n\nint EVP_PKEY_check(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_public_check(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_param_check(EVP_PKEY_CTX *ctx);\n</code></pre>"},{"location":"man3/EVP_PKEY_keygen/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_keygen_init() function initializes a public key algorithm context using key pkey for a key generation operation.</p> <p>The EVP_PKEY_keygen() function performs a key generation operation, the generated key is written to ppkey.</p> <p>The functions EVP_PKEY_paramgen_init() and EVP_PKEY_paramgen() are similar except parameters are generated.</p> <p>The function EVP_PKEY_set_cb() sets the key or parameter generation callback to cb. The function EVP_PKEY_CTX_get_cb() returns the key or parameter generation callback.</p> <p>The function EVP_PKEY_CTX_get_keygen_info() returns parameters associated with the generation operation. If idx is -1 the total number of parameters available is returned. Any non negative value returns the value of that parameter. EVP_PKEY_CTX_gen_keygen_info() with a nonnegative value for idx should only be called within the generation callback.</p> <p>If the callback returns 0 then the key generation operation is aborted and an error occurs. This might occur during a time consuming operation where a user clicks on a \"cancel\" button.</p> <p>The functions EVP_PKEY_CTX_set_app_data() and EVP_PKEY_CTX_get_app_data() set and retrieve an opaque pointer. This can be used to set some application defined value which can be retrieved in the callback: for example a handle which is used to update a \"progress dialog\".</p> <p>EVP_PKEY_check() validates the key-pair given by ctx. This function first tries to use customized key check method in EVP_PKEY_METHOD if it's present; otherwise it calls a default one defined in EVP_PKEY_ASN1_METHOD.</p> <p>EVP_PKEY_public_check() validates the public component of the key-pair given by ctx. This function first tries to use customized key check method in EVP_PKEY_METHOD if it's present; otherwise it calls a default one defined in EVP_PKEY_ASN1_METHOD.</p> <p>EVP_PKEY_param_check() validates the algorithm parameters of the key-pair given by ctx. This function first tries to use customized key check method in EVP_PKEY_METHOD if it's present; otherwise it calls a default one defined in EVP_PKEY_ASN1_METHOD.</p>"},{"location":"man3/EVP_PKEY_keygen/#notes","title":"NOTES","text":"<p>After the call to EVP_PKEY_keygen_init() or EVP_PKEY_paramgen_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation.</p> <p>The functions EVP_PKEY_keygen() and EVP_PKEY_paramgen() can be called more than once on the same context if several operations are performed using the same parameters.</p> <p>The meaning of the parameters passed to the callback will depend on the algorithm and the specific implementation of the algorithm. Some might not give any useful information at all during key or parameter generation. Others might not even call the callback.</p> <p>The operation performed by key or parameter generation depends on the algorithm used. In some cases (e.g. EC with a supplied named curve) the \"generation\" option merely sets the appropriate fields in an EVP_PKEY structure.</p> <p>In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters (if any). An OpenSSL private key is equivalent to what some libraries call a \"key pair\". A private key can be used in functions which require the use of a public key or parameters.</p>"},{"location":"man3/EVP_PKEY_keygen/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_keygen_init(), EVP_PKEY_paramgen_init(), EVP_PKEY_keygen() and EVP_PKEY_paramgen() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p> <p>EVP_PKEY_check(), EVP_PKEY_public_check() and EVP_PKEY_param_check() return 1 for success or others for failure. They return -2 if the operation is not supported for the specific algorithm.</p>"},{"location":"man3/EVP_PKEY_keygen/#examples","title":"EXAMPLES","text":"<p>Generate a 2048 bit RSA key:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\nEVP_PKEY *pkey = NULL;\n\nctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_keygen_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 2048) &lt;= 0)\n    /* Error */\n\n/* Generate key */\nif (EVP_PKEY_keygen(ctx, &amp;pkey) &lt;= 0)\n    /* Error */\n</code></pre> <p>Generate a key from a set of parameters:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\nENGINE *eng;\nEVP_PKEY *pkey = NULL, *param;\n\n/* Assumed param, eng are set up already */\nctx = EVP_PKEY_CTX_new(param, eng);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_keygen_init(ctx) &lt;= 0)\n    /* Error */\n\n/* Generate key */\nif (EVP_PKEY_keygen(ctx, &amp;pkey) &lt;= 0)\n    /* Error */\n</code></pre> <p>Example of generation callback for OpenSSL public key implementations:</p> <pre><code>/* Application data is a BIO to output status to */\n\nEVP_PKEY_CTX_set_app_data(ctx, status_bio);\n\nstatic int genpkey_cb(EVP_PKEY_CTX *ctx)\n{\n    char c = '*';\n    BIO *b = EVP_PKEY_CTX_get_app_data(ctx);\n    int p = EVP_PKEY_CTX_get_keygen_info(ctx, 0);\n\n    if (p == 0)\n        c = '.';\n    if (p == 1)\n        c = '+';\n    if (p == 2)\n        c = '*';\n    if (p == 3)\n        c = '\\n';\n    BIO_write(b, &amp;c, 1);\n    (void)BIO_flush(b);\n    return 1;\n}\n</code></pre>"},{"location":"man3/EVP_PKEY_keygen/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_keygen/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p> <p>EVP_PKEY_check(), EVP_PKEY_public_check() and EVP_PKEY_param_check() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/EVP_PKEY_keygen/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_meth_get_count/","title":"EVP_PKEY_meth_get_count","text":""},{"location":"man3/EVP_PKEY_meth_get_count/#name","title":"NAME","text":"<p>EVP_PKEY_meth_get_count, EVP_PKEY_meth_get0, EVP_PKEY_meth_get0_info - enumerate public key methods</p>"},{"location":"man3/EVP_PKEY_meth_get_count/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nsize_t EVP_PKEY_meth_get_count(void);\nconst EVP_PKEY_METHOD *EVP_PKEY_meth_get0(size_t idx);\nvoid EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,\n                             const EVP_PKEY_METHOD *meth);\n</code></pre>"},{"location":"man3/EVP_PKEY_meth_get_count/#description","title":"DESCRIPTION","text":"<p>EVP_PKEY_meth_count() returns a count of the number of public key methods available: it includes standard methods and any methods added by the application.</p> <p>EVP_PKEY_meth_get0() returns the public key method idx. The value of idx must be between zero and EVP_PKEY_meth_get_count() - 1.</p> <p>EVP_PKEY_meth_get0_info() returns the public key ID (a NID) and any flags associated with the public key method *meth.</p>"},{"location":"man3/EVP_PKEY_meth_get_count/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_meth_count() returns the number of available public key methods.</p> <p>EVP_PKEY_meth_get0() return a public key method or NULL if idx is out of range.</p> <p>EVP_PKEY_meth_get0_info() does not return a value.</p>"},{"location":"man3/EVP_PKEY_meth_get_count/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_new(3)</p>"},{"location":"man3/EVP_PKEY_meth_get_count/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_meth_new/","title":"EVP_PKEY_meth_new","text":""},{"location":"man3/EVP_PKEY_meth_new/#name","title":"NAME","text":"<p>EVP_PKEY_meth_new, EVP_PKEY_meth_free, EVP_PKEY_meth_copy, EVP_PKEY_meth_find, EVP_PKEY_meth_add0, EVP_PKEY_METHOD, EVP_PKEY_meth_set_init, EVP_PKEY_meth_set_copy, EVP_PKEY_meth_set_cleanup, EVP_PKEY_meth_set_paramgen, EVP_PKEY_meth_set_keygen, EVP_PKEY_meth_set_sign, EVP_PKEY_meth_set_verify, EVP_PKEY_meth_set_verify_recover, EVP_PKEY_meth_set_signctx, EVP_PKEY_meth_set_verifyctx, EVP_PKEY_meth_set_encrypt, EVP_PKEY_meth_set_decrypt, EVP_PKEY_meth_set_derive, EVP_PKEY_meth_set_ctrl, EVP_PKEY_meth_set_digestsign, EVP_PKEY_meth_set_digestverify, EVP_PKEY_meth_set_check, EVP_PKEY_meth_set_public_check, EVP_PKEY_meth_set_param_check, EVP_PKEY_meth_set_digest_custom, EVP_PKEY_meth_get_init, EVP_PKEY_meth_get_copy, EVP_PKEY_meth_get_cleanup, EVP_PKEY_meth_get_paramgen, EVP_PKEY_meth_get_keygen, EVP_PKEY_meth_get_sign, EVP_PKEY_meth_get_verify, EVP_PKEY_meth_get_verify_recover, EVP_PKEY_meth_get_signctx, EVP_PKEY_meth_get_verifyctx, EVP_PKEY_meth_get_encrypt, EVP_PKEY_meth_get_decrypt, EVP_PKEY_meth_get_derive, EVP_PKEY_meth_get_ctrl, EVP_PKEY_meth_get_digestsign, EVP_PKEY_meth_get_digestverify, EVP_PKEY_meth_get_check, EVP_PKEY_meth_get_public_check, EVP_PKEY_meth_get_param_check, EVP_PKEY_meth_get_digest_custom, EVP_PKEY_meth_remove - manipulating EVP_PKEY_METHOD structure</p>"},{"location":"man3/EVP_PKEY_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\ntypedef struct evp_pkey_method_st EVP_PKEY_METHOD;\n\nEVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags);\nvoid EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);\nvoid EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src);\nconst EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type);\nint EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth);\nint EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth);\n\nvoid EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth,\n                            int (*init) (EVP_PKEY_CTX *ctx));\nvoid EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth,\n                            int (*copy) (EVP_PKEY_CTX *dst,\n                                         EVP_PKEY_CTX *src));\nvoid EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth,\n                               void (*cleanup) (EVP_PKEY_CTX *ctx));\nvoid EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth,\n                                int (*paramgen_init) (EVP_PKEY_CTX *ctx),\n                                int (*paramgen) (EVP_PKEY_CTX *ctx,\n                                                 EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth,\n                              int (*keygen_init) (EVP_PKEY_CTX *ctx),\n                              int (*keygen) (EVP_PKEY_CTX *ctx,\n                                             EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,\n                            int (*sign_init) (EVP_PKEY_CTX *ctx),\n                            int (*sign) (EVP_PKEY_CTX *ctx,\n                                         unsigned char *sig, size_t *siglen,\n                                         const unsigned char *tbs,\n                                         size_t tbslen));\nvoid EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,\n                              int (*verify_init) (EVP_PKEY_CTX *ctx),\n                              int (*verify) (EVP_PKEY_CTX *ctx,\n                                             const unsigned char *sig,\n                                             size_t siglen,\n                                             const unsigned char *tbs,\n                                             size_t tbslen));\nvoid EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,\n                                      int (*verify_recover_init) (EVP_PKEY_CTX\n                                                                  *ctx),\n                                      int (*verify_recover) (EVP_PKEY_CTX\n                                                             *ctx,\n                                                             unsigned char\n                                                             *sig,\n                                                             size_t *siglen,\n                                                             const unsigned\n                                                             char *tbs,\n                                                             size_t tbslen));\nvoid EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,\n                               int (*signctx_init) (EVP_PKEY_CTX *ctx,\n                                                    EVP_MD_CTX *mctx),\n                               int (*signctx) (EVP_PKEY_CTX *ctx,\n                                               unsigned char *sig,\n                                               size_t *siglen,\n                                               EVP_MD_CTX *mctx));\nvoid EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,\n                                 int (*verifyctx_init) (EVP_PKEY_CTX *ctx,\n                                                        EVP_MD_CTX *mctx),\n                                 int (*verifyctx) (EVP_PKEY_CTX *ctx,\n                                                   const unsigned char *sig,\n                                                   int siglen,\n                                                   EVP_MD_CTX *mctx));\nvoid EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,\n                               int (*encrypt_init) (EVP_PKEY_CTX *ctx),\n                               int (*encryptfn) (EVP_PKEY_CTX *ctx,\n                                                 unsigned char *out,\n                                                 size_t *outlen,\n                                                 const unsigned char *in,\n                                                 size_t inlen));\nvoid EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,\n                               int (*decrypt_init) (EVP_PKEY_CTX *ctx),\n                               int (*decrypt) (EVP_PKEY_CTX *ctx,\n                                               unsigned char *out,\n                                               size_t *outlen,\n                                               const unsigned char *in,\n                                               size_t inlen));\nvoid EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,\n                              int (*derive_init) (EVP_PKEY_CTX *ctx),\n                              int (*derive) (EVP_PKEY_CTX *ctx,\n                                             unsigned char *key,\n                                             size_t *keylen));\nvoid EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,\n                            int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,\n                                         void *p2),\n                            int (*ctrl_str) (EVP_PKEY_CTX *ctx,\n                                             const char *type,\n                                             const char *value));\nvoid EVP_PKEY_meth_set_digestsign(EVP_PKEY_METHOD *pmeth,\n                                  int (*digestsign) (EVP_MD_CTX *ctx,\n                                                     unsigned char *sig,\n                                                     size_t *siglen,\n                                                     const unsigned char *tbs,\n                                                     size_t tbslen));\nvoid EVP_PKEY_meth_set_digestverify(EVP_PKEY_METHOD *pmeth,\n                                    int (*digestverify) (EVP_MD_CTX *ctx,\n                                                         const unsigned char *sig,\n                                                         size_t siglen,\n                                                         const unsigned char *tbs,\n                                                         size_t tbslen));\nvoid EVP_PKEY_meth_set_check(EVP_PKEY_METHOD *pmeth,\n                             int (*check) (EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD *pmeth,\n                                    int (*check) (EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD *pmeth,\n                                   int (*check) (EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD *pmeth,\n                                    int (*digest_custom) (EVP_PKEY_CTX *ctx,\n                                                          EVP_MD_CTX *mctx));\n\nvoid EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD *pmeth,\n                            int (**pinit) (EVP_PKEY_CTX *ctx));\nvoid EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD *pmeth,\n                            int (**pcopy) (EVP_PKEY_CTX *dst,\n                                           EVP_PKEY_CTX *src));\nvoid EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD *pmeth,\n                               void (**pcleanup) (EVP_PKEY_CTX *ctx));\nvoid EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth,\n                                int (**pparamgen_init) (EVP_PKEY_CTX *ctx),\n                                int (**pparamgen) (EVP_PKEY_CTX *ctx,\n                                                   EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth,\n                              int (**pkeygen_init) (EVP_PKEY_CTX *ctx),\n                              int (**pkeygen) (EVP_PKEY_CTX *ctx,\n                                               EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth,\n                            int (**psign_init) (EVP_PKEY_CTX *ctx),\n                            int (**psign) (EVP_PKEY_CTX *ctx,\n                                           unsigned char *sig, size_t *siglen,\n                                           const unsigned char *tbs,\n                                           size_t tbslen));\nvoid EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth,\n                              int (**pverify_init) (EVP_PKEY_CTX *ctx),\n                              int (**pverify) (EVP_PKEY_CTX *ctx,\n                                               const unsigned char *sig,\n                                               size_t siglen,\n                                               const unsigned char *tbs,\n                                               size_t tbslen));\nvoid EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,\n                                      int (**pverify_recover_init) (EVP_PKEY_CTX\n                                                                    *ctx),\n                                      int (**pverify_recover) (EVP_PKEY_CTX\n                                                               *ctx,\n                                                               unsigned char\n                                                               *sig,\n                                                               size_t *siglen,\n                                                               const unsigned\n                                                               char *tbs,\n                                                               size_t tbslen));\nvoid EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth,\n                               int (**psignctx_init) (EVP_PKEY_CTX *ctx,\n                                                      EVP_MD_CTX *mctx),\n                               int (**psignctx) (EVP_PKEY_CTX *ctx,\n                                                 unsigned char *sig,\n                                                 size_t *siglen,\n                                                 EVP_MD_CTX *mctx));\nvoid EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth,\n                                 int (**pverifyctx_init) (EVP_PKEY_CTX *ctx,\n                                                          EVP_MD_CTX *mctx),\n                                 int (**pverifyctx) (EVP_PKEY_CTX *ctx,\n                                                     const unsigned char *sig,\n                                                     int siglen,\n                                                     EVP_MD_CTX *mctx));\nvoid EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth,\n                               int (**pencrypt_init) (EVP_PKEY_CTX *ctx),\n                               int (**pencryptfn) (EVP_PKEY_CTX *ctx,\n                                                   unsigned char *out,\n                                                   size_t *outlen,\n                                                   const unsigned char *in,\n                                                   size_t inlen));\nvoid EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth,\n                               int (**pdecrypt_init) (EVP_PKEY_CTX *ctx),\n                               int (**pdecrypt) (EVP_PKEY_CTX *ctx,\n                                                 unsigned char *out,\n                                                 size_t *outlen,\n                                                 const unsigned char *in,\n                                                 size_t inlen));\nvoid EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth,\n                              int (**pderive_init) (EVP_PKEY_CTX *ctx),\n                              int (**pderive) (EVP_PKEY_CTX *ctx,\n                                               unsigned char *key,\n                                               size_t *keylen));\nvoid EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth,\n                            int (**pctrl) (EVP_PKEY_CTX *ctx, int type, int p1,\n                                           void *p2),\n                            int (**pctrl_str) (EVP_PKEY_CTX *ctx,\n                                               const char *type,\n                                               const char *value));\nvoid EVP_PKEY_meth_get_digestsign(EVP_PKEY_METHOD *pmeth,\n                                  int (**digestsign) (EVP_MD_CTX *ctx,\n                                                      unsigned char *sig,\n                                                      size_t *siglen,\n                                                      const unsigned char *tbs,\n                                                      size_t tbslen));\nvoid EVP_PKEY_meth_get_digestverify(EVP_PKEY_METHOD *pmeth,\n                                    int (**digestverify) (EVP_MD_CTX *ctx,\n                                                          const unsigned char *sig,\n                                                          size_t siglen,\n                                                          const unsigned char *tbs,\n                                                          size_t tbslen));\nvoid EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD *pmeth,\n                             int (**pcheck) (EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD *pmeth,\n                                    int (**pcheck) (EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD *pmeth,\n                                   int (**pcheck) (EVP_PKEY *pkey));\nvoid EVP_PKEY_meth_get_digest_custom(EVP_PKEY_METHOD *pmeth,\n                                    int (**pdigest_custom) (EVP_PKEY_CTX *ctx,\n                                                            EVP_MD_CTX *mctx));\n</code></pre>"},{"location":"man3/EVP_PKEY_meth_new/#description","title":"DESCRIPTION","text":"<p>EVP_PKEY_METHOD is a structure which holds a set of methods for a specific public key cryptographic algorithm. Those methods are usually used to perform different jobs, such as generating a key, signing or verifying, encrypting or decrypting, etc.</p> <p>There are two places where the EVP_PKEY_METHOD objects are stored: one is a built-in static array representing the standard methods for different algorithms, and the other one is a stack of user-defined application-specific methods, which can be manipulated by using EVP_PKEY_meth_add0(3).</p> <p>The EVP_PKEY_METHOD objects are usually referenced by EVP_PKEY_CTX objects.</p>"},{"location":"man3/EVP_PKEY_meth_new/#methods","title":"Methods","text":"<p>The methods are the underlying implementations of a particular public key algorithm present by the EVP_PKEY_CTX object.</p> <pre><code>int (*init) (EVP_PKEY_CTX *ctx);\nint (*copy) (EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src);\nvoid (*cleanup) (EVP_PKEY_CTX *ctx);\n</code></pre> <p>The init() method is called to initialize algorithm-specific data when a new EVP_PKEY_CTX is created. As opposed to init(), the cleanup() method is called when an EVP_PKEY_CTX is freed. The copy() method is called when an EVP_PKEY_CTX is being duplicated. Refer to EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_new_id(3), EVP_PKEY_CTX_free(3) and EVP_PKEY_CTX_dup(3).</p> <pre><code>int (*paramgen_init) (EVP_PKEY_CTX *ctx);\nint (*paramgen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey);\n</code></pre> <p>The paramgen_init() and paramgen() methods deal with key parameter generation. They are called by EVP_PKEY_paramgen_init(3) and EVP_PKEY_paramgen(3) to handle the parameter generation process.</p> <pre><code>int (*keygen_init) (EVP_PKEY_CTX *ctx);\nint (*keygen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey);\n</code></pre> <p>The keygen_init() and keygen() methods are used to generate the actual key for the specified algorithm. They are called by EVP_PKEY_keygen_init(3) and EVP_PKEY_keygen(3).</p> <pre><code>int (*sign_init) (EVP_PKEY_CTX *ctx);\nint (*sign) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,\n             const unsigned char *tbs, size_t tbslen);\n</code></pre> <p>The sign_init() and sign() methods are used to generate the signature of a piece of data using a private key. They are called by EVP_PKEY_sign_init(3) and EVP_PKEY_sign(3).</p> <pre><code>int (*verify_init) (EVP_PKEY_CTX *ctx);\nint (*verify) (EVP_PKEY_CTX *ctx,\n               const unsigned char *sig, size_t siglen,\n               const unsigned char *tbs, size_t tbslen);\n</code></pre> <p>The verify_init() and verify() methods are used to verify whether a signature is valid. They are called by EVP_PKEY_verify_init(3) and EVP_PKEY_verify(3).</p> <pre><code>int (*verify_recover_init) (EVP_PKEY_CTX *ctx);\nint (*verify_recover) (EVP_PKEY_CTX *ctx,\n                       unsigned char *rout, size_t *routlen,\n                       const unsigned char *sig, size_t siglen);\n</code></pre> <p>The verify_recover_init() and verify_recover() methods are used to verify a signature and then recover the digest from the signature (for instance, a signature that was generated by RSA signing algorithm). They are called by EVP_PKEY_verify_recover_init(3) and EVP_PKEY_verify_recover(3).</p> <pre><code>int (*signctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);\nint (*signctx) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,\n                EVP_MD_CTX *mctx);\n</code></pre> <p>The signctx_init() and signctx() methods are used to sign a digest present by a EVP_MD_CTX object. They are called by the EVP_DigestSign functions. See EVP_DigestSignInit(3) for details.</p> <pre><code>int (*verifyctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);\nint (*verifyctx) (EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen,\n                  EVP_MD_CTX *mctx);\n</code></pre> <p>The verifyctx_init() and verifyctx() methods are used to verify a signature against the data in a EVP_MD_CTX object. They are called by the various EVP_DigestVerify functions. See EVP_DigestVerifyInit(3) for details.</p> <pre><code>int (*encrypt_init) (EVP_PKEY_CTX *ctx);\nint (*encrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,\n                const unsigned char *in, size_t inlen);\n</code></pre> <p>The encrypt_init() and encrypt() methods are used to encrypt a piece of data. They are called by EVP_PKEY_encrypt_init(3) and EVP_PKEY_encrypt(3).</p> <pre><code>int (*decrypt_init) (EVP_PKEY_CTX *ctx);\nint (*decrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,\n                const unsigned char *in, size_t inlen);\n</code></pre> <p>The decrypt_init() and decrypt() methods are used to decrypt a piece of data. They are called by EVP_PKEY_decrypt_init(3) and EVP_PKEY_decrypt(3).</p> <pre><code>int (*derive_init) (EVP_PKEY_CTX *ctx);\nint (*derive) (EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);\n</code></pre> <p>The derive_init() and derive() methods are used to derive the shared secret from a public key algorithm (for instance, the DH algorithm). They are called by EVP_PKEY_derive_init(3) and EVP_PKEY_derive(3).</p> <pre><code>int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1, void *p2);\nint (*ctrl_str) (EVP_PKEY_CTX *ctx, const char *type, const char *value);\n</code></pre> <p>The ctrl() and ctrl_str() methods are used to adjust algorithm-specific settings. See EVP_PKEY_CTX_ctrl(3) and related functions for details.</p> <pre><code>int (*digestsign) (EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen,\n                   const unsigned char *tbs, size_t tbslen);\nint (*digestverify) (EVP_MD_CTX *ctx, const unsigned char *sig,\n                     size_t siglen, const unsigned char *tbs,\n                     size_t tbslen);\n</code></pre> <p>The digestsign() and digestverify() methods are used to generate or verify a signature in a one-shot mode. They could be called by EVP_DigestSign(3) and EVP_DigestVerify(3).</p> <pre><code>int (*check) (EVP_PKEY *pkey);\nint (*public_check) (EVP_PKEY *pkey);\nint (*param_check) (EVP_PKEY *pkey);\n</code></pre> <p>The check(), public_check() and param_check() methods are used to validate a key-pair, the public component and parameters respectively for a given pkey. They could be called by EVP_PKEY_check(3), EVP_PKEY_public_check(3) and EVP_PKEY_param_check(3) respectively.</p> <pre><code>int (*digest_custom) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);\n</code></pre> <p>The digest_custom() method is used to generate customized digest content before the real message is passed to functions like EVP_DigestSignUpdate(3) or EVP_DigestVerifyInit(3). This is usually required by some public key signature algorithms like SM2 which requires a hashed prefix to the message to be signed. The digest_custom() function will be called by EVP_DigestSignInit(3) and EVP_DigestVerifyInit(3).</p>"},{"location":"man3/EVP_PKEY_meth_new/#functions","title":"Functions","text":"<p>EVP_PKEY_meth_new() creates and returns a new EVP_PKEY_METHOD object, and associates the given id and flags. The following flags are supported:</p> <pre><code>EVP_PKEY_FLAG_AUTOARGLEN\nEVP_PKEY_FLAG_SIGCTX_CUSTOM\n</code></pre> <p>If an EVP_PKEY_METHOD is set with the EVP_PKEY_FLAG_AUTOARGLEN flag, the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework. Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves. For details on the output buffer size, refer to EVP_PKEY_sign(3).</p> <p>The EVP_PKEY_FLAG_SIGCTX_CUSTOM is used to indicate the signctx() method of an EVP_PKEY_METHOD is always called by the EVP framework while doing a digest signing operation by calling EVP_DigestSignFinal(3).</p> <p>EVP_PKEY_meth_free() frees an existing EVP_PKEY_METHOD pointed by pmeth.</p> <p>EVP_PKEY_meth_copy() copies an EVP_PKEY_METHOD object from src to dst.</p> <p>EVP_PKEY_meth_find() finds an EVP_PKEY_METHOD object with the id. This function first searches through the user-defined method objects and then the built-in objects.</p> <p>EVP_PKEY_meth_add0() adds pmeth to the user defined stack of methods.</p> <p>EVP_PKEY_meth_remove() removes an EVP_PKEY_METHOD object added by EVP_PKEY_meth_add0().</p> <p>The EVP_PKEY_meth_set functions set the corresponding fields of EVP_PKEY_METHOD structure with the arguments passed.</p> <p>The EVP_PKEY_meth_get functions get the corresponding fields of EVP_PKEY_METHOD structure to the arguments provided.</p>"},{"location":"man3/EVP_PKEY_meth_new/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_meth_new() returns a pointer to a new EVP_PKEY_METHOD object or returns NULL on error.</p> <p>EVP_PKEY_meth_free() and EVP_PKEY_meth_copy() do not return values.</p> <p>EVP_PKEY_meth_find() returns a pointer to the found EVP_PKEY_METHOD object or returns NULL if not found.</p> <p>EVP_PKEY_meth_add0() returns 1 if method is added successfully or 0 if an error occurred.</p> <p>EVP_PKEY_meth_remove() returns 1 if method is removed successfully or 0 if an error occurred.</p> <p>All EVP_PKEY_meth_set and EVP_PKEY_meth_get functions have no return values. For the 'get' functions, function pointers are returned by arguments.</p>"},{"location":"man3/EVP_PKEY_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_new/","title":"EVP_PKEY_new","text":""},{"location":"man3/EVP_PKEY_new/#name","title":"NAME","text":"<p>EVP_PKEY_new, EVP_PKEY_up_ref, EVP_PKEY_free, EVP_PKEY_new_raw_private_key, EVP_PKEY_new_raw_public_key, EVP_PKEY_new_CMAC_key, EVP_PKEY_new_mac_key, EVP_PKEY_get_raw_private_key, EVP_PKEY_get_raw_public_key - public/private key allocation and raw key handling functions</p>"},{"location":"man3/EVP_PKEY_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_PKEY *EVP_PKEY_new(void);\nint EVP_PKEY_up_ref(EVP_PKEY *key);\nvoid EVP_PKEY_free(EVP_PKEY *key);\n\nEVP_PKEY *EVP_PKEY_new_raw_private_key(int type, ENGINE *e,\n                                       const unsigned char *key, size_t keylen);\nEVP_PKEY *EVP_PKEY_new_raw_public_key(int type, ENGINE *e,\n                                      const unsigned char *key, size_t keylen);\nEVP_PKEY *EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv,\n                                size_t len, const EVP_CIPHER *cipher);\nEVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e, const unsigned char *key,\n                               int keylen);\n\nint EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,\n                                 size_t *len);\nint EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,\n                                size_t *len);\n</code></pre>"},{"location":"man3/EVP_PKEY_new/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_new() function allocates an empty EVP_PKEY structure which is used by OpenSSL to store public and private keys. The reference count is set to 1.</p> <p>EVP_PKEY_up_ref() increments the reference count of key.</p> <p>EVP_PKEY_free() decrements the reference count of key and, if the reference count is zero, frees it up. If key is NULL, nothing is done.</p> <p>EVP_PKEY_new_raw_private_key() allocates a new EVP_PKEY. If e is non-NULL then the new EVP_PKEY structure is associated with the engine e. The type argument indicates what kind of key this is. The value should be a NID for a public key algorithm that supports raw private keys, i.e. one of EVP_PKEY_HMAC, EVP_PKEY_POLY1305, EVP_PKEY_SIPHASH, EVP_PKEY_X25519, EVP_PKEY_ED25519, EVP_PKEY_X448 or EVP_PKEY_ED448. key points to the raw private key data for this EVP_PKEY which should be of length keylen. The length should be appropriate for the type of the key. The public key data will be automatically derived from the given private key data (if appropriate for the algorithm type).</p> <p>EVP_PKEY_new_raw_public_key() works in the same way as EVP_PKEY_new_raw_private_key() except that key points to the raw public key data. The EVP_PKEY structure will be initialised without any private key information. Algorithm types that support raw public keys are EVP_PKEY_X25519, EVP_PKEY_ED25519, EVP_PKEY_X448 or EVP_PKEY_ED448.</p> <p>EVP_PKEY_new_CMAC_key() works in the same way as EVP_PKEY_new_raw_private_key() except it is only for the EVP_PKEY_CMAC algorithm type. In addition to the raw private key data, it also takes a cipher algorithm to be used during creation of a CMAC in the cipher argument. The cipher should be a standard encryption only cipher. For example AEAD and XTS ciphers should not be used.</p> <p>EVP_PKEY_new_mac_key() works in the same way as EVP_PKEY_new_raw_private_key(). New applications should use EVP_PKEY_new_raw_private_key() instead.</p> <p>EVP_PKEY_get_raw_private_key() fills the buffer provided by priv with raw private key data. The size of the priv buffer should be in *len on entry to the function, and on exit *len is updated with the number of bytes actually written. If the buffer priv is NULL then *len is populated with the number of bytes required to hold the key. The calling application is responsible for ensuring that the buffer is large enough to receive the private key data. This function only works for algorithms that support raw private keys. Currently this is: EVP_PKEY_HMAC, EVP_PKEY_POLY1305, EVP_PKEY_SIPHASH, EVP_PKEY_X25519, EVP_PKEY_ED25519, EVP_PKEY_X448 or EVP_PKEY_ED448.</p> <p>EVP_PKEY_get_raw_public_key() fills the buffer provided by pub with raw public key data. The size of the pub buffer should be in *len on entry to the function, and on exit *len is updated with the number of bytes actually written. If the buffer pub is NULL then *len is populated with the number of bytes required to hold the key. The calling application is responsible for ensuring that the buffer is large enough to receive the public key data. This function only works for algorithms that support raw public  keys. Currently this is: EVP_PKEY_X25519, EVP_PKEY_ED25519, EVP_PKEY_X448 or EVP_PKEY_ED448.</p>"},{"location":"man3/EVP_PKEY_new/#notes","title":"NOTES","text":"<p>The EVP_PKEY structure is used by various OpenSSL functions which require a general private key without reference to any particular algorithm.</p> <p>The structure returned by EVP_PKEY_new() is empty. To add a private or public key to this empty structure use the appropriate functions described in EVP_PKEY_set1_RSA(3), EVP_PKEY_set1_DSA, EVP_PKEY_set1_DH or EVP_PKEY_set1_EC_KEY.</p>"},{"location":"man3/EVP_PKEY_new/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_new(), EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key() and EVP_PKEY_new_mac_key() return either the newly allocated EVP_PKEY structure or NULL if an error occurred.</p> <p>EVP_PKEY_up_ref(), EVP_PKEY_get_raw_private_key() and EVP_PKEY_get_raw_public_key() return 1 for success and 0 for failure.</p>"},{"location":"man3/EVP_PKEY_new/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_set1_RSA(3), EVP_PKEY_set1_DSA, EVP_PKEY_set1_DH or EVP_PKEY_set1_EC_KEY</p>"},{"location":"man3/EVP_PKEY_new/#history","title":"HISTORY","text":"<p>The EVP_PKEY_new() and EVP_PKEY_free() functions exist in all versions of OpenSSL.</p> <p>The EVP_PKEY_up_ref() function was added in OpenSSL 1.1.0.</p> <p>The EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key(), EVP_PKEY_new_raw_private_key() and EVP_PKEY_get_raw_public_key() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/EVP_PKEY_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_print_private/","title":"EVP_PKEY_print_private","text":""},{"location":"man3/EVP_PKEY_print_private/#name","title":"NAME","text":"<p>EVP_PKEY_print_public, EVP_PKEY_print_private, EVP_PKEY_print_params - public key algorithm printing routines</p>"},{"location":"man3/EVP_PKEY_print_private/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,\n                          int indent, ASN1_PCTX *pctx);\nint EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,\n                           int indent, ASN1_PCTX *pctx);\nint EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,\n                          int indent, ASN1_PCTX *pctx);\n</code></pre>"},{"location":"man3/EVP_PKEY_print_private/#description","title":"DESCRIPTION","text":"<p>The functions EVP_PKEY_print_public(), EVP_PKEY_print_private() and EVP_PKEY_print_params() print out the public, private or parameter components of key pkey respectively. The key is sent to BIO out in human readable form. The parameter indent indicated how far the printout should be indented.</p> <p>The pctx parameter allows the print output to be finely tuned by using ASN1 printing options. If pctx is set to NULL then default values will be used.</p>"},{"location":"man3/EVP_PKEY_print_private/#notes","title":"NOTES","text":"<p>Currently no public key algorithms include any options in the pctx parameter.</p> <p>If the key does not include all the components indicated by the function then only those contained in the key will be printed. For example passing a public key to EVP_PKEY_print_private() will only print the public components.</p>"},{"location":"man3/EVP_PKEY_print_private/#return-values","title":"RETURN VALUES","text":"<p>These functions all return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_print_private/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_keygen(3)</p>"},{"location":"man3/EVP_PKEY_print_private/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_print_private/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_set1_RSA/","title":"EVP_PKEY_set1_RSA","text":""},{"location":"man3/EVP_PKEY_set1_RSA/#name","title":"NAME","text":"<p>EVP_PKEY_set1_RSA, EVP_PKEY_set1_DSA, EVP_PKEY_set1_DH, EVP_PKEY_set1_EC_KEY, EVP_PKEY_get1_RSA, EVP_PKEY_get1_DSA, EVP_PKEY_get1_DH, EVP_PKEY_get1_EC_KEY, EVP_PKEY_get0_RSA, EVP_PKEY_get0_DSA, EVP_PKEY_get0_DH, EVP_PKEY_get0_EC_KEY, EVP_PKEY_assign_RSA, EVP_PKEY_assign_DSA, EVP_PKEY_assign_DH, EVP_PKEY_assign_EC_KEY, EVP_PKEY_assign_POLY1305, EVP_PKEY_assign_SIPHASH, EVP_PKEY_get0_hmac, EVP_PKEY_get0_poly1305, EVP_PKEY_get0_siphash, EVP_PKEY_type, EVP_PKEY_id, EVP_PKEY_base_id, EVP_PKEY_set_alias_type, EVP_PKEY_set1_engine, EVP_PKEY_get0_engine - EVP_PKEY assignment functions</p>"},{"location":"man3/EVP_PKEY_set1_RSA/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_set1_RSA(EVP_PKEY *pkey, RSA *key);\nint EVP_PKEY_set1_DSA(EVP_PKEY *pkey, DSA *key);\nint EVP_PKEY_set1_DH(EVP_PKEY *pkey, DH *key);\nint EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, EC_KEY *key);\n\nRSA *EVP_PKEY_get1_RSA(EVP_PKEY *pkey);\nDSA *EVP_PKEY_get1_DSA(EVP_PKEY *pkey);\nDH *EVP_PKEY_get1_DH(EVP_PKEY *pkey);\nEC_KEY *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);\n\nconst unsigned char *EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len);\nconst unsigned char *EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len);\nconst unsigned char *EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len);\nRSA *EVP_PKEY_get0_RSA(EVP_PKEY *pkey);\nDSA *EVP_PKEY_get0_DSA(EVP_PKEY *pkey);\nDH *EVP_PKEY_get0_DH(EVP_PKEY *pkey);\nEC_KEY *EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey);\n\nint EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key);\nint EVP_PKEY_assign_DSA(EVP_PKEY *pkey, DSA *key);\nint EVP_PKEY_assign_DH(EVP_PKEY *pkey, DH *key);\nint EVP_PKEY_assign_EC_KEY(EVP_PKEY *pkey, EC_KEY *key);\nint EVP_PKEY_assign_POLY1305(EVP_PKEY *pkey, ASN1_OCTET_STRING *key);\nint EVP_PKEY_assign_SIPHASH(EVP_PKEY *pkey, ASN1_OCTET_STRING *key);\n\nint EVP_PKEY_id(const EVP_PKEY *pkey);\nint EVP_PKEY_base_id(const EVP_PKEY *pkey);\nint EVP_PKEY_type(int type);\nint EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type);\n\nENGINE *EVP_PKEY_get0_engine(const EVP_PKEY *pkey);\nint EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *engine);\n</code></pre>"},{"location":"man3/EVP_PKEY_set1_RSA/#description","title":"DESCRIPTION","text":"<p>EVP_PKEY_set1_RSA(), EVP_PKEY_set1_DSA(), EVP_PKEY_set1_DH() and EVP_PKEY_set1_EC_KEY() set the key referenced by pkey to key.</p> <p>EVP_PKEY_get1_RSA(), EVP_PKEY_get1_DSA(), EVP_PKEY_get1_DH() and EVP_PKEY_get1_EC_KEY() return the referenced key in pkey or NULL if the key is not of the correct type.</p> <p>EVP_PKEY_get0_hmac(), EVP_PKEY_get0_poly1305(), EVP_PKEY_get0_siphash(), EVP_PKEY_get0_RSA(), EVP_PKEY_get0_DSA(), EVP_PKEY_get0_DH() and EVP_PKEY_get0_EC_KEY() also return the referenced key in pkey or NULL if the key is not of the correct type but the reference count of the returned key is not incremented and so must not be freed up after use.</p> <p>EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() also set the referenced key to key however these use the supplied key internally and so key will be freed when the parent pkey is freed.</p> <p>EVP_PKEY_base_id() returns the type of pkey. For example an RSA key will return EVP_PKEY_RSA.</p> <p>EVP_PKEY_id() returns the actual OID associated with pkey. Historically keys using the same algorithm could use different OIDs. For example an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption (equivalent to EVP_PKEY_RSA) or NID_rsa (equivalent to EVP_PKEY_RSA2). The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice.</p> <p>EVP_PKEY_type() returns the underlying type of the NID type. For example EVP_PKEY_type(EVP_PKEY_RSA2) will return EVP_PKEY_RSA.</p> <p>EVP_PKEY_get0_engine() returns a reference to the ENGINE handling pkey.</p> <p>EVP_PKEY_set1_engine() sets the ENGINE handling pkey to engine. It must be called after the key algorithm and components are set up. If engine does not include an EVP_PKEY_METHOD for pkey an error occurs.</p> <p>EVP_PKEY_set_alias_type() allows modifying a EVP_PKEY to use a different set of algorithms than the default. This is currently used to support SM2 keys, which use an identical encoding to ECDSA.</p>"},{"location":"man3/EVP_PKEY_set1_RSA/#notes","title":"NOTES","text":"<p>In accordance with the OpenSSL naming convention the key obtained from or assigned to the pkey using the 1 functions must be freed as well as pkey.</p> <p>EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() are implemented as macros.</p> <p>Most applications wishing to know a key type will simply call EVP_PKEY_base_id() and will not care about the actual type: which will be identical in almost all cases.</p> <p>Previous versions of this document suggested using EVP_PKEY_type(pkey-&gt;type) to determine the type of a key. Since EVP_PKEY is now opaque this is no longer possible: the equivalent is EVP_PKEY_base_id(pkey).</p> <p>EVP_PKEY_set1_engine() is typically used by an ENGINE returning an HSM key as part of its routine to load a private key.</p>"},{"location":"man3/EVP_PKEY_set1_RSA/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_set1_RSA(), EVP_PKEY_set1_DSA(), EVP_PKEY_set1_DH() and EVP_PKEY_set1_EC_KEY() return 1 for success or 0 for failure.</p> <p>EVP_PKEY_get1_RSA(), EVP_PKEY_get1_DSA(), EVP_PKEY_get1_DH() and EVP_PKEY_get1_EC_KEY() return the referenced key or NULL if an error occurred.</p> <p>EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.</p> <p>EVP_PKEY_base_id(), EVP_PKEY_id() and EVP_PKEY_type() return a key type or NID_undef (equivalently EVP_PKEY_NONE) on error.</p> <p>EVP_PKEY_set1_engine() returns 1 for success and 0 for failure.</p> <p>EVP_PKEY_set_alias_type() returns 1 for success and 0 for error.</p>"},{"location":"man3/EVP_PKEY_set1_RSA/#examples","title":"EXAMPLES","text":"<p>After loading an ECC key, it is possible to convert it to using SM2 algorithms with EVP_PKEY_set_alias_type:</p> <pre><code>EVP_PKEY_set_alias_type(pkey, EVP_PKEY_SM2);\n</code></pre>"},{"location":"man3/EVP_PKEY_set1_RSA/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_new(3)</p>"},{"location":"man3/EVP_PKEY_set1_RSA/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_sign/","title":"EVP_PKEY_sign","text":""},{"location":"man3/EVP_PKEY_sign/#name","title":"NAME","text":"<p>EVP_PKEY_sign_init, EVP_PKEY_sign - sign using a public key algorithm</p>"},{"location":"man3/EVP_PKEY_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_sign(EVP_PKEY_CTX *ctx,\n                  unsigned char *sig, size_t *siglen,\n                  const unsigned char *tbs, size_t tbslen);\n</code></pre>"},{"location":"man3/EVP_PKEY_sign/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_sign_init() function initializes a public key algorithm context using key pkey for a signing operation.</p> <p>The EVP_PKEY_sign() function performs a public key signing operation using ctx. The data to be signed is specified using the tbs and tbslen parameters. If sig is NULL then the maximum size of the output buffer is written to the siglen parameter. If sig is not NULL then before the call the siglen parameter should contain the length of the sig buffer, if the call is successful the signature is written to sig and the amount of data written to siglen.</p>"},{"location":"man3/EVP_PKEY_sign/#notes","title":"NOTES","text":"<p>EVP_PKEY_sign() does not hash the data to be signed, and therefore is normally used to sign digests. For signing arbitrary messages, see the EVP_DigestSignInit(3) and EVP_SignInit(3) signing interfaces instead.</p> <p>After the call to EVP_PKEY_sign_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation (see EVP_PKEY_CTX_ctrl(3)).</p> <p>The function EVP_PKEY_sign() can be called more than once on the same context if several operations are performed using the same parameters.</p>"},{"location":"man3/EVP_PKEY_sign/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_sign_init() and EVP_PKEY_sign() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_sign/#examples","title":"EXAMPLES","text":"<p>Sign data using RSA with PKCS#1 padding and SHA256 digest:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\n/* md is a SHA-256 digest in this example. */\nunsigned char *md, *sig;\nsize_t mdlen = 32, siglen;\nEVP_PKEY *signing_key;\n\n/*\n * NB: assumes signing_key and md are set up before the next\n * step. signing_key must be an RSA private key and md must\n * point to the SHA-256 digest to be signed.\n */\nctx = EVP_PKEY_CTX_new(signing_key, NULL /* no engine */);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_sign_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) &lt;= 0)\n    /* Error */\n\n/* Determine buffer length */\nif (EVP_PKEY_sign(ctx, NULL, &amp;siglen, md, mdlen) &lt;= 0)\n    /* Error */\n\nsig = OPENSSL_malloc(siglen);\n\nif (!sig)\n    /* malloc failure */\n\nif (EVP_PKEY_sign(ctx, sig, &amp;siglen, md, mdlen) &lt;= 0)\n    /* Error */\n\n/* Signature is siglen bytes written to buffer sig */\n</code></pre>"},{"location":"man3/EVP_PKEY_sign/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_sign/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_size/","title":"EVP_PKEY_size","text":""},{"location":"man3/EVP_PKEY_size/#name","title":"NAME","text":"<p>EVP_PKEY_size, EVP_PKEY_bits, EVP_PKEY_security_bits - EVP_PKEY information functions</p>"},{"location":"man3/EVP_PKEY_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_size(const EVP_PKEY *pkey);\nint EVP_PKEY_bits(const EVP_PKEY *pkey);\nint EVP_PKEY_security_bits(const EVP_PKEY *pkey);\n</code></pre>"},{"location":"man3/EVP_PKEY_size/#description","title":"DESCRIPTION","text":"<p>EVP_PKEY_size() returns the maximum suitable size for the output buffers for almost all operations that can be done with pkey. The primary documented use is with EVP_SignFinal(3) and EVP_SealInit(3), but it isn't limited there.  The returned size is also large enough for the output buffer of EVP_PKEY_sign(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_derive(3).</p> <p>It must be stressed that, unless the documentation for the operation that's being performed says otherwise, the size returned by EVP_PKEY_size() is only preliminary and not exact, so the final contents of the target buffer may be smaller.  It is therefore crucial to take note of the size given back by the function that performs the operation, such as EVP_PKEY_sign(3) (the siglen argument will receive that length), to avoid bugs.</p> <p>EVP_PKEY_bits() returns the cryptographic length of the cryptosystem to which the key in pkey belongs, in bits.  Note that the definition of cryptographic length is specific to the key cryptosystem.</p> <p>EVP_PKEY_security_bits() returns the number of security bits of the given pkey, bits of security is defined in NIST SP800-57.</p>"},{"location":"man3/EVP_PKEY_size/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_size(), EVP_PKEY_bits() and EVP_PKEY_security_bits() return a positive number, or 0 if this size isn't available.</p>"},{"location":"man3/EVP_PKEY_size/#notes","title":"NOTES","text":"<p>Most functions that have an output buffer and are mentioned with EVP_PKEY_size() have a functionality where you can pass NULL for the buffer and still pass a pointer to an integer and get the exact size that this function call delivers in the context that it's called in. This allows those functions to be called twice, once to find out the exact buffer size, then allocate the buffer in between, and call that function again actually output the data.  For those functions, it isn't strictly necessary to call EVP_PKEY_size() to find out the buffer size, but may be useful in cases where it's desirable to know the upper limit in advance.</p> <p>It should also be especially noted that EVP_PKEY_size() shouldn't be used to get the output size for EVP_DigestSignFinal(), according to \"NOTES\" in EVP_DigestSignFinal(3).</p>"},{"location":"man3/EVP_PKEY_size/#see-also","title":"SEE ALSO","text":"<p>EVP_SignFinal(3), EVP_SealInit(3), EVP_PKEY_sign(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_size/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the Apache License 2.0 (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_verify/","title":"EVP_PKEY_verify","text":""},{"location":"man3/EVP_PKEY_verify/#name","title":"NAME","text":"<p>EVP_PKEY_verify_init, EVP_PKEY_verify - signature verification using a public key algorithm</p>"},{"location":"man3/EVP_PKEY_verify/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_verify(EVP_PKEY_CTX *ctx,\n                    const unsigned char *sig, size_t siglen,\n                    const unsigned char *tbs, size_t tbslen);\n</code></pre>"},{"location":"man3/EVP_PKEY_verify/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_verify_init() function initializes a public key algorithm context using key pkey for a signature verification operation.</p> <p>The EVP_PKEY_verify() function performs a public key verification operation using ctx. The signature is specified using the sig and siglen parameters. The verified data (i.e. the data believed originally signed) is specified using the tbs and tbslen parameters.</p>"},{"location":"man3/EVP_PKEY_verify/#notes","title":"NOTES","text":"<p>After the call to EVP_PKEY_verify_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation.</p> <p>The function EVP_PKEY_verify() can be called more than once on the same context if several operations are performed using the same parameters.</p>"},{"location":"man3/EVP_PKEY_verify/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_verify_init() and EVP_PKEY_verify() return 1 if the verification was successful and 0 if it failed. Unlike other functions the return value 0 from EVP_PKEY_verify() only indicates that the signature did not verify successfully (that is tbs did not match the original data or the signature was of invalid form) it is not an indication of a more serious error.</p> <p>A negative value indicates an error other that signature verification failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_verify/#examples","title":"EXAMPLES","text":"<p>Verify signature using PKCS#1 and SHA256 digest:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\nunsigned char *md, *sig;\nsize_t mdlen, siglen;\nEVP_PKEY *verify_key;\n\n/*\n * NB: assumes verify_key, sig, siglen md and mdlen are already set up\n * and that verify_key is an RSA public key\n */\nctx = EVP_PKEY_CTX_new(verify_key, NULL /* no engine */);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_verify_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) &lt;= 0)\n    /* Error */\n\n/* Perform operation */\nret = EVP_PKEY_verify(ctx, sig, siglen, md, mdlen);\n\n/*\n * ret == 1 indicates success, 0 verify failure and &lt; 0 for some\n * other error.\n */\n</code></pre>"},{"location":"man3/EVP_PKEY_verify/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_verify/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_verify/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_PKEY_verify_recover/","title":"EVP_PKEY_verify_recover","text":""},{"location":"man3/EVP_PKEY_verify_recover/#name","title":"NAME","text":"<p>EVP_PKEY_verify_recover_init, EVP_PKEY_verify_recover - recover signature using a public key algorithm</p>"},{"location":"man3/EVP_PKEY_verify_recover/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx);\nint EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,\n                            unsigned char *rout, size_t *routlen,\n                            const unsigned char *sig, size_t siglen);\n</code></pre>"},{"location":"man3/EVP_PKEY_verify_recover/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_verify_recover_init() function initializes a public key algorithm context using key pkey for a verify recover operation.</p> <p>The EVP_PKEY_verify_recover() function recovers signed data using ctx. The signature is specified using the sig and siglen parameters. If rout is NULL then the maximum size of the output buffer is written to the routlen parameter. If rout is not NULL then before the call the routlen parameter should contain the length of the rout buffer, if the call is successful recovered data is written to rout and the amount of data written to routlen.</p>"},{"location":"man3/EVP_PKEY_verify_recover/#notes","title":"NOTES","text":"<p>Normally an application is only interested in whether a signature verification operation is successful in those cases the EVP_verify() function should be used.</p> <p>Sometimes however it is useful to obtain the data originally signed using a signing operation. Only certain public key algorithms can recover a signature in this way (for example RSA in PKCS padding mode).</p> <p>After the call to EVP_PKEY_verify_recover_init() algorithm specific control operations can be performed to set any appropriate parameters for the operation.</p> <p>The function EVP_PKEY_verify_recover() can be called more than once on the same context if several operations are performed using the same parameters.</p>"},{"location":"man3/EVP_PKEY_verify_recover/#return-values","title":"RETURN VALUES","text":"<p>EVP_PKEY_verify_recover_init() and EVP_PKEY_verify_recover() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.</p>"},{"location":"man3/EVP_PKEY_verify_recover/#examples","title":"EXAMPLES","text":"<p>Recover digest originally signed using PKCS#1 and SHA256 digest:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/rsa.h&gt;\n\nEVP_PKEY_CTX *ctx;\nunsigned char *rout, *sig;\nsize_t routlen, siglen;\nEVP_PKEY *verify_key;\n\n/*\n * NB: assumes verify_key, sig and siglen are already set up\n * and that verify_key is an RSA public key\n */\nctx = EVP_PKEY_CTX_new(verify_key, NULL /* no engine */);\nif (!ctx)\n    /* Error occurred */\nif (EVP_PKEY_verify_recover_init(ctx) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) &lt;= 0)\n    /* Error */\nif (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) &lt;= 0)\n    /* Error */\n\n/* Determine buffer length */\nif (EVP_PKEY_verify_recover(ctx, NULL, &amp;routlen, sig, siglen) &lt;= 0)\n    /* Error */\n\nrout = OPENSSL_malloc(routlen);\n\nif (!rout)\n    /* malloc failure */\n\nif (EVP_PKEY_verify_recover(ctx, rout, &amp;routlen, sig, siglen) &lt;= 0)\n    /* Error */\n\n/* Recovered data is routlen bytes written to buffer rout */\n</code></pre>"},{"location":"man3/EVP_PKEY_verify_recover/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_derive(3)</p>"},{"location":"man3/EVP_PKEY_verify_recover/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.0.</p>"},{"location":"man3/EVP_PKEY_verify_recover/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_SealInit/","title":"EVP_SealInit","text":""},{"location":"man3/EVP_SealInit/#name","title":"NAME","text":"<p>EVP_SealInit, EVP_SealUpdate, EVP_SealFinal - EVP envelope encryption</p>"},{"location":"man3/EVP_SealInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                 unsigned char **ek, int *ekl, unsigned char *iv,\n                 EVP_PKEY **pubk, int npubk);\nint EVP_SealUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                   int *outl, unsigned char *in, int inl);\nint EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);\n</code></pre>"},{"location":"man3/EVP_SealInit/#description","title":"DESCRIPTION","text":"<p>The EVP envelope routines are a high-level interface to envelope encryption. They generate a random key and IV (if required) then \"envelope\" it by using public key encryption. Data can then be encrypted using this key.</p> <p>EVP_SealInit() initializes a cipher context ctx for encryption with cipher type using a random secret key and IV. type is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys.</p> <p>The iv parameter is a buffer where the generated IV is written to. It must contain enough room for the corresponding cipher's IV, as determined by (for example) EVP_CIPHER_iv_length(type).</p> <p>If the cipher does not require an IV then the iv parameter is ignored and can be NULL.</p> <p>EVP_SealUpdate() and EVP_SealFinal() have exactly the same properties as the EVP_EncryptUpdate() and EVP_EncryptFinal() routines, as documented on the EVP_EncryptInit(3) manual page.</p>"},{"location":"man3/EVP_SealInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_SealInit() returns 0 on error or npubk if successful.</p> <p>EVP_SealUpdate() and EVP_SealFinal() return 1 for success and 0 for failure.</p>"},{"location":"man3/EVP_SealInit/#notes","title":"NOTES","text":"<p>Because a random secret key is generated the random number generator must be seeded when EVP_SealInit() is called. If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>The public key must be RSA because it is the only OpenSSL public key algorithm that supports key transport.</p> <p>Envelope encryption is the usual method of using public key encryption on large amounts of data, this is because public key encryption is slow but symmetric encryption is fast. So symmetric encryption is used for bulk encryption and the small random symmetric key used is transferred using public key encryption.</p> <p>It is possible to call EVP_SealInit() twice in the same way as EVP_EncryptInit(). The first call should have npubk set to 0 and (after setting any cipher parameters) it should be called again with type set to NULL.</p>"},{"location":"man3/EVP_SealInit/#see-also","title":"SEE ALSO","text":"<p>evp(7), RAND_bytes(3), EVP_EncryptInit(3), EVP_OpenInit(3), RAND(7)</p>"},{"location":"man3/EVP_SealInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_SignInit/","title":"EVP_SignInit","text":""},{"location":"man3/EVP_SignInit/#name","title":"NAME","text":"<p>EVP_SignInit, EVP_SignInit_ex, EVP_SignUpdate, EVP_SignFinal - EVP signing functions</p>"},{"location":"man3/EVP_SignInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_SignInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);\nint EVP_SignUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);\nint EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *sig, unsigned int *s, EVP_PKEY *pkey);\n\nvoid EVP_SignInit(EVP_MD_CTX *ctx, const EVP_MD *type);\n</code></pre>"},{"location":"man3/EVP_SignInit/#description","title":"DESCRIPTION","text":"<p>The EVP signature routines are a high-level interface to digital signatures.</p> <p>EVP_SignInit_ex() sets up signing context ctx to use digest type from ENGINE impl. ctx must be created with EVP_MD_CTX_new() before calling this function.</p> <p>EVP_SignUpdate() hashes cnt bytes of data at d into the signature context ctx. This function can be called several times on the same ctx to include additional data.</p> <p>EVP_SignFinal() signs the data in ctx using the private key pkey and places the signature in sig. sig must be at least <code>EVP_PKEY_size(pkey)</code> bytes in size. s is an OUT parameter, and not used as an IN parameter. The number of bytes of data written (i.e. the length of the signature) will be written to the integer at s, at most <code>EVP_PKEY_size(pkey)</code> bytes will be written.</p> <p>EVP_SignInit() initializes a signing context ctx to use the default implementation of digest type.</p>"},{"location":"man3/EVP_SignInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_SignInit_ex(), EVP_SignUpdate() and EVP_SignFinal() return 1 for success and 0 for failure.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/EVP_SignInit/#notes","title":"NOTES","text":"<p>The EVP interface to digital signatures should almost always be used in preference to the low-level interfaces. This is because the code then becomes transparent to the algorithm used and much more flexible.</p> <p>When signing with DSA private keys the random number generator must be seeded. If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail. This requirement does not hold for RSA signatures.</p> <p>The call to EVP_SignFinal() internally finalizes a copy of the digest context. This means that calls to EVP_SignUpdate() and EVP_SignFinal() can be called later to digest and sign additional data.</p> <p>Since only a copy of the digest context is ever finalized the context must be cleaned up after use by calling EVP_MD_CTX_free() or a memory leak will occur.</p>"},{"location":"man3/EVP_SignInit/#bugs","title":"BUGS","text":"<p>Older versions of this documentation wrongly stated that calls to EVP_SignUpdate() could not be made after calling EVP_SignFinal().</p> <p>Since the private key is passed in the call to EVP_SignFinal() any error relating to the private key (for example an unsuitable key and digest combination) will not be indicated until after potentially large amounts of data have been passed through EVP_SignUpdate().</p> <p>It is not possible to change the signing parameters using these function.</p> <p>The previous two bugs are fixed in the newer EVP_SignDigest*() function.</p>"},{"location":"man3/EVP_SignInit/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_size(3), EVP_PKEY_bits(3), EVP_PKEY_security_bits(3), EVP_VerifyInit(3), EVP_DigestInit(3), evp(7), HMAC(3), MD2(3), MD5(3), MDC2(3), RIPEMD160(3), SHA1(3), dgst(1)</p>"},{"location":"man3/EVP_SignInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_VerifyInit/","title":"EVP_VerifyInit","text":""},{"location":"man3/EVP_VerifyInit/#name","title":"NAME","text":"<p>EVP_VerifyInit_ex, EVP_VerifyInit, EVP_VerifyUpdate, EVP_VerifyFinal - EVP signature verification functions</p>"},{"location":"man3/EVP_VerifyInit/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint EVP_VerifyInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);\nint EVP_VerifyUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);\nint EVP_VerifyFinal(EVP_MD_CTX *ctx, unsigned char *sigbuf, unsigned int siglen,\n                    EVP_PKEY *pkey);\n\nint EVP_VerifyInit(EVP_MD_CTX *ctx, const EVP_MD *type);\n</code></pre>"},{"location":"man3/EVP_VerifyInit/#description","title":"DESCRIPTION","text":"<p>The EVP signature verification routines are a high-level interface to digital signatures.</p> <p>EVP_VerifyInit_ex() sets up verification context ctx to use digest type from ENGINE impl. ctx must be created by calling EVP_MD_CTX_new() before calling this function.</p> <p>EVP_VerifyUpdate() hashes cnt bytes of data at d into the verification context ctx. This function can be called several times on the same ctx to include additional data.</p> <p>EVP_VerifyFinal() verifies the data in ctx using the public key pkey and against the siglen bytes at sigbuf.</p> <p>EVP_VerifyInit() initializes verification context ctx to use the default implementation of digest type.</p>"},{"location":"man3/EVP_VerifyInit/#return-values","title":"RETURN VALUES","text":"<p>EVP_VerifyInit_ex() and EVP_VerifyUpdate() return 1 for success and 0 for failure.</p> <p>EVP_VerifyFinal() returns 1 for a correct signature, 0 for failure and -1 if some other error occurred.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/EVP_VerifyInit/#notes","title":"NOTES","text":"<p>The EVP interface to digital signatures should almost always be used in preference to the low-level interfaces. This is because the code then becomes transparent to the algorithm used and much more flexible.</p> <p>The call to EVP_VerifyFinal() internally finalizes a copy of the digest context. This means that calls to EVP_VerifyUpdate() and EVP_VerifyFinal() can be called later to digest and verify additional data.</p> <p>Since only a copy of the digest context is ever finalized the context must be cleaned up after use by calling EVP_MD_CTX_free() or a memory leak will occur.</p>"},{"location":"man3/EVP_VerifyInit/#bugs","title":"BUGS","text":"<p>Older versions of this documentation wrongly stated that calls to EVP_VerifyUpdate() could not be made after calling EVP_VerifyFinal().</p> <p>Since the public key is passed in the call to EVP_SignFinal() any error relating to the private key (for example an unsuitable key and digest combination) will not be indicated until after potentially large amounts of data have been passed through EVP_SignUpdate().</p> <p>It is not possible to change the signing parameters using these function.</p> <p>The previous two bugs are fixed in the newer EVP_DigestVerify*() function.</p>"},{"location":"man3/EVP_VerifyInit/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_SignInit(3), EVP_DigestInit(3), evp(7), HMAC(3), MD2(3), MD5(3), MDC2(3), RIPEMD160(3), SHA1(3), dgst(1)</p>"},{"location":"man3/EVP_VerifyInit/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_aes/","title":"EVP_aes","text":""},{"location":"man3/EVP_aes/#name","title":"NAME","text":"<p>EVP_aes_128_cbc, EVP_aes_192_cbc, EVP_aes_256_cbc, EVP_aes_128_cfb, EVP_aes_192_cfb, EVP_aes_256_cfb, EVP_aes_128_cfb1, EVP_aes_192_cfb1, EVP_aes_256_cfb1, EVP_aes_128_cfb8, EVP_aes_192_cfb8, EVP_aes_256_cfb8, EVP_aes_128_cfb128, EVP_aes_192_cfb128, EVP_aes_256_cfb128, EVP_aes_128_ctr, EVP_aes_192_ctr, EVP_aes_256_ctr, EVP_aes_128_ecb, EVP_aes_192_ecb, EVP_aes_256_ecb, EVP_aes_128_ofb, EVP_aes_192_ofb, EVP_aes_256_ofb, EVP_aes_128_cbc_hmac_sha1, EVP_aes_256_cbc_hmac_sha1, EVP_aes_128_cbc_hmac_sha256, EVP_aes_256_cbc_hmac_sha256, EVP_aes_128_ccm, EVP_aes_192_ccm, EVP_aes_256_ccm, EVP_aes_128_gcm, EVP_aes_192_gcm, EVP_aes_256_gcm, EVP_aes_128_ocb, EVP_aes_192_ocb, EVP_aes_256_ocb, EVP_aes_128_wrap, EVP_aes_192_wrap, EVP_aes_256_wrap, EVP_aes_128_wrap_pad, EVP_aes_192_wrap_pad, EVP_aes_256_wrap_pad, EVP_aes_128_xts, EVP_aes_256_xts - EVP AES cipher</p>"},{"location":"man3/EVP_aes/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_ciphername(void)\n</code></pre> <p>EVP_ciphername is used a placeholder for any of the described cipher functions, such as EVP_aes_128_cbc.</p>"},{"location":"man3/EVP_aes/#description","title":"DESCRIPTION","text":"<p>The AES encryption algorithm for EVP.</p> <ul> <li> <p>EVP_aes_128_cbc(), EVP_aes_192_cbc(), EVP_aes_256_cbc(), EVP_aes_128_cfb(), EVP_aes_192_cfb(), EVP_aes_256_cfb(), EVP_aes_128_cfb1(), EVP_aes_192_cfb1(), EVP_aes_256_cfb1(), EVP_aes_128_cfb8(), EVP_aes_192_cfb8(), EVP_aes_256_cfb8(), EVP_aes_128_cfb128(), EVP_aes_192_cfb128(), EVP_aes_256_cfb128(), EVP_aes_128_ctr(), EVP_aes_192_ctr(), EVP_aes_256_ctr(), EVP_aes_128_ecb(), EVP_aes_192_ecb(), EVP_aes_256_ecb(), EVP_aes_128_ofb(), EVP_aes_192_ofb(), EVP_aes_256_ofb()</p> <p>AES for 128, 192 and 256 bit keys in the following modes: CBC, CFB with 128-bit shift, CFB with 1-bit shift, CFB with 8-bit shift, CTR, ECB, and OFB.</p> </li> <li> <p>EVP_aes_128_cbc_hmac_sha1(), EVP_aes_256_cbc_hmac_sha1()</p> <p>Authenticated encryption with AES in CBC mode using SHA-1 as HMAC, with keys of 128 and 256 bits length respectively. The authentication tag is 160 bits long.</p> <p>WARNING: this is not intended for usage outside of TLS and requires calling of some undocumented ctrl functions. These ciphers do not conform to the EVP AEAD interface.</p> </li> <li> <p>EVP_aes_128_cbc_hmac_sha256(), EVP_aes_256_cbc_hmac_sha256()</p> <p>Authenticated encryption with AES in CBC mode using SHA256 (SHA-2, 256-bits) as HMAC, with keys of 128 and 256 bits length respectively. The authentication tag is 256 bits long.</p> <p>WARNING: this is not intended for usage outside of TLS and requires calling of some undocumented ctrl functions. These ciphers do not conform to the EVP AEAD interface.</p> </li> <li> <p>EVP_aes_128_ccm(), EVP_aes_192_ccm(), EVP_aes_256_ccm(), EVP_aes_128_gcm(), EVP_aes_192_gcm(), EVP_aes_256_gcm(), EVP_aes_128_ocb(), EVP_aes_192_ocb(), EVP_aes_256_ocb()</p> <p>AES for 128, 192 and 256 bit keys in CBC-MAC Mode (CCM), Galois Counter Mode (GCM) and OCB Mode respectively. These ciphers require additional control operations to function correctly, see the \"AEAD Interface\" in EVP_EncryptInit(3) section for details.</p> </li> <li> <p>EVP_aes_128_wrap(), EVP_aes_192_wrap(), EVP_aes_256_wrap(), EVP_aes_128_wrap_pad(), EVP_aes_128_wrap(), EVP_aes_192_wrap(), EVP_aes_256_wrap(), EVP_aes_192_wrap_pad(), EVP_aes_128_wrap(), EVP_aes_192_wrap(), EVP_aes_256_wrap(), EVP_aes_256_wrap_pad()</p> <p>AES key wrap with 128, 192 and 256 bit keys, as according to RFC 3394 section 2.2.1 (\"wrap\") and RFC 5649 section 4.1 (\"wrap with padding\") respectively.</p> </li> <li> <p>EVP_aes_128_xts(), EVP_aes_256_xts()</p> <p>AES XTS mode (XTS-AES) is standardized in IEEE Std. 1619-2007 and described in NIST SP 800-38E. The XTS (XEX-based tweaked-codebook mode with ciphertext stealing) mode was designed by Prof. Phillip Rogaway of University of California, Davis, intended for encrypting data on a storage device.</p> <p>XTS-AES provides confidentiality but not authentication of data. It also requires a key of double-length for protection of a certain key size. In particular, XTS-AES-128 (EVP_aes_128_xts) takes input of a 256-bit key to achieve AES 128-bit security, and XTS-AES-256 (EVP_aes_256_xts) takes input of a 512-bit key to achieve AES 256-bit security.</p> <p>The XTS implementation in OpenSSL does not support streaming. That is there must only be one EVP_EncryptUpdate(3) call per EVP_EncryptInit_ex(3) call (and similarly with the \"Decrypt\" functions).</p> <p>The iv parameter to EVP_EncryptInit_ex(3) or EVP_DecryptInit_ex(3) is the XTS \"tweak\" value.</p> </li> </ul>"},{"location":"man3/EVP_aes/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_aes/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_aes/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_aria/","title":"EVP_aria","text":""},{"location":"man3/EVP_aria/#name","title":"NAME","text":"<p>EVP_aria_128_cbc, EVP_aria_192_cbc, EVP_aria_256_cbc, EVP_aria_128_cfb, EVP_aria_192_cfb, EVP_aria_256_cfb, EVP_aria_128_cfb1, EVP_aria_192_cfb1, EVP_aria_256_cfb1, EVP_aria_128_cfb8, EVP_aria_192_cfb8, EVP_aria_256_cfb8, EVP_aria_128_cfb128, EVP_aria_192_cfb128, EVP_aria_256_cfb128, EVP_aria_128_ctr, EVP_aria_192_ctr, EVP_aria_256_ctr, EVP_aria_128_ecb, EVP_aria_192_ecb, EVP_aria_256_ecb, EVP_aria_128_ofb, EVP_aria_192_ofb, EVP_aria_256_ofb, EVP_aria_128_ccm, EVP_aria_192_ccm, EVP_aria_256_ccm, EVP_aria_128_gcm, EVP_aria_192_gcm, EVP_aria_256_gcm, - EVP ARIA cipher</p>"},{"location":"man3/EVP_aria/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_ciphername(void)\n</code></pre> <p>EVP_ciphername is used a placeholder for any of the described cipher functions, such as EVP_aria_128_cbc.</p>"},{"location":"man3/EVP_aria/#description","title":"DESCRIPTION","text":"<p>The ARIA encryption algorithm for EVP.</p> <ul> <li> <p>EVP_aria_128_cbc(), EVP_aria_192_cbc(), EVP_aria_256_cbc(), EVP_aria_128_cfb(), EVP_aria_192_cfb(), EVP_aria_256_cfb(), EVP_aria_128_cfb1(), EVP_aria_192_cfb1(), EVP_aria_256_cfb1(), EVP_aria_128_cfb8(), EVP_aria_192_cfb8(), EVP_aria_256_cfb8(), EVP_aria_128_cfb128(), EVP_aria_192_cfb128(), EVP_aria_256_cfb128(), EVP_aria_128_ctr(), EVP_aria_192_ctr(), EVP_aria_256_ctr(), EVP_aria_128_ecb(), EVP_aria_192_ecb(), EVP_aria_256_ecb(), EVP_aria_128_ofb(), EVP_aria_192_ofb(), EVP_aria_256_ofb()</p> <p>ARIA for 128, 192 and 256 bit keys in the following modes: CBC, CFB with 128-bit shift, CFB with 1-bit shift, CFB with 8-bit shift, CTR, ECB and OFB.</p> </li> <li> <p>EVP_aria_128_ccm(), EVP_aria_192_ccm(), EVP_aria_256_ccm(), EVP_aria_128_gcm(), EVP_aria_192_gcm(), EVP_aria_256_gcm(),</p> <p>ARIA for 128, 192 and 256 bit keys in CBC-MAC Mode (CCM) and Galois Counter Mode (GCM). These ciphers require additional control operations to function correctly, see the \"AEAD Interface\" in EVP_EncryptInit(3) section for details.</p> </li> </ul>"},{"location":"man3/EVP_aria/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_aria/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_aria/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_bf_cbc/","title":"EVP_bf_cbc","text":""},{"location":"man3/EVP_bf_cbc/#name","title":"NAME","text":"<p>EVP_bf_cbc, EVP_bf_cfb, EVP_bf_cfb64, EVP_bf_ecb, EVP_bf_ofb - EVP Blowfish cipher</p>"},{"location":"man3/EVP_bf_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_bf_cbc(void)\nconst EVP_CIPHER *EVP_bf_cfb(void)\nconst EVP_CIPHER *EVP_bf_cfb64(void)\nconst EVP_CIPHER *EVP_bf_ecb(void)\nconst EVP_CIPHER *EVP_bf_ofb(void)\n</code></pre>"},{"location":"man3/EVP_bf_cbc/#description","title":"DESCRIPTION","text":"<p>The Blowfish encryption algorithm for EVP.</p> <p>This is a variable key length cipher.</p> <ul> <li> <p>EVP_bf_cbc(), EVP_bf_cfb(), EVP_bf_cfb64(), EVP_bf_ecb(), EVP_bf_ofb()</p> <p>Blowfish encryption algorithm in CBC, CFB, ECB and OFB modes respectively.</p> </li> </ul>"},{"location":"man3/EVP_bf_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_bf_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_bf_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_blake2b512/","title":"EVP_blake2b512","text":""},{"location":"man3/EVP_blake2b512/#name","title":"NAME","text":"<p>EVP_blake2b512, EVP_blake2s256 - BLAKE2 For EVP</p>"},{"location":"man3/EVP_blake2b512/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_blake2b512(void);\nconst EVP_MD *EVP_blake2s256(void);\n</code></pre>"},{"location":"man3/EVP_blake2b512/#description","title":"DESCRIPTION","text":"<p>BLAKE2 is an improved version of BLAKE, which was submitted to the NIST SHA-3 algorithm competition. The BLAKE2s and BLAKE2b algorithms are described in RFC 7693.</p> <ul> <li> <p>EVP_blake2s256()</p> <p>The BLAKE2s algorithm that produces a 256-bit output from a given input.</p> </li> <li> <p>EVP_blake2b512()</p> <p>The BLAKE2b algorithm that produces a 512-bit output from a given input.</p> </li> </ul>"},{"location":"man3/EVP_blake2b512/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_blake2b512/#conforming-to","title":"CONFORMING TO","text":"<p>RFC 7693.</p>"},{"location":"man3/EVP_blake2b512/#notes","title":"NOTES","text":"<p>While the BLAKE2b and BLAKE2s algorithms supports a variable length digest, this implementation outputs a digest of a fixed length (the maximum length supported), which is 512-bits for BLAKE2b and 256-bits for BLAKE2s.</p>"},{"location":"man3/EVP_blake2b512/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_blake2b512/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_camellia/","title":"EVP_camellia","text":""},{"location":"man3/EVP_camellia/#name","title":"NAME","text":"<p>EVP_camellia_128_cbc, EVP_camellia_192_cbc, EVP_camellia_256_cbc, EVP_camellia_128_cfb, EVP_camellia_192_cfb, EVP_camellia_256_cfb, EVP_camellia_128_cfb1, EVP_camellia_192_cfb1, EVP_camellia_256_cfb1, EVP_camellia_128_cfb8, EVP_camellia_192_cfb8, EVP_camellia_256_cfb8, EVP_camellia_128_cfb128, EVP_camellia_192_cfb128, EVP_camellia_256_cfb128, EVP_camellia_128_ctr, EVP_camellia_192_ctr, EVP_camellia_256_ctr, EVP_camellia_128_ecb, EVP_camellia_192_ecb, EVP_camellia_256_ecb, EVP_camellia_128_ofb, EVP_camellia_192_ofb, EVP_camellia_256_ofb - EVP Camellia cipher</p>"},{"location":"man3/EVP_camellia/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_ciphername(void)\n</code></pre> <p>EVP_ciphername is used a placeholder for any of the described cipher functions, such as EVP_camellia_128_cbc.</p>"},{"location":"man3/EVP_camellia/#description","title":"DESCRIPTION","text":"<p>The Camellia encryption algorithm for EVP.</p> <ul> <li> <p>EVP_camellia_128_cbc(), EVP_camellia_192_cbc(), EVP_camellia_256_cbc(), EVP_camellia_128_cfb(), EVP_camellia_192_cfb(), EVP_camellia_256_cfb(), EVP_camellia_128_cfb1(), EVP_camellia_192_cfb1(), EVP_camellia_256_cfb1(), EVP_camellia_128_cfb8(), EVP_camellia_192_cfb8(), EVP_camellia_256_cfb8(), EVP_camellia_128_cfb128(), EVP_camellia_192_cfb128(), EVP_camellia_256_cfb128(), EVP_camellia_128_ctr(), EVP_camellia_192_ctr(), EVP_camellia_256_ctr(), EVP_camellia_128_ecb(), EVP_camellia_192_ecb(), EVP_camellia_256_ecb(), EVP_camellia_128_ofb(), EVP_camellia_192_ofb(), EVP_camellia_256_ofb()</p> <p>Camellia for 128, 192 and 256 bit keys in the following modes: CBC, CFB with 128-bit shift, CFB with 1-bit shift, CFB with 8-bit shift, CTR, ECB and OFB.</p> </li> </ul>"},{"location":"man3/EVP_camellia/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_camellia/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_camellia/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_cast5_cbc/","title":"EVP_cast5_cbc","text":""},{"location":"man3/EVP_cast5_cbc/#name","title":"NAME","text":"<p>EVP_cast5_cbc, EVP_cast5_cfb, EVP_cast5_cfb64, EVP_cast5_ecb, EVP_cast5_ofb - EVP CAST cipher</p>"},{"location":"man3/EVP_cast5_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_cast5_cbc(void)\nconst EVP_CIPHER *EVP_cast5_cfb(void)\nconst EVP_CIPHER *EVP_cast5_cfb64(void)\nconst EVP_CIPHER *EVP_cast5_ecb(void)\nconst EVP_CIPHER *EVP_cast5_ofb(void)\n</code></pre>"},{"location":"man3/EVP_cast5_cbc/#description","title":"DESCRIPTION","text":"<p>The CAST encryption algorithm for EVP.</p> <p>This is a variable key length cipher.</p> <ul> <li> <p>EVP_cast5_cbc(), EVP_cast5_ecb(), EVP_cast5_cfb(), EVP_cast5_cfb64(), EVP_cast5_ofb()</p> <p>CAST encryption algorithm in CBC, ECB, CFB and OFB modes respectively.</p> </li> </ul>"},{"location":"man3/EVP_cast5_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_cast5_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_cast5_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_chacha20/","title":"EVP_chacha20","text":""},{"location":"man3/EVP_chacha20/#name","title":"NAME","text":"<p>EVP_chacha20, EVP_chacha20_poly1305 - EVP ChaCha20 stream cipher</p>"},{"location":"man3/EVP_chacha20/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_chacha20(void)\nconst EVP_CIPHER *EVP_chacha20_poly1305(void)\n</code></pre>"},{"location":"man3/EVP_chacha20/#description","title":"DESCRIPTION","text":"<p>The ChaCha20 stream cipher for EVP.</p> <ul> <li> <p>EVP_chacha20()</p> <p>The ChaCha20 stream cipher. The key length is 256 bits, the IV is 128 bits long. The first 32 bits consists of a counter in little-endian order followed by a 96 bit nonce. For example a nonce of:</p> <p>000000000000000000000002</p> <p>With an initial counter of 42 (2a in hex) would be expressed as:</p> <p>2a000000000000000000000000000002</p> </li> <li> <p>EVP_chacha20_poly1305()</p> <p>Authenticated encryption with ChaCha20-Poly1305. Like EVP_chacha20(), the key is 256 bits and the IV is 96 bits. This supports additional authenticated data (AAD) and produces a 128-bit authentication tag. See the \"AEAD Interface\" in EVP_EncryptInit(3) section for more information.</p> </li> </ul>"},{"location":"man3/EVP_chacha20/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_chacha20/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_chacha20/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_des/","title":"EVP_des","text":""},{"location":"man3/EVP_des/#name","title":"NAME","text":"<p>EVP_des_cbc, EVP_des_cfb, EVP_des_cfb1, EVP_des_cfb8, EVP_des_cfb64, EVP_des_ecb, EVP_des_ofb, EVP_des_ede, EVP_des_ede_cbc, EVP_des_ede_cfb, EVP_des_ede_cfb64, EVP_des_ede_ecb, EVP_des_ede_ofb, EVP_des_ede3, EVP_des_ede3_cbc, EVP_des_ede3_cfb, EVP_des_ede3_cfb1, EVP_des_ede3_cfb8, EVP_des_ede3_cfb64, EVP_des_ede3_ecb, EVP_des_ede3_ofb, EVP_des_ede3_wrap - EVP DES cipher</p>"},{"location":"man3/EVP_des/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_ciphername(void)\n</code></pre> <p>EVP_ciphername is used a placeholder for any of the described cipher functions, such as EVP_des_cbc.</p>"},{"location":"man3/EVP_des/#description","title":"DESCRIPTION","text":"<p>The DES encryption algorithm for EVP.</p> <ul> <li> <p>EVP_des_cbc(), EVP_des_ecb(), EVP_des_cfb(), EVP_des_cfb1(), EVP_des_cfb8(), EVP_des_cfb64(), EVP_des_ofb()</p> <p>DES in CBC, ECB, CFB with 64-bit shift, CFB with 1-bit shift, CFB with 8-bit shift and OFB modes.</p> </li> <li> <p>EVP_des_ede(), EVP_des_ede_cbc(), EVP_des_ede_cfb(), EVP_des_ede_cfb64(), EVP_des_ede_ecb(), EVP_des_ede_ofb()</p> <p>Two key triple DES in ECB, CBC, CFB with 64-bit shift and OFB modes.</p> </li> <li> <p>EVP_des_ede3(), EVP_des_ede3_cbc(), EVP_des_ede3_cfb(), EVP_des_ede3_cfb1(), EVP_des_ede3_cfb8(), EVP_des_ede3_cfb64(), EVP_des_ede3_ecb(), EVP_des_ede3_ofb()</p> <p>Three-key triple DES in ECB, CBC, CFB with 64-bit shift, CFB with 1-bit shift, CFB with 8-bit shift and OFB modes.</p> </li> <li> <p>EVP_des_ede3_wrap()</p> <p>Triple-DES key wrap according to RFC 3217 Section 3.</p> </li> </ul>"},{"location":"man3/EVP_des/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_des/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_des/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_desx_cbc/","title":"EVP_desx_cbc","text":""},{"location":"man3/EVP_desx_cbc/#name","title":"NAME","text":"<p>EVP_desx_cbc - EVP DES-X cipher</p>"},{"location":"man3/EVP_desx_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_desx_cbc(void)\n</code></pre>"},{"location":"man3/EVP_desx_cbc/#description","title":"DESCRIPTION","text":"<p>The DES-X encryption algorithm for EVP.</p> <p>All modes below use a key length of 128 bits and acts on blocks of 128-bits.</p> <ul> <li> <p>EVP_desx_cbc()</p> <p>The DES-X algorithm in CBC mode.</p> </li> </ul>"},{"location":"man3/EVP_desx_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_desx_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_desx_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_idea_cbc/","title":"EVP_idea_cbc","text":""},{"location":"man3/EVP_idea_cbc/#name","title":"NAME","text":"<p>EVP_idea_cbc, EVP_idea_cfb, EVP_idea_cfb64, EVP_idea_ecb, EVP_idea_ofb - EVP IDEA cipher</p>"},{"location":"man3/EVP_idea_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_idea_cbc(void)\nconst EVP_CIPHER *EVP_idea_cfb(void)\nconst EVP_CIPHER *EVP_idea_cfb64(void)\nconst EVP_CIPHER *EVP_idea_ecb(void)\nconst EVP_CIPHER *EVP_idea_ofb(void)\n</code></pre>"},{"location":"man3/EVP_idea_cbc/#description","title":"DESCRIPTION","text":"<p>The IDEA encryption algorithm for EVP.</p> <ul> <li> <p>EVP_idea_cbc(), EVP_idea_cfb(), EVP_idea_cfb64(), EVP_idea_ecb(), EVP_idea_ofb()</p> <p>The IDEA encryption algorithm in CBC, CFB, ECB and OFB modes respectively.</p> </li> </ul>"},{"location":"man3/EVP_idea_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_idea_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_idea_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_md2/","title":"EVP_md2","text":""},{"location":"man3/EVP_md2/#name","title":"NAME","text":"<p>EVP_md2 - MD2 For EVP</p>"},{"location":"man3/EVP_md2/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_md2(void);\n</code></pre>"},{"location":"man3/EVP_md2/#description","title":"DESCRIPTION","text":"<p>MD2 is a cryptographic hash function standardized in RFC 1319 and designed by Ronald Rivest.</p> <ul> <li> <p>EVP_md2()</p> <p>The MD2 algorithm which produces a 128-bit output from a given input.</p> </li> </ul>"},{"location":"man3/EVP_md2/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_md2/#conforming-to","title":"CONFORMING TO","text":"<p>IETF RFC 1319.</p>"},{"location":"man3/EVP_md2/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_md2/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_md4/","title":"EVP_md4","text":""},{"location":"man3/EVP_md4/#name","title":"NAME","text":"<p>EVP_md4 - MD4 For EVP</p>"},{"location":"man3/EVP_md4/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_md4(void);\n</code></pre>"},{"location":"man3/EVP_md4/#description","title":"DESCRIPTION","text":"<p>MD4 is a cryptographic hash function standardized in RFC 1320 and designed by Ronald Rivest, first published in 1990.</p> <ul> <li> <p>EVP_md4()</p> <p>The MD4 algorithm which produces a 128-bit output from a given input.</p> </li> </ul>"},{"location":"man3/EVP_md4/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_md4/#conforming-to","title":"CONFORMING TO","text":"<p>IETF RFC 1320.</p>"},{"location":"man3/EVP_md4/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_md4/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_md5/","title":"EVP_md5","text":""},{"location":"man3/EVP_md5/#name","title":"NAME","text":"<p>EVP_md5, EVP_md5_sha1 - MD5 For EVP</p>"},{"location":"man3/EVP_md5/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_md5(void);\nconst EVP_MD *EVP_md5_sha1(void);\n</code></pre>"},{"location":"man3/EVP_md5/#description","title":"DESCRIPTION","text":"<p>MD5 is a cryptographic hash function standardized in RFC 1321 and designed by Ronald Rivest.</p> <p>The CMU Software Engineering Institute considers MD5 unsuitable for further use since its security has been severely compromised.</p> <ul> <li> <p>EVP_md5()</p> <p>The MD5 algorithm which produces a 128-bit output from a given input.</p> </li> <li> <p>EVP_md5_sha1()</p> <p>A hash algorithm of SSL v3 that combines MD5 with SHA-1 as described in RFC 6101.</p> <p>WARNING: this algorithm is not intended for non-SSL usage.</p> </li> </ul>"},{"location":"man3/EVP_md5/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_md5/#conforming-to","title":"CONFORMING TO","text":"<p>IETF RFC 1321.</p>"},{"location":"man3/EVP_md5/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_md5/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_mdc2/","title":"EVP_mdc2","text":""},{"location":"man3/EVP_mdc2/#name","title":"NAME","text":"<p>EVP_mdc2 - MDC-2 For EVP</p>"},{"location":"man3/EVP_mdc2/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_mdc2(void);\n</code></pre>"},{"location":"man3/EVP_mdc2/#description","title":"DESCRIPTION","text":"<p>MDC-2 (Modification Detection Code 2 or Meyer-Schilling) is a cryptographic hash function based on a block cipher.</p> <ul> <li> <p>EVP_mdc2()</p> <p>The MDC-2DES algorithm of using MDC-2 with the DES block cipher. It produces a 128-bit output from a given input.</p> </li> </ul>"},{"location":"man3/EVP_mdc2/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_mdc2/#conforming-to","title":"CONFORMING TO","text":"<p>ISO/IEC 10118-2:2000 Hash-Function 2, with DES as the underlying block cipher.</p>"},{"location":"man3/EVP_mdc2/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_mdc2/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_rc2_cbc/","title":"EVP_rc2_cbc","text":""},{"location":"man3/EVP_rc2_cbc/#name","title":"NAME","text":"<p>EVP_rc2_cbc, EVP_rc2_cfb, EVP_rc2_cfb64, EVP_rc2_ecb, EVP_rc2_ofb, EVP_rc2_40_cbc, EVP_rc2_64_cbc - EVP RC2 cipher</p>"},{"location":"man3/EVP_rc2_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_rc2_cbc(void)\nconst EVP_CIPHER *EVP_rc2_cfb(void)\nconst EVP_CIPHER *EVP_rc2_cfb64(void)\nconst EVP_CIPHER *EVP_rc2_ecb(void)\nconst EVP_CIPHER *EVP_rc2_ofb(void)\nconst EVP_CIPHER *EVP_rc2_40_cbc(void)\nconst EVP_CIPHER *EVP_rc2_64_cbc(void)\n</code></pre>"},{"location":"man3/EVP_rc2_cbc/#description","title":"DESCRIPTION","text":"<p>The RC2 encryption algorithm for EVP.</p> <ul> <li> <p>EVP_rc2_cbc(), EVP_rc2_cfb(), EVP_rc2_cfb64(), EVP_rc2_ecb(), EVP_rc2_ofb()</p> <p>RC2 encryption algorithm in CBC, CFB, ECB and OFB modes respectively. This is a variable key length cipher with an additional parameter called \"effective key bits\" or \"effective key length\". By default both are set to 128 bits.</p> </li> <li> <p>EVP_rc2_40_cbc(), EVP_rc2_64_cbc()</p> <p>RC2 algorithm in CBC mode with a default key length and effective key length of 40 and 64 bits.</p> <p>WARNING: these functions are obsolete. Their usage should be replaced with the EVP_rc2_cbc(), EVP_CIPHER_CTX_set_key_length() and EVP_CIPHER_CTX_ctrl() functions to set the key length and effective key length.</p> </li> </ul>"},{"location":"man3/EVP_rc2_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_rc2_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_rc2_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_rc4/","title":"EVP_rc4","text":""},{"location":"man3/EVP_rc4/#name","title":"NAME","text":"<p>EVP_rc4, EVP_rc4_40, EVP_rc4_hmac_md5 - EVP RC4 stream cipher</p>"},{"location":"man3/EVP_rc4/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_rc4(void)\nconst EVP_CIPHER *EVP_rc4_40(void)\nconst EVP_CIPHER *EVP_rc4_hmac_md5(void)\n</code></pre>"},{"location":"man3/EVP_rc4/#description","title":"DESCRIPTION","text":"<p>The RC4 stream cipher for EVP.</p> <ul> <li> <p>EVP_rc4()</p> <p>RC4 stream cipher. This is a variable key length cipher with a default key length of 128 bits.</p> </li> <li> <p>EVP_rc4_40()</p> <p>RC4 stream cipher with 40 bit key length.</p> <p>WARNING: this function is obsolete. Its usage should be replaced with the EVP_rc4() and the EVP_CIPHER_CTX_set_key_length() functions.</p> </li> <li> <p>EVP_rc4_hmac_md5()</p> <p>Authenticated encryption with the RC4 stream cipher with MD5 as HMAC.</p> <p>WARNING: this is not intended for usage outside of TLS and requires calling of some undocumented ctrl functions. These ciphers do not conform to the EVP AEAD interface.</p> </li> </ul>"},{"location":"man3/EVP_rc4/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_rc4/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_rc4/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_rc5_32_12_16_cbc/","title":"EVP_rc5_32_12_16_cbc","text":""},{"location":"man3/EVP_rc5_32_12_16_cbc/#name","title":"NAME","text":"<p>EVP_rc5_32_12_16_cbc, EVP_rc5_32_12_16_cfb, EVP_rc5_32_12_16_cfb64, EVP_rc5_32_12_16_ecb, EVP_rc5_32_12_16_ofb - EVP RC5 cipher</p>"},{"location":"man3/EVP_rc5_32_12_16_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_rc5_32_12_16_cbc(void)\nconst EVP_CIPHER *EVP_rc5_32_12_16_cfb(void)\nconst EVP_CIPHER *EVP_rc5_32_12_16_cfb64(void)\nconst EVP_CIPHER *EVP_rc5_32_12_16_ecb(void)\nconst EVP_CIPHER *EVP_rc5_32_12_16_ofb(void)\n</code></pre>"},{"location":"man3/EVP_rc5_32_12_16_cbc/#description","title":"DESCRIPTION","text":"<p>The RC5 encryption algorithm for EVP.</p> <ul> <li> <p>EVP_rc5_32_12_16_cbc(), EVP_rc5_32_12_16_cfb(), EVP_rc5_32_12_16_cfb64(), EVP_rc5_32_12_16_ecb(), EVP_rc5_32_12_16_ofb()</p> <p>RC5 encryption algorithm in CBC, CFB, ECB and OFB modes respectively. This is a variable key length cipher with an additional \"number of rounds\" parameter. By default the key length is set to 128 bits and 12 rounds. Alternative key lengths can be set using EVP_CIPHER_CTX_set_key_length(3). The maximum key length is 2040 bits.</p> <p>The following rc5 specific _ctrl_s are supported (see EVP_CIPHER_CTX_ctrl(3)).</p> <ul> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_SET_RC5_ROUNDS, rounds, NULL)</p> <p>Sets the number of rounds to rounds. This must be one of RC5_8_ROUNDS, RC5_12_ROUNDS or RC5_16_ROUNDS.</p> </li> <li> <p>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GET_RC5_ROUNDS, 0, &amp;rounds)</p> <p>Stores the number of rounds currently configured in *rounds where *rounds is an int.</p> </li> </ul> </li> </ul>"},{"location":"man3/EVP_rc5_32_12_16_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_rc5_32_12_16_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_rc5_32_12_16_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_ripemd160/","title":"EVP_ripemd160","text":""},{"location":"man3/EVP_ripemd160/#name","title":"NAME","text":"<p>EVP_ripemd160 - RIPEMD160 For EVP</p>"},{"location":"man3/EVP_ripemd160/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_ripemd160(void);\n</code></pre>"},{"location":"man3/EVP_ripemd160/#description","title":"DESCRIPTION","text":"<p>RIPEMD-160 is a cryptographic hash function first published in 1996 belonging to the RIPEMD family (RACE Integrity Primitives Evaluation Message Digest).</p> <ul> <li> <p>EVP_ripemd160()</p> <p>The RIPEMD-160 algorithm which produces a 160-bit output from a given input.</p> </li> </ul>"},{"location":"man3/EVP_ripemd160/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_ripemd160/#conforming-to","title":"CONFORMING TO","text":"<p>ISO/IEC 10118-3:2016 Dedicated Hash-Function 1 (RIPEMD-160).</p>"},{"location":"man3/EVP_ripemd160/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_ripemd160/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_seed_cbc/","title":"EVP_seed_cbc","text":""},{"location":"man3/EVP_seed_cbc/#name","title":"NAME","text":"<p>EVP_seed_cbc, EVP_seed_cfb, EVP_seed_cfb128, EVP_seed_ecb, EVP_seed_ofb - EVP SEED cipher</p>"},{"location":"man3/EVP_seed_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_seed_cbc(void)\nconst EVP_CIPHER *EVP_seed_cfb(void)\nconst EVP_CIPHER *EVP_seed_cfb128(void)\nconst EVP_CIPHER *EVP_seed_ecb(void)\nconst EVP_CIPHER *EVP_seed_ofb(void)\n</code></pre>"},{"location":"man3/EVP_seed_cbc/#description","title":"DESCRIPTION","text":"<p>The SEED encryption algorithm for EVP.</p> <p>All modes below use a key length of 128 bits and acts on blocks of 128-bits.</p> <ul> <li> <p>EVP_seed_cbc(), EVP_seed_cfb(), EVP_seed_cfb128(), EVP_seed_ecb(), EVP_seed_ofb()</p> <p>The SEED encryption algorithm in CBC, CFB, ECB and OFB modes respectively.</p> </li> </ul>"},{"location":"man3/EVP_seed_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return an EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_seed_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_seed_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_sha1/","title":"EVP_sha1","text":""},{"location":"man3/EVP_sha1/#name","title":"NAME","text":"<p>EVP_sha1 - SHA-1 For EVP</p>"},{"location":"man3/EVP_sha1/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_sha1(void);\n</code></pre>"},{"location":"man3/EVP_sha1/#description","title":"DESCRIPTION","text":"<p>SHA-1 (Secure Hash Algorithm 1) is a cryptographic hash function standardized in NIST FIPS 180-4. The algorithm was designed by the United States National Security Agency and initially published in 1995.</p> <ul> <li> <p>EVP_sha1()</p> <p>The SHA-1 algorithm which produces a 160-bit output from a given input.</p> </li> </ul>"},{"location":"man3/EVP_sha1/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_sha1/#conforming-to","title":"CONFORMING TO","text":"<p>NIST FIPS 180-4.</p>"},{"location":"man3/EVP_sha1/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_sha1/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_sha224/","title":"EVP_sha224","text":""},{"location":"man3/EVP_sha224/#name","title":"NAME","text":"<p>EVP_sha224, EVP_sha256, EVP_sha512_224, EVP_sha512_256, EVP_sha384, EVP_sha512 - SHA-2 For EVP</p>"},{"location":"man3/EVP_sha224/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_sha224(void);\nconst EVP_MD *EVP_sha256(void);\nconst EVP_MD *EVP_sha512_224(void);\nconst EVP_MD *EVP_sha512_256(void);\nconst EVP_MD *EVP_sha384(void);\nconst EVP_MD *EVP_sha512(void);\n</code></pre>"},{"location":"man3/EVP_sha224/#description","title":"DESCRIPTION","text":"<p>SHA-2 (Secure Hash Algorithm 2) is a family of cryptographic hash functions standardized in NIST FIPS 180-4, first published in 2001.</p> <ul> <li> <p>EVP_sha224(), EVP_sha256(), EVP_sha512_224, EVP_sha512_256, EVP_sha384(), EVP_sha512()</p> <p>The SHA-2 SHA-224, SHA-256, SHA-512/224, SHA512/256, SHA-384 and SHA-512 algorithms, which generate 224, 256, 224, 256, 384 and 512 bits respectively of output from a given input.</p> <p>The two algorithms: SHA-512/224 and SHA512/256 are truncated forms of the SHA-512 algorithm. They are distinct from SHA-224 and SHA-256 even though their outputs are of the same size.</p> </li> </ul>"},{"location":"man3/EVP_sha224/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_sha224/#conforming-to","title":"CONFORMING TO","text":"<p>NIST FIPS 180-4.</p>"},{"location":"man3/EVP_sha224/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_sha224/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_sha3_224/","title":"EVP_sha3_224","text":""},{"location":"man3/EVP_sha3_224/#name","title":"NAME","text":"<p>EVP_sha3_224, EVP_sha3_256, EVP_sha3_384, EVP_sha3_512, EVP_shake128, EVP_shake256 - SHA-3 For EVP</p>"},{"location":"man3/EVP_sha3_224/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_sha3_224(void);\nconst EVP_MD *EVP_sha3_256(void);\nconst EVP_MD *EVP_sha3_384(void);\nconst EVP_MD *EVP_sha3_512(void);\n\nconst EVP_MD *EVP_shake128(void);\nconst EVP_MD *EVP_shake256(void);\n</code></pre>"},{"location":"man3/EVP_sha3_224/#description","title":"DESCRIPTION","text":"<p>SHA-3 (Secure Hash Algorithm 3) is a family of cryptographic hash functions standardized in NIST FIPS 202, first published in 2015. It is based on the Keccak algorithm.</p> <ul> <li> <p>EVP_sha3_224(), EVP_sha3_256(), EVP_sha3_384(), EVP_sha3_512()</p> <p>The SHA-3 SHA-3-224, SHA-3-256, SHA-3-384, and SHA-3-512 algorithms respectively. They produce 224, 256, 384 and 512 bits of output from a given input.</p> </li> <li> <p>EVP_shake128(), EVP_shake256()</p> <p>The SHAKE-128 and SHAKE-256 Extendable Output Functions (XOF) that can generate a variable hash length.</p> <p>Specifically, EVP_shake128 provides an overall security of 128 bits, while EVP_shake256 provides that of 256 bits.</p> </li> </ul>"},{"location":"man3/EVP_sha3_224/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_sha3_224/#conforming-to","title":"CONFORMING TO","text":"<p>NIST FIPS 202.</p>"},{"location":"man3/EVP_sha3_224/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_sha3_224/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_sm3/","title":"EVP_sm3","text":""},{"location":"man3/EVP_sm3/#name","title":"NAME","text":"<p>EVP_sm3 - SM3 for EVP</p>"},{"location":"man3/EVP_sm3/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_sm3(void);\n</code></pre>"},{"location":"man3/EVP_sm3/#description","title":"DESCRIPTION","text":"<p>SM3 is a cryptographic hash function with a 256-bit output, defined in GB/T 32905-2016.</p> <ul> <li> <p>EVP_sm3()</p> <p>The SM3 hash function.</p> </li> </ul>"},{"location":"man3/EVP_sm3/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_sm3/#conforming-to","title":"CONFORMING TO","text":"<p>GB/T 32905-2016 and GM/T 0004-2012.</p>"},{"location":"man3/EVP_sm3/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_sm3/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved. Copyright 2017 Ribose Inc. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_sm4_cbc/","title":"EVP_sm4_cbc","text":""},{"location":"man3/EVP_sm4_cbc/#name","title":"NAME","text":"<p>EVP_sm4_cbc, EVP_sm4_ecb, EVP_sm4_cfb, EVP_sm4_cfb128, EVP_sm4_ofb, EVP_sm4_ctr - EVP SM4 cipher</p>"},{"location":"man3/EVP_sm4_cbc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_CIPHER *EVP_sm4_cbc(void);\nconst EVP_CIPHER *EVP_sm4_ecb(void);\nconst EVP_CIPHER *EVP_sm4_cfb(void);\nconst EVP_CIPHER *EVP_sm4_cfb128(void);\nconst EVP_CIPHER *EVP_sm4_ofb(void);\nconst EVP_CIPHER *EVP_sm4_ctr(void);\n</code></pre>"},{"location":"man3/EVP_sm4_cbc/#description","title":"DESCRIPTION","text":"<p>The SM4 blockcipher (GB/T 32907-2016) for EVP.</p> <p>All modes below use a key length of 128 bits and acts on blocks of 128 bits.</p> <ul> <li> <p>EVP_sm4_cbc(), EVP_sm4_ecb(), EVP_sm4_cfb(), EVP_sm4_cfb128(), EVP_sm4_ofb(), EVP_sm4_ctr()</p> <p>The SM4 blockcipher with a 128-bit key in CBC, ECB, CFB, OFB and CTR modes respectively.</p> </li> </ul>"},{"location":"man3/EVP_sm4_cbc/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_CIPHER structure that contains the implementation of the symmetric cipher. See EVP_CIPHER_meth_new(3) for details of the EVP_CIPHER structure.</p>"},{"location":"man3/EVP_sm4_cbc/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_EncryptInit(3), EVP_CIPHER_meth_new(3)</p>"},{"location":"man3/EVP_sm4_cbc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved. Copyright 2017 Ribose Inc. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/EVP_whirlpool/","title":"EVP_whirlpool","text":""},{"location":"man3/EVP_whirlpool/#name","title":"NAME","text":"<p>EVP_whirlpool - WHIRLPOOL For EVP</p>"},{"location":"man3/EVP_whirlpool/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nconst EVP_MD *EVP_whirlpool(void);\n</code></pre>"},{"location":"man3/EVP_whirlpool/#description","title":"DESCRIPTION","text":"<p>WHIRLPOOL is a cryptographic hash function standardized in ISO/IEC 10118-3:2004 designed by Vincent Rijmen and Paulo S. L. M. Barreto.</p> <ul> <li> <p>EVP_whirlpool()</p> <p>The WHIRLPOOL algorithm that produces a message digest of 512-bits from a given input.</p> </li> </ul>"},{"location":"man3/EVP_whirlpool/#return-values","title":"RETURN VALUES","text":"<p>These functions return a EVP_MD structure that contains the implementation of the symmetric cipher. See EVP_MD_meth_new(3) for details of the EVP_MD structure.</p>"},{"location":"man3/EVP_whirlpool/#conforming-to","title":"CONFORMING TO","text":"<p>ISO/IEC 10118-3:2004.</p>"},{"location":"man3/EVP_whirlpool/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3)</p>"},{"location":"man3/EVP_whirlpool/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/HMAC/","title":"HMAC","text":""},{"location":"man3/HMAC/#name","title":"NAME","text":"<p>HMAC, HMAC_CTX_new, HMAC_CTX_reset, HMAC_CTX_free, HMAC_Init, HMAC_Init_ex, HMAC_Update, HMAC_Final, HMAC_CTX_copy, HMAC_CTX_set_flags, HMAC_CTX_get_md, HMAC_size - HMAC message authentication code</p>"},{"location":"man3/HMAC/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/hmac.h&gt;\n\nunsigned char *HMAC(const EVP_MD *evp_md, const void *key,\n                    int key_len, const unsigned char *d, size_t n,\n                    unsigned char *md, unsigned int *md_len);\n\nHMAC_CTX *HMAC_CTX_new(void);\nint HMAC_CTX_reset(HMAC_CTX *ctx);\n\nint HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int key_len,\n                 const EVP_MD *md, ENGINE *impl);\nint HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len);\nint HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len);\n\nvoid HMAC_CTX_free(HMAC_CTX *ctx);\n\nint HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx);\nvoid HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags);\nconst EVP_MD *HMAC_CTX_get_md(const HMAC_CTX *ctx);\n\nsize_t HMAC_size(const HMAC_CTX *e);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nint HMAC_Init(HMAC_CTX *ctx, const void *key, int key_len,\n              const EVP_MD *md);\n#endif\n</code></pre>"},{"location":"man3/HMAC/#description","title":"DESCRIPTION","text":"<p>HMAC is a MAC (message authentication code), i.e. a keyed hash function used for message authentication, which is based on a hash function.</p> <p>HMAC() computes the message authentication code of the n bytes at d using the hash function evp_md and the key key which is key_len bytes long.</p> <p>It places the result in md (which must have space for the output of the hash function, which is no more than EVP_MAX_MD_SIZE bytes). If md is NULL, the digest is placed in a static array.  The size of the output is placed in md_len, unless it is NULL. Note: passing a NULL value for md  to use the static array is not thread safe.</p> <p>evp_md is a message digest such as EVP_sha1(), EVP_ripemd160() etc. HMAC does not support variable output length digests such as EVP_shake128() and EVP_shake256().</p> <p>HMAC_CTX_new() creates a new HMAC_CTX in heap memory.</p> <p>HMAC_CTX_reset() zeros an existing HMAC_CTX and associated resources, making it suitable for new computations as if it was newly created with HMAC_CTX_new().</p> <p>HMAC_CTX_free() erases the key and other data from the HMAC_CTX, releases any associated resources and finally frees the HMAC_CTX itself.</p> <p>The following functions may be used if the message is not completely stored in memory:</p> <p>HMAC_Init_ex() initializes or reuses a HMAC_CTX structure to use the hash function evp_md and key key. If both are NULL, or if key is NULL and evp_md is the same as the previous call, then the existing key is reused. ctx must have been created with HMAC_CTX_new() before the first use of an HMAC_CTX in this function.</p> <p>If HMAC_Init_ex() is called with key NULL and evp_md is not the same as the previous digest used by ctx then an error is returned because reuse of an existing key with a different digest is not supported.</p> <p>HMAC_Init() initializes a HMAC_CTX structure to use the hash function evp_md and the key key which is key_len bytes long.</p> <p>HMAC_Update() can be called repeatedly with chunks of the message to be authenticated (len bytes at data).</p> <p>HMAC_Final() places the message authentication code in md, which must have space for the hash function output.</p> <p>HMAC_CTX_copy() copies all of the internal state from sctx into dctx.</p> <p>HMAC_CTX_set_flags() applies the specified flags to the internal EVP_MD_CTXs. These flags have the same meaning as for EVP_MD_CTX_set_flags(3).</p> <p>HMAC_CTX_get_md() returns the EVP_MD that has previously been set for the supplied HMAC_CTX.</p> <p>HMAC_size() returns the length in bytes of the underlying hash function output.</p>"},{"location":"man3/HMAC/#return-values","title":"RETURN VALUES","text":"<p>HMAC() returns a pointer to the message authentication code or NULL if an error occurred.</p> <p>HMAC_CTX_new() returns a pointer to a new HMAC_CTX on success or NULL if an error occurred.</p> <p>HMAC_CTX_reset(), HMAC_Init_ex(), HMAC_Update(), HMAC_Final() and HMAC_CTX_copy() return 1 for success or 0 if an error occurred.</p> <p>HMAC_CTX_get_md() return the EVP_MD previously set for the supplied HMAC_CTX or NULL if no EVP_MD has been set.</p> <p>HMAC_size() returns the length in bytes of the underlying hash function output or zero on error.</p>"},{"location":"man3/HMAC/#conforming-to","title":"CONFORMING TO","text":"<p>RFC 2104</p>"},{"location":"man3/HMAC/#see-also","title":"SEE ALSO","text":"<p>SHA1(3), evp(7)</p>"},{"location":"man3/HMAC/#history","title":"HISTORY","text":"<p>HMAC_CTX_init() was replaced with HMAC_CTX_reset() in OpenSSL 1.1.0.</p> <p>HMAC_CTX_cleanup() existed in OpenSSL before version 1.1.0.</p> <p>HMAC_CTX_new(), HMAC_CTX_free() and HMAC_CTX_get_md() are new in OpenSSL 1.1.0.</p> <p>HMAC_Init_ex(), HMAC_Update() and HMAC_Final() did not return values in OpenSSL before version 1.0.0.</p>"},{"location":"man3/HMAC/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/MD5/","title":"MD5","text":""},{"location":"man3/MD5/#name","title":"NAME","text":"<p>MD2, MD4, MD5, MD2_Init, MD2_Update, MD2_Final, MD4_Init, MD4_Update, MD4_Final, MD5_Init, MD5_Update, MD5_Final - MD2, MD4, and MD5 hash functions</p>"},{"location":"man3/MD5/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/md2.h&gt;\n\nunsigned char *MD2(const unsigned char *d, unsigned long n, unsigned char *md);\n\nint MD2_Init(MD2_CTX *c);\nint MD2_Update(MD2_CTX *c, const unsigned char *data, unsigned long len);\nint MD2_Final(unsigned char *md, MD2_CTX *c);\n\n\n#include &lt;openssl/md4.h&gt;\n\nunsigned char *MD4(const unsigned char *d, unsigned long n, unsigned char *md);\n\nint MD4_Init(MD4_CTX *c);\nint MD4_Update(MD4_CTX *c, const void *data, unsigned long len);\nint MD4_Final(unsigned char *md, MD4_CTX *c);\n\n\n#include &lt;openssl/md5.h&gt;\n\nunsigned char *MD5(const unsigned char *d, unsigned long n, unsigned char *md);\n\nint MD5_Init(MD5_CTX *c);\nint MD5_Update(MD5_CTX *c, const void *data, unsigned long len);\nint MD5_Final(unsigned char *md, MD5_CTX *c);\n</code></pre>"},{"location":"man3/MD5/#description","title":"DESCRIPTION","text":"<p>MD2, MD4, and MD5 are cryptographic hash functions with a 128 bit output.</p> <p>MD2(), MD4(), and MD5() compute the MD2, MD4, and MD5 message digest of the n bytes at d and place it in md (which must have space for MD2_DIGEST_LENGTH == MD4_DIGEST_LENGTH == MD5_DIGEST_LENGTH == 16 bytes of output). If md is NULL, the digest is placed in a static array.</p> <p>The following functions may be used if the message is not completely stored in memory:</p> <p>MD2_Init() initializes a MD2_CTX structure.</p> <p>MD2_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at data).</p> <p>MD2_Final() places the message digest in md, which must have space for MD2_DIGEST_LENGTH == 16 bytes of output, and erases the MD2_CTX.</p> <p>MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() are analogous using an MD4_CTX and MD5_CTX structure.</p> <p>Applications should use the higher level functions EVP_DigestInit(3) etc. instead of calling the hash functions directly.</p>"},{"location":"man3/MD5/#note","title":"NOTE","text":"<p>MD2, MD4, and MD5 are recommended only for compatibility with existing applications. In new applications, SHA-1 or RIPEMD-160 should be preferred.</p>"},{"location":"man3/MD5/#return-values","title":"RETURN VALUES","text":"<p>MD2(), MD4(), and MD5() return pointers to the hash value.</p> <p>MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.</p>"},{"location":"man3/MD5/#conforming-to","title":"CONFORMING TO","text":"<p>RFC 1319, RFC 1320, RFC 1321</p>"},{"location":"man3/MD5/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestInit(3)</p>"},{"location":"man3/MD5/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/MDC2_Init/","title":"MDC2_Init","text":""},{"location":"man3/MDC2_Init/#name","title":"NAME","text":"<p>MDC2, MDC2_Init, MDC2_Update, MDC2_Final - MDC2 hash function</p>"},{"location":"man3/MDC2_Init/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/mdc2.h&gt;\n\nunsigned char *MDC2(const unsigned char *d, unsigned long n,\n                    unsigned char *md);\n\nint MDC2_Init(MDC2_CTX *c);\nint MDC2_Update(MDC2_CTX *c, const unsigned char *data,\n                unsigned long len);\nint MDC2_Final(unsigned char *md, MDC2_CTX *c);\n</code></pre>"},{"location":"man3/MDC2_Init/#description","title":"DESCRIPTION","text":"<p>MDC2 is a method to construct hash functions with 128 bit output from block ciphers.  These functions are an implementation of MDC2 with DES.</p> <p>MDC2() computes the MDC2 message digest of the n bytes at d and places it in md (which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output). If md is NULL, the digest is placed in a static array.</p> <p>The following functions may be used if the message is not completely stored in memory:</p> <p>MDC2_Init() initializes a MDC2_CTX structure.</p> <p>MDC2_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at data).</p> <p>MDC2_Final() places the message digest in md, which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output, and erases the MDC2_CTX.</p> <p>Applications should use the higher level functions EVP_DigestInit(3) etc. instead of calling the hash functions directly.</p>"},{"location":"man3/MDC2_Init/#return-values","title":"RETURN VALUES","text":"<p>MDC2() returns a pointer to the hash value.</p> <p>MDC2_Init(), MDC2_Update() and MDC2_Final() return 1 for success, 0 otherwise.</p>"},{"location":"man3/MDC2_Init/#conforming-to","title":"CONFORMING TO","text":"<p>ISO/IEC 10118-2:2000 Hash-Function 2, with DES as the underlying block cipher.</p>"},{"location":"man3/MDC2_Init/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestInit(3)</p>"},{"location":"man3/MDC2_Init/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OBJ_nid2obj/","title":"OBJ_nid2obj","text":""},{"location":"man3/OBJ_nid2obj/#name","title":"NAME","text":"<p>i2t_ASN1_OBJECT, OBJ_length, OBJ_get0_data, OBJ_nid2obj, OBJ_nid2ln, OBJ_nid2sn, OBJ_obj2nid, OBJ_txt2nid, OBJ_ln2nid, OBJ_sn2nid, OBJ_cmp, OBJ_dup, OBJ_txt2obj, OBJ_obj2txt, OBJ_create, OBJ_cleanup - ASN1 object utility functions</p>"},{"location":"man3/OBJ_nid2obj/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/objects.h&gt;\n\nASN1_OBJECT *OBJ_nid2obj(int n);\nconst char *OBJ_nid2ln(int n);\nconst char *OBJ_nid2sn(int n);\n\nint OBJ_obj2nid(const ASN1_OBJECT *o);\nint OBJ_ln2nid(const char *ln);\nint OBJ_sn2nid(const char *sn);\n\nint OBJ_txt2nid(const char *s);\n\nASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name);\nint OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);\n\nint i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);\n\nint OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);\nASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o);\n\nint OBJ_create(const char *oid, const char *sn, const char *ln);\n\nsize_t OBJ_length(const ASN1_OBJECT *obj);\nconst unsigned char *OBJ_get0_data(const ASN1_OBJECT *obj);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid OBJ_cleanup(void)\n#endif\n</code></pre>"},{"location":"man3/OBJ_nid2obj/#description","title":"DESCRIPTION","text":"<p>The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type. For convenience, OIDs are usually represented in source code as numeric identifiers, or _NID_s.  OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants.  For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants.</p> <p>OBJ_nid2obj(), OBJ_nid2ln() and OBJ_nid2sn() convert the NID n to an ASN1_OBJECT structure, its long name and its short name respectively, or NULL if an error occurred.</p> <p>OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() return the corresponding NID for the object o, the long name &lt;ln&gt; or the short name &lt;sn&gt; respectively or NID_undef if an error occurred.</p> <p>OBJ_txt2nid() returns NID corresponding to text string s. s can be a long name, a short name or the numerical representation of an object.</p> <p>OBJ_txt2obj() converts the text string s into an ASN1_OBJECT structure. If no_name is 0 then long names and short names will be interpreted as well as numerical forms. If no_name is 1 only the numerical form is acceptable.</p> <p>OBJ_obj2txt() converts the ASN1_OBJECT a into a textual representation. Unless buf is NULL, the representation is written as a NUL-terminated string to buf, where at most buf_len bytes are written, truncating the result if necessary. In any case it returns the total string length, excluding the NUL character, required for non-truncated representation, or -1 on error. If no_name is 0 then if the object has a long or short name then that will be used, otherwise the numerical form will be used. If no_name is 1 then the numerical form will always be used.</p> <p>i2t_ASN1_OBJECT() is the same as OBJ_obj2txt() with the no_name set to zero.</p> <p>OBJ_cmp() compares a to b. If the two are identical 0 is returned.</p> <p>OBJ_dup() returns a copy of o.</p> <p>OBJ_create() adds a new object to the internal table. oid is the numerical form of the object, sn the short name and ln the long name. A new NID is returned for the created object in case of success and NID_undef in case of failure.</p> <p>OBJ_length() returns the size of the content octets of obj.</p> <p>OBJ_get0_data() returns a pointer to the content octets of obj. The returned pointer is an internal pointer which must not be freed.</p> <p>OBJ_cleanup() releases any resources allocated by creating new objects.</p>"},{"location":"man3/OBJ_nid2obj/#notes","title":"NOTES","text":"<p>Objects in OpenSSL can have a short name, a long name and a numerical identifier (NID) associated with them. A standard set of objects is represented in an internal table. The appropriate values are defined in the header file objects.h.</p> <p>For example the OID for commonName has the following definitions:</p> <pre><code>#define SN_commonName                   \"CN\"\n#define LN_commonName                   \"commonName\"\n#define NID_commonName                  13\n</code></pre> <p>New objects can be added by calling OBJ_create().</p> <p>Table objects have certain advantages over other objects: for example their NIDs can be used in a C language switch statement. They are also static constant structures which are shared: that is there is only a single constant structure for each table object.</p> <p>Objects which are not in the table have the NID value NID_undef.</p> <p>Objects do not need to be in the internal tables to be processed, the functions OBJ_txt2obj() and OBJ_obj2txt() can process the numerical form of an OID.</p> <p>Some objects are used to represent algorithms which do not have a corresponding ASN.1 OBJECT IDENTIFIER encoding (for example no OID currently exists for a particular algorithm). As a result they cannot be encoded or decoded as part of ASN.1 structures. Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length() is not zero.</p> <p>These functions cannot return const because an ASN1_OBJECT can represent both an internal, constant, OID and a dynamically-created one. The latter cannot be constant because it needs to be freed after use.</p>"},{"location":"man3/OBJ_nid2obj/#return-values","title":"RETURN VALUES","text":"<p>OBJ_nid2obj() returns an ASN1_OBJECT structure or NULL is an error occurred.</p> <p>OBJ_nid2ln() and OBJ_nid2sn() returns a valid string or NULL on error.</p> <p>OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or NID_undef on error.</p> <p>OBJ_add_sigid() returns 1 on success or 0 on error.</p> <p>i2t_ASN1_OBJECT() an OBJ_obj2txt() return -1 on error. On success, they return the length of the string written to buf if buf is not NULL and buf_len is big enough, otherwise the total string length. Note that this does not count the trailing NUL character.</p>"},{"location":"man3/OBJ_nid2obj/#examples","title":"EXAMPLES","text":"<p>Create an object for commonName:</p> <pre><code>ASN1_OBJECT *o = OBJ_nid2obj(NID_commonName);\n</code></pre> <p>Check if an object is commonName</p> <pre><code>if (OBJ_obj2nid(obj) == NID_commonName)\n    /* Do something */\n</code></pre> <p>Create a new NID and initialize an object from it:</p> <pre><code>int new_nid = OBJ_create(\"1.2.3.4\", \"NewOID\", \"New Object Identifier\");\nASN1_OBJECT *obj = OBJ_nid2obj(new_nid);\n</code></pre> <p>Create a new object directly:</p> <pre><code>obj = OBJ_txt2obj(\"1.2.3.4\", 1);\n</code></pre>"},{"location":"man3/OBJ_nid2obj/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/OBJ_nid2obj/#history","title":"HISTORY","text":"<p>OBJ_cleanup() was deprecated in OpenSSL 1.1.0 by OPENSSL_init_crypto(3) and should not be used.</p>"},{"location":"man3/OBJ_nid2obj/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OCSP_REQUEST_new/","title":"OCSP_REQUEST_new","text":""},{"location":"man3/OCSP_REQUEST_new/#name","title":"NAME","text":"<p>OCSP_REQUEST_new, OCSP_REQUEST_free, OCSP_request_add0_id, OCSP_request_sign, OCSP_request_add1_cert, OCSP_request_onereq_count, OCSP_request_onereq_get0 - OCSP request functions</p>"},{"location":"man3/OCSP_REQUEST_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ocsp.h&gt;\n\nOCSP_REQUEST *OCSP_REQUEST_new(void);\nvoid OCSP_REQUEST_free(OCSP_REQUEST *req);\n\nOCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid);\n\nint OCSP_request_sign(OCSP_REQUEST *req,\n                      X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,\n                      STACK_OF(X509) *certs, unsigned long flags);\n\nint OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert);\n\nint OCSP_request_onereq_count(OCSP_REQUEST *req);\nOCSP_ONEREQ *OCSP_request_onereq_get0(OCSP_REQUEST *req, int i);\n</code></pre>"},{"location":"man3/OCSP_REQUEST_new/#description","title":"DESCRIPTION","text":"<p>OCSP_REQUEST_new() allocates and returns an empty OCSP_REQUEST structure.</p> <p>OCSP_REQUEST_free() frees up the request structure req.</p> <p>OCSP_request_add0_id() adds certificate ID cid to req. It returns the OCSP_ONEREQ structure added so an application can add additional extensions to the request. The id parameter MUST NOT be freed up after the operation.</p> <p>OCSP_request_sign() signs OCSP request req using certificate signer, private key key, digest dgst and additional certificates certs. If the flags option OCSP_NOCERTS is set then no certificates will be included in the request.</p> <p>OCSP_request_add1_cert() adds certificate cert to request req. The application is responsible for freeing up cert after use.</p> <p>OCSP_request_onereq_count() returns the total number of OCSP_ONEREQ structures in req.</p> <p>OCSP_request_onereq_get0() returns an internal pointer to the OCSP_ONEREQ contained in req of index i. The index value i runs from 0 to OCSP_request_onereq_count(req) - 1.</p>"},{"location":"man3/OCSP_REQUEST_new/#return-values","title":"RETURN VALUES","text":"<p>OCSP_REQUEST_new() returns an empty OCSP_REQUEST structure or NULL if an error occurred.</p> <p>OCSP_request_add0_id() returns the OCSP_ONEREQ structure containing cid or NULL if an error occurred.</p> <p>OCSP_request_sign() and OCSP_request_add1_cert() return 1 for success and 0 for failure.</p> <p>OCSP_request_onereq_count() returns the total number of OCSP_ONEREQ structures in req.</p> <p>OCSP_request_onereq_get0() returns a pointer to an OCSP_ONEREQ structure or NULL if the index value is out or range.</p>"},{"location":"man3/OCSP_REQUEST_new/#notes","title":"NOTES","text":"<p>An OCSP request structure contains one or more OCSP_ONEREQ structures corresponding to each certificate.</p> <p>OCSP_request_onereq_count() and OCSP_request_onereq_get0() are mainly used by OCSP responders.</p>"},{"location":"man3/OCSP_REQUEST_new/#examples","title":"EXAMPLES","text":"<p>Create an OCSP_REQUEST structure for certificate cert with issuer issuer:</p> <pre><code>OCSP_REQUEST *req;\nOCSP_ID *cid;\n\nreq = OCSP_REQUEST_new();\nif (req == NULL)\n   /* error */\ncid = OCSP_cert_to_id(EVP_sha1(), cert, issuer);\nif (cid == NULL)\n   /* error */\n\nif (OCSP_REQUEST_add0_id(req, cid) == NULL)\n   /* error */\n\n/* Do something with req, e.g. query responder */\n\nOCSP_REQUEST_free(req);\n</code></pre>"},{"location":"man3/OCSP_REQUEST_new/#see-also","title":"SEE ALSO","text":"<p>crypto(7), OCSP_cert_to_id(3), OCSP_request_add1_nonce(3), OCSP_resp_find_status(3), OCSP_response_status(3), OCSP_sendreq_new(3)</p>"},{"location":"man3/OCSP_REQUEST_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OCSP_cert_to_id/","title":"OCSP_cert_to_id","text":""},{"location":"man3/OCSP_cert_to_id/#name","title":"NAME","text":"<p>OCSP_cert_to_id, OCSP_cert_id_new, OCSP_CERTID_free, OCSP_id_issuer_cmp, OCSP_id_cmp, OCSP_id_get0_info - OCSP certificate ID utility functions</p>"},{"location":"man3/OCSP_cert_to_id/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ocsp.h&gt;\n\nOCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst,\n                             X509 *subject, X509 *issuer);\n\nOCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,\n                              X509_NAME *issuerName,\n                              ASN1_BIT_STRING *issuerKey,\n                              ASN1_INTEGER *serialNumber);\n\nvoid OCSP_CERTID_free(OCSP_CERTID *id);\n\nint OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);\nint OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);\n\nint OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,\n                      ASN1_OCTET_STRING **pikeyHash,\n                      ASN1_INTEGER **pserial, OCSP_CERTID *cid);\n</code></pre>"},{"location":"man3/OCSP_cert_to_id/#description","title":"DESCRIPTION","text":"<p>OCSP_cert_to_id() creates and returns a new OCSP_CERTID structure using message digest dgst for certificate subject with issuer issuer. If dgst is NULL then SHA1 is used.</p> <p>OCSP_cert_id_new() creates and returns a new OCSP_CERTID using dgst and issuer name issuerName, issuer key hash issuerKey and serial number serialNumber.</p> <p>OCSP_CERTID_free() frees up id.</p> <p>OCSP_id_cmp() compares OCSP_CERTID a and b.</p> <p>OCSP_id_issuer_cmp() compares only the issuer name of OCSP_CERTID a and b.</p> <p>OCSP_id_get0_info() returns the issuer name hash, hash OID, issuer key hash and serial number contained in cid. If any of the values are not required the corresponding parameter can be set to NULL.</p>"},{"location":"man3/OCSP_cert_to_id/#return-values","title":"RETURN VALUES","text":"<p>OCSP_cert_to_id() and OCSP_cert_id_new() return either a pointer to a valid OCSP_CERTID structure or NULL if an error occurred.</p> <p>OCSP_id_cmp() and OCSP_id_issuer_cmp() returns zero for a match and nonzero otherwise.</p> <p>OCSP_CERTID_free() does not return a value.</p> <p>OCSP_id_get0_info() returns 1 for success and 0 for failure.</p>"},{"location":"man3/OCSP_cert_to_id/#notes","title":"NOTES","text":"<p>OCSP clients will typically only use OCSP_cert_to_id() or OCSP_cert_id_new(): the other functions are used by responder applications.</p> <p>The values returned by OCSP_id_get0_info() are internal pointers and MUST NOT be freed up by an application: they will be freed when the corresponding OCSP_CERTID structure is freed.</p>"},{"location":"man3/OCSP_cert_to_id/#see-also","title":"SEE ALSO","text":"<p>crypto(7), OCSP_request_add1_nonce(3), OCSP_REQUEST_new(3), OCSP_resp_find_status(3), OCSP_response_status(3), OCSP_sendreq_new(3)</p>"},{"location":"man3/OCSP_cert_to_id/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OCSP_request_add1_nonce/","title":"OCSP_request_add1_nonce","text":""},{"location":"man3/OCSP_request_add1_nonce/#name","title":"NAME","text":"<p>OCSP_request_add1_nonce, OCSP_basic_add1_nonce, OCSP_check_nonce, OCSP_copy_nonce - OCSP nonce functions</p>"},{"location":"man3/OCSP_request_add1_nonce/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ocsp.h&gt;\n\nint OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len);\nint OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len);\nint OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req);\nint OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *resp);\n</code></pre>"},{"location":"man3/OCSP_request_add1_nonce/#description","title":"DESCRIPTION","text":"<p>OCSP_request_add1_nonce() adds a nonce of value val and length len to OCSP request req. If val is NULL a random nonce is used. If len is zero or negative a default length will be used (currently 16 bytes).</p> <p>OCSP_basic_add1_nonce() is identical to OCSP_request_add1_nonce() except it adds a nonce to OCSP basic response resp.</p> <p>OCSP_check_nonce() compares the nonce value in req and resp.</p> <p>OCSP_copy_nonce() copies any nonce value present in req to resp.</p>"},{"location":"man3/OCSP_request_add1_nonce/#return-values","title":"RETURN VALUES","text":"<p>OCSP_request_add1_nonce() and OCSP_basic_add1_nonce() return 1 for success and 0 for failure.</p> <p>OCSP_copy_nonce() returns 1 if a nonce was successfully copied, 2 if no nonce was present in req and 0 if an error occurred.</p> <p>OCSP_check_nonce() returns the result of the nonce comparison between req and resp. The return value indicates the result of the comparison.  If nonces are present and equal 1 is returned. If the nonces are absent 2 is returned. If a nonce is present in the response only 3 is returned. If nonces are present and unequal 0 is returned. If the nonce is present in the request only then -1 is returned.</p>"},{"location":"man3/OCSP_request_add1_nonce/#notes","title":"NOTES","text":"<p>For most purposes the nonce value in a request is set to a random value so the val parameter in OCSP_request_add1_nonce() is usually NULL.</p> <p>An OCSP nonce is typically added to an OCSP request to thwart replay attacks by checking the same nonce value appears in the response.</p> <p>Some responders may include a nonce in all responses even if one is not supplied.</p> <p>Some responders cache OCSP responses and do not sign each response for performance reasons. As a result they do not support nonces.</p> <p>The return values of OCSP_check_nonce() can be checked to cover each case.  A positive return value effectively indicates success: nonces are both present and match, both absent or present in the response only. A nonzero return additionally covers the case where the nonce is present in the request only: this will happen if the responder doesn't support nonces. A zero return value indicates present and mismatched nonces: this should be treated as an error condition.</p>"},{"location":"man3/OCSP_request_add1_nonce/#see-also","title":"SEE ALSO","text":"<p>crypto(7), OCSP_cert_to_id(3), OCSP_REQUEST_new(3), OCSP_resp_find_status(3), OCSP_response_status(3), OCSP_sendreq_new(3)</p>"},{"location":"man3/OCSP_request_add1_nonce/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OCSP_resp_find_status/","title":"OCSP_resp_find_status","text":""},{"location":"man3/OCSP_resp_find_status/#name","title":"NAME","text":"<p>OCSP_resp_get0_certs, OCSP_resp_get0_signer, OCSP_resp_get0_id, OCSP_resp_get1_id, OCSP_resp_get0_produced_at, OCSP_resp_get0_signature, OCSP_resp_get0_tbs_sigalg, OCSP_resp_get0_respdata, OCSP_resp_find_status, OCSP_resp_count, OCSP_resp_get0, OCSP_resp_find, OCSP_single_get0_status, OCSP_check_validity, OCSP_basic_verify - OCSP response utility functions</p>"},{"location":"man3/OCSP_resp_find_status/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ocsp.h&gt;\n\nint OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,\n                          int *reason,\n                          ASN1_GENERALIZEDTIME **revtime,\n                          ASN1_GENERALIZEDTIME **thisupd,\n                          ASN1_GENERALIZEDTIME **nextupd);\n\nint OCSP_resp_count(OCSP_BASICRESP *bs);\nOCSP_SINGLERESP *OCSP_resp_get0(OCSP_BASICRESP *bs, int idx);\nint OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last);\nint OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,\n                            ASN1_GENERALIZEDTIME **revtime,\n                            ASN1_GENERALIZEDTIME **thisupd,\n                            ASN1_GENERALIZEDTIME **nextupd);\n\nconst ASN1_GENERALIZEDTIME *OCSP_resp_get0_produced_at(\n                            const OCSP_BASICRESP* single);\n\nconst ASN1_OCTET_STRING *OCSP_resp_get0_signature(const OCSP_BASICRESP *bs);\nconst X509_ALGOR *OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP *bs);\nconst OCSP_RESPDATA *OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs);\nconst STACK_OF(X509) *OCSP_resp_get0_certs(const OCSP_BASICRESP *bs);\n\nint OCSP_resp_get0_signer(OCSP_BASICRESP *bs, X509 **signer,\n                          STACK_OF(X509) *extra_certs);\n\nint OCSP_resp_get0_id(const OCSP_BASICRESP *bs,\n                      const ASN1_OCTET_STRING **pid,\n                      const X509_NAME **pname);\nint OCSP_resp_get1_id(const OCSP_BASICRESP *bs,\n                      ASN1_OCTET_STRING **pid,\n                      X509_NAME **pname);\n\nint OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,\n                        ASN1_GENERALIZEDTIME *nextupd,\n                        long sec, long maxsec);\n\nint OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,\n                     X509_STORE *st, unsigned long flags);\n</code></pre>"},{"location":"man3/OCSP_resp_find_status/#description","title":"DESCRIPTION","text":"<p>OCSP_resp_find_status() searches bs for an OCSP response for id. If it is successful the fields of the response are returned in *status, *reason, *revtime, *thisupd and *nextupd.  The *status value will be one of V_OCSP_CERTSTATUS_GOOD, V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN. The *reason and *revtime fields are only set if the status is V_OCSP_CERTSTATUS_REVOKED. If set the *reason field will be set to the revocation reason which will be one of OCSP_REVOKED_STATUS_NOSTATUS, OCSP_REVOKED_STATUS_UNSPECIFIED, OCSP_REVOKED_STATUS_KEYCOMPROMISE, OCSP_REVOKED_STATUS_CACOMPROMISE, OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, OCSP_REVOKED_STATUS_SUPERSEDED, OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, OCSP_REVOKED_STATUS_CERTIFICATEHOLD or OCSP_REVOKED_STATUS_REMOVEFROMCRL.</p> <p>OCSP_resp_count() returns the number of OCSP_SINGLERESP structures in bs.</p> <p>OCSP_resp_get0() returns the OCSP_SINGLERESP structure in bs corresponding to index idx. Where idx runs from 0 to OCSP_resp_count(bs) - 1.</p> <p>OCSP_resp_find() searches bs for id and returns the index of the first matching entry after last or starting from the beginning if last is -1.</p> <p>OCSP_single_get0_status() extracts the fields of single in *reason, *revtime, *thisupd and *nextupd.</p> <p>OCSP_resp_get0_produced_at() extracts the producedAt field from the single response bs.</p> <p>OCSP_resp_get0_signature() returns the signature from bs.</p> <p>OCSP_resp_get0_tbs_sigalg() returns the signatureAlgorithm from bs.</p> <p>OCSP_resp_get0_respdata() returns the tbsResponseData from bs.</p> <p>OCSP_resp_get0_certs() returns any certificates included in bs.</p> <p>OCSP_resp_get0_signer() attempts to retrieve the certificate that directly signed bs.  The OCSP protocol does not require that this certificate is included in the certs field of the response, so additional certificates can be supplied in extra_certs if the certificates that may have signed the response are known via some out-of-band mechanism.</p> <p>OCSP_resp_get0_id() gets the responder id of bs. If the responder ID is a name then &lt;*pname&gt; is set to the name and *pid is set to NULL. If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL. OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them. Both functions return 1 in case of success and 0 in case of failure. If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary.</p> <p>OCSP_check_validity() checks the validity of thisupd and nextupd values which will be typically obtained from OCSP_resp_find_status() or OCSP_single_get0_status(). If sec is nonzero it indicates how many seconds leeway should be allowed in the check. If maxsec is positive it indicates the maximum age of thisupd in seconds.</p> <p>OCSP_basic_verify() checks that the basic response message bs is correctly signed and that the signer certificate can be validated. It takes st as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in &lt;certs&gt;. It also searches the certificates the responder may have included in bs unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of bs and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in bs are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate.</p>"},{"location":"man3/OCSP_resp_find_status/#return-values","title":"RETURN VALUES","text":"<p>OCSP_resp_find_status() returns 1 if id is found in bs and 0 otherwise.</p> <p>OCSP_resp_count() returns the total number of OCSP_SINGLERESP fields in bs.</p> <p>OCSP_resp_get0() returns a pointer to an OCSP_SINGLERESP structure or NULL if idx is out of range.</p> <p>OCSP_resp_find() returns the index of id in bs (which may be 0) or -1 if id was not found.</p> <p>OCSP_single_get0_status() returns the status of single or -1 if an error occurred.</p> <p>OCSP_resp_get0_signer() returns 1 if the signing certificate was located, or 0 on error.</p> <p>OCSP_basic_verify() returns 1 on success, 0 on error, or -1 on fatal error such as malloc failure.</p>"},{"location":"man3/OCSP_resp_find_status/#notes","title":"NOTES","text":"<p>Applications will typically call OCSP_resp_find_status() using the certificate ID of interest and then check its validity using OCSP_check_validity(). They can then take appropriate action based on the status of the certificate.</p> <p>An OCSP response for a certificate contains thisUpdate and nextUpdate fields. Normally the current time should be between these two values. To account for clock skew the maxsec field can be set to nonzero in OCSP_check_validity(). Some responders do not set the nextUpdate field, this would otherwise mean an ancient response would be considered valid: the maxsec parameter to OCSP_check_validity() can be used to limit the permitted age of responses.</p> <p>The values written to *revtime, *thisupd and *nextupd by OCSP_resp_find_status() and OCSP_single_get0_status() are internal pointers which MUST NOT be freed up by the calling application. Any or all of these parameters can be set to NULL if their value is not required.</p>"},{"location":"man3/OCSP_resp_find_status/#see-also","title":"SEE ALSO","text":"<p>crypto(7), OCSP_cert_to_id(3), OCSP_request_add1_nonce(3), OCSP_REQUEST_new(3), OCSP_response_status(3), OCSP_sendreq_new(3)</p>"},{"location":"man3/OCSP_resp_find_status/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OCSP_response_status/","title":"OCSP_response_status","text":""},{"location":"man3/OCSP_response_status/#name","title":"NAME","text":"<p>OCSP_response_status, OCSP_response_get1_basic, OCSP_response_create, OCSP_RESPONSE_free, OCSP_RESPID_set_by_name, OCSP_RESPID_set_by_key, OCSP_RESPID_match, OCSP_basic_sign, OCSP_basic_sign_ctx - OCSP response functions</p>"},{"location":"man3/OCSP_response_status/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ocsp.h&gt;\n\nint OCSP_response_status(OCSP_RESPONSE *resp);\nOCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp);\nOCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs);\nvoid OCSP_RESPONSE_free(OCSP_RESPONSE *resp);\n\nint OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert);\nint OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert);\nint OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert);\n\nint OCSP_basic_sign(OCSP_BASICRESP *brsp, X509 *signer, EVP_PKEY *key,\n                    const EVP_MD *dgst, STACK_OF(X509) *certs,\n                    unsigned long flags);\nint OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp, X509 *signer, EVP_MD_CTX *ctx,\n                        STACK_OF(X509) *certs, unsigned long flags);\n</code></pre>"},{"location":"man3/OCSP_response_status/#description","title":"DESCRIPTION","text":"<p>OCSP_response_status() returns the OCSP response status of resp. It returns one of the values: OCSP_RESPONSE_STATUS_SUCCESSFUL, OCSP_RESPONSE_STATUS_MALFORMEDREQUEST, OCSP_RESPONSE_STATUS_INTERNALERROR, OCSP_RESPONSE_STATUS_TRYLATER OCSP_RESPONSE_STATUS_SIGREQUIRED, or OCSP_RESPONSE_STATUS_UNAUTHORIZED.</p> <p>OCSP_response_get1_basic() decodes and returns the OCSP_BASICRESP structure contained in resp.</p> <p>OCSP_response_create() creates and returns an OCSP_RESPONSE structure for status and optionally including basic response bs.</p> <p>OCSP_RESPONSE_free() frees up OCSP response resp.</p> <p>OCSP_RESPID_set_by_name() sets the name of the OCSP_RESPID to be the same as the subject name in the supplied X509 certificate cert for the OCSP responder.</p> <p>OCSP_RESPID_set_by_key() sets the key of the OCSP_RESPID to be the same as the key in the supplied X509 certificate cert for the OCSP responder. The key is stored as a SHA1 hash.</p> <p>Note that an OCSP_RESPID can only have one of the name, or the key set. Calling OCSP_RESPID_set_by_name() or OCSP_RESPID_set_by_key() will clear any existing setting.</p> <p>OCSP_RESPID_match() tests whether the OCSP_RESPID given in respid matches with the X509 certificate cert.</p> <p>OCSP_basic_sign() signs OCSP response brsp using certificate signer, private key key, digest dgst and additional certificates certs. If the flags option OCSP_NOCERTS is set then no certificates will be included in the response. If the flags option OCSP_RESPID_KEY is set then the responder is identified by key ID rather than by name. OCSP_basic_sign_ctx() also signs OCSP response brsp but uses the parameters contained in digest context ctx.</p>"},{"location":"man3/OCSP_response_status/#return-values","title":"RETURN VALUES","text":"<p>OCSP_RESPONSE_status() returns a status value.</p> <p>OCSP_response_get1_basic() returns an OCSP_BASICRESP structure pointer or NULL if an error occurred.</p> <p>OCSP_response_create() returns an OCSP_RESPONSE structure pointer or NULL if an error occurred.</p> <p>OCSP_RESPONSE_free() does not return a value.</p> <p>OCSP_RESPID_set_by_name(), OCSP_RESPID_set_by_key(), OCSP_basic_sign(), and OCSP_basic_sign_ctx() return 1 on success or 0 on failure.</p> <p>OCSP_RESPID_match() returns 1 if the OCSP_RESPID and the X509 certificate match or 0 otherwise.</p>"},{"location":"man3/OCSP_response_status/#notes","title":"NOTES","text":"<p>OCSP_response_get1_basic() is only called if the status of a response is OCSP_RESPONSE_STATUS_SUCCESSFUL.</p>"},{"location":"man3/OCSP_response_status/#see-also","title":"SEE ALSO","text":"<p>crypto(7) OCSP_cert_to_id(3) OCSP_request_add1_nonce(3) OCSP_REQUEST_new(3) OCSP_resp_find_status(3) OCSP_sendreq_new(3) OCSP_RESPID_new(3) OCSP_RESPID_free(3)</p>"},{"location":"man3/OCSP_response_status/#history","title":"HISTORY","text":"<p>The OCSP_RESPID_set_by_name(), OCSP_RESPID_set_by_key() and OCSP_RESPID_match() functions were added in OpenSSL 1.1.0a.</p> <p>The OCSP_basic_sign_ctx() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/OCSP_response_status/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OCSP_sendreq_new/","title":"OCSP_sendreq_new","text":""},{"location":"man3/OCSP_sendreq_new/#name","title":"NAME","text":"<p>OCSP_sendreq_new, OCSP_sendreq_nbio, OCSP_REQ_CTX_free, OCSP_set_max_response_length, OCSP_REQ_CTX_add1_header, OCSP_REQ_CTX_set1_req, OCSP_sendreq_bio, OCSP_REQ_CTX_i2d - OCSP responder query functions</p>"},{"location":"man3/OCSP_sendreq_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ocsp.h&gt;\n\nOCSP_REQ_CTX *OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,\n                               int maxline);\n\nint OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx);\n\nvoid OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx);\n\nvoid OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len);\n\nint OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,\n                             const char *name, const char *value);\n\nint OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX *rctx, OCSP_REQUEST *req);\n\nOCSP_RESPONSE *OCSP_sendreq_bio(BIO *io, const char *path, OCSP_REQUEST *req);\n\nint OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const char *content_type,\n                     const ASN1_ITEM *it, ASN1_VALUE *req);\n</code></pre>"},{"location":"man3/OCSP_sendreq_new/#description","title":"DESCRIPTION","text":"<p>The function OCSP_sendreq_new() returns an OCSP_CTX structure using the responder io, the URL path path, the OCSP request req and with a response header maximum line length of maxline. If maxline is zero a default value of 4k is used. The OCSP request req may be set to NULL and provided later if required.</p> <p>OCSP_sendreq_nbio() performs nonblocking I/O on the OCSP request context rctx. When the operation is complete it returns the response in *presp.</p> <p>OCSP_REQ_CTX_free() frees up the OCSP context rctx.</p> <p>OCSP_set_max_response_length() sets the maximum response length for rctx to len. If the response exceeds this length an error occurs. If not set a default value of 100k is used.</p> <p>OCSP_REQ_CTX_add1_header() adds header name with value value to the context rctx. It can be called more than once to add multiple headers. It MUST be called before any calls to OCSP_sendreq_nbio(). The req parameter in the initial to OCSP_sendreq_new() call MUST be set to NULL if additional headers are set.</p> <p>OCSP_REQ_CTX_set1_req() sets the OCSP request in rctx to req. This function should be called after any calls to OCSP_REQ_CTX_add1_header(). OCSP_REQ_CTX_set1_req(rctx, req) is equivalent to the following:</p> <pre><code>OCSP_REQ_CTX_i2d(rctx, \"application/ocsp-request\",\n                       ASN1_ITEM_rptr(OCSP_REQUEST), (ASN1_VALUE *)req)\n</code></pre> <p>OCSP_REQ_CTX_i2d() sets the request context rctx to have the request req, which has the ASN.1 type it. The content_type, if not NULL, will be included in the HTTP request. The function should be called after all other headers have already been added.</p> <p>OCSP_sendreq_bio() performs an OCSP request using the responder io, the URL path path, and the OCSP request req with a response header maximum line length 4k. It waits indefinitely on a response.</p>"},{"location":"man3/OCSP_sendreq_new/#return-values","title":"RETURN VALUES","text":"<p>OCSP_sendreq_new() returns a valid OCSP_REQ_CTX structure or NULL if an error occurred.</p> <p>OCSP_sendreq_nbio() returns 1 if the operation was completed successfully, -1 if the operation should be retried and 0 if an error occurred.</p> <p>OCSP_REQ_CTX_add1_header(), OCSP_REQ_CTX_set1_req(), and OCSP_REQ_CTX_i2d() return 1 for success and 0 for failure.</p> <p>OCSP_sendreq_bio() returns the OCSP_RESPONSE structure sent by the responder or NULL if an error occurred.</p> <p>OCSP_REQ_CTX_free() and OCSP_set_max_response_length() do not return values.</p>"},{"location":"man3/OCSP_sendreq_new/#notes","title":"NOTES","text":"<p>These functions only perform a minimal HTTP query to a responder. If an application wishes to support more advanced features it should use an alternative more complete HTTP library.</p> <p>Currently only HTTP POST queries to responders are supported.</p> <p>The arguments to OCSP_sendreq_new() correspond to the components of the URL. For example if the responder URL is http://ocsp.com/ocspreq the BIO io should be connected to host ocsp.com on port 80 and path should be set to \"/ocspreq\"</p> <p>The headers added with OCSP_REQ_CTX_add1_header() are of the form \"name: value\" or just \"name\" if value is NULL. So to add a Host header for ocsp.com you would call:</p> <pre><code>OCSP_REQ_CTX_add1_header(ctx, \"Host\", \"ocsp.com\");\n</code></pre> <p>If OCSP_sendreq_nbio() indicates an operation should be retried the corresponding BIO can be examined to determine which operation (read or write) should be retried and appropriate action taken (for example a select() call on the underlying socket).</p> <p>OCSP_sendreq_bio() does not support retries and so cannot handle nonblocking I/O efficiently. It is retained for compatibility and its use in new applications is not recommended.</p>"},{"location":"man3/OCSP_sendreq_new/#see-also","title":"SEE ALSO","text":"<p>crypto(7), OCSP_cert_to_id(3), OCSP_request_add1_nonce(3), OCSP_REQUEST_new(3), OCSP_resp_find_status(3), OCSP_response_status(3)</p>"},{"location":"man3/OCSP_sendreq_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_Applink/","title":"OPENSSL_Applink","text":""},{"location":"man3/OPENSSL_Applink/#name","title":"NAME","text":"<p>OPENSSL_Applink - glue between OpenSSL BIO and Win32 compiler run-time</p>"},{"location":"man3/OPENSSL_Applink/#synopsis","title":"SYNOPSIS","text":"<pre><code>__declspec(dllexport) void **OPENSSL_Applink();\n</code></pre>"},{"location":"man3/OPENSSL_Applink/#description","title":"DESCRIPTION","text":"<p>OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment. Even though it appears at application side, it's essentially OpenSSL private interface. For this reason application developers are not expected to implement it, but to compile provided module with compiler of their choice and link it into the target application. The referred module is available as <code>applink.c</code>, located alongside the public header files (only on the platforms where applicable).</p>"},{"location":"man3/OPENSSL_Applink/#return-values","title":"RETURN VALUES","text":"<p>Not available.</p>"},{"location":"man3/OPENSSL_Applink/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/","title":"OPENSSL_LH_COMPFUNC","text":""},{"location":"man3/OPENSSL_LH_COMPFUNC/#name","title":"NAME","text":"<p>LHASH, DECLARE_LHASH_OF, OPENSSL_LH_COMPFUNC, OPENSSL_LH_HASHFUNC, OPENSSL_LH_DOALL_FUNC, LHASH_DOALL_ARG_FN_TYPE, IMPLEMENT_LHASH_HASH_FN, IMPLEMENT_LHASH_COMP_FN, lh_TYPE_new, lh_TYPE_free, lh_TYPE_insert, lh_TYPE_delete, lh_TYPE_retrieve, lh_TYPE_doall, lh_TYPE_doall_arg, lh_TYPE_error - dynamic hash table</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/lhash.h&gt;\n\nDECLARE_LHASH_OF(TYPE);\n\nLHASH *lh_TYPE_new(OPENSSL_LH_HASHFUNC hash, OPENSSL_LH_COMPFUNC compare);\nvoid lh_TYPE_free(LHASH_OF(TYPE) *table);\n\nTYPE *lh_TYPE_insert(LHASH_OF(TYPE) *table, TYPE *data);\nTYPE *lh_TYPE_delete(LHASH_OF(TYPE) *table, TYPE *data);\nTYPE *lh_TYPE_retrieve(LHASH_OF(TYPE) *table, TYPE *data);\n\nvoid lh_TYPE_doall(LHASH_OF(TYPE) *table, OPENSSL_LH_DOALL_FUNC func);\nvoid lh_TYPE_doall_arg(LHASH_OF(TYPE) *table, OPENSSL_LH_DOALL_FUNCARG func,\n                       TYPE *arg);\n\nint lh_TYPE_error(LHASH_OF(TYPE) *table);\n\ntypedef int (*OPENSSL_LH_COMPFUNC)(const void *, const void *);\ntypedef unsigned long (*OPENSSL_LH_HASHFUNC)(const void *);\ntypedef void (*OPENSSL_LH_DOALL_FUNC)(const void *);\ntypedef void (*LHASH_DOALL_ARG_FN_TYPE)(const void *, const void *);\n</code></pre>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#description","title":"DESCRIPTION","text":"<p>This library implements type-checked dynamic hash tables. The hash table entries can be arbitrary structures. Usually they consist of key and value fields.  In the description here, TYPE is used a placeholder for any of the OpenSSL datatypes, such as SSL_SESSION.</p> <p>lh_TYPE_new() creates a new LHASH_OF(TYPE) structure to store arbitrary data entries, and specifies the 'hash' and 'compare' callbacks to be used in organising the table's entries.  The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field.  The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits.  The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, nonzero otherwise.</p> <p>If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the IMPLEMENT_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_TYPE_new() as shown in this example:</p> <pre><code>/*\n * Implement the hash and compare functions; \"stuff\" can be any word.\n */\nstatic unsigned long stuff_hash(const TYPE *a)\n{\n    ...\n}\nstatic int stuff_cmp(const TYPE *a, const TYPE *b)\n{\n    ...\n}\n\n/*\n * Implement the wrapper functions.\n */\nstatic IMPLEMENT_LHASH_HASH_FN(stuff, TYPE)\nstatic IMPLEMENT_LHASH_COMP_FN(stuff, TYPE)\n</code></pre> <p>If the type is going to be used in several places, the following macros can be used in a common header file to declare the function wrappers:</p> <pre><code>DECLARE_LHASH_HASH_FN(stuff, TYPE)\nDECLARE_LHASH_COMP_FN(stuff, TYPE)\n</code></pre> <p>Then a hash table of TYPE objects can be created using this:</p> <pre><code>LHASH_OF(TYPE) *htable;\n\nhtable = lh_TYPE_new(LHASH_HASH_FN(stuff), LHASH_COMP_FN(stuff));\n</code></pre> <p>lh_TYPE_free() frees the LHASH_OF(TYPE) structure table. Allocated hash table entries will not be freed; consider using lh_TYPE_doall() to deallocate any remaining entries in the hash table (see below).</p> <p>lh_TYPE_insert() inserts the structure pointed to by data into table.  If there already is an entry with the same key, the old value is replaced. Note that lh_TYPE_insert() stores pointers, the data are not copied.</p> <p>lh_TYPE_delete() deletes an entry from table.</p> <p>lh_TYPE_retrieve() looks up an entry in table. Normally, data is a structure with the key field(s) set; the function will return a pointer to a fully populated structure.</p> <p>lh_TYPE_doall() will, for every entry in the hash table, call func with the data item as its parameter. For example:</p> <pre><code>/* Cleans up resources belonging to 'a' (this is implemented elsewhere) */\nvoid TYPE_cleanup_doall(TYPE *a);\n\n/* Implement a prototype-compatible wrapper for \"TYPE_cleanup\" */\nIMPLEMENT_LHASH_DOALL_FN(TYPE_cleanup, TYPE)\n\n/* Call \"TYPE_cleanup\" against all items in a hash table. */\nlh_TYPE_doall(hashtable, LHASH_DOALL_FN(TYPE_cleanup));\n\n/* Then the hash table itself can be deallocated */\nlh_TYPE_free(hashtable);\n</code></pre> <p>When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration.  The second best solution to this problem is to set hash-&gt;down_load=0 before you start (which will stop the hash table ever decreasing in size). The best solution is probably to avoid deleting items from the hash table inside a \"doall\" callback!</p> <p>lh_TYPE_doall_arg() is the same as lh_TYPE_doall() except that func will be called with arg as the second argument and func should be of type LHASH_DOALL_ARG_FN_TYPE (a callback prototype that is passed both the table entry and an extra argument).  As with lh_doall(), you can instead choose to declare your callback with a prototype matching the types you are dealing with and use the declare/implement macros to create compatible wrappers that cast variables before calling your type-specific callbacks.  An example of this is demonstrated here (printing all hash table entries to a BIO that is provided by the caller):</p> <pre><code>/* Prints item 'a' to 'output_bio' (this is implemented elsewhere) */\nvoid TYPE_print_doall_arg(const TYPE *a, BIO *output_bio);\n\n/* Implement a prototype-compatible wrapper for \"TYPE_print\" */\nstatic IMPLEMENT_LHASH_DOALL_ARG_FN(TYPE, const TYPE, BIO)\n\n/* Print out the entire hashtable to a particular BIO */\nlh_TYPE_doall_arg(hashtable, LHASH_DOALL_ARG_FN(TYPE_print), BIO,\n                  logging_bio);\n</code></pre> <p>lh_TYPE_error() can be used to determine if an error occurred in the last operation.</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#return-values","title":"RETURN VALUES","text":"<p>lh_TYPE_new() returns NULL on error, otherwise a pointer to the new LHASH structure.</p> <p>When a hash table entry is replaced, lh_TYPE_insert() returns the value being replaced. NULL is returned on normal operation and on error.</p> <p>lh_TYPE_delete() returns the entry being deleted.  NULL is returned if there is no such value in the hash table.</p> <p>lh_TYPE_retrieve() returns the hash table entry if it has been found, NULL otherwise.</p> <p>lh_TYPE_error() returns 1 if an error occurred in the last operation, 0 otherwise. It's meaningful only after non-retrieve operations.</p> <p>lh_TYPE_free(), lh_TYPE_doall() and lh_TYPE_doall_arg() return no values.</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#note","title":"NOTE","text":"<p>The LHASH code is not thread safe. All updating operations, as well as lh_TYPE_error call must be performed under a write lock. All retrieve operations should be performed under a read lock, unless accurate usage statistics are desired. In which case, a write lock should be used for retrieve operations as well. For output of the usage statistics, using the functions from OPENSSL_LH_stats(3), a read lock suffices.</p> <p>The LHASH code regards table entries as constant data.  As such, it internally represents lh_insert()'d items with a \"const void *\" pointer type.  This is why callbacks such as those used by lh_doall() and lh_doall_arg() declare their prototypes with \"const\", even for the parameters that pass back the table items' data pointers - for consistency, user-provided data is \"const\" at all times as far as the LHASH code is concerned.  However, as callers are themselves providing these pointers, they can choose whether they too should be treating all such parameters as constant.</p> <p>As an example, a hash table may be maintained by code that, for reasons of encapsulation, has only \"const\" access to the data being indexed in the hash table (i.e. it is returned as \"const\" from elsewhere in their code) - in this case the LHASH prototypes are appropriate as-is.  Conversely, if the caller is responsible for the life-time of the data in question, then they may well wish to make modifications to table item passed back in the lh_doall() or lh_doall_arg() callbacks (see the \"TYPE_cleanup\" example above).  If so, the caller can either cast the \"const\" away (if they're providing the raw callbacks themselves) or use the macros to declare/implement the wrapper functions without \"const\" types.</p> <p>Callers that only have \"const\" access to data they're indexing in a table, yet declare callbacks without constant types (or cast the \"const\" away themselves), are therefore creating their own risks/bugs without being encouraged to do so by the API.  On a related note, those auditing code should pay special attention to any instances of DECLARE/IMPLEMENT_LHASH_DOALL_[ARG_]_FN macros that provide types without any \"const\" qualifiers.</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#bugs","title":"BUGS","text":"<p>lh_TYPE_insert() returns NULL both for success and error.</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_LH_stats(3)</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#history","title":"HISTORY","text":"<p>In OpenSSL 1.0.0, the lhash interface was revamped for better type checking.</p>"},{"location":"man3/OPENSSL_LH_COMPFUNC/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_LH_stats/","title":"OPENSSL_LH_stats","text":""},{"location":"man3/OPENSSL_LH_stats/#name","title":"NAME","text":"<p>OPENSSL_LH_stats, OPENSSL_LH_node_stats, OPENSSL_LH_node_usage_stats, OPENSSL_LH_stats_bio, OPENSSL_LH_node_stats_bio, OPENSSL_LH_node_usage_stats_bio - LHASH statistics</p>"},{"location":"man3/OPENSSL_LH_stats/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/lhash.h&gt;\n\nvoid OPENSSL_LH_stats(LHASH *table, FILE *out);\nvoid OPENSSL_LH_node_stats(LHASH *table, FILE *out);\nvoid OPENSSL_LH_node_usage_stats(LHASH *table, FILE *out);\n\nvoid OPENSSL_LH_stats_bio(LHASH *table, BIO *out);\nvoid OPENSSL_LH_node_stats_bio(LHASH *table, BIO *out);\nvoid OPENSSL_LH_node_usage_stats_bio(LHASH *table, BIO *out);\n</code></pre>"},{"location":"man3/OPENSSL_LH_stats/#description","title":"DESCRIPTION","text":"<p>The LHASH structure records statistics about most aspects of accessing the hash table.</p> <p>OPENSSL_LH_stats() prints out statistics on the size of the hash table, how many entries are in it, and the number and result of calls to the routines in this library.</p> <p>OPENSSL_LH_node_stats() prints the number of entries for each 'bucket' in the hash table.</p> <p>OPENSSL_LH_node_usage_stats() prints out a short summary of the state of the hash table.  It prints the 'load' and the 'actual load'.  The load is the average number of data items per 'bucket' in the hash table.  The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries.  So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss.</p> <p>OPENSSL_LH_stats_bio(), OPENSSL_LH_node_stats_bio() and OPENSSL_LH_node_usage_stats_bio() are the same as the above, except that the output goes to a BIO.</p>"},{"location":"man3/OPENSSL_LH_stats/#return-values","title":"RETURN VALUES","text":"<p>These functions do not return values.</p>"},{"location":"man3/OPENSSL_LH_stats/#note","title":"NOTE","text":"<p>These calls should be made under a read lock. Refer to \"NOTE\" in OPENSSL_LH_COMPFUNC(3) for more details about the locks required when using the LHASH data structure.</p>"},{"location":"man3/OPENSSL_LH_stats/#see-also","title":"SEE ALSO","text":"<p>bio(7), OPENSSL_LH_COMPFUNC(3)</p>"},{"location":"man3/OPENSSL_LH_stats/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_VERSION_NUMBER/","title":"OPENSSL_VERSION_NUMBER","text":""},{"location":"man3/OPENSSL_VERSION_NUMBER/#name","title":"NAME","text":"<p>OPENSSL_VERSION_NUMBER, OPENSSL_VERSION_TEXT, OpenSSL_version, OpenSSL_version_num - get OpenSSL version number</p>"},{"location":"man3/OPENSSL_VERSION_NUMBER/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/opensslv.h&gt;\n#define OPENSSL_VERSION_NUMBER 0xnnnnnnnnnL\n#define OPENSSL_VERSION_TEXT \"OpenSSL x.y.z xx XXX xxxx\"\n\n#include &lt;openssl/crypto.h&gt;\n\nunsigned long OpenSSL_version_num();\nconst char *OpenSSL_version(int t);\n</code></pre>"},{"location":"man3/OPENSSL_VERSION_NUMBER/#description","title":"DESCRIPTION","text":"<p>OPENSSL_VERSION_NUMBER is a numeric release version identifier:</p> <pre><code>MNNFFPPS: major minor fix patch status\n</code></pre> <p>The status nibble has one of the values 0 for development, 1 to e for betas 1 to 14, and f for release.</p> <p>for example</p> <pre><code>0x000906000 == 0.9.6 dev\n0x000906023 == 0.9.6b beta 3\n0x00090605f == 0.9.6e release\n</code></pre> <p>Versions prior to 0.9.3 have identifiers &lt; 0x0930. Versions between 0.9.3 and 0.9.5 had a version identifier with this interpretation:</p> <pre><code>MMNNFFRBB major minor fix final beta/patch\n</code></pre> <p>for example</p> <pre><code>0x000904100 == 0.9.4 release\n0x000905000 == 0.9.5 dev\n</code></pre> <p>Version 0.9.5a had an interim interpretation that is like the current one, except the patch level got the highest bit set, to keep continuity.  The number was therefore 0x0090581f.</p> <p>OPENSSL_VERSION_TEXT is the text variant of the version number and the release date.  For example, \"OpenSSL 1.0.1a 15 Oct 2015\".</p> <p>OpenSSL_version_num() returns the version number.</p> <p>OpenSSL_version() returns different strings depending on t:</p> <ul> <li> <p>OPENSSL_VERSION</p> <p>The text variant of the version number and the release date.  For example, \"OpenSSL 1.0.1a 15 Oct 2015\".</p> </li> <li> <p>OPENSSL_CFLAGS</p> <p>The compiler flags set for the compilation process in the form \"compiler: ...\"  if available or \"compiler: information not available\" otherwise.</p> </li> <li> <p>OPENSSL_BUILT_ON</p> <p>The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.</p> </li> <li> <p>OPENSSL_PLATFORM</p> <p>The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.</p> </li> <li> <p>OPENSSL_DIR</p> <p>The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.</p> </li> <li> <p>OPENSSL_ENGINES_DIR</p> <p>The \"ENGINESDIR\" setting of the library build in the form \"ENGINESDIR: \"...\"\" if available or \"ENGINESDIR: N/A\" otherwise.</p> </li> </ul> <p>For an unknown t, the text \"not available\" is returned.</p>"},{"location":"man3/OPENSSL_VERSION_NUMBER/#return-values","title":"RETURN VALUES","text":"<p>OpenSSL_version_num() returns the version number.</p> <p>OpenSSL_version() returns requested version strings.</p>"},{"location":"man3/OPENSSL_VERSION_NUMBER/#see-also","title":"SEE ALSO","text":"<p>crypto(7)</p>"},{"location":"man3/OPENSSL_VERSION_NUMBER/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_config/","title":"OPENSSL_config","text":""},{"location":"man3/OPENSSL_config/#name","title":"NAME","text":"<p>OPENSSL_config, OPENSSL_no_config - simple OpenSSL configuration functions</p>"},{"location":"man3/OPENSSL_config/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/conf.h&gt;\n\n#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid OPENSSL_config(const char *appname);\nvoid OPENSSL_no_config(void);\n#endif\n</code></pre>"},{"location":"man3/OPENSSL_config/#description","title":"DESCRIPTION","text":"<p>OPENSSL_config() configures OpenSSL using the standard openssl.cnf and reads from the application section appname. If appname is NULL then the default section, openssl_conf, will be used. Errors are silently ignored. Multiple calls have no effect.</p> <p>OPENSSL_no_config() disables configuration. If called before OPENSSL_config() no configuration takes place.</p> <p>If the application is built with OPENSSL_LOAD_CONF defined, then a call to OpenSSL_add_all_algorithms() will implicitly call OPENSSL_config() first.</p>"},{"location":"man3/OPENSSL_config/#notes","title":"NOTES","text":"<p>The OPENSSL_config() function is designed to be a very simple \"call it and forget it\" function. It is however much better than nothing. Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly. This function is deprecated and its use should be avoided. Applications should instead call CONF_modules_load() during initialization (that is before starting any threads).</p> <p>There are several reasons why calling the OpenSSL configuration routines is advisable. For example, to load dynamic ENGINEs from shared libraries (DSOs). However, very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config() it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file.</p>"},{"location":"man3/OPENSSL_config/#environment","title":"ENVIRONMENT","text":"<ul> <li> <p>OPENSSL_CONF</p> <p>The path to the config file. Ignored in set-user-ID and set-group-ID programs.</p> </li> </ul>"},{"location":"man3/OPENSSL_config/#return-values","title":"RETURN VALUES","text":"<p>Neither OPENSSL_config() nor OPENSSL_no_config() return a value.</p>"},{"location":"man3/OPENSSL_config/#see-also","title":"SEE ALSO","text":"<p>config(5), CONF_modules_load_file(3)</p>"},{"location":"man3/OPENSSL_config/#history","title":"HISTORY","text":"<p>The OPENSSL_no_config() and OPENSSL_config() functions were deprecated in OpenSSL 1.1.0 by OPENSSL_init_crypto().</p>"},{"location":"man3/OPENSSL_config/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_fork_prepare/","title":"OPENSSL_fork_prepare","text":""},{"location":"man3/OPENSSL_fork_prepare/#name","title":"NAME","text":"<p>OPENSSL_fork_prepare, OPENSSL_fork_parent, OPENSSL_fork_child - OpenSSL fork handlers</p>"},{"location":"man3/OPENSSL_fork_prepare/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nvoid OPENSSL_fork_prepare(void);\nvoid OPENSSL_fork_parent(void);\nvoid OPENSSL_fork_child(void);\n</code></pre>"},{"location":"man3/OPENSSL_fork_prepare/#description","title":"DESCRIPTION","text":"<p>OpenSSL has state that should be reset when a process forks. For example, the entropy pool used to generate random numbers (and therefore encryption keys) should not be shared across multiple programs. The OPENSSL_fork_prepare(), OPENSSL_fork_parent(), and OPENSSL_fork_child() functions are used to reset this internal state.</p> <p>Platforms without fork(2) will probably not need to use these functions. Platforms with fork(2) but without pthread_atfork(3) will probably need to call them manually, as described in the following paragraph.  Platforms such as Linux that have both functions will normally not need to call these functions as the OpenSSL library will do so automatically.</p> <p>OPENSSL_init_crypto(3) will register these functions with the appropriate handler, when the OPENSSL_INIT_ATFORK flag is used. For other applications, these functions can be called directly. They should be used according to the calling sequence described by the pthread_atfork(3) documentation, which is summarized here.  OPENSSL_fork_prepare() should be called before a fork() is done.  After the fork() returns, the parent process should call OPENSSL_fork_parent() and the child process should call OPENSSL_fork_child().</p>"},{"location":"man3/OPENSSL_fork_prepare/#return-values","title":"RETURN VALUES","text":"<p>OPENSSL_fork_prepare(), OPENSSL_fork_parent() and OPENSSL_fork_child() do not return values.</p>"},{"location":"man3/OPENSSL_fork_prepare/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_init_crypto(3)</p>"},{"location":"man3/OPENSSL_fork_prepare/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/OPENSSL_fork_prepare/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_ia32cap/","title":"OPENSSL_ia32cap","text":""},{"location":"man3/OPENSSL_ia32cap/#name","title":"NAME","text":"<p>OPENSSL_ia32cap - the x86[_64] processor capabilities vector</p>"},{"location":"man3/OPENSSL_ia32cap/#synopsis","title":"SYNOPSIS","text":"<pre><code>env OPENSSL_ia32cap=... &lt;application&gt;\n</code></pre>"},{"location":"man3/OPENSSL_ia32cap/#description","title":"DESCRIPTION","text":"<p>OpenSSL supports a range of x86[_64] instruction set extensions. These extensions are denoted by individual bits in capability vector returned by processor in EDX:ECX register pair after executing CPUID instruction with EAX=1 input value (see Intel Application Note #241618). This vector is copied to memory upon toolkit initialization and used to choose between different code paths to provide optimal performance across wide range of processors. For the moment of this writing following bits are significant:</p> <ul> <li>bit #4 denoting presence of Time-Stamp Counter.</li> <li>bit #19 denoting availability of CLFLUSH instruction;</li> <li>bit #20, reserved by Intel, is used to choose among RC4 code paths;</li> <li>bit #23 denoting MMX support;</li> <li>bit #24, FXSR bit, denoting availability of XMM registers;</li> <li>bit #25 denoting SSE support;</li> <li>bit #26 denoting SSE2 support;</li> <li>bit #28 denoting Hyperthreading, which is used to distinguish cores with shared cache;</li> <li>bit #30, reserved by Intel, denotes specifically Intel CPUs;</li> <li>bit #33 denoting availability of PCLMULQDQ instruction;</li> <li>bit #41 denoting SSSE3, Supplemental SSE3, support;</li> <li>bit #43 denoting AMD XOP support (forced to zero on non-AMD CPUs);</li> <li>bit #54 denoting availability of MOVBE instruction;</li> <li>bit #57 denoting AES-NI instruction set extension;</li> <li>bit #58, XSAVE bit, lack of which in combination with MOVBE is used to identify Atom Silvermont core;</li> <li>bit #59, OSXSAVE bit, denoting availability of YMM registers;</li> <li>bit #60 denoting AVX extension;</li> <li>bit #62 denoting availability of RDRAND instruction;</li> </ul> <p>For example, in 32-bit application context clearing bit #26 at run-time disables high-performance SSE2 code present in the crypto library, while clearing bit #24 disables SSE2 code operating on 128-bit XMM register bank. You might have to do the latter if target OpenSSL application is executed on SSE2 capable CPU, but under control of OS that does not enable XMM registers. Historically address of the capability vector copy was exposed to application through OPENSSL_ia32cap_loc(), but not anymore. Now the only way to affect the capability detection is to set OPENSSL_ia32cap environment variable prior target application start. To give a specific example, on Intel P4 processor 'env OPENSSL_ia32cap=0x16980010 apps/openssl', or better yet 'env OPENSSL_ia32cap=~0x1000000 apps/openssl' would achieve the desired effect. Alternatively you can reconfigure the toolkit with no-sse2 option and recompile.</p> <p>Less intuitive is clearing bit #28, or ~0x10000000 in the \"environment variable\" terms. The truth is that it's not copied from CPUID output verbatim, but is adjusted to reflect whether or not the data cache is actually shared between logical cores. This in turn affects the decision on whether or not expensive countermeasures against cache-timing attacks are applied, most notably in AES assembler module.</p> <p>The capability vector is further extended with EBX value returned by CPUID with EAX=7 and ECX=0 as input. Following bits are significant:</p> <ul> <li>bit #64+3 denoting availability of BMI1 instructions, e.g. ANDN;</li> <li>bit #64+5 denoting availability of AVX2 instructions;</li> <li>bit #64+8 denoting availability of BMI2 instructions, e.g. MULX and RORX;</li> <li>bit #64+16 denoting availability of AVX512F extension;</li> <li>bit #64+18 denoting availability of RDSEED instruction;</li> <li>bit #64+19 denoting availability of ADCX and ADOX instructions;</li> <li>bit #64+21 denoting availability of VPMADD52[LH]UQ instructions, aka AVX512IFMA extension;</li> <li>bit #64+29 denoting availability of SHA extension;</li> <li>bit #64+30 denoting availability of AVX512BW extension;</li> <li>bit #64+31 denoting availability of AVX512VL extension;</li> <li>bit #64+41 denoting availability of VAES extension;</li> <li>bit #64+42 denoting availability of VPCLMULQDQ extension;</li> </ul> <p>To control this extended capability word use ':' as delimiter when setting up OPENSSL_ia32cap environment variable. For example assigning ':~0x20' would disable AVX2 code paths, and ':0' - all post-AVX extensions.</p> <p>It should be noted that whether or not some of the most \"fancy\" extension code paths are actually assembled depends on current assembler version. Base minimum of AES-NI/PCLMULQDQ, SSSE3 and SHA extension code paths are always assembled. Apart from that, minimum assembler version requirements are summarized in below table:</p> <pre><code>Extension   | GNU as | nasm   | llvm\n------------+--------+--------+--------\nAVX         | 2.19   | 2.09   | 3.0\nAVX2        | 2.22   | 2.10   | 3.1\nADCX/ADOX   | 2.23   | 2.10   | 3.3\nAVX512      | 2.25   | 2.11.8 | see NOTES\nAVX512IFMA  | 2.26   | 2.11.8 | see NOTES\nVAES        | 2.30   | 2.13.3 |\n</code></pre>"},{"location":"man3/OPENSSL_ia32cap/#notes","title":"NOTES","text":"<p>Even though AVX512 support was implemented in llvm 3.6, compilation of assembly modules apparently requires explicit -march flag. But then compiler generates processor-specific code, which in turn contradicts the mere idea of run-time switch execution facilitated by the variable in question. Till the limitation is lifted, it's possible to work around the problem by making build procedure use following script:</p> <pre><code>#!/bin/sh\nexec clang -no-integrated-as \"$@\"\n</code></pre> <p>instead of real clang. In which case it doesn't matter which clang version is used, as it is GNU assembler version that will be checked.</p>"},{"location":"man3/OPENSSL_ia32cap/#return-values","title":"RETURN VALUES","text":"<p>Not available.</p>"},{"location":"man3/OPENSSL_ia32cap/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_init_crypto/","title":"OPENSSL_init_crypto","text":""},{"location":"man3/OPENSSL_init_crypto/#name","title":"NAME","text":"<p>OPENSSL_INIT_new, OPENSSL_INIT_set_config_filename, OPENSSL_INIT_set_config_appname, OPENSSL_INIT_set_config_file_flags, OPENSSL_INIT_free, OPENSSL_init_crypto, OPENSSL_cleanup, OPENSSL_atexit, OPENSSL_thread_stop - OpenSSL initialisation and deinitialisation functions</p>"},{"location":"man3/OPENSSL_init_crypto/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nvoid OPENSSL_cleanup(void);\nint OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);\nint OPENSSL_atexit(void (*handler)(void));\nvoid OPENSSL_thread_stop(void);\n\nOPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void);\nint OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *init,\n                                     const char* filename);\nint OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *init,\n                                       unsigned long flags);\nint OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *init,\n                                    const char* name);\nvoid OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *init);\n</code></pre>"},{"location":"man3/OPENSSL_init_crypto/#description","title":"DESCRIPTION","text":"<p>During normal operation OpenSSL (libcrypto) will allocate various resources at start up that must, subsequently, be freed on close down of the library. Additionally some resources are allocated on a per thread basis (if the application is multi-threaded), and these resources must be freed prior to the thread closing.</p> <p>As of version 1.1.0 OpenSSL will automatically allocate all resources that it needs so no explicit initialisation is required. Similarly it will also automatically deinitialise as required.</p> <p>However, there may be situations when explicit initialisation is desirable or needed, for example when some nondefault initialisation is required. The function OPENSSL_init_crypto() can be used for this purpose for libcrypto (see also OPENSSL_init_ssl(3) for the libssl equivalent).</p> <p>Numerous internal OpenSSL functions call OPENSSL_init_crypto(). Therefore, in order to perform nondefault initialisation, OPENSSL_init_crypto() MUST be called by application code prior to any other OpenSSL function calls.</p> <p>The opts parameter specifies which aspects of libcrypto should be initialised. Valid options are:</p> <ul> <li> <p>OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS</p> <p>Suppress automatic loading of the libcrypto error strings. This option is not a default option. Once selected subsequent calls to OPENSSL_init_crypto() with the option OPENSSL_INIT_LOAD_CRYPTO_STRINGS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_LOAD_CRYPTO_STRINGS</p> <p>Automatic loading of the libcrypto error strings. With this option the library will automatically load the libcrypto error strings. This option is a default option. Once selected subsequent calls to OPENSSL_init_crypto() with the option OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_ADD_ALL_CIPHERS</p> <p>With this option the library will automatically load and make available all libcrypto ciphers. This option is a default option. Once selected subsequent calls to OPENSSL_init_crypto() with the option OPENSSL_INIT_NO_ADD_ALL_CIPHERS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_ADD_ALL_DIGESTS</p> <p>With this option the library will automatically load and make available all libcrypto digests. This option is a default option. Once selected subsequent calls to OPENSSL_init_crypto() with the option OPENSSL_INIT_NO_ADD_ALL_DIGESTS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_NO_ADD_ALL_CIPHERS</p> <p>With this option the library will suppress automatic loading of libcrypto ciphers. This option is not a default option. Once selected subsequent calls to OPENSSL_init_crypto() with the option OPENSSL_INIT_ADD_ALL_CIPHERS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_NO_ADD_ALL_DIGESTS</p> <p>With this option the library will suppress automatic loading of libcrypto digests. This option is not a default option. Once selected subsequent calls to OPENSSL_init_crypto() with the option OPENSSL_INIT_ADD_ALL_DIGESTS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_LOAD_CONFIG</p> <p>With this option an OpenSSL configuration file will be automatically loaded and used by calling OPENSSL_config(). This is not a default option for libcrypto. As of OpenSSL 1.1.1 this is a default option for libssl (see OPENSSL_init_ssl(3) for further details about libssl initialisation). See the description of OPENSSL_INIT_new(), below.</p> </li> <li> <p>OPENSSL_INIT_NO_LOAD_CONFIG</p> <p>With this option the loading of OpenSSL configuration files will be suppressed. It is the equivalent of calling OPENSSL_no_config(). This is not a default option.</p> </li> <li> <p>OPENSSL_INIT_ASYNC</p> <p>With this option the library with automatically initialise the libcrypto async sub-library (see ASYNC_start_job(3)). This is a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_RDRAND</p> <p>With this option the library will automatically load and initialise the RDRAND engine (if available). This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_DYNAMIC</p> <p>With this option the library will automatically load and initialise the dynamic engine. This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_OPENSSL</p> <p>With this option the library will automatically load and initialise the openssl engine. This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_CRYPTODEV</p> <p>With this option the library will automatically load and initialise the cryptodev engine (if available). This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_CAPI</p> <p>With this option the library will automatically load and initialise the CAPI engine (if available). This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_PADLOCK</p> <p>With this option the library will automatically load and initialise the padlock engine (if available). This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_AFALG</p> <p>With this option the library will automatically load and initialise the AFALG engine. This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ENGINE_ALL_BUILTIN</p> <p>With this option the library will automatically load and initialise all the built in engines listed above with the exception of the openssl and afalg engines. This not a default option.</p> </li> <li> <p>OPENSSL_INIT_ATFORK</p> <p>With this option the library will register its fork handlers. See OPENSSL_fork_prepare(3) for details.</p> </li> <li> <p>OPENSSL_INIT_NO_ATEXIT</p> <p>By default OpenSSL will attempt to clean itself up when the process exits via an \"atexit\" handler. Using this option suppresses that behaviour. This means that the application will have to clean up OpenSSL explicitly using OPENSSL_cleanup().</p> </li> </ul> <p>Multiple options may be combined together in a single call to OPENSSL_init_crypto(). For example:</p> <pre><code>OPENSSL_init_crypto(OPENSSL_INIT_NO_ADD_ALL_CIPHERS\n                    | OPENSSL_INIT_NO_ADD_ALL_DIGESTS, NULL);\n</code></pre> <p>The OPENSSL_cleanup() function deinitialises OpenSSL (both libcrypto and libssl). All resources allocated by OpenSSL are freed. Typically there should be no need to call this function directly as it is initiated automatically on application exit. This is done via the standard C library atexit() function. In the event that the application will close in a manner that will not call the registered atexit() handlers then the application should call OPENSSL_cleanup() directly. Developers of libraries using OpenSSL are discouraged from calling this function and should instead, typically, rely on auto-deinitialisation. This is to avoid error conditions where both an application and a library it depends on both use OpenSSL, and the library deinitialises it before the application has finished using it.</p> <p>Once OPENSSL_cleanup() has been called the library cannot be reinitialised. Attempts to call OPENSSL_init_crypto() will fail and an ERR_R_INIT_FAIL error will be added to the error stack. Note that because initialisation has failed OpenSSL error strings will not be available, only an error code. This code can be put through the openssl errstr command line application to produce a human readable error (see errstr(1)).</p> <p>The OPENSSL_atexit() function enables the registration of a function to be called during OPENSSL_cleanup(). Stop handlers are called after deinitialisation of resources local to a thread, but before other process wide resources are freed. In the event that multiple stop handlers are registered, no guarantees are made about the order of execution.</p> <p>The OPENSSL_thread_stop() function deallocates resources associated with the current thread. Typically this function will be called automatically by the library when the thread exits. This should only be called directly if resources should be freed at an earlier time, or under the circumstances described in the NOTES section below.</p> <p>The OPENSSL_INIT_LOAD_CONFIG flag will load a configuration file, as with CONF_modules_load_file(3) with NULL filename and application name and the CONF_MFLAGS_IGNORE_MISSING_FILE, CONF_MFLAGS_IGNORE_RETURN_CODES  and CONF_MFLAGS_DEFAULT_SECTION flags. The filename, application name, and flags can be customized by providing a non-null OPENSSL_INIT_SETTINGS object. The object can be allocated via OPENSSL_init_new(). The OPENSSL_INIT_set_config_filename() function can be used to specify a nondefault filename, which is copied and need not refer to persistent storage. Similarly, OPENSSL_INIT_set_config_appname() can be used to specify a nondefault application name. Finally, OPENSSL_INIT_set_file_flags can be used to specify nondefault flags. If the CONF_MFLAGS_IGNORE_RETURN_CODES flag is not included, any errors in the configuration file will cause an error return from OPENSSL_init_crypto or indirectly OPENSSL_init_ssl(3). The object can be released with OPENSSL_INIT_free() when done.</p>"},{"location":"man3/OPENSSL_init_crypto/#notes","title":"NOTES","text":"<p>Resources local to a thread are deallocated automatically when the thread exits (e.g. in a pthreads environment, when pthread_exit() is called). On Windows platforms this is done in response to a DLL_THREAD_DETACH message being sent to the libcrypto32.dll entry point. Some windows functions may cause threads to exit without sending this message (for example ExitProcess()). If the application uses such functions, then the application must free up OpenSSL resources directly via a call to OPENSSL_thread_stop() on each thread. Similarly this message will also not be sent if OpenSSL is linked statically, and therefore applications using static linking should also call OPENSSL_thread_stop() on each thread. Additionally if OpenSSL is loaded dynamically via LoadLibrary() and the threads are not destroyed until after FreeLibrary() is called then each thread should call OPENSSL_thread_stop() prior to the FreeLibrary() call.</p> <p>On Linux/Unix where OpenSSL has been loaded via dlopen() and the application is multi-threaded and if dlclose() is subsequently called prior to the threads being destroyed then OpenSSL will not be able to deallocate resources associated with those threads. The application should either call OPENSSL_thread_stop() on each thread prior to the dlclose() call, or alternatively the original dlopen() call should use the RTLD_NODELETE flag (where available on the platform).</p>"},{"location":"man3/OPENSSL_init_crypto/#return-values","title":"RETURN VALUES","text":"<p>The functions OPENSSL_init_crypto, OPENSSL_atexit() and OPENSSL_INIT_set_config_appname() return 1 on success or 0 on error.</p>"},{"location":"man3/OPENSSL_init_crypto/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_init_ssl(3)</p>"},{"location":"man3/OPENSSL_init_crypto/#history","title":"HISTORY","text":"<p>The OPENSSL_init_crypto(), OPENSSL_cleanup(), OPENSSL_atexit(), OPENSSL_thread_stop(), OPENSSL_INIT_new(), OPENSSL_INIT_set_config_appname() and OPENSSL_INIT_free() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/OPENSSL_init_crypto/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_init_ssl/","title":"OPENSSL_init_ssl","text":""},{"location":"man3/OPENSSL_init_ssl/#name","title":"NAME","text":"<p>OPENSSL_init_ssl - OpenSSL (libssl and libcrypto) initialisation</p>"},{"location":"man3/OPENSSL_init_ssl/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);\n</code></pre>"},{"location":"man3/OPENSSL_init_ssl/#description","title":"DESCRIPTION","text":"<p>During normal operation OpenSSL (libssl and libcrypto) will allocate various resources at start up that must, subsequently, be freed on close down of the library. Additionally some resources are allocated on a per thread basis (if the application is multi-threaded), and these resources must be freed prior to the thread closing.</p> <p>As of version 1.1.0 OpenSSL will automatically allocate all resources that it needs so no explicit initialisation is required. Similarly it will also automatically deinitialise as required.</p> <p>However, there may be situations when explicit initialisation is desirable or needed, for example when some nondefault initialisation is required. The function OPENSSL_init_ssl() can be used for this purpose. Calling this function will explicitly initialise BOTH libcrypto and libssl. To explicitly initialise ONLY libcrypto see the OPENSSL_init_crypto(3) function.</p> <p>Numerous internal OpenSSL functions call OPENSSL_init_ssl(). Therefore, in order to perform nondefault initialisation, OPENSSL_init_ssl() MUST be called by application code prior to any other OpenSSL function calls.</p> <p>The opts parameter specifies which aspects of libssl and libcrypto should be initialised. Valid options for libcrypto are described on the OPENSSL_init_crypto(3) page. In addition to any libcrypto specific option the following libssl options can also be used:</p> <ul> <li> <p>OPENSSL_INIT_NO_LOAD_SSL_STRINGS</p> <p>Suppress automatic loading of the libssl error strings. This option is not a default option. Once selected subsequent calls to OPENSSL_init_ssl() with the option OPENSSL_INIT_LOAD_SSL_STRINGS will be ignored.</p> </li> <li> <p>OPENSSL_INIT_LOAD_SSL_STRINGS</p> <p>Automatic loading of the libssl error strings. This option is a default option. Once selected subsequent calls to OPENSSL_init_ssl() with the option OPENSSL_INIT_LOAD_SSL_STRINGS will be ignored.</p> </li> </ul> <p>OPENSSL_init_ssl() takes a settings parameter which can be used to set parameter values.  See OPENSSL_init_crypto(3) for details.</p>"},{"location":"man3/OPENSSL_init_ssl/#return-values","title":"RETURN VALUES","text":"<p>The function OPENSSL_init_ssl() returns 1 on success or 0 on error.</p>"},{"location":"man3/OPENSSL_init_ssl/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_init_crypto(3)</p>"},{"location":"man3/OPENSSL_init_ssl/#history","title":"HISTORY","text":"<p>The OPENSSL_init_ssl() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/OPENSSL_init_ssl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_instrument_bus/","title":"OPENSSL_instrument_bus","text":""},{"location":"man3/OPENSSL_instrument_bus/#name","title":"NAME","text":"<p>OPENSSL_instrument_bus, OPENSSL_instrument_bus2 - instrument references to memory bus</p>"},{"location":"man3/OPENSSL_instrument_bus/#synopsis","title":"SYNOPSIS","text":"<pre><code>#ifdef OPENSSL_CPUID_OBJ\nsize_t OPENSSL_instrument_bus(int *vector, size_t num);\nsize_t OPENSSL_instrument_bus2(int *vector, size_t num, size_t max);\n#endif\n</code></pre>"},{"location":"man3/OPENSSL_instrument_bus/#description","title":"DESCRIPTION","text":"<p>It was empirically found that timings of references to primary memory are subject to irregular, apparently non-deterministic variations. The subroutines in question instrument these references for purposes of gathering randomness for random number generator. In order to make it bus-bound a 'flush cache line' instruction is used between probes. In addition probes are added to vector elements in atomic or interlocked manner, which should contribute additional noise on multi-processor systems. This also means that vector[num] should be zeroed upon invocation (if you want to retrieve actual probe values).</p> <p>OPENSSL_instrument_bus() performs num probes and records the number of oscillator cycles every probe took.</p> <p>OPENSSL_instrument_bus2() on the other hand accumulates consecutive probes with the same value, i.e. in a way it records duration of periods when probe values appeared deterministic. The subroutine performs at most max probes in attempt to fill the vector[num], with max value of 0 meaning \"as many as it takes.\"</p>"},{"location":"man3/OPENSSL_instrument_bus/#return-values","title":"RETURN VALUES","text":"<p>Return value of 0 indicates that CPU is not capable of performing the benchmark, either because oscillator counter or 'flush cache line' is not available on current platform. For reference, on x86 'flush cache line' was introduced with the SSE2 extensions.</p> <p>Otherwise number of recorded values is returned.</p>"},{"location":"man3/OPENSSL_instrument_bus/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2011-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_load_builtin_modules/","title":"OPENSSL_load_builtin_modules","text":""},{"location":"man3/OPENSSL_load_builtin_modules/#name","title":"NAME","text":"<p>OPENSSL_load_builtin_modules, ASN1_add_oid_module, ENGINE_add_conf_module - add standard configuration modules</p>"},{"location":"man3/OPENSSL_load_builtin_modules/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/conf.h&gt;\n\nvoid OPENSSL_load_builtin_modules(void);\nvoid ASN1_add_oid_module(void);\nvoid ENGINE_add_conf_module(void);\n</code></pre>"},{"location":"man3/OPENSSL_load_builtin_modules/#description","title":"DESCRIPTION","text":"<p>The function OPENSSL_load_builtin_modules() adds all the standard OpenSSL configuration modules to the internal list. They can then be used by the OpenSSL configuration code.</p> <p>ASN1_add_oid_module() adds just the ASN1 OBJECT module.</p> <p>ENGINE_add_conf_module() adds just the ENGINE configuration module.</p>"},{"location":"man3/OPENSSL_load_builtin_modules/#notes","title":"NOTES","text":"<p>If the simple configuration function OPENSSL_config() is called then OPENSSL_load_builtin_modules() is called automatically.</p> <p>Applications which use the configuration functions directly will need to call OPENSSL_load_builtin_modules() themselves before any other configuration code.</p> <p>Applications should call OPENSSL_load_builtin_modules() to load all configuration modules instead of adding modules selectively: otherwise functionality may be missing from the application if an when new modules are added.</p>"},{"location":"man3/OPENSSL_load_builtin_modules/#return-values","title":"RETURN VALUES","text":"<p>None of the functions return a value.</p>"},{"location":"man3/OPENSSL_load_builtin_modules/#see-also","title":"SEE ALSO","text":"<p>config(5), OPENSSL_config(3)</p>"},{"location":"man3/OPENSSL_load_builtin_modules/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_malloc/","title":"OPENSSL_malloc","text":""},{"location":"man3/OPENSSL_malloc/#name","title":"NAME","text":"<p>OPENSSL_malloc_init, OPENSSL_malloc, OPENSSL_zalloc, OPENSSL_realloc, OPENSSL_free, OPENSSL_clear_realloc, OPENSSL_clear_free, OPENSSL_cleanse, CRYPTO_malloc, CRYPTO_zalloc, CRYPTO_realloc, CRYPTO_free, OPENSSL_strdup, OPENSSL_strndup, OPENSSL_memdup, OPENSSL_strlcpy, OPENSSL_strlcat, OPENSSL_hexstr2buf, OPENSSL_buf2hexstr, OPENSSL_hexchar2int, CRYPTO_strdup, CRYPTO_strndup, OPENSSL_mem_debug_push, OPENSSL_mem_debug_pop, CRYPTO_mem_debug_push, CRYPTO_mem_debug_pop, CRYPTO_clear_realloc, CRYPTO_clear_free, CRYPTO_get_mem_functions, CRYPTO_set_mem_functions, CRYPTO_get_alloc_counts, CRYPTO_set_mem_debug, CRYPTO_mem_ctrl, CRYPTO_mem_leaks, CRYPTO_mem_leaks_fp, CRYPTO_mem_leaks_cb, OPENSSL_MALLOC_FAILURES, OPENSSL_MALLOC_FD - Memory allocation functions</p>"},{"location":"man3/OPENSSL_malloc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nint OPENSSL_malloc_init(void)\n\nvoid *OPENSSL_malloc(size_t num)\nvoid *OPENSSL_zalloc(size_t num)\nvoid *OPENSSL_realloc(void *addr, size_t num)\nvoid OPENSSL_free(void *addr)\nchar *OPENSSL_strdup(const char *str)\nchar *OPENSSL_strndup(const char *str, size_t s)\nsize_t OPENSSL_strlcat(char *dst, const char *src, size_t size);\nsize_t OPENSSL_strlcpy(char *dst, const char *src, size_t size);\nvoid *OPENSSL_memdup(void *data, size_t s)\nvoid *OPENSSL_clear_realloc(void *p, size_t old_len, size_t num)\nvoid OPENSSL_clear_free(void *str, size_t num)\nvoid OPENSSL_cleanse(void *ptr, size_t len);\n\nunsigned char *OPENSSL_hexstr2buf(const char *str, long *len);\nchar *OPENSSL_buf2hexstr(const unsigned char *buffer, long len);\nint OPENSSL_hexchar2int(unsigned char c);\n\nvoid *CRYPTO_malloc(size_t num, const char *file, int line)\nvoid *CRYPTO_zalloc(size_t num, const char *file, int line)\nvoid *CRYPTO_realloc(void *p, size_t num, const char *file, int line)\nvoid CRYPTO_free(void *str, const char *, int)\nchar *CRYPTO_strdup(const char *p, const char *file, int line)\nchar *CRYPTO_strndup(const char *p, size_t num, const char *file, int line)\nvoid *CRYPTO_clear_realloc(void *p, size_t old_len, size_t num,\n                           const char *file, int line)\nvoid CRYPTO_clear_free(void *str, size_t num, const char *, int)\n\nvoid CRYPTO_get_mem_functions(\n        void *(**m)(size_t, const char *, int),\n        void *(**r)(void *, size_t, const char *, int),\n        void (**f)(void *, const char *, int))\nint CRYPTO_set_mem_functions(\n        void *(*m)(size_t, const char *, int),\n        void *(*r)(void *, size_t, const char *, int),\n        void (*f)(void *, const char *, int))\n\nvoid CRYPTO_get_alloc_counts(int *m, int *r, int *f)\n\nint CRYPTO_set_mem_debug(int onoff)\n\nenv OPENSSL_MALLOC_FAILURES=... &lt;application&gt;\nenv OPENSSL_MALLOC_FD=... &lt;application&gt;\n\nint CRYPTO_mem_ctrl(int mode);\n\nint OPENSSL_mem_debug_push(const char *info)\nint OPENSSL_mem_debug_pop(void);\n\nint CRYPTO_mem_debug_push(const char *info, const char *file, int line);\nint CRYPTO_mem_debug_pop(void);\n\nint CRYPTO_mem_leaks(BIO *b);\nint CRYPTO_mem_leaks_fp(FILE *fp);\nint CRYPTO_mem_leaks_cb(int (*cb)(const char *str, size_t len, void *u),\n                        void *u);\n</code></pre>"},{"location":"man3/OPENSSL_malloc/#description","title":"DESCRIPTION","text":"<p>OpenSSL memory allocation is handled by the OPENSSL_xxx API. These are generally macro's that add the standard C __FILE__ and __LINE__ parameters and call a lower-level CRYPTO_xxx API. Some functions do not add those parameters, but exist for consistency.</p> <p>OPENSSL_malloc_init() does nothing and does not need to be called. It is included for compatibility with older versions of OpenSSL.</p> <p>OPENSSL_malloc(), OPENSSL_realloc(), and OPENSSL_free() are like the C malloc(), realloc(), and free() functions. OPENSSL_zalloc() calls memset() to zero the memory before returning.</p> <p>OPENSSL_clear_realloc() and OPENSSL_clear_free() should be used when the buffer at addr holds sensitive information. The old buffer is filled with zero's by calling OPENSSL_cleanse() before ultimately calling OPENSSL_free().</p> <p>OPENSSL_cleanse() fills ptr of size len with a string of 0's. Use OPENSSL_cleanse() with care if the memory is a mapping of a file. If the storage controller uses write compression, then it's possible that sensitive tail bytes will survive zeroization because the block of zeros will be compressed. If the storage controller uses wear leveling, then the old sensitive data will not be overwritten; rather, a block of 0's will be written at a new physical location.</p> <p>OPENSSL_strdup(), OPENSSL_strndup() and OPENSSL_memdup() are like the equivalent C functions, except that memory is allocated by calling the OPENSSL_malloc() and should be released by calling OPENSSL_free().</p> <p>OPENSSL_strlcpy(), OPENSSL_strlcat() and OPENSSL_strnlen() are equivalents of the common C library functions and are provided for portability.</p> <p>OPENSSL_hexstr2buf() parses str as a hex string and returns a pointer to the parsed value. The memory is allocated by calling OPENSSL_malloc() and should be released by calling OPENSSL_free(). If len is not NULL, it is filled in with the output length. Colons between two-character hex \"bytes\" are ignored. An odd number of hex digits is an error.</p> <p>OPENSSL_buf2hexstr() takes the specified buffer and length, and returns a hex string for value, or NULL on error. Buffer cannot be NULL; if len is 0 an empty string is returned.</p> <p>OPENSSL_hexchar2int() converts a character to the hexadecimal equivalent, or returns -1 on error.</p> <p>If no allocations have been done, it is possible to \"swap out\" the default implementations for OPENSSL_malloc(), OPENSSL_realloc and OPENSSL_free() and replace them with alternate versions (hooks). CRYPTO_get_mem_functions() function fills in the given arguments with the function pointers for the current implementations. With CRYPTO_set_mem_functions(), you can specify a different set of functions. If any of m, r, or f are NULL, then the function is not changed.</p> <p>The default implementation can include some debugging capability (if enabled at build-time). This adds some overhead by keeping a list of all memory allocations, and removes items from the list when they are free'd. This is most useful for identifying memory leaks. CRYPTO_set_mem_debug() turns this tracking on and off.  In order to have any effect, is must be called before any of the allocation functions (e.g., CRYPTO_malloc()) are called, and is therefore normally one of the first lines of main() in an application. CRYPTO_mem_ctrl() provides fine-grained control of memory leak tracking. To enable tracking call CRYPTO_mem_ctrl() with a mode argument of the CRYPTO_MEM_CHECK_ON. To disable tracking call CRYPTO_mem_ctrl() with a mode argument of the CRYPTO_MEM_CHECK_OFF.</p> <p>While checking memory, it can be useful to store additional context about what is being done. For example, identifying the field names when parsing a complicated data structure. OPENSSL_mem_debug_push() (which calls CRYPTO_mem_debug_push()) attaches an identifying string to the allocation stack. This must be a global or other static string; it is not copied. OPENSSL_mem_debug_pop() removes identifying state from the stack.</p> <p>At the end of the program, calling CRYPTO_mem_leaks() or CRYPTO_mem_leaks_fp() will report all \"leaked\" memory, writing it to the specified BIO b or FILE fp. These functions return 1 if there are no leaks, 0 if there are leaks and -1 if an error occurred.</p> <p>CRYPTO_mem_leaks_cb() does the same as CRYPTO_mem_leaks(), but instead of writing to a given BIO, the callback function is called for each output string with the string, length, and userdata u as the callback parameters.</p> <p>If the library is built with the <code>crypto-mdebug</code> option, then one function, CRYPTO_get_alloc_counts(), and two additional environment variables, OPENSSL_MALLOC_FAILURES and OPENSSL_MALLOC_FD, are available.</p> <p>The function CRYPTO_get_alloc_counts() fills in the number of times each of CRYPTO_malloc(), CRYPTO_realloc(), and CRYPTO_free() have been called, into the values pointed to by mcount, rcount, and fcount, respectively.  If a pointer is NULL, then the corresponding count is not stored.</p> <p>The variable OPENSSL_MALLOC_FAILURES controls how often allocations should fail. It is a set of fields separated by semicolons, which each field is a count (defaulting to zero) and an optional atsign and percentage (defaulting to 100).  If the count is zero, then it lasts forever.  For example, <code>100;@25</code> or <code>100@0;0@25</code> means the first 100 allocations pass, then all other allocations (until the program exits or crashes) have a 25% chance of failing.</p> <p>If the variable OPENSSL_MALLOC_FD is parsed as a positive integer, then it is taken as an open file descriptor, and a record of all allocations is written to that descriptor.  If an allocation will fail, and the platform supports it, then a backtrace will be written to the descriptor.  This can be useful because a malloc may fail but not be checked, and problems will only occur later.  The following example in classic shell syntax shows how to use this (will not work on all platforms):</p> <pre><code>OPENSSL_MALLOC_FAILURES='200;@10'\nexport OPENSSL_MALLOC_FAILURES\nOPENSSL_MALLOC_FD=3\nexport OPENSSL_MALLOC_FD\n...app invocation... 3&gt;/tmp/log$$\n</code></pre>"},{"location":"man3/OPENSSL_malloc/#return-values","title":"RETURN VALUES","text":"<p>OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.</p> <p>CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp() and CRYPTO_mem_leaks_cb() return 1 if there are no leaks, 0 if there are leaks and -1 if an error occurred.</p> <p>OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_buf2hexstr(), OPENSSL_hexstr2buf(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.</p> <p>CRYPTO_set_mem_functions() and CRYPTO_set_mem_debug() return 1 on success or 0 on failure (almost always because allocations have already happened).</p> <p>CRYPTO_mem_ctrl() returns -1 if an error occurred, otherwise the previous value of the mode.</p> <p>OPENSSL_mem_debug_push() and OPENSSL_mem_debug_pop() return 1 on success or 0 on failure.</p>"},{"location":"man3/OPENSSL_malloc/#notes","title":"NOTES","text":"<p>While it's permitted to swap out only a few and not all the functions with CRYPTO_set_mem_functions(), it's recommended to swap them all out at once.  This applies specially if OpenSSL was built with the configuration option <code>crypto-mdebug</code> enabled.  In case, swapping out only, say, the malloc() implementation is outright dangerous.</p>"},{"location":"man3/OPENSSL_malloc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OPENSSL_secure_malloc/","title":"OPENSSL_secure_malloc","text":""},{"location":"man3/OPENSSL_secure_malloc/#name","title":"NAME","text":"<p>CRYPTO_secure_malloc_init, CRYPTO_secure_malloc_initialized, CRYPTO_secure_malloc_done, OPENSSL_secure_malloc, CRYPTO_secure_malloc, OPENSSL_secure_zalloc, CRYPTO_secure_zalloc, OPENSSL_secure_free, CRYPTO_secure_free, OPENSSL_secure_clear_free, CRYPTO_secure_clear_free, OPENSSL_secure_actual_size, CRYPTO_secure_allocated, CRYPTO_secure_used - secure heap storage</p>"},{"location":"man3/OPENSSL_secure_malloc/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/crypto.h&gt;\n\nint CRYPTO_secure_malloc_init(size_t size, int minsize);\n\nint CRYPTO_secure_malloc_initialized();\n\nint CRYPTO_secure_malloc_done();\n\nvoid *OPENSSL_secure_malloc(size_t num);\nvoid *CRYPTO_secure_malloc(size_t num, const char *file, int line);\n\nvoid *OPENSSL_secure_zalloc(size_t num);\nvoid *CRYPTO_secure_zalloc(size_t num, const char *file, int line);\n\nvoid OPENSSL_secure_free(void* ptr);\nvoid CRYPTO_secure_free(void *ptr, const char *, int);\n\nvoid OPENSSL_secure_clear_free(void* ptr, size_t num);\nvoid CRYPTO_secure_clear_free(void *ptr, size_t num, const char *, int);\n\nsize_t OPENSSL_secure_actual_size(const void *ptr);\n\nint CRYPTO_secure_allocated(const void *ptr);\nsize_t CRYPTO_secure_used();\n</code></pre>"},{"location":"man3/OPENSSL_secure_malloc/#description","title":"DESCRIPTION","text":"<p>In order to help protect applications (particularly long-running servers) from pointer overruns or underruns that could return arbitrary data from the program's dynamic memory area, where keys and other sensitive information might be stored, OpenSSL supports the concept of a \"secure heap.\" The level and type of security guarantees depend on the operating system. It is a good idea to review the code and see if it addresses your threat model and concerns.</p> <p>If a secure heap is used, then private key BIGNUM values are stored there. This protects long-term storage of private keys, but will not necessarily put all intermediate values and computations there.</p> <p>CRYPTO_secure_malloc_init() creates the secure heap, with the specified <code>size</code> in bytes. The <code>minsize</code> parameter is the minimum size to allocate from the heap. Both <code>size</code> and <code>minsize</code> must be a power of two.</p> <p>CRYPTO_secure_malloc_initialized() indicates whether or not the secure heap as been initialized and is available.</p> <p>CRYPTO_secure_malloc_done() releases the heap and makes the memory unavailable to the process if all secure memory has been freed. It can take noticeably long to complete.</p> <p>OPENSSL_secure_malloc() allocates <code>num</code> bytes from the heap. If CRYPTO_secure_malloc_init() is not called, this is equivalent to calling OPENSSL_malloc(). It is a macro that expands to CRYPTO_secure_malloc() and adds the <code>__FILE__</code> and <code>__LINE__</code> parameters.</p> <p>OPENSSL_secure_zalloc() and CRYPTO_secure_zalloc() are like OPENSSL_secure_malloc() and CRYPTO_secure_malloc(), respectively, except that they call memset() to zero the memory before returning.</p> <p>OPENSSL_secure_free() releases the memory at <code>ptr</code> back to the heap. It must be called with a value previously obtained from OPENSSL_secure_malloc(). If CRYPTO_secure_malloc_init() is not called, this is equivalent to calling OPENSSL_free(). It exists for consistency with OPENSSL_secure_malloc() , and is a macro that expands to CRYPTO_secure_free() and adds the <code>__FILE__</code> and <code>__LINE__</code> parameters..</p> <p>OPENSSL_secure_clear_free() is similar to OPENSSL_secure_free() except that it has an additional <code>num</code> parameter which is used to clear the memory if it was not allocated from the secure heap. If CRYPTO_secure_malloc_init() is not called, this is equivalent to calling OPENSSL_clear_free().</p> <p>OPENSSL_secure_actual_size() tells the actual size allocated to the pointer; implementations may allocate more space than initially requested, in order to \"round up\" and reduce secure heap fragmentation.</p> <p>OPENSSL_secure_allocated() tells if a pointer is allocated in the secure heap.</p> <p>CRYPTO_secure_used() returns the number of bytes allocated in the secure heap.</p>"},{"location":"man3/OPENSSL_secure_malloc/#return-values","title":"RETURN VALUES","text":"<p>CRYPTO_secure_malloc_init() returns 0 on failure, 1 if successful, and 2 if successful but the heap could not be protected by memory mapping.</p> <p>CRYPTO_secure_malloc_initialized() returns 1 if the secure heap is available (that is, if CRYPTO_secure_malloc_init() has been called, but CRYPTO_secure_malloc_done() has not been called or failed) or 0 if not.</p> <p>OPENSSL_secure_malloc() and OPENSSL_secure_zalloc() return a pointer into the secure heap of the requested size, or <code>NULL</code> if memory could not be allocated.</p> <p>CRYPTO_secure_allocated() returns 1 if the pointer is in the secure heap, or 0 if not.</p> <p>CRYPTO_secure_malloc_done() returns 1 if the secure memory area is released, or 0 if not.</p> <p>OPENSSL_secure_free() and OPENSSL_secure_clear_free() return no values.</p>"},{"location":"man3/OPENSSL_secure_malloc/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_malloc(3), BN_new(3)</p>"},{"location":"man3/OPENSSL_secure_malloc/#history","title":"HISTORY","text":"<p>The OPENSSL_secure_clear_free() function was added in OpenSSL 1.1.0g.</p>"},{"location":"man3/OPENSSL_secure_malloc/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OSSL_STORE_INFO/","title":"OSSL_STORE_INFO","text":""},{"location":"man3/OSSL_STORE_INFO/#name","title":"NAME","text":"<p>OSSL_STORE_INFO, OSSL_STORE_INFO_get_type, OSSL_STORE_INFO_get0_NAME, OSSL_STORE_INFO_get0_NAME_description, OSSL_STORE_INFO_get0_PARAMS, OSSL_STORE_INFO_get0_PKEY, OSSL_STORE_INFO_get0_CERT, OSSL_STORE_INFO_get0_CRL, OSSL_STORE_INFO_get1_NAME, OSSL_STORE_INFO_get1_NAME_description, OSSL_STORE_INFO_get1_PARAMS, OSSL_STORE_INFO_get1_PKEY, OSSL_STORE_INFO_get1_CERT, OSSL_STORE_INFO_get1_CRL, OSSL_STORE_INFO_type_string, OSSL_STORE_INFO_free, OSSL_STORE_INFO_new_NAME, OSSL_STORE_INFO_set0_NAME_description, OSSL_STORE_INFO_new_PARAMS, OSSL_STORE_INFO_new_PKEY, OSSL_STORE_INFO_new_CERT, OSSL_STORE_INFO_new_CRL - Functions to manipulate OSSL_STORE_INFO objects</p>"},{"location":"man3/OSSL_STORE_INFO/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/store.h&gt;\n\ntypedef struct ossl_store_info_st OSSL_STORE_INFO;\n\nint OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO *store_info);\nconst char *OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO *store_info);\nchar *OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *store_info);\nconst char *OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO\n                                                  *store_info);\nchar *OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *store_info);\nEVP_PKEY *OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO *store_info);\nEVP_PKEY *OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *store_info);\nEVP_PKEY *OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO *store_info);\nEVP_PKEY *OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *store_info);\nX509 *OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO *store_info);\nX509 *OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *store_info);\nX509_CRL *OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO *store_info);\nX509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *store_info);\n\nconst char *OSSL_STORE_INFO_type_string(int type);\n\nvoid OSSL_STORE_INFO_free(OSSL_STORE_INFO *store_info);\n\nOSSL_STORE_INFO *OSSL_STORE_INFO_new_NAME(char *name);\nint OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc);\nOSSL_STORE_INFO *OSSL_STORE_INFO_new_PARAMS(DSA *dsa_params);\nOSSL_STORE_INFO *OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey);\nOSSL_STORE_INFO *OSSL_STORE_INFO_new_CERT(X509 *x509);\nOSSL_STORE_INFO *OSSL_STORE_INFO_new_CRL(X509_CRL *crl);\n</code></pre>"},{"location":"man3/OSSL_STORE_INFO/#description","title":"DESCRIPTION","text":"<p>These functions are primarily useful for applications to retrieve supported objects from OSSL_STORE_INFO objects and for scheme specific loaders to create OSSL_STORE_INFO holders.</p>"},{"location":"man3/OSSL_STORE_INFO/#types","title":"Types","text":"<p>OSSL_STORE_INFO is an opaque type that's just an intermediary holder for the objects that have been retrieved by OSSL_STORE_load() and similar functions. Supported OpenSSL type object can be extracted using one of STORE_INFO_get0_TYPE(). The life time of this extracted object is as long as the life time of the OSSL_STORE_INFO it was extracted from, so care should be taken not to free the latter too early. As an alternative, STORE_INFO_get1_TYPE() extracts a duplicate (or the same object with its reference count increased), which can be used after the containing OSSL_STORE_INFO has been freed. The object returned by STORE_INFO_get1_TYPE() must be freed separately by the caller. See \"SUPPORTED OBJECTS\" for more information on the types that are supported.</p>"},{"location":"man3/OSSL_STORE_INFO/#functions","title":"Functions","text":"<p>OSSL_STORE_INFO_get_type() takes a OSSL_STORE_INFO and returns the STORE type number for the object inside. STORE_INFO_get_type_string() takes a STORE type number and returns a short string describing it.</p> <p>OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all take a OSSL_STORE_INFO and return the held object of the appropriate OpenSSL type provided that's what's held.</p> <p>OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all take a OSSL_STORE_INFO and return a duplicate of the held object of the appropriate OpenSSL type provided that's what's held.</p> <p>OSSL_STORE_INFO_free() frees a OSSL_STORE_INFO and its contained type.</p> <p>OSSL_STORE_INFO_new_NAME() , OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() create a OSSL_STORE_INFO object to hold the given input object. Additionally, for OSSL_STORE_INFO_NAME` objects, OSSL_STORE_INFO_set0_NAME_description() can be used to add an extra description. This description is meant to be human readable and should be used for information printout.</p>"},{"location":"man3/OSSL_STORE_INFO/#supported-objects","title":"SUPPORTED OBJECTS","text":"<p>Currently supported object types are:</p> <ul> <li> <p>OSSL_STORE_INFO_NAME</p> <p>A name is exactly that, a name. It's like a name in a directory, but formatted as a complete URI. For example, the path in URI <code>file:/foo/bar/</code> could include a file named <code>cookie.pem</code>, and in that case, the returned OSSL_STORE_INFO_NAME object would have the URI <code>file:/foo/bar/cookie.pem</code>, which can be used by the application to get the objects in that file. This can be applied to all schemes that can somehow support a listing of object URIs.</p> <p>For <code>file:</code> URIs that are used without the explicit scheme, the returned name will be the path of each object, so if <code>/foo/bar</code> was given and that path has the file <code>cookie.pem</code>, the name <code>/foo/bar/cookie.pem</code> will be returned.</p> <p>The returned URI is considered canonical and must be unique and permanent for the storage where the object (or collection of objects) resides. Each loader is responsible for ensuring that it only returns canonical URIs. However, it's possible that certain schemes allow an object (or collection thereof) to be reached with alternative URIs; just because one URI is canonical doesn't mean that other variants can't be used.</p> <p>At the discretion of the loader that was used to get these names, an extra description may be attached as well.</p> </li> <li> <p>OSSL_STORE_INFO_PARAMS</p> <p>Key parameters.</p> </li> <li> <p>OSSL_STORE_INFO_PKEY</p> <p>A private/public key of some sort.</p> </li> <li> <p>OSSL_STORE_INFO_CERT</p> <p>An X.509 certificate.</p> </li> <li> <p>OSSL_STORE_INFO_CRL</p> <p>A X.509 certificate revocation list.</p> </li> </ul>"},{"location":"man3/OSSL_STORE_INFO/#return-values","title":"RETURN VALUES","text":"<p>OSSL_STORE_INFO_get_type() returns the STORE type number of the given OSSL_STORE_INFO. There is no error value.</p> <p>OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.</p> <p>OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.</p> <p>OSSL_STORE_INFO_type_string() returns a string on success, or NULL on failure.</p> <p>OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() return a OSSL_STORE_INFO pointer on success, or NULL on failure.</p> <p>OSSL_STORE_INFO_set0_NAME_description() returns 1 on success, or 0 on failure.</p>"},{"location":"man3/OSSL_STORE_INFO/#see-also","title":"SEE ALSO","text":"<p>ossl_store(7), OSSL_STORE_open(3), OSSL_STORE_register_loader(3)</p>"},{"location":"man3/OSSL_STORE_INFO/#history","title":"HISTORY","text":"<p>OSSL_STORE_INFO(), OSSL_STORE_INFO_get_type(), OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT(), OSSL_STORE_INFO_get0_CRL(), OSSL_STORE_INFO_type_string(), OSSL_STORE_INFO_free(), OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/OSSL_STORE_INFO/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OSSL_STORE_LOADER/","title":"OSSL_STORE_LOADER","text":""},{"location":"man3/OSSL_STORE_LOADER/#name","title":"NAME","text":"<p>OSSL_STORE_LOADER, OSSL_STORE_LOADER_CTX, OSSL_STORE_LOADER_new, OSSL_STORE_LOADER_get0_engine, OSSL_STORE_LOADER_get0_scheme, OSSL_STORE_LOADER_set_open, OSSL_STORE_LOADER_set_ctrl, OSSL_STORE_LOADER_set_expect, OSSL_STORE_LOADER_set_find, OSSL_STORE_LOADER_set_load, OSSL_STORE_LOADER_set_eof, OSSL_STORE_LOADER_set_error, OSSL_STORE_LOADER_set_close, OSSL_STORE_LOADER_free, OSSL_STORE_register_loader, OSSL_STORE_unregister_loader, OSSL_STORE_open_fn, OSSL_STORE_ctrl_fn, OSSL_STORE_expect_fn, OSSL_STORE_find_fn, OSSL_STORE_load_fn, OSSL_STORE_eof_fn, OSSL_STORE_error_fn, OSSL_STORE_close_fn - Types and functions to manipulate, register and unregister STORE loaders for different URI schemes</p>"},{"location":"man3/OSSL_STORE_LOADER/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/store.h&gt;\n\ntypedef struct ossl_store_loader_st OSSL_STORE_LOADER;\n\nOSSL_STORE_LOADER *OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme);\nconst ENGINE *OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER\n                                            *store_loader);\nconst char *OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER\n                                          *store_loader);\n\n/* struct ossl_store_loader_ctx_st is defined differently by each loader */\ntypedef struct ossl_store_loader_ctx_st OSSL_STORE_LOADER_CTX;\n\ntypedef OSSL_STORE_LOADER_CTX *(*OSSL_STORE_open_fn)(const char *uri,\n                                                     const UI_METHOD *ui_method,\n                                                     void *ui_data);\nint OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER *store_loader,\n                               OSSL_STORE_open_fn store_open_function);\ntypedef int (*OSSL_STORE_ctrl_fn)(OSSL_STORE_LOADER_CTX *ctx, int cmd,\n                                  va_list args);\nint OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER *store_loader,\n                               OSSL_STORE_ctrl_fn store_ctrl_function);\ntypedef int (*OSSL_STORE_expect_fn)(OSSL_STORE_LOADER_CTX *ctx, int expected);\nint OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER *loader,\n                                 OSSL_STORE_expect_fn expect_function);\ntypedef int (*OSSL_STORE_find_fn)(OSSL_STORE_LOADER_CTX *ctx,\n                                  OSSL_STORE_SEARCH *criteria);\nint OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER *loader,\n                               OSSL_STORE_find_fn find_function);\ntypedef OSSL_STORE_INFO *(*OSSL_STORE_load_fn)(OSSL_STORE_LOADER_CTX *ctx,\n                                               UI_METHOD *ui_method,\n                                               void *ui_data);\nint OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER *store_loader,\n                               OSSL_STORE_load_fn store_load_function);\ntypedef int (*OSSL_STORE_eof_fn)(OSSL_STORE_LOADER_CTX *ctx);\nint OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER *store_loader,\n                              OSSL_STORE_eof_fn store_eof_function);\ntypedef int (*OSSL_STORE_error_fn)(OSSL_STORE_LOADER_CTX *ctx);\nint OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER *store_loader,\n                                OSSL_STORE_error_fn store_error_function);\ntypedef int (*OSSL_STORE_close_fn)(OSSL_STORE_LOADER_CTX *ctx);\nint OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER *store_loader,\n                                OSSL_STORE_close_fn store_close_function);\nvoid OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *store_loader);\n\nint OSSL_STORE_register_loader(OSSL_STORE_LOADER *loader);\nOSSL_STORE_LOADER *OSSL_STORE_unregister_loader(const char *scheme);\n</code></pre>"},{"location":"man3/OSSL_STORE_LOADER/#description","title":"DESCRIPTION","text":"<p>These functions help applications and engines to create loaders for schemes they support.</p>"},{"location":"man3/OSSL_STORE_LOADER/#types","title":"Types","text":"<p>OSSL_STORE_LOADER is the type to hold a loader. It contains a scheme and the functions needed to implement OSSL_STORE_open(), OSSL_STORE_load(), OSSL_STORE_eof(), OSSL_STORE_error() and OSSL_STORE_close() for this scheme.</p> <p>OSSL_STORE_LOADER_CTX is a type template, to be defined by each loader using struct ossl_store_loader_ctx_st { ... }.</p> <p>OSSL_STORE_open_fn, OSSL_STORE_ctrl_fn, OSSL_STORE_expect_fn, OSSL_STORE_find_fn, OSSL_STORE_load_fn, OSSL_STORE_eof_fn, and OSSL_STORE_close_fn are the function pointer types used within a STORE loader. The functions pointed at define the functionality of the given loader.</p> <ul> <li> <p>OSSL_STORE_open_fn</p> <p>This function takes a URI and is expected to interpret it in the best manner possible according to the scheme the loader implements, it also takes a UI_METHOD and associated data, to be used any time something needs to be prompted for. Furthermore, this function is expected to initialize what needs to be initialized, to create a private data store (OSSL_STORE_LOADER_CTX, see above), and to return it. If something goes wrong, this function is expected to return NULL.</p> </li> <li> <p>OSSL_STORE_ctrl_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer, a command number cmd and a va_list args and is used to manipulate loader specific parameters.</p> <p>Loader specific command numbers must begin at OSSL_STORE_C_CUSTOM_START. Any number below that is reserved for future globally known command numbers.</p> <p>This function is expected to return 1 on success, 0 on error.</p> </li> <li> <p>OSSL_STORE_expect_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer and a OSSL_STORE_INFO identity expected, and is used to tell the loader what object type is expected. expected may be zero to signify that no specific object type is expected.</p> <p>This function is expected to return 1 on success, 0 on error.</p> </li> <li> <p>OSSL_STORE_find_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer and a OSSL_STORE_SEARCH search criterion, and is used to tell the loader what to search for.</p> <p>When called with the loader context being NULL, this function is expected to return 1 if the loader supports the criterion, otherwise 0.</p> <p>When called with the loader context being something other than NULL, this function is expected to return 1 on success, 0 on error.</p> </li> <li> <p>OSSL_STORE_load_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer and a UI_METHOD with associated data. It's expected to load the next available data, mold it into a data structure that can be wrapped in a OSSL_STORE_INFO using one of the OSSL_STORE_INFO(3) functions. If no more data is available or an error occurs, this function is expected to return NULL. The OSSL_STORE_eof_fn and OSSL_STORE_error_fn functions must indicate if it was in fact the end of data or if an error occurred.</p> <p>Note that this function retrieves one data item only.</p> </li> <li> <p>OSSL_STORE_eof_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer and is expected to return 1 to indicate that the end of available data has been reached. It is otherwise expected to return 0.</p> </li> <li> <p>OSSL_STORE_error_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer and is expected to return 1 to indicate that an error occurred in a previous call to the OSSL_STORE_load_fn function. It is otherwise expected to return 0.</p> </li> <li> <p>OSSL_STORE_close_fn</p> <p>This function takes a OSSL_STORE_LOADER_CTX pointer and is expected to close or shut down what needs to be closed, and finally free the contents of the OSSL_STORE_LOADER_CTX pointer. It returns 1 on success and 0 on error.</p> </li> </ul>"},{"location":"man3/OSSL_STORE_LOADER/#functions","title":"Functions","text":"<p>OSSL_STORE_LOADER_new() creates a new OSSL_STORE_LOADER. It takes an ENGINE e and a string scheme. scheme must always be set. Both e and scheme are used as is and must therefore be alive as long as the created loader is.</p> <p>OSSL_STORE_LOADER_get0_engine() returns the engine of the store_loader. OSSL_STORE_LOADER_get0_scheme() returns the scheme of the store_loader.</p> <p>OSSL_STORE_LOADER_set_open() sets the opener function for the store_loader.</p> <p>OSSL_STORE_LOADER_set_ctrl() sets the control function for the store_loader.</p> <p>OSSL_STORE_LOADER_set_expect() sets the expect function for the store_loader.</p> <p>OSSL_STORE_LOADER_set_load() sets the loader function for the store_loader.</p> <p>OSSL_STORE_LOADER_set_eof() sets the end of file checker function for the store_loader.</p> <p>OSSL_STORE_LOADER_set_close() sets the closing function for the store_loader.</p> <p>OSSL_STORE_LOADER_free() frees the given store_loader.</p> <p>OSSL_STORE_register_loader() register the given store_loader and thereby makes it available for use with OSSL_STORE_open(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close().</p> <p>OSSL_STORE_unregister_loader() unregister the store loader for the given scheme.</p>"},{"location":"man3/OSSL_STORE_LOADER/#notes","title":"NOTES","text":"<p>The file: scheme has built in support.</p>"},{"location":"man3/OSSL_STORE_LOADER/#return-values","title":"RETURN VALUES","text":"<p>The functions with the types OSSL_STORE_open_fn, OSSL_STORE_ctrl_fn, OSSL_STORE_expect_fn, OSSL_STORE_load_fn, OSSL_STORE_eof_fn and OSSL_STORE_close_fn have the same return values as OSSL_STORE_open(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.</p> <p>OSSL_STORE_LOADER_new() returns a pointer to a OSSL_STORE_LOADER on success, or NULL on failure.</p> <p>OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.</p> <p>OSSL_STORE_register_loader() returns 1 on success, or 0 on failure.</p> <p>OSSL_STORE_unregister_loader() returns the unregistered loader on success, or NULL on failure.</p>"},{"location":"man3/OSSL_STORE_LOADER/#see-also","title":"SEE ALSO","text":"<p>ossl_store(7), OSSL_STORE_open(3)</p>"},{"location":"man3/OSSL_STORE_LOADER/#history","title":"HISTORY","text":"<p>OSSL_STORE_LOADER(), OSSL_STORE_LOADER_CTX(), OSSL_STORE_LOADER_new(), OSSL_STORE_LOADER_set0_scheme(), OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof(), OSSL_STORE_LOADER_set_close(), OSSL_STORE_LOADER_free(), OSSL_STORE_register_loader(), OSSL_STORE_unregister_loader(), OSSL_STORE_open_fn(), OSSL_STORE_ctrl_fn(), OSSL_STORE_load_fn(), OSSL_STORE_eof_fn() and OSSL_STORE_close_fn() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/OSSL_STORE_LOADER/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OSSL_STORE_SEARCH/","title":"OSSL_STORE_SEARCH","text":""},{"location":"man3/OSSL_STORE_SEARCH/#name","title":"NAME","text":"<p>OSSL_STORE_SEARCH, OSSL_STORE_SEARCH_by_name, OSSL_STORE_SEARCH_by_issuer_serial, OSSL_STORE_SEARCH_by_key_fingerprint, OSSL_STORE_SEARCH_by_alias, OSSL_STORE_SEARCH_free, OSSL_STORE_SEARCH_get_type, OSSL_STORE_SEARCH_get0_name, OSSL_STORE_SEARCH_get0_serial, OSSL_STORE_SEARCH_get0_bytes, OSSL_STORE_SEARCH_get0_string, OSSL_STORE_SEARCH_get0_digest - Type and functions to create OSSL_STORE search criteria</p>"},{"location":"man3/OSSL_STORE_SEARCH/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/store.h&gt;\n\ntypedef struct ossl_store_search_st OSSL_STORE_SEARCH;\n\nOSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_name(X509_NAME *name);\nOSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,\n                                                      const ASN1_INTEGER\n                                                      *serial);\nOSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,\n                                                        const unsigned char\n                                                        *bytes, int len);\nOSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_alias(const char *alias);\n\nvoid OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH *search);\n\nint OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH *criterion);\nX509_NAME *OSSL_STORE_SEARCH_get0_name(OSSL_STORE_SEARCH *criterion);\nconst ASN1_INTEGER *OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH\n                                                  *criterion);\nconst unsigned char *OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH\n                                                  *criterion, size_t *length);\nconst char *OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH *criterion);\nconst EVP_MD *OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH\n                                            *criterion);\n</code></pre>"},{"location":"man3/OSSL_STORE_SEARCH/#description","title":"DESCRIPTION","text":"<p>These functions are used to specify search criteria to help search for specific objects through other names than just the URI that's given to OSSL_STORE_open(). For example, this can be useful for an application that has received a URI and then wants to add on search criteria in a uniform and supported manner.</p>"},{"location":"man3/OSSL_STORE_SEARCH/#types","title":"Types","text":"<p>OSSL_STORE_SEARCH is an opaque type that holds the constructed search criterion, and that can be given to an OSSL_STORE context with OSSL_STORE_find().</p> <p>The calling application owns the allocation of an OSSL_STORE_SEARCH at all times, and should therefore be careful not to deallocate it before OSSL_STORE_close() has been called for the OSSL_STORE context it was given to.</p>"},{"location":"man3/OSSL_STORE_SEARCH/#application-functions","title":"Application Functions","text":"<p>OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), and OSSL_STORE_SEARCH_by_alias() are used to create an OSSL_STORE_SEARCH from a subject name, an issuer name and serial number pair, a key fingerprint, and an alias (for example a friendly name). The parameters that are provided are not copied, only referred to in a criterion, so they must have at least the same life time as the created OSSL_STORE_SEARCH.</p> <p>OSSL_STORE_SEARCH_free() is used to free the OSSL_STORE_SEARCH.</p>"},{"location":"man3/OSSL_STORE_SEARCH/#loader-functions","title":"Loader Functions","text":"<p>OSSL_STORE_SEARCH_get_type() returns the criterion type for the given OSSL_STORE_SEARCH.</p> <p>OSSL_STORE_SEARCH_get0_name(), OSSL_STORE_SEARCH_get0_serial(), OSSL_STORE_SEARCH_get0_bytes(), OSSL_STORE_SEARCH_get0_string(), and OSSL_STORE_SEARCH_get0_digest() are used to retrieve different data from a OSSL_STORE_SEARCH, as available for each type. For more information, see \"SUPPORTED CRITERION TYPES\" below.</p>"},{"location":"man3/OSSL_STORE_SEARCH/#supported-criterion-types","title":"SUPPORTED CRITERION TYPES","text":"<p>Currently supported criterion types are:</p> <ul> <li> <p>OSSL_STORE_SEARCH_BY_NAME</p> <p>This criterion supports a search by exact match of subject name. The subject name itself is a X509_NAME pointer. A criterion of this type is created with OSSL_STORE_SEARCH_by_name(), and the actual subject name is retrieved with OSSL_STORE_SEARCH_get0_name().</p> </li> <li> <p>OSSL_STORE_SEARCH_BY_ISSUER_SERIAL</p> <p>This criterion supports a search by exact match of both issuer name and serial number. The issuer name itself is a X509_NAME pointer, and the serial number is a ASN1_INTEGER pointer. A criterion of this type is created with OSSL_STORE_SEARCH_by_issuer_serial() and the actual issuer name and serial number are retrieved with OSSL_STORE_SEARCH_get0_name() and OSSL_STORE_SEARCH_get0_serial().</p> </li> <li> <p>OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT</p> <p>This criterion supports a search by exact match of key fingerprint. The key fingerprint in itself is a string of bytes and its length, as well as the algorithm that was used to compute the fingerprint. The digest may be left unspecified (NULL), and in that case, the loader has to decide on a default digest and compare fingerprints accordingly. A criterion of this type is created with OSSL_STORE_SEARCH_by_key_fingerprint() and the actual fingerprint and its length can be retrieved with OSSL_STORE_SEARCH_get0_bytes(). The digest can be retrieved with OSSL_STORE_SEARCH_get0_digest().</p> </li> <li> <p>OSSL_STORE_SEARCH_BY_ALIAS</p> <p>This criterion supports a search by match of an alias of some kind. The alias in itself is a simple C string. A criterion of this type is created with OSSL_STORE_SEARCH_by_alias() and the actual alias is retrieved with OSSL_STORE_SEARCH_get0_string().</p> </li> </ul>"},{"location":"man3/OSSL_STORE_SEARCH/#return-values","title":"RETURN VALUES","text":"<p>OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), and OSSL_STORE_SEARCH_by_alias() return a OSSL_STORE_SEARCH pointer on success, or NULL on failure.</p> <p>OSSL_STORE_SEARCH_get_type() returns the criterion type of the given OSSL_STORE_SEARCH. There is no error value.</p> <p>OSSL_STORE_SEARCH_get0_name() returns a X509_NAME pointer on success, or NULL when the given OSSL_STORE_SEARCH was of a different type.</p> <p>OSSL_STORE_SEARCH_get0_serial() returns a ASN1_INTEGER pointer on success, or NULL when the given OSSL_STORE_SEARCH was of a different type.</p> <p>OSSL_STORE_SEARCH_get0_bytes() returns a const unsigned char pointer and sets *length to the strings length on success, or NULL when the given OSSL_STORE_SEARCH was of a different type.</p> <p>OSSL_STORE_SEARCH_get0_string() returns a const char pointer on success, or NULL when the given OSSL_STORE_SEARCH was of a different type.</p> <p>OSSL_STORE_SEARCH_get0_digest() returns a const EVP_MD pointer. NULL is a valid value and means that the store loader default will be used when applicable.</p>"},{"location":"man3/OSSL_STORE_SEARCH/#see-also","title":"SEE ALSO","text":"<p>ossl_store(7), OSSL_STORE_supports_search(3), OSSL_STORE_find(3)</p>"},{"location":"man3/OSSL_STORE_SEARCH/#history","title":"HISTORY","text":"<p>OSSL_STORE_SEARCH, OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), OSSL_STORE_SEARCH_by_alias(), OSSL_STORE_SEARCH_free(), OSSL_STORE_SEARCH_get_type(), OSSL_STORE_SEARCH_get0_name(), OSSL_STORE_SEARCH_get0_serial(), OSSL_STORE_SEARCH_get0_bytes(), and OSSL_STORE_SEARCH_get0_string() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/OSSL_STORE_SEARCH/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OSSL_STORE_expect/","title":"OSSL_STORE_expect","text":""},{"location":"man3/OSSL_STORE_expect/#name","title":"NAME","text":"<p>OSSL_STORE_expect, OSSL_STORE_supports_search, OSSL_STORE_find - Specify what object type is expected</p>"},{"location":"man3/OSSL_STORE_expect/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/store.h&gt;\n\nint OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type);\n\nint OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int criterion_type);\n\nint OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search);\n</code></pre>"},{"location":"man3/OSSL_STORE_expect/#description","title":"DESCRIPTION","text":"<p>OSSL_STORE_expect() helps applications filter what OSSL_STORE_load() returns by specifying a OSSL_STORE_INFO type. For example, if <code>file:/foo/bar/store.pem</code> contains several different objects and only the certificates are interesting, the application can simply say that it expects the type OSSL_STORE_INFO_CERT. All known object types (see \"SUPPORTED OBJECTS\" in OSSL_STORE_INFO(3)) except for OSSL_STORE_INFO_NAME are supported.</p> <p>OSSL_STORE_find() helps applications specify a criterion for a more fine grained search of objects.</p> <p>OSSL_STORE_supports_search() checks if the loader of the given OSSL_STORE context supports the given search type. See \"SUPPORTED CRITERION TYPES\" in OSSL_STORE_SEARCH for information on the supported search criterion types.</p> <p>OSSL_STORE_expect() and OSSL_STORE_find must be called before the first OSSL_STORE_load() of a given session, or they will fail.</p>"},{"location":"man3/OSSL_STORE_expect/#notes","title":"NOTES","text":"<p>If a more elaborate filter is required by the application, a better choice would be to use a post-processing function. See OSSL_STORE_open(3) for more information.</p> <p>However, some loaders may take advantage of the knowledge of an expected type to make object retrieval more efficient, so if a single type is expected, this method is usually preferable.</p>"},{"location":"man3/OSSL_STORE_expect/#return-values","title":"RETURN VALUES","text":"<p>OSSL_STORE_expect() returns 1 on success, or 0 on failure.</p> <p>OSSL_STORE_supports_search() returns 1 if the criterion is supported, or 0 otherwise.</p> <p>OSSL_STORE_find() returns 1 on success, or 0 on failure.</p>"},{"location":"man3/OSSL_STORE_expect/#see-also","title":"SEE ALSO","text":"<p>ossl_store(7), OSSL_STORE_INFO(3), OSSL_STORE_SEARCH(3), OSSL_STORE_load(3)</p>"},{"location":"man3/OSSL_STORE_expect/#history","title":"HISTORY","text":"<p>OSSL_STORE_expect(), OSSL_STORE_supports_search() and OSSL_STORE_find() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/OSSL_STORE_expect/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OSSL_STORE_open/","title":"OSSL_STORE_open","text":""},{"location":"man3/OSSL_STORE_open/#name","title":"NAME","text":"<p>OSSL_STORE_CTX, OSSL_STORE_post_process_info_fn, OSSL_STORE_open, OSSL_STORE_ctrl, OSSL_STORE_load, OSSL_STORE_eof, OSSL_STORE_error, OSSL_STORE_close - Types and functions to read objects from a URI</p>"},{"location":"man3/OSSL_STORE_open/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/store.h&gt;\n\ntypedef struct ossl_store_ctx_st OSSL_STORE_CTX;\n\ntypedef OSSL_STORE_INFO *(*OSSL_STORE_post_process_info_fn)(OSSL_STORE_INFO *,\n                                                            void *);\n\nOSSL_STORE_CTX *OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,\n                                void *ui_data,\n                                OSSL_STORE_post_process_info_fn post_process,\n                                void *post_process_data);\nint OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ... /* args */);\nOSSL_STORE_INFO *OSSL_STORE_load(OSSL_STORE_CTX *ctx);\nint OSSL_STORE_eof(OSSL_STORE_CTX *ctx);\nint OSSL_STORE_error(OSSL_STORE_CTX *ctx);\nint OSSL_STORE_close(OSSL_STORE_CTX *ctx);\n</code></pre>"},{"location":"man3/OSSL_STORE_open/#description","title":"DESCRIPTION","text":"<p>These functions help the application to fetch supported objects (see \"SUPPORTED OBJECTS\" in OSSL_STORE_INFO(3) for information on which those are) from a given URI (see \"SUPPORTED SCHEMES\" for more information on the supported URI schemes). The general method to do so is to \"open\" the URI using OSSL_STORE_open(), read each available and supported object using OSSL_STORE_load() as long as OSSL_STORE_eof() hasn't been reached, and finish it off with OSSL_STORE_close().</p> <p>The retrieved information is stored in a OSSL_STORE_INFO, which is further described in OSSL_STORE_INFO(3).</p>"},{"location":"man3/OSSL_STORE_open/#types","title":"Types","text":"<p>OSSL_STORE_CTX is a context variable that holds all the internal information for OSSL_STORE_open(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close() to work together.</p>"},{"location":"man3/OSSL_STORE_open/#functions","title":"Functions","text":"<p>OSSL_STORE_open() takes a uri or path uri, password UI method ui_method with associated data ui_data, and post processing callback post_process with associated data post_process_data, opens a channel to the data located at that URI and returns a OSSL_STORE_CTX with all necessary internal information. The given ui_method and ui_data will be reused by all functions that use OSSL_STORE_CTX when interaction is needed, for instance to provide a password. The given post_process and post_process_data will be reused by OSSL_STORE_load() to manipulate or drop the value to be returned. The post_process function drops values by returning NULL, which will cause OSSL_STORE_load() to start its process over with loading the next object, until post_process returns something other than NULL, or the end of data is reached as indicated by OSSL_STORE_eof().</p> <p>OSSL_STORE_ctrl() takes a OSSL_STORE_CTX, and command number cmd and more arguments not specified here. The available loader specific command numbers and arguments they each take depends on the loader that's used and is documented together with that loader.</p> <p>There are also global controls available:</p> <ul> <li> <p>OSSL_STORE_C_USE_SECMEM</p> <p>Controls if the loader should attempt to use secure memory for any allocated OSSL_STORE_INFO and its contents. This control expects one argument, a pointer to an int that is expected to have the value 1 (yes) or 0 (no). Any other value is an error.</p> </li> </ul> <p>OSSL_STORE_load() takes a OSSL_STORE_CTX, tries to load the next available object and return it wrapped with  OSSL_STORE_INFO.</p> <p>OSSL_STORE_eof() takes a OSSL_STORE_CTX and checks if we've reached the end of data.</p> <p>OSSL_STORE_error() takes a OSSL_STORE_CTX and checks if an error occurred in the last OSSL_STORE_load() call. Note that it may still be meaningful to try and load more objects, unless OSSL_STORE_eof() shows that the end of data has been reached.</p> <p>OSSL_STORE_close() takes a OSSL_STORE_CTX, closes the channel that was opened by OSSL_STORE_open() and frees all other information that was stored in the OSSL_STORE_CTX, as well as the OSSL_STORE_CTX itself. If ctx is NULL it does nothing.</p>"},{"location":"man3/OSSL_STORE_open/#supported-schemes","title":"SUPPORTED SCHEMES","text":"<p>The basic supported scheme is file:. Any other scheme can be added dynamically, using OSSL_STORE_register_loader().</p>"},{"location":"man3/OSSL_STORE_open/#notes","title":"NOTES","text":"<p>A string without a scheme prefix (that is, a non-URI string) is implicitly interpreted as using the <code>file:</code> scheme.</p> <p>There are some tools that can be used together with OSSL_STORE_open() to determine if any failure is caused by an unparsable URI, or if it's a different error (such as memory allocation failures); if the URI was parsable but the scheme unregistered, the top error will have the reason <code>OSSL_STORE_R_UNREGISTERED_SCHEME</code>.</p> <p>These functions make no direct assumption regarding the pass phrase received from the password callback. The loaders may make assumptions, however. For example, the file: scheme loader inherits the assumptions made by OpenSSL functionality that handles the different file types; this is mostly relevant for PKCS#12 objects. See passphrase-encoding(7) for further information.</p>"},{"location":"man3/OSSL_STORE_open/#return-values","title":"RETURN VALUES","text":"<p>OSSL_STORE_open() returns a pointer to a OSSL_STORE_CTX on success, or NULL on failure.</p> <p>OSSL_STORE_load() returns a pointer to a OSSL_STORE_INFO on success, or NULL on error or when end of data is reached. Use OSSL_STORE_error() and OSSL_STORE_eof() to determine the meaning of a returned NULL.</p> <p>OSSL_STORE_eof() returns 1 if the end of data has been reached, otherwise 0.</p> <p>OSSL_STORE_error() returns 1 if an error occurred in an OSSL_STORE_load() call, otherwise 0.</p> <p>OSSL_STORE_ctrl() and OSSL_STORE_close() returns 1 on success, or 0 on failure.</p>"},{"location":"man3/OSSL_STORE_open/#see-also","title":"SEE ALSO","text":"<p>ossl_store(7), OSSL_STORE_INFO(3), OSSL_STORE_register_loader(3), passphrase-encoding(7)</p>"},{"location":"man3/OSSL_STORE_open/#history","title":"HISTORY","text":"<p>OSSL_STORE_CTX(), OSSL_STORE_post_process_info_fn(), OSSL_STORE_open(), OSSL_STORE_ctrl(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close() were added in OpenSSL 1.1.1.</p> <p>Handling of NULL ctx argument for OSSL_STORE_close() was introduced in OpenSSL 1.1.1h.</p>"},{"location":"man3/OSSL_STORE_open/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/OpenSSL_add_all_algorithms/","title":"OpenSSL_add_all_algorithms","text":""},{"location":"man3/OpenSSL_add_all_algorithms/#name","title":"NAME","text":"<p>OpenSSL_add_all_algorithms, OpenSSL_add_all_ciphers, OpenSSL_add_all_digests, EVP_cleanup - add algorithms to internal table</p>"},{"location":"man3/OpenSSL_add_all_algorithms/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n</code></pre> <p>Deprecated:</p> <pre><code># if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid OpenSSL_add_all_algorithms(void);\nvoid OpenSSL_add_all_ciphers(void);\nvoid OpenSSL_add_all_digests(void);\n\nvoid EVP_cleanup(void)\n</code></pre> <p># endif</p>"},{"location":"man3/OpenSSL_add_all_algorithms/#description","title":"DESCRIPTION","text":"<p>OpenSSL keeps an internal table of digest algorithms and ciphers. It uses this table to lookup ciphers via functions such as EVP_get_cipher_byname().</p> <p>OpenSSL_add_all_digests() adds all digest algorithms to the table.</p> <p>OpenSSL_add_all_algorithms() adds all algorithms to the table (digests and ciphers).</p> <p>OpenSSL_add_all_ciphers() adds all encryption algorithms to the table including password based encryption algorithms.</p> <p>In versions prior to 1.1.0 EVP_cleanup() removed all ciphers and digests from the table. It no longer has any effect in OpenSSL 1.1.0.</p>"},{"location":"man3/OpenSSL_add_all_algorithms/#return-values","title":"RETURN VALUES","text":"<p>None of the functions return a value.</p>"},{"location":"man3/OpenSSL_add_all_algorithms/#see-also","title":"SEE ALSO","text":"<p>evp(7), EVP_DigestInit(3), EVP_EncryptInit(3)</p>"},{"location":"man3/OpenSSL_add_all_algorithms/#history","title":"HISTORY","text":"<p>The OpenSSL_add_all_algorithms(), OpenSSL_add_all_ciphers(), OpenSSL_add_all_digests(), and EVP_cleanup(), functions were deprecated in OpenSSL 1.1.0 by OPENSSL_init_crypto() and should not be used.</p>"},{"location":"man3/OpenSSL_add_all_algorithms/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_bytes_read_bio/","title":"PEM_bytes_read_bio","text":""},{"location":"man3/PEM_bytes_read_bio/#name","title":"NAME","text":"<p>PEM_bytes_read_bio, PEM_bytes_read_bio_secmem - read a PEM-encoded data structure from a BIO</p>"},{"location":"man3/PEM_bytes_read_bio/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pem.h&gt;\n\nint PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm,\n                       const char *name, BIO *bp, pem_password_cb *cb,\n                       void *u);\nint PEM_bytes_read_bio_secmem(unsigned char **pdata, long *plen, char **pnm,\n                              const char *name, BIO *bp, pem_password_cb *cb,\n                              void *u);\n</code></pre>"},{"location":"man3/PEM_bytes_read_bio/#description","title":"DESCRIPTION","text":"<p>PEM_bytes_read_bio() reads PEM-formatted (IETF RFC 1421 and IETF RFC 7468) data from the BIO bp for the data type given in name (RSA PRIVATE KEY, CERTIFICATE, etc.).  If multiple PEM-encoded data structures are present in the same stream, PEM_bytes_read_bio() will skip non-matching data types and continue reading.  Non-PEM data present in the stream may cause an error.</p> <p>The PEM header may indicate that the following data is encrypted; if so, the data will be decrypted, waiting on user input to supply a passphrase if needed.  The password callback cb and rock u are used to obtain the decryption passphrase, if applicable.</p> <p>Some data types have compatibility aliases, such as a file containing X509 CERTIFICATE matching a request for the deprecated type CERTIFICATE. The actual type indicated by the file is returned in *pnm if pnm is non-NULL.  The caller must free the storage pointed to by *pnm.</p> <p>The returned data is the DER-encoded form of the requested type, in *pdata with length *plen.  The caller must free the storage pointed to by *pdata.</p> <p>PEM_bytes_read_bio_secmem() is similar to PEM_bytes_read_bio(), but uses memory from the secure heap for its temporary buffers and the storage returned in *pdata and *pnm.  Accordingly, the caller must use OPENSSL_secure_free() to free that storage.</p>"},{"location":"man3/PEM_bytes_read_bio/#notes","title":"NOTES","text":"<p>PEM_bytes_read_bio_secmem() only enforces that the secure heap is used for storage allocated within the PEM processing stack.  The BIO stack from which input is read may also use temporary buffers, which are not necessarily allocated from the secure heap.  In cases where it is desirable to ensure that the contents of the PEM file only appears in memory from the secure heap, care is needed in generating the BIO passed as bp.  In particular, the use of BIO_s_file() indicates the use of the operating system stdio functionality, which includes buffering as a feature; BIO_s_fd() is likely to be more appropriate in such cases.</p> <p>These functions make no assumption regarding the pass phrase received from the password callback. It will simply be treated as a byte sequence.</p>"},{"location":"man3/PEM_bytes_read_bio/#return-values","title":"RETURN VALUES","text":"<p>PEM_bytes_read_bio() and PEM_bytes_read_bio_secmem() return 1 for success or 0 for failure.</p>"},{"location":"man3/PEM_bytes_read_bio/#see-also","title":"SEE ALSO","text":"<p>PEM_read_bio_ex(3), passphrase-encoding(7)</p>"},{"location":"man3/PEM_bytes_read_bio/#history","title":"HISTORY","text":"<p>PEM_bytes_read_bio_secmem() was introduced in OpenSSL 1.1.1</p>"},{"location":"man3/PEM_bytes_read_bio/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_read/","title":"PEM_read","text":""},{"location":"man3/PEM_read/#name","title":"NAME","text":"<p>PEM_write, PEM_write_bio, PEM_read, PEM_read_bio, PEM_do_header, PEM_get_EVP_CIPHER_INFO - PEM encoding routines</p>"},{"location":"man3/PEM_read/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pem.h&gt;\n\nint PEM_write(FILE *fp, const char *name, const char *header,\n              const unsigned char *data, long len)\nint PEM_write_bio(BIO *bp, const char *name, const char *header,\n                  const unsigned char *data, long len)\n\nint PEM_read(FILE *fp, char **name, char **header,\n             unsigned char **data, long *len);\nint PEM_read_bio(BIO *bp, char **name, char **header,\n                 unsigned char **data, long *len);\n\nint PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cinfo);\nint PEM_do_header(EVP_CIPHER_INFO *cinfo, unsigned char *data, long *len,\n                  pem_password_cb *cb, void *u);\n</code></pre>"},{"location":"man3/PEM_read/#description","title":"DESCRIPTION","text":"<p>These functions read and write PEM-encoded objects, using the PEM type name, any additional header information, and the raw data of length len.</p> <p>PEM is the term used for binary content encoding first defined in IETF RFC 1421.  The content is a series of base64-encoded lines, surrounded by begin/end markers each on their own line.  For example:</p> <pre><code>-----BEGIN PRIVATE KEY-----\nMIICdg....\n... bhTQ==\n-----END PRIVATE KEY-----\n</code></pre> <p>Optional header line(s) may appear after the begin line, and their existence depends on the type of object being written or read.</p> <p>PEM_write() writes to the file fp, while PEM_write_bio() writes to the BIO bp.  The name is the name to use in the marker, the header is the header value or NULL, and data and len specify the data and its length.</p> <p>The final data buffer is typically an ASN.1 object which can be decoded with the d2i function appropriate to the type name; see d2i_X509(3) for examples.</p> <p>PEM_read() reads from the file fp, while PEM_read_bio() reads from the BIO bp. Both skip any non-PEM data that precedes the start of the next PEM object. When an object is successfully retrieved, the type name from the \"----BEGIN &lt;type&gt;-----\" is returned via the name argument, any encapsulation headers are returned in header and the base64-decoded content and its length are returned via data and len respectively. The name, header and data pointers are allocated via OPENSSL_malloc() and should be freed by the caller via OPENSSL_free() when no longer needed.</p> <p>PEM_get_EVP_CIPHER_INFO() can be used to determine the data returned by PEM_read() or PEM_read_bio() is encrypted and to retrieve the associated cipher and IV. The caller passes a pointer to structure of type EVP_CIPHER_INFO via the cinfo argument and the header returned via PEM_read() or PEM_read_bio(). If the call is successful 1 is returned and the cipher and IV are stored at the address pointed to by cinfo. When the header is malformed, or not supported or when the cipher is unknown or some internal error happens 0 is returned. This function is deprecated, see NOTES below.</p> <p>PEM_do_header() can then be used to decrypt the data if the header indicates encryption. The cinfo argument is a pointer to the structure initialized by the previous call to PEM_get_EVP_CIPHER_INFO(). The data and len arguments are those returned by the previous call to PEM_read() or PEM_read_bio(). The cb and u arguments make it possible to override the default password prompt function as described in PEM_read_PrivateKey(3). On successful completion the data is decrypted in place, and len is updated to indicate the plaintext length. This function is deprecated, see NOTES below.</p> <p>If the data is a priori known to not be encrypted, then neither PEM_do_header() nor PEM_get_EVP_CIPHER_INFO() need be called.</p>"},{"location":"man3/PEM_read/#return-values","title":"RETURN VALUES","text":"<p>PEM_read() and PEM_read_bio() return 1 on success and 0 on failure, the latter includes the case when no more PEM objects remain in the input file. To distinguish end of file from more serious errors the caller must peek at the error stack and check for PEM_R_NO_START_LINE, which indicates that no more PEM objects were found.  See ERR_peek_last_error(3), ERR_GET_REASON(3).</p> <p>PEM_get_EVP_CIPHER_INFO() and PEM_do_header() return 1 on success, and 0 on failure. The data is likely meaningless if these functions fail.</p>"},{"location":"man3/PEM_read/#notes","title":"NOTES","text":"<p>The PEM_get_EVP_CIPHER_INFO() and PEM_do_header() functions are deprecated. This is because the underlying PEM encryption format is obsolete, and should be avoided. It uses an encryption format with an OpenSSL-specific key-derivation function, which employs MD5 with an iteration count of 1! Instead, private keys should be stored in PKCS#8 form, with a strong PKCS#5 v2.0 PBE. See PEM_write_PrivateKey(3) and d2i_PKCS8PrivateKey_bio(3).</p> <p>PEM_do_header() makes no assumption regarding the pass phrase received from the password callback. It will simply be treated as a byte sequence.</p>"},{"location":"man3/PEM_read/#see-also","title":"SEE ALSO","text":"<p>ERR_peek_last_error(3), ERR_GET_LIB(3), d2i_PKCS8PrivateKey_bio(3), passphrase-encoding(7)</p>"},{"location":"man3/PEM_read/#copyright","title":"COPYRIGHT","text":"<p>Copyright 1998-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_read_CMS/","title":"PEM_read_CMS","text":""},{"location":"man3/PEM_read_CMS/#name","title":"NAME","text":"<p>DECLARE_PEM_rw, PEM_read_CMS, PEM_read_bio_CMS, PEM_write_CMS, PEM_write_bio_CMS, PEM_write_DHxparams, PEM_write_bio_DHxparams, PEM_read_ECPKParameters, PEM_read_bio_ECPKParameters, PEM_write_ECPKParameters, PEM_write_bio_ECPKParameters, PEM_read_ECPrivateKey, PEM_write_ECPrivateKey, PEM_write_bio_ECPrivateKey, PEM_read_EC_PUBKEY, PEM_read_bio_EC_PUBKEY, PEM_write_EC_PUBKEY, PEM_write_bio_EC_PUBKEY, PEM_read_NETSCAPE_CERT_SEQUENCE, PEM_read_bio_NETSCAPE_CERT_SEQUENCE, PEM_write_NETSCAPE_CERT_SEQUENCE, PEM_write_bio_NETSCAPE_CERT_SEQUENCE, PEM_read_PKCS8, PEM_read_bio_PKCS8, PEM_write_PKCS8, PEM_write_bio_PKCS8, PEM_write_PKCS8_PRIV_KEY_INFO, PEM_read_bio_PKCS8_PRIV_KEY_INFO, PEM_read_PKCS8_PRIV_KEY_INFO, PEM_write_bio_PKCS8_PRIV_KEY_INFO, PEM_read_SSL_SESSION, PEM_read_bio_SSL_SESSION, PEM_write_SSL_SESSION, PEM_write_bio_SSL_SESSION - PEM object encoding routines</p>"},{"location":"man3/PEM_read_CMS/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pem.h&gt;\n\nDECLARE_PEM_rw(name, TYPE)\n\nTYPE *PEM_read_TYPE(FILE *fp, TYPE **a, pem_password_cb *cb, void *u);\nTYPE *PEM_read_bio_TYPE(BIO *bp, TYPE **a, pem_password_cb *cb, void *u);\nint PEM_write_TYPE(FILE *fp, const TYPE *a);\nint PEM_write_bio_TYPE(BIO *bp, const TYPE *a);\n</code></pre>"},{"location":"man3/PEM_read_CMS/#description","title":"DESCRIPTION","text":"<p>In the description below, TYPE is used as a placeholder for any of the OpenSSL datatypes, such as X509. The macro DECLARE_PEM_rw expands to the set of declarations shown in the next four lines of the synopsis.</p> <p>These routines convert between local instances of ASN1 datatypes and the PEM encoding.  For more information on the templates, see ASN1_ITEM(3).  For more information on the lower-level routines used by the functions here, see PEM_read(3).</p> <p>PEM_read_TYPE() reads a PEM-encoded object of TYPE from the file fp and returns it.  The cb and u parameters are as described in pem_password_cb(3).</p> <p>PEM_read_bio_TYPE() is similar to PEM_read_TYPE() but reads from the BIO bp.</p> <p>PEM_write_TYPE() writes the PEM encoding of the object a to the file fp.</p> <p>PEM_write_bio_TYPE() similarly writes to the BIO bp.</p>"},{"location":"man3/PEM_read_CMS/#notes","title":"NOTES","text":"<p>These functions make no assumption regarding the pass phrase received from the password callback. It will simply be treated as a byte sequence.</p>"},{"location":"man3/PEM_read_CMS/#return-values","title":"RETURN VALUES","text":"<p>PEM_read_TYPE() and PEM_read_bio_TYPE() return a pointer to an allocated object, which should be released by calling TYPE_free(), or NULL on error.</p> <p>PEM_write_TYPE() and PEM_write_bio_TYPE() return the number of bytes written or zero on error.</p>"},{"location":"man3/PEM_read_CMS/#see-also","title":"SEE ALSO","text":"<p>PEM_read(3), passphrase-encoding(7)</p>"},{"location":"man3/PEM_read_CMS/#copyright","title":"COPYRIGHT","text":"<p>Copyright 1998-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/","title":"PEM_read_bio_PrivateKey","text":""},{"location":"man3/PEM_read_bio_PrivateKey/#name","title":"NAME","text":"<p>pem_password_cb, PEM_read_bio_PrivateKey, PEM_read_PrivateKey, PEM_write_bio_PrivateKey, PEM_write_bio_PrivateKey_traditional, PEM_write_PrivateKey, PEM_write_bio_PKCS8PrivateKey, PEM_write_PKCS8PrivateKey, PEM_write_bio_PKCS8PrivateKey_nid, PEM_write_PKCS8PrivateKey_nid, PEM_read_bio_PUBKEY, PEM_read_PUBKEY, PEM_write_bio_PUBKEY, PEM_write_PUBKEY, PEM_read_bio_RSAPrivateKey, PEM_read_RSAPrivateKey, PEM_write_bio_RSAPrivateKey, PEM_write_RSAPrivateKey, PEM_read_bio_RSAPublicKey, PEM_read_RSAPublicKey, PEM_write_bio_RSAPublicKey, PEM_write_RSAPublicKey, PEM_read_bio_RSA_PUBKEY, PEM_read_RSA_PUBKEY, PEM_write_bio_RSA_PUBKEY, PEM_write_RSA_PUBKEY, PEM_read_bio_DSAPrivateKey, PEM_read_DSAPrivateKey, PEM_write_bio_DSAPrivateKey, PEM_write_DSAPrivateKey, PEM_read_bio_DSA_PUBKEY, PEM_read_DSA_PUBKEY, PEM_write_bio_DSA_PUBKEY, PEM_write_DSA_PUBKEY, PEM_read_bio_Parameters, PEM_write_bio_Parameters, PEM_read_bio_DSAparams, PEM_read_DSAparams, PEM_write_bio_DSAparams, PEM_write_DSAparams, PEM_read_bio_DHparams, PEM_read_DHparams, PEM_write_bio_DHparams, PEM_write_DHparams, PEM_read_bio_X509, PEM_read_X509, PEM_write_bio_X509, PEM_write_X509, PEM_read_bio_X509_AUX, PEM_read_X509_AUX, PEM_write_bio_X509_AUX, PEM_write_X509_AUX, PEM_read_bio_X509_REQ, PEM_read_X509_REQ, PEM_write_bio_X509_REQ, PEM_write_X509_REQ, PEM_write_bio_X509_REQ_NEW, PEM_write_X509_REQ_NEW, PEM_read_bio_X509_CRL, PEM_read_X509_CRL, PEM_write_bio_X509_CRL, PEM_write_X509_CRL, PEM_read_bio_PKCS7, PEM_read_PKCS7, PEM_write_bio_PKCS7, PEM_write_PKCS7 - PEM routines</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pem.h&gt;\n\ntypedef int pem_password_cb(char *buf, int size, int rwflag, void *u);\n\nEVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x,\n                                  pem_password_cb *cb, void *u);\nEVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x,\n                              pem_password_cb *cb, void *u);\nint PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,\n                             unsigned char *kstr, int klen,\n                             pem_password_cb *cb, void *u);\nint PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,\n                                         const EVP_CIPHER *enc,\n                                         unsigned char *kstr, int klen,\n                                         pem_password_cb *cb, void *u);\nint PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,\n                         unsigned char *kstr, int klen,\n                         pem_password_cb *cb, void *u);\n\nint PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,\n                                  char *kstr, int klen,\n                                  pem_password_cb *cb, void *u);\nint PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,\n                              char *kstr, int klen,\n                              pem_password_cb *cb, void *u);\nint PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,\n                                      char *kstr, int klen,\n                                      pem_password_cb *cb, void *u);\nint PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,\n                                  char *kstr, int klen,\n                                  pem_password_cb *cb, void *u);\n\nEVP_PKEY *PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY **x,\n                              pem_password_cb *cb, void *u);\nEVP_PKEY *PEM_read_PUBKEY(FILE *fp, EVP_PKEY **x,\n                          pem_password_cb *cb, void *u);\nint PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x);\nint PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x);\n\nRSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **x,\n                                pem_password_cb *cb, void *u);\nRSA *PEM_read_RSAPrivateKey(FILE *fp, RSA **x,\n                            pem_password_cb *cb, void *u);\nint PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, const EVP_CIPHER *enc,\n                                unsigned char *kstr, int klen,\n                                pem_password_cb *cb, void *u);\nint PEM_write_RSAPrivateKey(FILE *fp, RSA *x, const EVP_CIPHER *enc,\n                            unsigned char *kstr, int klen,\n                            pem_password_cb *cb, void *u);\n\nRSA *PEM_read_bio_RSAPublicKey(BIO *bp, RSA **x,\n                               pem_password_cb *cb, void *u);\nRSA *PEM_read_RSAPublicKey(FILE *fp, RSA **x,\n                           pem_password_cb *cb, void *u);\nint PEM_write_bio_RSAPublicKey(BIO *bp, RSA *x);\nint PEM_write_RSAPublicKey(FILE *fp, RSA *x);\n\nRSA *PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA **x,\n                             pem_password_cb *cb, void *u);\nRSA *PEM_read_RSA_PUBKEY(FILE *fp, RSA **x,\n                         pem_password_cb *cb, void *u);\nint PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x);\nint PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);\n\nDSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **x,\n                                pem_password_cb *cb, void *u);\nDSA *PEM_read_DSAPrivateKey(FILE *fp, DSA **x,\n                            pem_password_cb *cb, void *u);\nint PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, const EVP_CIPHER *enc,\n                                unsigned char *kstr, int klen,\n                                pem_password_cb *cb, void *u);\nint PEM_write_DSAPrivateKey(FILE *fp, DSA *x, const EVP_CIPHER *enc,\n                            unsigned char *kstr, int klen,\n                            pem_password_cb *cb, void *u);\n\nDSA *PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA **x,\n                             pem_password_cb *cb, void *u);\nDSA *PEM_read_DSA_PUBKEY(FILE *fp, DSA **x,\n                         pem_password_cb *cb, void *u);\nint PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x);\nint PEM_write_DSA_PUBKEY(FILE *fp, DSA *x);\n\nEVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x);\nint PEM_write_bio_Parameters(BIO *bp, const EVP_PKEY *x);\n\nDSA *PEM_read_bio_DSAparams(BIO *bp, DSA **x, pem_password_cb *cb, void *u);\nDSA *PEM_read_DSAparams(FILE *fp, DSA **x, pem_password_cb *cb, void *u);\nint PEM_write_bio_DSAparams(BIO *bp, DSA *x);\nint PEM_write_DSAparams(FILE *fp, DSA *x);\n\nDH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u);\nDH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u);\nint PEM_write_bio_DHparams(BIO *bp, DH *x);\nint PEM_write_DHparams(FILE *fp, DH *x);\n\nX509 *PEM_read_bio_X509(BIO *bp, X509 **x, pem_password_cb *cb, void *u);\nX509 *PEM_read_X509(FILE *fp, X509 **x, pem_password_cb *cb, void *u);\nint PEM_write_bio_X509(BIO *bp, X509 *x);\nint PEM_write_X509(FILE *fp, X509 *x);\n\nX509 *PEM_read_bio_X509_AUX(BIO *bp, X509 **x, pem_password_cb *cb, void *u);\nX509 *PEM_read_X509_AUX(FILE *fp, X509 **x, pem_password_cb *cb, void *u);\nint PEM_write_bio_X509_AUX(BIO *bp, X509 *x);\nint PEM_write_X509_AUX(FILE *fp, X509 *x);\n\nX509_REQ *PEM_read_bio_X509_REQ(BIO *bp, X509_REQ **x,\n                                pem_password_cb *cb, void *u);\nX509_REQ *PEM_read_X509_REQ(FILE *fp, X509_REQ **x,\n                            pem_password_cb *cb, void *u);\nint PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x);\nint PEM_write_X509_REQ(FILE *fp, X509_REQ *x);\nint PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x);\nint PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x);\n\nX509_CRL *PEM_read_bio_X509_CRL(BIO *bp, X509_CRL **x,\n                                pem_password_cb *cb, void *u);\nX509_CRL *PEM_read_X509_CRL(FILE *fp, X509_CRL **x,\n                            pem_password_cb *cb, void *u);\nint PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x);\nint PEM_write_X509_CRL(FILE *fp, X509_CRL *x);\n\nPKCS7 *PEM_read_bio_PKCS7(BIO *bp, PKCS7 **x, pem_password_cb *cb, void *u);\nPKCS7 *PEM_read_PKCS7(FILE *fp, PKCS7 **x, pem_password_cb *cb, void *u);\nint PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x);\nint PEM_write_PKCS7(FILE *fp, PKCS7 *x);\n</code></pre>"},{"location":"man3/PEM_read_bio_PrivateKey/#description","title":"DESCRIPTION","text":"<p>The PEM functions read or write structures in PEM format. In this sense PEM format is simply base64 encoded data surrounded by header lines.</p> <p>For more details about the meaning of arguments see the PEM FUNCTION ARGUMENTS section.</p> <p>Each operation has four functions associated with it. For brevity the term \"TYPE functions\" will be used below to collectively refer to the PEM_read_bio_TYPE(), PEM_read_TYPE(), PEM_write_bio_TYPE(), and PEM_write_TYPE() functions.</p> <p>The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure. The write routines use PKCS#8 private key format and are equivalent to PEM_write_bio_PKCS8PrivateKey().The read functions transparently handle traditional and PKCS#8 format encrypted and unencrypted keys.</p> <p>PEM_write_bio_PrivateKey_traditional() writes out a private key in the \"traditional\" format with a simple private key marker and should only be used for compatibility with legacy programs.</p> <p>PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write a private key in an EVP_PKEY structure in PKCS#8 EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms. The cipher argument specifies the encryption algorithm to use: unlike some other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers. If cipher is NULL then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead.</p> <p>PEM_write_bio_PKCS8PrivateKey_nid() and PEM_write_PKCS8PrivateKey_nid() also write out a private key as a PKCS#8 EncryptedPrivateKeyInfo however it uses PKCS#5 v1.5 or PKCS#12 encryption algorithms instead. The algorithm to use is specified in the nid parameter and should be the NID of the corresponding OBJECT IDENTIFIER (see NOTES section).</p> <p>The PUBKEY functions process a public key using an EVP_PKEY structure. The public key is encoded as a SubjectPublicKeyInfo structure.</p> <p>The RSAPrivateKey functions process an RSA private key using an RSA structure. The write routines uses traditional format. The read routines handles the same formats as the PrivateKey functions but an error occurs if the private key is not RSA.</p> <p>The RSAPublicKey functions process an RSA public key using an RSA structure. The public key is encoded using a PKCS#1 RSAPublicKey structure.</p> <p>The RSA_PUBKEY functions also process an RSA public key using an RSA structure. However, the public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not RSA.</p> <p>The DSAPrivateKey functions process a DSA private key using a DSA structure. The write routines uses traditional format. The read routines handles the same formats as the PrivateKey functions but an error occurs if the private key is not DSA.</p> <p>The DSA_PUBKEY functions process a DSA public key using a DSA structure. The public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not DSA.</p> <p>The Parameters functions read or write key parameters in PEM format using an EVP_PKEY structure.  The encoding depends on the type of key; for DSA key parameters, it will be a Dss-Parms structure as defined in RFC2459, and for DH key parameters, it will be a PKCS#3 DHparameter structure.  These functions only exist for the BIO type.</p> <p>The DSAparams functions process DSA parameters using a DSA structure. The parameters are encoded using a Dss-Parms structure as defined in RFC2459.</p> <p>The DHparams functions process DH parameters using a DH structure. The parameters are encoded using a PKCS#3 DHparameter structure.</p> <p>The X509 functions process an X509 certificate using an X509 structure. They will also process a trusted X509 certificate but any trust settings are discarded.</p> <p>The X509_AUX functions process a trusted X509 certificate using an X509 structure.</p> <p>The X509_REQ and X509_REQ_NEW functions process a PKCS#10 certificate request using an X509_REQ structure. The X509_REQ write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST (as required by some CAs). The X509_REQ read functions will handle either form so there are no X509_REQ_NEW read functions.</p> <p>The X509_CRL functions process an X509 CRL using an X509_CRL structure.</p> <p>The PKCS7 functions process a PKCS#7 ContentInfo using a PKCS7 structure.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#pem-function-arguments","title":"PEM FUNCTION ARGUMENTS","text":"<p>The PEM functions have many common arguments.</p> <p>The bp BIO parameter (if present) specifies the BIO to read from or write to.</p> <p>The fp FILE parameter (if present) specifies the FILE pointer to read from or write to.</p> <p>The PEM read functions all take an argument TYPE **x and return a TYPE * pointer. Where TYPE is whatever structure the function uses. If x is NULL then the parameter is ignored. If x is not NULL but *x is NULL then the structure returned will be written to *x. If neither x nor *x is NULL then an attempt is made to reuse the structure at *x (but see BUGS and EXAMPLES sections). Irrespective of the value of x a pointer to the structure is always returned (or NULL if an error occurred).</p> <p>The PEM functions which write private keys take an enc parameter which specifies the encryption algorithm to use, encryption is done at the PEM level. If this parameter is set to NULL then the private key is written in unencrypted form.</p> <p>The cb argument is the callback to use when querying for the pass phrase used for encrypted PEM structures (normally only private keys).</p> <p>For the PEM write routines if the kstr parameter is not NULL then klen bytes at kstr are used as the passphrase and cb is ignored.</p> <p>If the cb parameters is set to NULL and the u parameter is not NULL then the u parameter is interpreted as a null terminated string to use as the passphrase. If both cb and u are NULL then the default callback routine is used which will typically prompt for the passphrase on the current terminal with echoing turned off.</p> <p>The default passphrase callback is sometimes inappropriate (for example in a GUI application) so an alternative can be supplied. The callback routine has the following form:</p> <pre><code>int cb(char *buf, int size, int rwflag, void *u);\n</code></pre> <p>buf is the buffer to write the passphrase to. size is the maximum length of the passphrase (i.e. the size of buf). rwflag is a flag which is set to 0 when reading and 1 when writing. A typical routine will ask the user to verify the passphrase (for example by prompting for it twice) if rwflag is 1. The u parameter has the same value as the u parameter passed to the PEM routine. It allows arbitrary data to be passed to the callback by the application (for example a window handle in a GUI application). The callback must return the number of characters in the passphrase or -1 if an error occurred.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#notes","title":"NOTES","text":"<p>The old PrivateKey write routines are retained for compatibility. New applications should write private keys using the PEM_write_bio_PKCS8PrivateKey() or PEM_write_PKCS8PrivateKey() routines because they are more secure (they use an iteration count of 2048 whereas the traditional routines use a count of 1) unless compatibility with older versions of OpenSSL is important.</p> <p>The PrivateKey read routines can be used in all applications because they handle all formats transparently.</p> <p>A frequent cause of problems is attempting to use the PEM routines like this:</p> <pre><code>X509 *x;\n\nPEM_read_bio_X509(bp, &amp;x, 0, NULL);\n</code></pre> <p>this is a bug because an attempt will be made to reuse the data at x which is an uninitialised pointer.</p> <p>These functions make no assumption regarding the pass phrase received from the password callback. It will simply be treated as a byte sequence.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#pem-encryption-format","title":"PEM ENCRYPTION FORMAT","text":"<p>These old PrivateKey routines use a non standard technique for encryption.</p> <p>The private key (or other data) takes the following form:</p> <pre><code>-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,3F17F5316E2BAC89\n\n...base64 encoded data...\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>The line beginning with Proc-Type contains the version and the protection on the encapsulated data. The line beginning DEK-Info contains two comma separated values: the encryption algorithm name as used by EVP_get_cipherbyname() and an initialization vector used by the cipher encoded as a set of hexadecimal digits. After those two lines is the base64-encoded encrypted data.</p> <p>The encryption key is derived using EVP_BytesToKey(). The cipher's initialization vector is passed to EVP_BytesToKey() as the salt parameter. Internally, PKCS5_SALT_LEN bytes of the salt are used (regardless of the size of the initialization vector). The user's password is passed to EVP_BytesToKey() using the data and datal parameters. Finally, the library uses an iteration count of 1 for EVP_BytesToKey().</p> <p>The key derived by EVP_BytesToKey() along with the original initialization vector is then used to decrypt the encrypted data. The iv produced by EVP_BytesToKey() is not utilized or needed, and NULL should be passed to the function.</p> <p>The pseudo code to derive the key would look similar to:</p> <pre><code>EVP_CIPHER* cipher = EVP_des_ede3_cbc();\nEVP_MD* md = EVP_md5();\n\nunsigned int nkey = EVP_CIPHER_key_length(cipher);\nunsigned int niv = EVP_CIPHER_iv_length(cipher);\nunsigned char key[nkey];\nunsigned char iv[niv];\n\nmemcpy(iv, HexToBin(\"3F17F5316E2BAC89\"), niv);\nrc = EVP_BytesToKey(cipher, md, iv /*salt*/, pword, plen, 1, key, NULL /*iv*/);\nif (rc != nkey)\n    /* Error */\n\n/* On success, use key and iv to initialize the cipher */\n</code></pre>"},{"location":"man3/PEM_read_bio_PrivateKey/#bugs","title":"BUGS","text":"<p>The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure. Therefore, the following:</p> <pre><code>PEM_read_bio_X509(bp, &amp;x, 0, NULL);\n</code></pre> <p>where x already contains a valid certificate, may not work, whereas:</p> <pre><code>X509_free(x);\nx = PEM_read_bio_X509(bp, NULL, 0, NULL);\n</code></pre> <p>is guaranteed to work.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#return-values","title":"RETURN VALUES","text":"<p>The read routines return either a pointer to the structure read or NULL if an error occurred.</p> <p>The write routines return 1 for success or 0 for failure.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#examples","title":"EXAMPLES","text":"<p>Although the PEM routines take several arguments in almost all applications most of them are set to 0 or NULL.</p> <p>Read a certificate in PEM format from a BIO:</p> <pre><code>X509 *x;\n\nx = PEM_read_bio_X509(bp, NULL, 0, NULL);\nif (x == NULL)\n    /* Error */\n</code></pre> <p>Alternative method:</p> <pre><code>X509 *x = NULL;\n\nif (!PEM_read_bio_X509(bp, &amp;x, 0, NULL))\n    /* Error */\n</code></pre> <p>Write a certificate to a BIO:</p> <pre><code>if (!PEM_write_bio_X509(bp, x))\n    /* Error */\n</code></pre> <p>Write a private key (using traditional format) to a BIO using triple DES encryption, the pass phrase is prompted for:</p> <pre><code>if (!PEM_write_bio_PrivateKey(bp, key, EVP_des_ede3_cbc(), NULL, 0, 0, NULL))\n    /* Error */\n</code></pre> <p>Write a private key (using PKCS#8 format) to a BIO using triple DES encryption, using the pass phrase \"hello\":</p> <pre><code>if (!PEM_write_bio_PKCS8PrivateKey(bp, key, EVP_des_ede3_cbc(),\n                                   NULL, 0, 0, \"hello\"))\n    /* Error */\n</code></pre> <p>Read a private key from a BIO using a pass phrase callback:</p> <pre><code>key = PEM_read_bio_PrivateKey(bp, NULL, pass_cb, \"My Private Key\");\nif (key == NULL)\n    /* Error */\n</code></pre> <p>Skeleton pass phrase callback:</p> <pre><code>int pass_cb(char *buf, int size, int rwflag, void *u)\n{\n\n    /* We'd probably do something else if 'rwflag' is 1 */\n    printf(\"Enter pass phrase for \\\"%s\\\"\\n\", (char *)u);\n\n    /* get pass phrase, length 'len' into 'tmp' */\n    char *tmp = \"hello\";\n    if (tmp == NULL) /* An error occurred */\n        return -1;\n\n    size_t len = strlen(tmp);\n\n    if (len &gt; size)\n        len = size;\n    memcpy(buf, tmp, len);\n    return len;\n}\n</code></pre>"},{"location":"man3/PEM_read_bio_PrivateKey/#see-also","title":"SEE ALSO","text":"<p>EVP_EncryptInit(3), EVP_BytesToKey(3), passphrase-encoding(7)</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#history","title":"HISTORY","text":"<p>The old Netscape certificate sequences were no longer documented in OpenSSL 1.1.0; applications should use the PKCS7 standard instead as they will be formally deprecated in a future releases.</p>"},{"location":"man3/PEM_read_bio_PrivateKey/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_read_bio_ex/","title":"PEM_read_bio_ex","text":""},{"location":"man3/PEM_read_bio_ex/#name","title":"NAME","text":"<p>PEM_read_bio_ex, PEM_FLAG_SECURE, PEM_FLAG_EAY_COMPATIBLE, PEM_FLAG_ONLY_B64 - read PEM format files with custom processing</p>"},{"location":"man3/PEM_read_bio_ex/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pem.h&gt;\n\n#define PEM_FLAG_SECURE             0x1\n#define PEM_FLAG_EAY_COMPATIBLE     0x2\n#define PEM_FLAG_ONLY_B64           0x4\nint PEM_read_bio_ex(BIO *in, char **name, char **header,\n                    unsigned char **data, long *len, unsigned int flags);\n</code></pre>"},{"location":"man3/PEM_read_bio_ex/#description","title":"DESCRIPTION","text":"<p>PEM_read_bio_ex() reads in PEM formatted data from an input BIO, outputting the name of the type of contained data, the header information regarding the possibly encrypted data, and the binary data payload (after base64 decoding). It should generally only be used to implement PEM_read_bio_-family functions for specific data types or other usage, but is exposed to allow greater flexibility over how processing is performed, if needed.</p> <p>If PEM_FLAG_SECURE is set, the intermediate buffers used to read in lines of input are allocated from the secure heap.</p> <p>If PEM_FLAG_EAY_COMPATIBLE is set, a simple algorithm is used to remove whitespace and control characters from the end of each line, so as to be compatible with the historical behavior of PEM_read_bio().</p> <p>If PEM_FLAG_ONLY_B64 is set, all characters are required to be valid base64 characters (or newlines); non-base64 characters are treated as end of input.</p> <p>If neither PEM_FLAG_EAY_COMPATIBLE or PEM_FLAG_ONLY_B64 is set, control characters are ignored.</p> <p>If both PEM_FLAG_EAY_COMPATIBLE and PEM_FLAG_ONLY_B64 are set, an error is returned; these options are not compatible with each other.</p>"},{"location":"man3/PEM_read_bio_ex/#notes","title":"NOTES","text":"<p>The caller must release the storage allocated for *name, *header, and *data. If PEM_FLAG_SECURE was set, use OPENSSL_secure_free(); otherwise, OPENSSL_free() is used.</p>"},{"location":"man3/PEM_read_bio_ex/#return-values","title":"RETURN VALUES","text":"<p>PEM_read_bio_ex() returns 1 for success or 0 for failure.</p>"},{"location":"man3/PEM_read_bio_ex/#see-also","title":"SEE ALSO","text":"<p>PEM_bytes_read_bio(3)</p>"},{"location":"man3/PEM_read_bio_ex/#history","title":"HISTORY","text":"<p>The PEM_read_bio_ex() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/PEM_read_bio_ex/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_write_bio_CMS_stream/","title":"PEM_write_bio_CMS_stream","text":""},{"location":"man3/PEM_write_bio_CMS_stream/#name","title":"NAME","text":"<p>PEM_write_bio_CMS_stream - output CMS_ContentInfo structure in PEM format</p>"},{"location":"man3/PEM_write_bio_CMS_stream/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *data, int flags);\n</code></pre>"},{"location":"man3/PEM_write_bio_CMS_stream/#description","title":"DESCRIPTION","text":"<p>PEM_write_bio_CMS_stream() outputs a CMS_ContentInfo structure in PEM format.</p> <p>It is otherwise identical to the function SMIME_write_CMS().</p>"},{"location":"man3/PEM_write_bio_CMS_stream/#notes","title":"NOTES","text":"<p>This function is effectively a version of the PEM_write_bio_CMS() supporting streaming.</p>"},{"location":"man3/PEM_write_bio_CMS_stream/#return-values","title":"RETURN VALUES","text":"<p>PEM_write_bio_CMS_stream() returns 1 for success or 0 for failure.</p>"},{"location":"man3/PEM_write_bio_CMS_stream/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_verify(3), CMS_encrypt(3) CMS_decrypt(3), PEM_write(3), SMIME_write_CMS(3), i2d_CMS_bio_stream(3)</p>"},{"location":"man3/PEM_write_bio_CMS_stream/#history","title":"HISTORY","text":"<p>The PEM_write_bio_CMS_stream() function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/PEM_write_bio_CMS_stream/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/","title":"PEM_write_bio_PKCS7_stream","text":""},{"location":"man3/PEM_write_bio_PKCS7_stream/#name","title":"NAME","text":"<p>PEM_write_bio_PKCS7_stream - output PKCS7 structure in PEM format</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nint PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *data, int flags);\n</code></pre>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#description","title":"DESCRIPTION","text":"<p>PEM_write_bio_PKCS7_stream() outputs a PKCS7 structure in PEM format.</p> <p>It is otherwise identical to the function SMIME_write_PKCS7().</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#notes","title":"NOTES","text":"<p>This function is effectively a version of the PEM_write_bio_PKCS7() supporting streaming.</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#return-values","title":"RETURN VALUES","text":"<p>PEM_write_bio_PKCS7_stream() returns 1 for success or 0 for failure.</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_sign(3), PKCS7_verify(3), PKCS7_encrypt(3) PKCS7_decrypt(3), SMIME_write_PKCS7(3), i2d_PKCS7_bio_stream(3)</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#history","title":"HISTORY","text":"<p>The PEM_write_bio_PKCS7_stream() function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/PEM_write_bio_PKCS7_stream/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2007-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS12_create/","title":"PKCS12_create","text":""},{"location":"man3/PKCS12_create/#name","title":"NAME","text":"<p>PKCS12_create - create a PKCS#12 structure</p>"},{"location":"man3/PKCS12_create/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs12.h&gt;\n\nPKCS12 *PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey,\n                      X509 *cert, STACK_OF(X509) *ca,\n                      int nid_key, int nid_cert, int iter, int mac_iter, int keytype);\n</code></pre>"},{"location":"man3/PKCS12_create/#description","title":"DESCRIPTION","text":"<p>PKCS12_create() creates a PKCS#12 structure.</p> <p>pass is the passphrase to use. name is the friendlyName to use for the supplied certificate and key. pkey is the private key to include in the structure and cert its corresponding certificates. ca, if not NULL is an optional set of certificates to also include in the structure.</p> <p>nid_key and nid_cert are the encryption algorithms that should be used for the key and certificate respectively. The modes GCM, CCM, XTS, and OCB are unsupported. iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use. keytype is the type of key.</p>"},{"location":"man3/PKCS12_create/#notes","title":"NOTES","text":"<p>The parameters nid_key, nid_cert, iter, mac_iter and keytype can all be set to zero and sensible defaults will be used.</p> <p>These defaults are: 40 bit RC2 encryption for certificates, triple DES encryption for private keys, a key iteration count of PKCS12_DEFAULT_ITER (currently 2048) and a MAC iteration count of 1.</p> <p>The default MAC iteration count is 1 in order to retain compatibility with old software which did not interpret MAC iteration counts. If such compatibility is not required then mac_iter should be set to PKCS12_DEFAULT_ITER.</p> <p>keytype adds a flag to the store private key. This is a non standard extension that is only currently interpreted by MSIE. If set to zero the flag is omitted, if set to KEY_SIG the key can be used for signing only, if set to KEY_EX it can be used for signing and encryption. This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption.</p> <p>If a certificate contains an alias or keyid then this will be used for the corresponding friendlyName or localKeyID in the PKCS12 structure.</p> <p>Either pkey, cert or both can be NULL to indicate that no key or certificate is required. In previous versions both had to be present or a fatal error is returned.</p> <p>nid_key or nid_cert can be set to -1 indicating that no encryption should be used.</p> <p>mac_iter can be set to -1 and the MAC will then be omitted entirely.</p> <p>PKCS12_create() makes assumptions regarding the encoding of the given pass phrase. See passphrase-encoding(7) for more information.</p>"},{"location":"man3/PKCS12_create/#return-values","title":"RETURN VALUES","text":"<p>PKCS12_create() returns a valid PKCS12 structure or NULL if an error occurred.</p>"},{"location":"man3/PKCS12_create/#see-also","title":"SEE ALSO","text":"<p>d2i_PKCS12(3), passphrase-encoding(7)</p>"},{"location":"man3/PKCS12_create/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS12_newpass/","title":"PKCS12_newpass","text":""},{"location":"man3/PKCS12_newpass/#name","title":"NAME","text":"<p>PKCS12_newpass - change the password of a PKCS12 structure</p>"},{"location":"man3/PKCS12_newpass/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs12.h&gt;\n\nint PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass);\n</code></pre>"},{"location":"man3/PKCS12_newpass/#description","title":"DESCRIPTION","text":"<p>PKCS12_newpass() changes the password of a PKCS12 structure.</p> <p>p12 is a pointer to a PKCS12 structure. oldpass is the existing password and newpass is the new password.</p>"},{"location":"man3/PKCS12_newpass/#notes","title":"NOTES","text":"<p>Each of oldpass and newpass is independently interpreted as a string in the UTF-8 encoding. If it is not valid UTF-8, it is assumed to be ISO8859-1 instead.</p> <p>In particular, this means that passwords in the locale character set (or code page on Windows) must potentially be converted to UTF-8 before use. This may include passwords from local text files, or input from the terminal or command line. Refer to the documentation of UI_OpenSSL(3), for example.</p>"},{"location":"man3/PKCS12_newpass/#return-values","title":"RETURN VALUES","text":"<p>PKCS12_newpass() returns 1 on success or 0 on failure. Applications can retrieve the most recent error from PKCS12_newpass() with ERR_get_error().</p>"},{"location":"man3/PKCS12_newpass/#examples","title":"EXAMPLES","text":"<p>This example loads a PKCS#12 file, changes its password and writes out the result to a new file.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;openssl/pem.h&gt;\n#include &lt;openssl/err.h&gt;\n#include &lt;openssl/pkcs12.h&gt;\n\nint main(int argc, char **argv)\n{\n    FILE *fp;\n    PKCS12 *p12;\n\n    if (argc != 5) {\n        fprintf(stderr, \"Usage: pkread p12file password newpass opfile\\n\");\n        return 1;\n    }\n    if ((fp = fopen(argv[1], \"rb\")) == NULL) {\n        fprintf(stderr, \"Error opening file %s\\n\", argv[1]);\n        return 1;\n    }\n    p12 = d2i_PKCS12_fp(fp, NULL);\n    fclose(fp);\n    if (p12 == NULL) {\n        fprintf(stderr, \"Error reading PKCS#12 file\\n\");\n        ERR_print_errors_fp(stderr);\n        return 1;\n    }\n    if (PKCS12_newpass(p12, argv[2], argv[3]) == 0) {\n        fprintf(stderr, \"Error changing password\\n\");\n        ERR_print_errors_fp(stderr);\n        PKCS12_free(p12);\n        return 1;\n    }\n    if ((fp = fopen(argv[4], \"wb\")) == NULL) {\n        fprintf(stderr, \"Error opening file %s\\n\", argv[4]);\n        PKCS12_free(p12);\n        return 1;\n    }\n    i2d_PKCS12_fp(fp, p12);\n    PKCS12_free(p12);\n    fclose(fp);\n    return 0;\n}\n</code></pre>"},{"location":"man3/PKCS12_newpass/#notes_1","title":"NOTES","text":"<p>If the PKCS#12 structure does not have a password, then you must use the empty string \"\" for oldpass. Using NULL for oldpass will result in a PKCS12_newpass() failure.</p> <p>If the wrong password is used for oldpass then the function will fail, with a MAC verification error. In rare cases the PKCS12 structure does not contain a MAC: in this case it will usually fail with a decryption padding error.</p>"},{"location":"man3/PKCS12_newpass/#bugs","title":"BUGS","text":"<p>The password format is a NULL terminated ASCII string which is converted to Unicode form internally. As a result some passwords cannot be supplied to this function.</p>"},{"location":"man3/PKCS12_newpass/#see-also","title":"SEE ALSO","text":"<p>PKCS12_create(3), ERR_get_error(3), passphrase-encoding(7)</p>"},{"location":"man3/PKCS12_newpass/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS12_parse/","title":"PKCS12_parse","text":""},{"location":"man3/PKCS12_parse/#name","title":"NAME","text":"<p>PKCS12_parse - parse a PKCS#12 structure</p>"},{"location":"man3/PKCS12_parse/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs12.h&gt;\n\nint PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,\n                 STACK_OF(X509) **ca);\n</code></pre>"},{"location":"man3/PKCS12_parse/#description","title":"DESCRIPTION","text":"<p>PKCS12_parse() parses a PKCS12 structure.</p> <p>p12 is the PKCS12 structure to parse. pass is the passphrase to use. If successful the private key will be written to *pkey, the corresponding certificate to *cert and any additional certificates to *ca.</p>"},{"location":"man3/PKCS12_parse/#notes","title":"NOTES","text":"<p>The parameters pkey and cert cannot be NULL. ca can be &lt;NULL&gt; in which case additional certificates will be discarded. *ca can also be a valid STACK in which case additional certificates are appended to *ca. If *ca is NULL a new STACK will be allocated.</p> <p>The friendlyName and localKeyID attributes (if present) on each certificate will be stored in the alias and keyid attributes of the X509 structure.</p> <p>The parameter pass is interpreted as a string in the UTF-8 encoding. If it is not valid UTF-8, then it is assumed to be ISO8859-1 instead.</p> <p>In particular, this means that passwords in the locale character set (or code page on Windows) must potentially be converted to UTF-8 before use. This may include passwords from local text files, or input from the terminal or command line. Refer to the documentation of UI_OpenSSL(3), for example.</p>"},{"location":"man3/PKCS12_parse/#return-values","title":"RETURN VALUES","text":"<p>PKCS12_parse() returns 1 for success and zero if an error occurred.</p> <p>The error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/PKCS12_parse/#bugs","title":"BUGS","text":"<p>Only a single private key and corresponding certificate is returned by this function. More complex PKCS#12 files with multiple private keys will only return the first match.</p> <p>Only friendlyName and localKeyID attributes are currently stored in certificates. Other attributes are discarded.</p> <p>Attributes currently cannot be stored in the private key EVP_PKEY structure.</p>"},{"location":"man3/PKCS12_parse/#see-also","title":"SEE ALSO","text":"<p>d2i_PKCS12(3), passphrase-encoding(7)</p>"},{"location":"man3/PKCS12_parse/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS5_PBKDF2_HMAC/","title":"PKCS5_PBKDF2_HMAC","text":""},{"location":"man3/PKCS5_PBKDF2_HMAC/#name","title":"NAME","text":"<p>PKCS5_PBKDF2_HMAC, PKCS5_PBKDF2_HMAC_SHA1 - password based derivation routines with salt and iteration count</p>"},{"location":"man3/PKCS5_PBKDF2_HMAC/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nint PKCS5_PBKDF2_HMAC(const char *pass, int passlen,\n                      const unsigned char *salt, int saltlen, int iter,\n                      const EVP_MD *digest,\n                      int keylen, unsigned char *out);\n\nint PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,\n                           const unsigned char *salt, int saltlen, int iter,\n                           int keylen, unsigned char *out);\n</code></pre>"},{"location":"man3/PKCS5_PBKDF2_HMAC/#description","title":"DESCRIPTION","text":"<p>PKCS5_PBKDF2_HMAC() derives a key from a password using a salt and iteration count as specified in RFC 2898.</p> <p>pass is the password used in the derivation of length passlen. pass is an optional parameter and can be NULL. If passlen is -1, then the function will calculate the length of pass using strlen().</p> <p>salt is the salt used in the derivation of length saltlen. If the salt is NULL, then saltlen must be 0. The function will not attempt to calculate the length of the salt because it is not assumed to be NULL terminated.</p> <p>iter is the iteration count and its value should be greater than or equal to 1. RFC 2898 suggests an iteration count of at least 1000. Any iter less than 1 is treated as a single iteration.</p> <p>digest is the message digest function used in the derivation. Values include any of the EVP_* message digests. PKCS5_PBKDF2_HMAC_SHA1() calls PKCS5_PBKDF2_HMAC() with EVP_sha1().</p> <p>The derived key will be written to out. The size of the out buffer is specified via keylen.</p>"},{"location":"man3/PKCS5_PBKDF2_HMAC/#notes","title":"NOTES","text":"<p>A typical application of this function is to derive keying material for an encryption algorithm from a password in the pass, a salt in salt, and an iteration count.</p> <p>Increasing the iter parameter slows down the algorithm which makes it harder for an attacker to perform a brute force attack using a large number of candidate passwords.</p> <p>These functions make no assumption regarding the given password. It will simply be treated as a byte sequence.</p>"},{"location":"man3/PKCS5_PBKDF2_HMAC/#return-values","title":"RETURN VALUES","text":"<p>PKCS5_PBKDF2_HMAC() and PBKCS5_PBKDF2_HMAC_SHA1() return 1 on success or 0 on error.</p>"},{"location":"man3/PKCS5_PBKDF2_HMAC/#see-also","title":"SEE ALSO","text":"<p>evp(7), RAND_bytes(3), EVP_BytesToKey(3), passphrase-encoding(7)</p>"},{"location":"man3/PKCS5_PBKDF2_HMAC/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2014-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS7_decrypt/","title":"PKCS7_decrypt","text":""},{"location":"man3/PKCS7_decrypt/#name","title":"NAME","text":"<p>PKCS7_decrypt - decrypt content from a PKCS#7 envelopedData structure</p>"},{"location":"man3/PKCS7_decrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nint PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags);\n</code></pre>"},{"location":"man3/PKCS7_decrypt/#description","title":"DESCRIPTION","text":"<p>PKCS7_decrypt() extracts and decrypts the content from a PKCS#7 envelopedData structure. pkey is the private key of the recipient, cert is the recipients certificate, data is a BIO to write the content to and flags is an optional set of flags.</p>"},{"location":"man3/PKCS7_decrypt/#notes","title":"NOTES","text":"<p>Although the recipients certificate is not needed to decrypt the data it is needed to locate the appropriate (of possible several) recipients in the PKCS#7 structure.</p> <p>The following flags can be passed in the flags parameter.</p> <p>If the PKCS7_TEXT flag is set MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain then an error is returned.</p>"},{"location":"man3/PKCS7_decrypt/#return-values","title":"RETURN VALUES","text":"<p>PKCS7_decrypt() returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error(3)</p>"},{"location":"man3/PKCS7_decrypt/#bugs","title":"BUGS","text":"<p>PKCS7_decrypt() must be passed the correct recipient key and certificate. It would be better if it could look up the correct key and certificate from a database.</p> <p>The lack of single pass processing and need to hold all data in memory as mentioned in PKCS7_sign() also applies to PKCS7_verify().</p>"},{"location":"man3/PKCS7_decrypt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_encrypt(3)</p>"},{"location":"man3/PKCS7_decrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS7_encrypt/","title":"PKCS7_encrypt","text":""},{"location":"man3/PKCS7_encrypt/#name","title":"NAME","text":"<p>PKCS7_encrypt - create a PKCS#7 envelopedData structure</p>"},{"location":"man3/PKCS7_encrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nPKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,\n                     int flags);\n</code></pre>"},{"location":"man3/PKCS7_encrypt/#description","title":"DESCRIPTION","text":"<p>PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.</p>"},{"location":"man3/PKCS7_encrypt/#notes","title":"NOTES","text":"<p>Only RSA keys are supported in PKCS#7 and envelopedData so the recipient certificates supplied to this function must all contain RSA public keys, though they do not have to be signed using the RSA algorithm.</p> <p>EVP_des_ede3_cbc() (triple DES) is the algorithm of choice for S/MIME use because most clients will support it.</p> <p>Some old \"export grade\" clients may only support weak encryption using 40 or 64 bit RC2. These can be used by passing EVP_rc2_40_cbc() and EVP_rc2_64_cbc() respectively.</p> <p>The algorithm passed in the cipher parameter must support ASN1 encoding of its parameters.</p> <p>Many browsers implement a \"sign and encrypt\" option which is simply an S/MIME envelopedData containing an S/MIME signed message. This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to PKCS7_encrypt().</p> <p>The following flags can be passed in the flags parameter.</p> <p>If the PKCS7_TEXT flag is set MIME headers for type text/plain are prepended to the data.</p> <p>Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if PKCS7_BINARY is set no translation occurs. This option should be used if the supplied data is in binary format otherwise the translation will corrupt it. If PKCS7_BINARY is set then PKCS7_TEXT is ignored.</p> <p>If the PKCS7_STREAM flag is set a partial PKCS7 structure is output suitable for streaming I/O: no data is read from the BIO in.</p>"},{"location":"man3/PKCS7_encrypt/#notes_1","title":"NOTES","text":"<p>If the flag PKCS7_STREAM is set the returned PKCS7 structure is not complete and outputting its contents via a function that does not properly finalize the PKCS7 structure will give unpredictable results.</p> <p>Several functions including SMIME_write_PKCS7(), i2d_PKCS7_bio_stream(), PEM_write_bio_PKCS7_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_PKCS7().</p>"},{"location":"man3/PKCS7_encrypt/#return-values","title":"RETURN VALUES","text":"<p>PKCS7_encrypt() returns either a PKCS7 structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/PKCS7_encrypt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_decrypt(3)</p>"},{"location":"man3/PKCS7_encrypt/#history","title":"HISTORY","text":"<p>The PKCS7_STREAM flag was added in OpenSSL 1.0.0.</p>"},{"location":"man3/PKCS7_encrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS7_sign/","title":"PKCS7_sign","text":""},{"location":"man3/PKCS7_sign/#name","title":"NAME","text":"<p>PKCS7_sign - create a PKCS#7 signedData structure</p>"},{"location":"man3/PKCS7_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nPKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,\n                  BIO *data, int flags);\n</code></pre>"},{"location":"man3/PKCS7_sign/#description","title":"DESCRIPTION","text":"<p>PKCS7_sign() creates and returns a PKCS#7 signedData structure. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional set of extra certificates to include in the PKCS#7 structure (for example any intermediate CAs in the chain).</p> <p>The data to be signed is read from BIO data.</p> <p>flags is an optional set of flags.</p> <p>Any of the following flags (ored together) can be passed in the flags</p> <p>Many S/MIME clients expect the signed content to include valid MIME headers. If the PKCS7_TEXT flag is set MIME headers for type <code>text/plain</code> are prepended to the data.</p> <p>If PKCS7_NOCERTS is set the signer's certificate and the extra certs will not be included in the PKCS7 structure. The signer's certificate must still be supplied in the signcert parameter though. This can reduce the size of the signatures if the signer's certificates can be obtained by other means: for example a previously signed message.</p> <p>The data being signed is included in the PKCS7 structure, unless PKCS7_DETACHED is set in which case it is omitted. This is used for PKCS7 detached signatures which are used in S/MIME plaintext signed messages for example.</p> <p>Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if PKCS7_BINARY is set no translation occurs. This option should be used if the supplied data is in binary format otherwise the translation will corrupt it.</p> <p>The signedData structure includes several PKCS#7 authenticatedAttributes including the signing time, the PKCS#7 content type and the supported list of ciphers in an SMIMECapabilities attribute. If PKCS7_NOATTR is set then no authenticatedAttributes will be used. If PKCS7_NOSMIMECAP is set then just the SMIMECapabilities are omitted.</p> <p>If present the SMIMECapabilities attribute indicates support for the following algorithms: triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is disabled then it will not be included.</p> <p>If the flags PKCS7_STREAM is set then the returned PKCS7 structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass.</p> <p>If the PKCS7_PARTIAL flag is set a partial PKCS7 structure is output to which additional signers and capabilities can be added before finalization.</p>"},{"location":"man3/PKCS7_sign/#notes","title":"NOTES","text":"<p>If the flag PKCS7_STREAM is set the returned PKCS7 structure is not complete and outputting its contents via a function that does not properly finalize the PKCS7 structure will give unpredictable results.</p> <p>Several functions including SMIME_write_PKCS7(), i2d_PKCS7_bio_stream(), PEM_write_bio_PKCS7_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_PKCS7().</p> <p>If a signer is specified it will use the default digest for the signing algorithm. This is SHA1 for both RSA and DSA keys.</p> <p>The certs, signcert and pkey parameters can all be NULL if the PKCS7_PARTIAL flag is set. One or more signers can be added using the function PKCS7_sign_add_signer(). PKCS7_final() must also be called to finalize the structure if streaming is not enabled. Alternative signing digests can also be specified using this method.</p> <p>If signcert and pkey are NULL then a certificates only PKCS#7 structure is output.</p> <p>In versions of OpenSSL before 1.0.0 the signcert and pkey parameters must not be NULL.</p>"},{"location":"man3/PKCS7_sign/#bugs","title":"BUGS","text":"<p>Some advanced attributes such as counter signatures are not supported.</p>"},{"location":"man3/PKCS7_sign/#return-values","title":"RETURN VALUES","text":"<p>PKCS7_sign() returns either a valid PKCS7 structure or NULL if an error occurred.  The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/PKCS7_sign/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_verify(3)</p>"},{"location":"man3/PKCS7_sign/#history","title":"HISTORY","text":"<p>The PKCS7_PARTIAL flag, and the ability for certs, signcert, and pkey parameters to be NULL were added in OpenSSL 1.0.0.</p> <p>The PKCS7_STREAM flag was added in OpenSSL 1.0.0.</p>"},{"location":"man3/PKCS7_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS7_sign_add_signer/","title":"PKCS7_sign_add_signer","text":""},{"location":"man3/PKCS7_sign_add_signer/#name","title":"NAME","text":"<p>PKCS7_sign_add_signer, PKCS7_add_certificate, PKCS7_add_crl - add information to PKCS7 structure</p>"},{"location":"man3/PKCS7_sign_add_signer/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nPKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert,\n                                         EVP_PKEY *pkey, const EVP_MD *md, int flags);\nint PKCS7_add_certificate(PKCS7 *p7, X509 *cert);\nint PKCS7_add_crl(PKCS7 *p7, X509_CRL *crl);\n</code></pre>"},{"location":"man3/PKCS7_sign_add_signer/#description","title":"DESCRIPTION","text":"<p>PKCS7_sign_add_signer() adds a signer with certificate signcert and private key pkey using message digest md to a PKCS7 signed data structure p7.</p> <p>The PKCS7 structure should be obtained from an initial call to PKCS7_sign() with the flag PKCS7_PARTIAL set or in the case or re-signing a valid PKCS#7 signed data structure.</p> <p>If the md parameter is NULL then the default digest for the public key algorithm will be used.</p> <p>Unless the PKCS7_REUSE_DIGEST flag is set the returned PKCS7 structure is not complete and must be finalized either by streaming (if applicable) or a call to PKCS7_final().</p>"},{"location":"man3/PKCS7_sign_add_signer/#notes","title":"NOTES","text":"<p>The main purpose of this function is to provide finer control over a PKCS#7 signed data structure where the simpler PKCS7_sign() function defaults are not appropriate. For example if multiple signers or non default digest algorithms are needed.</p> <p>Any of the following flags (ored together) can be passed in the flags parameter.</p> <p>If PKCS7_REUSE_DIGEST is set then an attempt is made to copy the content digest value from the PKCS7 structure: to add a signer to an existing structure. An error occurs if a matching digest value cannot be found to copy. The returned PKCS7 structure will be valid and finalized when this flag is set.</p> <p>If PKCS7_PARTIAL is set in addition to PKCS7_REUSE_DIGEST then the PKCS7_SIGNER_INO structure will not be finalized so additional attributes can be added. In this case an explicit call to PKCS7_SIGNER_INFO_sign() is needed to finalize it.</p> <p>If PKCS7_NOCERTS is set the signer's certificate will not be included in the PKCS7 structure, the signer's certificate must still be supplied in the signcert parameter though. This can reduce the size of the signature if the signers certificate can be obtained by other means: for example a previously signed message.</p> <p>The signedData structure includes several PKCS#7 authenticatedAttributes including the signing time, the PKCS#7 content type and the supported list of ciphers in an SMIMECapabilities attribute. If PKCS7_NOATTR is set then no authenticatedAttributes will be used. If PKCS7_NOSMIMECAP is set then just the SMIMECapabilities are omitted.</p> <p>If present the SMIMECapabilities attribute indicates support for the following algorithms: triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is disabled then it will not be included.</p> <p>PKCS7_sign_add_signers() returns an internal pointer to the PKCS7_SIGNER_INFO structure just added, which can be used to set additional attributes before it is finalized.</p> <p>PKCS7_add_certificate() adds to the PKCS7 structure p7 the certificate cert, which may be an end-entity (signer) certificate or a CA certificate useful for chain building. This is done internally by PKCS7_sign_ex(3) and similar signing functions. It may have to be used before calling PKCS7_verify(3) in order to provide any missing certificate(s) needed for verification.</p> <p>PKCS7_add_crl() adds the CRL crl to the PKCS7 structure p7. This may be called to provide certificate status information to be included when signing or to use when verifying the PKCS7 structure.</p>"},{"location":"man3/PKCS7_sign_add_signer/#return-values","title":"RETURN VALUES","text":"<p>PKCS7_sign_add_signers() returns an internal pointer to the PKCS7_SIGNER_INFO structure just added or NULL if an error occurs.</p> <p>PKCS7_add_certificate() and PKCS7_add_crl() return 1 on success, 0 on error.</p>"},{"location":"man3/PKCS7_sign_add_signer/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_sign_ex(3), PKCS7_final(3), PKCS7_verify(3)</p>"},{"location":"man3/PKCS7_sign_add_signer/#history","title":"HISTORY","text":"<p>The PPKCS7_sign_add_signer() function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/PKCS7_sign_add_signer/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2007-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/PKCS7_verify/","title":"PKCS7_verify","text":""},{"location":"man3/PKCS7_verify/#name","title":"NAME","text":"<p>PKCS7_verify, PKCS7_get0_signers - verify a PKCS#7 signedData structure</p>"},{"location":"man3/PKCS7_verify/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nint PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,\n                 BIO *indata, BIO *out, int flags);\n\nSTACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs, int flags);\n</code></pre>"},{"location":"man3/PKCS7_verify/#description","title":"DESCRIPTION","text":"<p>PKCS7_verify() is very similar to CMS_verify(3). It verifies a PKCS#7 signedData structure given in p7. The optional certs parameter refers to a set of certificates in which to search for signer's certificates. p7 may contain extra untrusted CA certificates that may be used for chain building as well as CRLs that may be used for certificate validation. store may be NULL or point to the trusted certificate store to use for chain verification. indata refers to the signed data if the content is detached from p7. Otherwise indata should be NULL, and then the signed data must be in p7. The content is written to the BIO out unless it is NULL. flags is an optional set of flags, which can be used to modify the operation.</p> <p>PKCS7_get0_signers() retrieves the signer's certificates from p7, it does not check their validity or whether any signatures are valid. The certs and flags parameters have the same meanings as in PKCS7_verify().</p>"},{"location":"man3/PKCS7_verify/#verify-process","title":"VERIFY PROCESS","text":"<p>Normally the verify process proceeds as follows.</p> <p>Initially some sanity checks are performed on p7. The type of p7 must be SignedData. There must be at least one signature on the data and if the content is detached indata cannot be NULL.  If the content is not detached and indata is not NULL then the structure has both embedded and external content. To treat this as an error, use the flag PKCS7_NO_DUAL_CONTENT. The default behavior allows this, for compatibility with older versions of OpenSSL.</p> <p>An attempt is made to locate all the signer's certificates, first looking in the certs parameter (if it is not NULL). Then they are looked up in any certificates contained in the p7 structure unless PKCS7_NOINTERN is set. If any signer's certificates cannot be located the operation fails.</p> <p>Each signer's certificate is chain verified using the smimesign purpose and using the trusted certificate store store if supplied. Any internal certificates in the message, which may have been added using PKCS7_add_certificate(3), are used as untrusted CAs unless PKCS7_NOCHAIN is set. If CRL checking is enabled in store and PKCS7_NOCRL is not set, any internal CRLs, which may have been added using PKCS7_add_crl(3), are used in addition to attempting to look them up in store. If store is not NULL and any chain verify fails an error code is returned.</p> <p>Finally the signed content is read (and written to out unless it is NULL) and the signature is checked.</p> <p>If all signatures verify correctly then the function is successful.</p> <p>Any of the following flags (ored together) can be passed in the flags parameter to change the default verify behaviour. Only the flag PKCS7_NOINTERN is meaningful to PKCS7_get0_signers().</p> <p>If PKCS7_NOINTERN is set the certificates in the message itself are not searched when locating the signer's certificates. This means that all the signer's certificates must be in the certs parameter.</p> <p>If PKCS7_NOCRL is set and CRL checking is enabled in store then any CRLs in the message itself are ignored.</p> <p>If the PKCS7_TEXT flag is set MIME headers for type <code>text/plain</code> are deleted from the content. If the content is not of type <code>text/plain</code> then an error is returned.</p> <p>If PKCS7_NOVERIFY is set the signer's certificates are not chain verified.</p> <p>If PKCS7_NOCHAIN is set then the certificates contained in the message are not used as untrusted CAs. This means that the whole verify chain (apart from the signer's certificates) must be contained in the trusted store.</p> <p>If PKCS7_NOSIGS is set then the signatures on the data are not checked.</p>"},{"location":"man3/PKCS7_verify/#notes","title":"NOTES","text":"<p>One application of PKCS7_NOINTERN is to only accept messages signed by a small number of certificates. The acceptable certificates would be passed in the certs parameter. In this case if the signer's certificate is not one of the certificates supplied in certs then the verify will fail because the signer cannot be found.</p> <p>Care should be taken when modifying the default verify behaviour, for example setting PKCS7_NOVERIFY|PKCS7_NOSIGS will totally disable all verification and any signed message will be considered valid. This combination is however useful if one merely wishes to write the content to out and its validity is not considered important.</p> <p>Chain verification should arguably be performed using the signing time rather than the current time. However, since the signing time is supplied by the signer it cannot be trusted without additional evidence (such as a trusted timestamp).</p>"},{"location":"man3/PKCS7_verify/#return-values","title":"RETURN VALUES","text":"<p>PKCS7_verify() returns 1 for a successful verification and 0 if an error occurs.</p> <p>PKCS7_get0_signers() returns all signers or NULL if an error occurred.</p> <p>The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/PKCS7_verify/#bugs","title":"BUGS","text":"<p>The trusted certificate store is not searched for the signer's certificates. This is primarily due to the inadequacies of the current X509_STORE functionality.</p> <p>The lack of single pass processing means that the signed content must all be held in memory if it is not detached.</p>"},{"location":"man3/PKCS7_verify/#see-also","title":"SEE ALSO","text":"<p>CMS_verify(3), PKCS7_add_certificate(3), PKCS7_add_crl(3), ERR_get_error(3), PKCS7_sign(3)</p>"},{"location":"man3/PKCS7_verify/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_DRBG_generate/","title":"RAND_DRBG_generate","text":""},{"location":"man3/RAND_DRBG_generate/#name","title":"NAME","text":"<p>RAND_DRBG_generate, RAND_DRBG_bytes - generate random bytes using the given drbg instance</p>"},{"location":"man3/RAND_DRBG_generate/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n\nint RAND_DRBG_generate(RAND_DRBG *drbg,\n                       unsigned char *out, size_t outlen,\n                       int prediction_resistance,\n                       const unsigned char *adin, size_t adinlen);\n\nint RAND_DRBG_bytes(RAND_DRBG *drbg,\n                    unsigned char *out, size_t outlen);\n</code></pre>"},{"location":"man3/RAND_DRBG_generate/#description","title":"DESCRIPTION","text":"<p>RAND_DRBG_generate() generates outlen random bytes using the given DRBG instance drbg and stores them in the buffer at out.</p> <p>Before generating the output, the DRBG instance checks whether the maximum number of generate requests (reseed interval) or the maximum timespan (reseed time interval) since its last seeding have been reached. If this is the case, the DRBG reseeds automatically. Additionally, an immediate reseeding can be requested by setting the prediction_resistance flag to 1. See NOTES section for more details.</p> <p>The caller can optionally provide additional data to be used for reseeding by passing a pointer adin to a buffer of length adinlen. This additional data is mixed into the internal state of the random generator but does not contribute to the entropy count. The additional data can be omitted by setting adin to NULL and adinlen to 0;</p> <p>RAND_DRBG_bytes() generates outlen random bytes using the given DRBG instance drbg and stores them in the buffer at out. This function is a wrapper around the RAND_DRBG_generate() call, which collects some additional data from low entropy sources (e.g., a high resolution timer) and calls RAND_DRBG_generate(drbg, out, outlen, 0, adin, adinlen).</p>"},{"location":"man3/RAND_DRBG_generate/#return-values","title":"RETURN VALUES","text":"<p>RAND_DRBG_generate() and RAND_DRBG_bytes() return 1 on success, and 0 on failure.</p>"},{"location":"man3/RAND_DRBG_generate/#notes","title":"NOTES","text":"<p>The reseed interval and reseed time interval of the drbg are set to reasonable default values, which in general do not have to be adjusted. If necessary, they can be changed using RAND_DRBG_set_reseed_interval(3) and RAND_DRBG_set_reseed_time_interval(3), respectively.</p> <p>A request for prediction resistance can only be satisfied by pulling fresh entropy from one of the approved entropy sources listed in section 5.5.2 of [NIST SP 800-90C]. Since the default DRBG implementation does not have access to such an approved entropy source, a request for prediction resistance will always fail. In other words, prediction resistance is currently not supported yet by the DRBG.</p>"},{"location":"man3/RAND_DRBG_generate/#see-also","title":"SEE ALSO","text":"<p>RAND_bytes(3), RAND_DRBG_set_reseed_interval(3), RAND_DRBG_set_reseed_time_interval(3), RAND_DRBG(7)</p>"},{"location":"man3/RAND_DRBG_generate/#history","title":"HISTORY","text":"<p>The RAND_DRBG functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/RAND_DRBG_generate/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_DRBG_get0_master/","title":"RAND_DRBG_get0_master","text":""},{"location":"man3/RAND_DRBG_get0_master/#name","title":"NAME","text":"<p>RAND_DRBG_get0_master, RAND_DRBG_get0_public, RAND_DRBG_get0_private - get access to the global RAND_DRBG instances</p>"},{"location":"man3/RAND_DRBG_get0_master/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n\nRAND_DRBG *RAND_DRBG_get0_master(void);\nRAND_DRBG *RAND_DRBG_get0_public(void);\nRAND_DRBG *RAND_DRBG_get0_private(void);\n</code></pre>"},{"location":"man3/RAND_DRBG_get0_master/#description","title":"DESCRIPTION","text":"<p>The default RAND API implementation (RAND_OpenSSL()) utilizes three shared DRBG instances which are accessed via the RAND API:</p> <p>The &lt;public&gt; and &lt;private&gt; DRBG are thread-local instances, which are used by RAND_bytes() and RAND_priv_bytes(), respectively. The &lt;master&gt; DRBG is a global instance, which is not intended to be used directly, but is used internally to reseed the other two instances.</p> <p>These functions here provide access to the shared DRBG instances.</p>"},{"location":"man3/RAND_DRBG_get0_master/#return-values","title":"RETURN VALUES","text":"<p>RAND_DRBG_get0_master() returns a pointer to the &lt;master&gt; DRBG instance.</p> <p>RAND_DRBG_get0_public() returns a pointer to the &lt;public&gt; DRBG instance.</p> <p>RAND_DRBG_get0_private() returns a pointer to the &lt;private&gt; DRBG instance.</p>"},{"location":"man3/RAND_DRBG_get0_master/#notes","title":"NOTES","text":"<p>It is not thread-safe to access the &lt;master&gt; DRBG instance. The &lt;public&gt; and &lt;private&gt; DRBG instance can be accessed safely, because they are thread-local. Note however, that changes to these two instances apply only to the current thread.</p> <p>For that reason it is recommended not to change the settings of these three instances directly. Instead, an application should change the default settings for new DRBG instances at initialization time, before creating additional threads.</p> <p>During initialization, it is possible to change the reseed interval and reseed time interval. It is also possible to exchange the reseeding callbacks entirely.</p>"},{"location":"man3/RAND_DRBG_get0_master/#see-also","title":"SEE ALSO","text":"<p>RAND_DRBG_set_callbacks(3), RAND_DRBG_set_reseed_defaults(3), RAND_DRBG_set_reseed_interval(3), RAND_DRBG_set_reseed_time_interval(3), RAND_DRBG_set_callbacks(3), RAND_DRBG_generate(3), RAND_DRBG(7)</p>"},{"location":"man3/RAND_DRBG_get0_master/#history","title":"HISTORY","text":"<p>The RAND_DRBG functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/RAND_DRBG_get0_master/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_DRBG_new/","title":"RAND_DRBG_new","text":""},{"location":"man3/RAND_DRBG_new/#name","title":"NAME","text":"<p>RAND_DRBG_new, RAND_DRBG_secure_new, RAND_DRBG_set, RAND_DRBG_set_defaults, RAND_DRBG_instantiate, RAND_DRBG_uninstantiate, RAND_DRBG_free - initialize and cleanup a RAND_DRBG instance</p>"},{"location":"man3/RAND_DRBG_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n\n\nRAND_DRBG *RAND_DRBG_new(int type,\n                         unsigned int flags,\n                         RAND_DRBG *parent);\n\nRAND_DRBG *RAND_DRBG_secure_new(int type,\n                                unsigned int flags,\n                                RAND_DRBG *parent);\n\nint RAND_DRBG_set(RAND_DRBG *drbg,\n                  int type, unsigned int flags);\n\nint RAND_DRBG_set_defaults(int type, unsigned int flags);\n\nint RAND_DRBG_instantiate(RAND_DRBG *drbg,\n                          const unsigned char *pers, size_t perslen);\n\nint RAND_DRBG_uninstantiate(RAND_DRBG *drbg);\n\nvoid RAND_DRBG_free(RAND_DRBG *drbg);\n</code></pre>"},{"location":"man3/RAND_DRBG_new/#description","title":"DESCRIPTION","text":"<p>RAND_DRBG_new() and RAND_DRBG_secure_new() create a new DRBG instance of the given type, allocated from the heap resp. the secure heap (using OPENSSL_zalloc() resp. OPENSSL_secure_zalloc()).</p> <p>RAND_DRBG_set() initializes the drbg with the given type and flags.</p> <p>RAND_DRBG_set_defaults() sets the default type and flags for new DRBG instances.</p> <p>Currently, all DRBG types are based on AES-CTR, so type can be one of the following values: NID_aes_128_ctr, NID_aes_192_ctr, NID_aes_256_ctr. Before the DRBG can be used to generate random bits, it is necessary to set its type and to instantiate it.</p> <p>The optional flags argument specifies a set of bit flags which can be joined using the | operator. Currently, the only flag is RAND_DRBG_FLAG_CTR_NO_DF, which disables the use of the derivation function ctr_df. For an explanation, see [NIST SP 800-90A Rev. 1].</p> <p>If a parent instance is specified then this will be used instead of the default entropy source for reseeding the drbg. It is said that the drbg is chained to its parent. For more information, see the NOTES section.</p> <p>RAND_DRBG_instantiate() seeds the drbg instance using random input from trusted entropy sources. Optionally, a personalization string pers of length perslen can be specified. To omit the personalization string, set pers=NULL and perslen=0;</p> <p>RAND_DRBG_uninstantiate() clears the internal state of the drbg and puts it back in the uninstantiated state.</p>"},{"location":"man3/RAND_DRBG_new/#return-values","title":"RETURN VALUES","text":"<p>RAND_DRBG_new() and RAND_DRBG_secure_new() return a pointer to a DRBG instance allocated on the heap, resp. secure heap.</p> <p>RAND_DRBG_set(), RAND_DRBG_instantiate(), and RAND_DRBG_uninstantiate() return 1 on success, and 0 on failure.</p> <p>RAND_DRBG_free() does not return a value.</p>"},{"location":"man3/RAND_DRBG_new/#notes","title":"NOTES","text":"<p>The DRBG design supports chaining, which means that a DRBG instance can use another parent DRBG instance instead of the default entropy source to obtain fresh random input for reseeding, provided that parent DRBG instance was properly instantiated, either from a trusted entropy source, or from yet another parent DRBG instance. For a detailed description of the reseeding process, see RAND_DRBG(7).</p> <p>The default DRBG type and flags are applied only during creation of a DRBG instance. To ensure that they are applied to the global and thread-local DRBG instances (&lt;master&gt;, resp. &lt;public&gt; and &lt;private&gt;), it is necessary to call RAND_DRBG_set_defaults() before creating any thread and before calling any cryptographic routines that obtain random data directly or indirectly.</p>"},{"location":"man3/RAND_DRBG_new/#see-also","title":"SEE ALSO","text":"<p>OPENSSL_zalloc(3), OPENSSL_secure_zalloc(3), RAND_DRBG_generate(3), RAND_DRBG(7)</p>"},{"location":"man3/RAND_DRBG_new/#history","title":"HISTORY","text":"<p>The RAND_DRBG functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/RAND_DRBG_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_DRBG_reseed/","title":"RAND_DRBG_reseed","text":""},{"location":"man3/RAND_DRBG_reseed/#name","title":"NAME","text":"<p>RAND_DRBG_reseed, RAND_DRBG_set_reseed_interval, RAND_DRBG_set_reseed_time_interval, RAND_DRBG_set_reseed_defaults - reseed a RAND_DRBG instance</p>"},{"location":"man3/RAND_DRBG_reseed/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n\nint RAND_DRBG_reseed(RAND_DRBG *drbg,\n                     const unsigned char *adin, size_t adinlen,\n                     int prediction_resistance);\n\nint RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg,\n                                  unsigned int interval);\n\nint RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg,\n                                       time_t interval);\n\nint RAND_DRBG_set_reseed_defaults(\n                                  unsigned int master_reseed_interval,\n                                  unsigned int slave_reseed_interval,\n                                  time_t master_reseed_time_interval,\n                                  time_t slave_reseed_time_interval\n                                  );\n</code></pre>"},{"location":"man3/RAND_DRBG_reseed/#description","title":"DESCRIPTION","text":"<p>RAND_DRBG_reseed() reseeds the given drbg, obtaining entropy input from its entropy source and mixing in the specified additional data provided in the buffer adin of length adinlen. The additional data can be omitted by setting adin to NULL and adinlen to 0. An immediate reseeding from a live entropy source can be requested by setting the prediction_resistance flag to 1. This feature is not implemented yet, so reseeding with prediction resistance requested will always fail.</p> <p>RAND_DRBG_set_reseed_interval() sets the reseed interval of the drbg, which is the maximum allowed number of generate requests between consecutive reseedings. If interval &gt; 0, then the drbg will reseed automatically whenever the number of generate requests since its last seeding exceeds the given reseed interval. If interval == 0, then this feature is disabled.</p> <p>RAND_DRBG_set_reseed_time_interval() sets the reseed time interval of the drbg, which is the maximum allowed number of seconds between consecutive reseedings. If interval &gt; 0, then the drbg will reseed automatically whenever the elapsed time since its last reseeding exceeds the given reseed time interval. If interval == 0, then this feature is disabled.</p> <p>RAND_DRBG_set_reseed_defaults() sets the default values for the reseed interval (master_reseed_interval and slave_reseed_interval) and the reseed time interval (master_reseed_time_interval and slave_reseed_tme_interval) of DRBG instances. The default values are set independently for master DRBG instances (which don't have a parent) and slave DRBG instances (which are chained to a parent DRBG).</p>"},{"location":"man3/RAND_DRBG_reseed/#return-values","title":"RETURN VALUES","text":"<p>RAND_DRBG_reseed(), RAND_DRBG_set_reseed_interval(), and RAND_DRBG_set_reseed_time_interval(), return 1 on success, 0 on failure.</p>"},{"location":"man3/RAND_DRBG_reseed/#notes","title":"NOTES","text":"<p>The default OpenSSL random generator is already set up for automatic reseeding, so in general it is not necessary to reseed it explicitly, or to modify its reseeding thresholds.</p> <p>Normally, the entropy input for seeding a DRBG is either obtained from a trusted os entropy source or from a parent DRBG instance, which was seeded (directly or indirectly) from a trusted os entropy source. In exceptional cases it is possible to replace the reseeding mechanism entirely by providing application defined callbacks using RAND_DRBG_set_callbacks().</p> <p>The reseeding default values are applied only during creation of a DRBG instance. To ensure that they are applied to the global and thread-local DRBG instances (&lt;master&gt;, resp. &lt;public&gt; and &lt;private&gt;), it is necessary to call RAND_DRBG_set_reseed_defaults() before creating any thread and before calling any  cryptographic routines that obtain random data directly or indirectly.</p>"},{"location":"man3/RAND_DRBG_reseed/#see-also","title":"SEE ALSO","text":"<p>RAND_DRBG_generate(3), RAND_DRBG_bytes(3), RAND_DRBG_set_callbacks(3). RAND_DRBG(7)</p>"},{"location":"man3/RAND_DRBG_reseed/#history","title":"HISTORY","text":"<p>The RAND_DRBG functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/RAND_DRBG_reseed/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_DRBG_set_callbacks/","title":"RAND_DRBG_set_callbacks","text":""},{"location":"man3/RAND_DRBG_set_callbacks/#name","title":"NAME","text":"<p>RAND_DRBG_set_callbacks, RAND_DRBG_get_entropy_fn, RAND_DRBG_cleanup_entropy_fn, RAND_DRBG_get_nonce_fn, RAND_DRBG_cleanup_nonce_fn - set callbacks for reseeding</p>"},{"location":"man3/RAND_DRBG_set_callbacks/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n\n\nint RAND_DRBG_set_callbacks(RAND_DRBG *drbg,\n                            RAND_DRBG_get_entropy_fn get_entropy,\n                            RAND_DRBG_cleanup_entropy_fn cleanup_entropy,\n                            RAND_DRBG_get_nonce_fn get_nonce,\n                            RAND_DRBG_cleanup_nonce_fn cleanup_nonce);\n</code></pre>"},{"location":"man3/RAND_DRBG_set_callbacks/#callback-functions","title":"Callback Functions","text":"<pre><code>typedef size_t (*RAND_DRBG_get_entropy_fn)(\n                      RAND_DRBG *drbg,\n                      unsigned char **pout,\n                      int entropy,\n                      size_t min_len, size_t max_len,\n                      int prediction_resistance);\n\ntypedef void (*RAND_DRBG_cleanup_entropy_fn)(\n                    RAND_DRBG *drbg,\n                    unsigned char *out, size_t outlen);\n\ntypedef size_t (*RAND_DRBG_get_nonce_fn)(\n                      RAND_DRBG *drbg,\n                      unsigned char **pout,\n                      int entropy,\n                      size_t min_len, size_t max_len);\n\ntypedef void (*RAND_DRBG_cleanup_nonce_fn)(\n                    RAND_DRBG *drbg,\n                    unsigned char *out, size_t outlen);\n</code></pre>"},{"location":"man3/RAND_DRBG_set_callbacks/#description","title":"DESCRIPTION","text":"<p>RAND_DRBG_set_callbacks() sets the callbacks for obtaining fresh entropy and the nonce when reseeding the given drbg. The callback functions are implemented and provided by the caller. Their parameter lists need to match the function prototypes above.</p> <p>Setting the callbacks is allowed only if the DRBG has not been initialized yet. Otherwise, the operation will fail. To change the settings for one of the three shared DRBGs it is necessary to call RAND_DRBG_uninstantiate() first.</p> <p>The get_entropy() callback is called by the drbg when it requests fresh random input. It is expected that the callback allocates and fills a random buffer of size min_len &lt;= size &lt;= max_len (in bytes) which contains at least entropy bits of randomness. The prediction_resistance flag indicates whether the reseeding was triggered by a prediction resistance request.</p> <p>The buffer's address is to be returned in *pout and the number of collected randomness bytes as return value.</p> <p>If the callback fails to acquire at least entropy bits of randomness, it must indicate an error by returning a buffer length of 0.</p> <p>If prediction_resistance was requested and the random source of the DRBG does not satisfy the conditions requested by [NIST SP 800-90C], then it must also indicate an error by returning a buffer length of 0. See NOTES section for more details.</p> <p>The cleanup_entropy() callback is called from the drbg to clear and free the buffer allocated previously by get_entropy(). The values out and outlen are the random buffer's address and length, as returned by the get_entropy() callback.</p> <p>The get_nonce() and cleanup_nonce() callbacks are used to obtain a nonce and free it again. A nonce is only required for instantiation (not for reseeding) and only in the case where the DRBG uses a derivation function. The callbacks are analogous to get_entropy() and cleanup_entropy(), except for the missing prediction_resistance flag.</p> <p>If the derivation function is disabled, then no nonce is used for instantiation, and the get_nonce() and cleanup_nonce() callbacks can be omitted by setting them to NULL.</p>"},{"location":"man3/RAND_DRBG_set_callbacks/#return-values","title":"RETURN VALUES","text":"<p>RAND_DRBG_set_callbacks() return 1 on success, and 0 on failure</p>"},{"location":"man3/RAND_DRBG_set_callbacks/#notes","title":"NOTES","text":"<p>It is important that cleanup_entropy() and cleanup_nonce() clear the buffer contents safely before freeing it, in order not to leave sensitive information about the DRBG's state in memory.</p> <p>A request for prediction resistance can only be satisfied by pulling fresh entropy from one of the approved entropy sources listed in section 5.5.2 of [NIST SP 800-90C]. Since the default implementation of the get_entropy callback does not have access to such an approved entropy source, a request for prediction resistance will always fail. In other words, prediction resistance is currently not supported yet by the DRBG.</p> <p>The derivation function is disabled during initialization by calling the RAND_DRBG_set() function with the RAND_DRBG_FLAG_CTR_NO_DF flag. For more information on the derivation function and when it can be omitted, see [NIST SP 800-90A Rev. 1]. Roughly speaking it can be omitted if the random source has \"full entropy\", i.e., contains 8 bits of entropy per byte.</p> <p>Even if a nonce is required, the get_nonce() and cleanup_nonce() callbacks can be omitted by setting them to NULL. In this case the DRBG will automatically request an extra amount of entropy (using the get_entropy() and cleanup_entropy() callbacks) which it will utilize for the nonce, following the recommendations of [NIST SP 800-90A Rev. 1], section 8.6.7.</p>"},{"location":"man3/RAND_DRBG_set_callbacks/#see-also","title":"SEE ALSO","text":"<p>RAND_DRBG_new(3), RAND_DRBG_reseed(3), RAND_DRBG(7)</p>"},{"location":"man3/RAND_DRBG_set_callbacks/#history","title":"HISTORY","text":"<p>The RAND_DRBG functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/RAND_DRBG_set_callbacks/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_DRBG_set_ex_data/","title":"RAND_DRBG_set_ex_data","text":""},{"location":"man3/RAND_DRBG_set_ex_data/#name","title":"NAME","text":"<p>RAND_DRBG_set_ex_data, RAND_DRBG_get_ex_data, RAND_DRBG_get_ex_new_index - store and retrieve extra data from the DRBG instance</p>"},{"location":"man3/RAND_DRBG_set_ex_data/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n\nint RAND_DRBG_set_ex_data(RAND_DRBG *drbg, int idx, void *data);\n\nvoid *RAND_DRBG_get_ex_data(const RAND_DRBG *drbg, int idx);\n\nint RAND_DRBG_get_ex_new_index(long argl, void *argp,\n                               CRYPTO_EX_new *new_func,\n                               CRYPTO_EX_dup *dup_func,\n                               CRYPTO_EX_free *free_func);\n</code></pre>"},{"location":"man3/RAND_DRBG_set_ex_data/#description","title":"DESCRIPTION","text":"<p>RAND_DRBG_set_ex_data() enables an application to store arbitrary application specific data data in a RAND_DRBG instance drbg. The index idx should be a value previously returned from a call to RAND_DRBG_get_ex_new_index().</p> <p>RAND_DRBG_get_ex_data() retrieves application specific data previously stored in an RAND_DRBG instance drbg. The idx value should be the same as that used when originally storing the data.</p> <p>For more detailed information see CRYPTO_get_ex_data(3) and CRYPTO_set_ex_data(3) which implement these functions and CRYPTO_get_ex_new_index(3) for generating a unique index.</p>"},{"location":"man3/RAND_DRBG_set_ex_data/#return-values","title":"RETURN VALUES","text":"<p>RAND_DRBG_set_ex_data() returns 1 for success or 0 for failure.</p> <p>RAND_DRBG_get_ex_data() returns the previously stored value or NULL on failure. NULL may also be a valid value.</p>"},{"location":"man3/RAND_DRBG_set_ex_data/#notes","title":"NOTES","text":"<p>RAND_DRBG_get_ex_new_index(...) is implemented as a macro and equivalent to CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DRBG,...).</p>"},{"location":"man3/RAND_DRBG_set_ex_data/#see-also","title":"SEE ALSO","text":"<p>CRYPTO_get_ex_data(3), CRYPTO_set_ex_data(3), CRYPTO_get_ex_new_index(3), RAND_DRBG(7)</p>"},{"location":"man3/RAND_DRBG_set_ex_data/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_add/","title":"RAND_add","text":""},{"location":"man3/RAND_add/#name","title":"NAME","text":"<p>RAND_add, RAND_poll, RAND_seed, RAND_status, RAND_event, RAND_screen, RAND_keep_random_devices_open - add randomness to the PRNG or get its status</p>"},{"location":"man3/RAND_add/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand.h&gt;\n\nint RAND_status(void);\nint RAND_poll();\n\nvoid RAND_add(const void *buf, int num, double randomness);\nvoid RAND_seed(const void *buf, int num);\n\nvoid RAND_keep_random_devices_open(int keep);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nint RAND_event(UINT iMsg, WPARAM wParam, LPARAM lParam);\nvoid RAND_screen(void);\n#endif\n</code></pre>"},{"location":"man3/RAND_add/#description","title":"DESCRIPTION","text":"<p>These functions can be used to seed the random generator and to check its seeded state. In general, manual (re-)seeding of the default OpenSSL random generator (RAND_OpenSSL(3)) is not necessary (but allowed), since it does (re-)seed itself automatically using trusted system entropy sources. This holds unless the default RAND_METHOD has been replaced or OpenSSL was built with automatic reseeding disabled, see RAND(7) for more details.</p> <p>RAND_status() indicates whether or not the random generator has been sufficiently seeded. If not, functions such as RAND_bytes(3) will fail.</p> <p>RAND_poll() uses the system's capabilities to seed the random generator using random input obtained from polling various trusted entropy sources. The default choice of the entropy source can be modified at build time, see RAND(7) for more details.</p> <p>RAND_add() mixes the num bytes at buf into the internal state of the random generator. This function will not normally be needed, as mentioned above. The randomness argument is an estimate of how much randomness is contained in buf, in bytes, and should be a number between zero and num. Details about sources of randomness and how to estimate their randomness can be found in the literature; for example [NIST SP 800-90B]. The content of buf cannot be recovered from subsequent random generator output. Applications that intend to save and restore random state in an external file should consider using RAND_load_file(3) instead.</p> <p>RAND_seed() is equivalent to RAND_add() with randomness set to num.</p> <p>RAND_keep_random_devices_open() is used to control file descriptor usage by the random seed sources. Some seed sources maintain open file descriptors by default, which allows such sources to operate in a chroot(2) jail without the associated device nodes being available. When the keep argument is zero, this call disables the retention of file descriptors. Conversely, a nonzero argument enables the retention of file descriptors. This function is usually called during initialization and it takes effect immediately.</p> <p>RAND_event() and RAND_screen() are equivalent to RAND_poll() and exist for compatibility reasons only. See HISTORY section below.</p>"},{"location":"man3/RAND_add/#return-values","title":"RETURN VALUES","text":"<p>RAND_status() returns 1 if the random generator has been seeded with enough data, 0 otherwise.</p> <p>RAND_poll() returns 1 if it generated seed data, 0 otherwise.</p> <p>RAND_event() returns RAND_status().</p> <p>The other functions do not return values.</p>"},{"location":"man3/RAND_add/#see-also","title":"SEE ALSO","text":"<p>RAND_bytes(3), RAND_egd(3), RAND_load_file(3), RAND(7)</p>"},{"location":"man3/RAND_add/#history","title":"HISTORY","text":"<p>RAND_event() and RAND_screen() were deprecated in OpenSSL 1.1.0 and should not be used.</p>"},{"location":"man3/RAND_add/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_bytes/","title":"RAND_bytes","text":""},{"location":"man3/RAND_bytes/#name","title":"NAME","text":"<p>RAND_bytes, RAND_priv_bytes, RAND_pseudo_bytes - generate random data</p>"},{"location":"man3/RAND_bytes/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand.h&gt;\n\nint RAND_bytes(unsigned char *buf, int num);\nint RAND_priv_bytes(unsigned char *buf, int num);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nint RAND_pseudo_bytes(unsigned char *buf, int num);\n#endif\n</code></pre>"},{"location":"man3/RAND_bytes/#description","title":"DESCRIPTION","text":"<p>RAND_bytes() generates num random bytes using a cryptographically secure pseudo random generator (CSPRNG) and stores them in buf.</p> <p>RAND_priv_bytes() has the same semantics as RAND_bytes().  It is intended to be used for generating values that should remain private. If using the default RAND_METHOD, this function uses a separate \"private\" PRNG instance so that a compromise of the \"public\" PRNG instance will not affect the secrecy of these private values, as described in RAND(7) and RAND_DRBG(7).</p>"},{"location":"man3/RAND_bytes/#notes","title":"NOTES","text":"<p>By default, the OpenSSL CSPRNG supports a security level of 256 bits, provided it was able to seed itself from a trusted entropy source. On all major platforms supported by OpenSSL (including the Unix-like platforms and Windows), OpenSSL is configured to automatically seed the CSPRNG on first use using the operating systems's random generator.</p> <p>If the entropy source fails or is not available, the CSPRNG will enter an error state and refuse to generate random bytes. For that reason, it is important to always check the error return value of RAND_bytes() and RAND_priv_bytes() and not take randomness for granted.</p> <p>On other platforms, there might not be a trusted entropy source available or OpenSSL might have been explicitly configured to use different entropy sources. If you are in doubt about the quality of the entropy source, don't hesitate to ask your operating system vendor or post a question on GitHub or the openssl-users mailing list.</p>"},{"location":"man3/RAND_bytes/#return-values","title":"RETURN VALUES","text":"<p>RAND_bytes() and RAND_priv_bytes() return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure. The error code can be obtained by ERR_get_error(3).</p>"},{"location":"man3/RAND_bytes/#see-also","title":"SEE ALSO","text":"<p>RAND_add(3), RAND_bytes(3), RAND_priv_bytes(3), ERR_get_error(3), RAND(7), RAND_DRBG(7)</p>"},{"location":"man3/RAND_bytes/#history","title":"HISTORY","text":"<ul> <li>RAND_pseudo_bytes() was deprecated in OpenSSL 1.1.0; use RAND_bytes() instead.</li> <li>The RAND_priv_bytes() function was added in OpenSSL 1.1.1.</li> </ul>"},{"location":"man3/RAND_bytes/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_cleanup/","title":"RAND_cleanup","text":""},{"location":"man3/RAND_cleanup/#name","title":"NAME","text":"<p>RAND_cleanup - erase the PRNG state</p>"},{"location":"man3/RAND_cleanup/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand.h&gt;\n\n#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid RAND_cleanup(void)\n#endif\n</code></pre>"},{"location":"man3/RAND_cleanup/#description","title":"DESCRIPTION","text":"<p>Prior to OpenSSL 1.1.0, RAND_cleanup() released all resources used by the PRNG.  As of version 1.1.0, it does nothing and should not be called, since no explicit initialisation or de-initialisation is necessary. See OPENSSL_init_crypto(3).</p>"},{"location":"man3/RAND_cleanup/#return-values","title":"RETURN VALUES","text":"<p>RAND_cleanup() returns no value.</p>"},{"location":"man3/RAND_cleanup/#see-also","title":"SEE ALSO","text":"<p>RAND(7)</p>"},{"location":"man3/RAND_cleanup/#history","title":"HISTORY","text":"<p>RAND_cleanup() was deprecated in OpenSSL 1.1.0; do not use it. See OPENSSL_init_crypto(3)</p>"},{"location":"man3/RAND_cleanup/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_egd/","title":"RAND_egd","text":""},{"location":"man3/RAND_egd/#name","title":"NAME","text":"<p>RAND_egd, RAND_egd_bytes, RAND_query_egd_bytes - query entropy gathering daemon</p>"},{"location":"man3/RAND_egd/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand.h&gt;\n\nint RAND_egd_bytes(const char *path, int num);\nint RAND_egd(const char *path);\n\nint RAND_query_egd_bytes(const char *path, unsigned char *buf, int num);\n</code></pre>"},{"location":"man3/RAND_egd/#description","title":"DESCRIPTION","text":"<p>On older platforms without a good source of randomness such as <code>/dev/urandom</code>, it is possible to query an Entropy Gathering Daemon (EGD) over a local socket to obtain randomness and seed the OpenSSL RNG. The protocol used is defined by the EGDs available at http://egd.sourceforge.net/ or http://prngd.sourceforge.net.</p> <p>RAND_egd_bytes() requests num bytes of randomness from an EGD at the specified socket path, and passes the data it receives into RAND_add(). RAND_egd() is equivalent to RAND_egd_bytes() with num set to 255.</p> <p>RAND_query_egd_bytes() requests num bytes of randomness from an EGD at the specified socket path, where num must be less than 256. If buf is NULL, it is equivalent to RAND_egd_bytes(). If buf is not NULL, then the data is copied to the buffer and RAND_add() is not called.</p> <p>OpenSSL can be configured at build time to try to use the EGD for seeding automatically.</p>"},{"location":"man3/RAND_egd/#return-values","title":"RETURN VALUES","text":"<p>RAND_egd() and RAND_egd_bytes() return the number of bytes read from the daemon on success, or -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG.</p> <p>RAND_query_egd_bytes() returns the number of bytes read from the daemon on success, or -1 if the connection failed.</p>"},{"location":"man3/RAND_egd/#see-also","title":"SEE ALSO","text":"<p>RAND_add(3), RAND_bytes(3), RAND(7)</p>"},{"location":"man3/RAND_egd/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_load_file/","title":"RAND_load_file","text":""},{"location":"man3/RAND_load_file/#name","title":"NAME","text":"<p>RAND_load_file, RAND_write_file, RAND_file_name - PRNG seed file</p>"},{"location":"man3/RAND_load_file/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand.h&gt;\n\nint RAND_load_file(const char *filename, long max_bytes);\n\nint RAND_write_file(const char *filename);\n\nconst char *RAND_file_name(char *buf, size_t num);\n</code></pre>"},{"location":"man3/RAND_load_file/#description","title":"DESCRIPTION","text":"<p>RAND_load_file() reads a number of bytes from file filename and adds them to the PRNG. If max_bytes is nonnegative, up to max_bytes are read; if max_bytes is -1, the complete file is read. Do not load the same file multiple times unless its contents have been updated by RAND_write_file() between reads. Also, note that filename should be adequately protected so that an attacker cannot replace or examine the contents. If filename is not a regular file, then user is considered to be responsible for any side effects, e.g. non-anticipated blocking or capture of controlling terminal.</p> <p>RAND_write_file() writes a number of random bytes (currently 128) to file filename which can be used to initialize the PRNG by calling RAND_load_file() in a later session.</p> <p>RAND_file_name() generates a default path for the random seed file. buf points to a buffer of size num in which to store the filename.</p> <p>On all systems, if the environment variable RANDFILE is set, its value will be used as the seed filename. Otherwise, the file is called <code>.rnd</code>, found in platform dependent locations:</p> <ul> <li> <p>On Windows (in order of preference)</p> <pre><code>%HOME%, %USERPROFILE%, %SYSTEMROOT%, C:\\\n</code></pre> </li> <li> <p>On VMS</p> <pre><code>SYS$LOGIN:\n</code></pre> </li> <li> <p>On all other systems</p> <pre><code>$HOME\n</code></pre> </li> </ul> <p>If <code>$HOME</code> (on non-Windows and non-VMS system) is not set either, or num is too small for the pathname, an error occurs.</p>"},{"location":"man3/RAND_load_file/#return-values","title":"RETURN VALUES","text":"<p>RAND_load_file() returns the number of bytes read or -1 on error.</p> <p>RAND_write_file() returns the number of bytes written, or -1 if the bytes written were generated without appropriate seeding.</p> <p>RAND_file_name() returns a pointer to buf on success, and NULL on error.</p>"},{"location":"man3/RAND_load_file/#see-also","title":"SEE ALSO","text":"<p>RAND_add(3), RAND_bytes(3), RAND(7)</p>"},{"location":"man3/RAND_load_file/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RAND_set_rand_method/","title":"RAND_set_rand_method","text":""},{"location":"man3/RAND_set_rand_method/#name","title":"NAME","text":"<p>RAND_set_rand_method, RAND_get_rand_method, RAND_OpenSSL - select RAND method</p>"},{"location":"man3/RAND_set_rand_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand.h&gt;\n\nRAND_METHOD *RAND_OpenSSL(void);\n\nint RAND_set_rand_method(const RAND_METHOD *meth);\n\nconst RAND_METHOD *RAND_get_rand_method(void);\n</code></pre>"},{"location":"man3/RAND_set_rand_method/#description","title":"DESCRIPTION","text":"<p>A RAND_METHOD specifies the functions that OpenSSL uses for random number generation.</p> <p>RAND_OpenSSL() returns the default RAND_METHOD implementation by OpenSSL. This implementation ensures that the PRNG state is unique for each thread.</p> <p>If an ENGINE is loaded that provides the RAND API, however, it will be used instead of the method returned by RAND_OpenSSL().</p> <p>RAND_set_rand_method() makes meth the method for PRNG use.  If an ENGINE was providing the method, it will be released first.</p> <p>RAND_get_rand_method() returns a pointer to the current RAND_METHOD.</p>"},{"location":"man3/RAND_set_rand_method/#the-rand_method-structure","title":"THE RAND_METHOD STRUCTURE","text":"<pre><code>typedef struct rand_meth_st {\n    int (*seed)(const void *buf, int num);\n    int (*bytes)(unsigned char *buf, int num);\n    void (*cleanup)(void);\n    int (*add)(const void *buf, int num, double entropy);\n    int (*pseudorand)(unsigned char *buf, int num);\n    int (*status)(void);\n} RAND_METHOD;\n</code></pre> <p>The fields point to functions that are used by, in order, RAND_seed(), RAND_bytes(), internal RAND cleanup, RAND_add(), RAND_pseudo_rand() and RAND_status(). Each pointer may be NULL if the function is not implemented.</p>"},{"location":"man3/RAND_set_rand_method/#return-values","title":"RETURN VALUES","text":"<p>RAND_set_rand_method() returns 1 on success and 0 on failure. RAND_get_rand_method() and RAND_OpenSSL() return pointers to the respective methods.</p>"},{"location":"man3/RAND_set_rand_method/#see-also","title":"SEE ALSO","text":"<p>RAND_bytes(3), ENGINE_by_id(3), RAND(7)</p>"},{"location":"man3/RAND_set_rand_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RC4_set_key/","title":"RC4_set_key","text":""},{"location":"man3/RC4_set_key/#name","title":"NAME","text":"<p>RC4_set_key, RC4 - RC4 encryption</p>"},{"location":"man3/RC4_set_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rc4.h&gt;\n\nvoid RC4_set_key(RC4_KEY *key, int len, const unsigned char *data);\n\nvoid RC4(RC4_KEY *key, unsigned long len, const unsigned char *indata,\n         unsigned char *outdata);\n</code></pre>"},{"location":"man3/RC4_set_key/#description","title":"DESCRIPTION","text":"<p>This library implements the Alleged RC4 cipher, which is described for example in Applied Cryptography.  It is believed to be compatible with RC4[TM], a proprietary cipher of RSA Security Inc.</p> <p>RC4 is a stream cipher with variable key length.  Typically, 128 bit (16 byte) keys are used for strong encryption, but shorter insecure key sizes have been widely used due to export restrictions.</p> <p>RC4 consists of a key setup phase and the actual encryption or decryption phase.</p> <p>RC4_set_key() sets up the RC4_KEY key using the len bytes long key at data.</p> <p>RC4() encrypts or decrypts the len bytes of data at indata using key and places the result at outdata.  Repeated RC4() calls with the same key yield a continuous key stream.</p> <p>Since RC4 is a stream cipher (the input is XORed with a pseudo-random key stream to produce the output), decryption uses the same function calls as encryption.</p>"},{"location":"man3/RC4_set_key/#return-values","title":"RETURN VALUES","text":"<p>RC4_set_key() and RC4() do not return values.</p>"},{"location":"man3/RC4_set_key/#note","title":"NOTE","text":"<p>Applications should use the higher level functions EVP_EncryptInit(3) etc. instead of calling these functions directly.</p> <p>It is difficult to securely use stream ciphers. For example, do not perform multiple encryptions using the same key stream.</p>"},{"location":"man3/RC4_set_key/#see-also","title":"SEE ALSO","text":"<p>EVP_EncryptInit(3)</p>"},{"location":"man3/RC4_set_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RIPEMD160_Init/","title":"RIPEMD160_Init","text":""},{"location":"man3/RIPEMD160_Init/#name","title":"NAME","text":"<p>RIPEMD160, RIPEMD160_Init, RIPEMD160_Update, RIPEMD160_Final - RIPEMD-160 hash function</p>"},{"location":"man3/RIPEMD160_Init/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ripemd.h&gt;\n\nunsigned char *RIPEMD160(const unsigned char *d, unsigned long n,\n                         unsigned char *md);\n\nint RIPEMD160_Init(RIPEMD160_CTX *c);\nint RIPEMD160_Update(RIPEMD160_CTX *c, const void *data, unsigned long len);\nint RIPEMD160_Final(unsigned char *md, RIPEMD160_CTX *c);\n</code></pre>"},{"location":"man3/RIPEMD160_Init/#description","title":"DESCRIPTION","text":"<p>RIPEMD-160 is a cryptographic hash function with a 160 bit output.</p> <p>RIPEMD160() computes the RIPEMD-160 message digest of the n bytes at d and places it in md (which must have space for RIPEMD160_DIGEST_LENGTH == 20 bytes of output). If md is NULL, the digest is placed in a static array.</p> <p>The following functions may be used if the message is not completely stored in memory:</p> <p>RIPEMD160_Init() initializes a RIPEMD160_CTX structure.</p> <p>RIPEMD160_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at data).</p> <p>RIPEMD160_Final() places the message digest in md, which must have space for RIPEMD160_DIGEST_LENGTH == 20 bytes of output, and erases the RIPEMD160_CTX.</p>"},{"location":"man3/RIPEMD160_Init/#return-values","title":"RETURN VALUES","text":"<p>RIPEMD160() returns a pointer to the hash value.</p> <p>RIPEMD160_Init(), RIPEMD160_Update() and RIPEMD160_Final() return 1 for success, 0 otherwise.</p>"},{"location":"man3/RIPEMD160_Init/#note","title":"NOTE","text":"<p>Applications should use the higher level functions EVP_DigestInit(3) etc. instead of calling these functions directly.</p>"},{"location":"man3/RIPEMD160_Init/#conforming-to","title":"CONFORMING TO","text":"<p>ISO/IEC 10118-3:2016 Dedicated Hash-Function 1 (RIPEMD-160).</p>"},{"location":"man3/RIPEMD160_Init/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestInit(3)</p>"},{"location":"man3/RIPEMD160_Init/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_blinding_on/","title":"RSA_blinding_on","text":""},{"location":"man3/RSA_blinding_on/#name","title":"NAME","text":"<p>RSA_blinding_on, RSA_blinding_off - protect the RSA operation from timing attacks</p>"},{"location":"man3/RSA_blinding_on/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_blinding_on(RSA *rsa, BN_CTX *ctx);\n\nvoid RSA_blinding_off(RSA *rsa);\n</code></pre>"},{"location":"man3/RSA_blinding_on/#description","title":"DESCRIPTION","text":"<p>RSA is vulnerable to timing attacks. In a setup where attackers can measure the time of RSA decryption or signature operations, blinding must be used to protect the RSA operation from that attack.</p> <p>RSA_blinding_on() turns blinding on for key rsa and generates a random blinding factor. ctx is NULL or a preallocated and initialized BN_CTX.</p> <p>RSA_blinding_off() turns blinding off and frees the memory used for the blinding factor.</p>"},{"location":"man3/RSA_blinding_on/#return-values","title":"RETURN VALUES","text":"<p>RSA_blinding_on() returns 1 on success, and 0 if an error occurred.</p> <p>RSA_blinding_off() returns no value.</p>"},{"location":"man3/RSA_blinding_on/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_check_key/","title":"RSA_check_key","text":""},{"location":"man3/RSA_check_key/#name","title":"NAME","text":"<p>RSA_check_key_ex, RSA_check_key - validate private RSA keys</p>"},{"location":"man3/RSA_check_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_check_key_ex(RSA *rsa, BN_GENCB *cb);\n\nint RSA_check_key(RSA *rsa);\n</code></pre>"},{"location":"man3/RSA_check_key/#description","title":"DESCRIPTION","text":"<p>RSA_check_key_ex() function validates RSA keys. It checks that p and q are in fact prime, and that n = p*q.</p> <p>It does not work on RSA public keys that have only the modulus and public exponent elements populated. It also checks that d*e = 1 mod (p-1*q-1), and that dmp1, dmq1 and iqmp are set correctly or are NULL. It performs integrity checks on all the RSA key material, so the RSA key structure must contain all the private key data too. Therefore, it cannot be used with any arbitrary RSA key object, even if it is otherwise fit for regular RSA operation.</p> <p>The cb parameter is a callback that will be invoked in the same manner as BN_is_prime_ex(3).</p> <p>RSA_check_key() is equivalent to RSA_check_key_ex() with a NULL cb.</p>"},{"location":"man3/RSA_check_key/#return-values","title":"RETURN VALUES","text":"<p>RSA_check_key_ex() and RSA_check_key() return 1 if rsa is a valid RSA key, and 0 otherwise. They return -1 if an error occurs while checking the key.</p> <p>If the key is invalid or an error occurred, the reason code can be obtained using ERR_get_error(3).</p>"},{"location":"man3/RSA_check_key/#notes","title":"NOTES","text":"<p>Unlike most other RSA functions, this function does not work transparently with any underlying ENGINE implementation because it uses the key data in the RSA structure directly. An ENGINE implementation can override the way key data is stored and handled, and can even provide support for HSM keys - in which case the RSA structure may contain no key data at all! If the ENGINE in question is only being used for acceleration or analysis purposes, then in all likelihood the RSA key data is complete and untouched, but this can't be assumed in the general case.</p>"},{"location":"man3/RSA_check_key/#bugs","title":"BUGS","text":"<p>A method of verifying the RSA key using opaque RSA API functions might need to be considered. Right now RSA_check_key() simply uses the RSA structure elements directly, bypassing the RSA_METHOD table altogether (and completely violating encapsulation and object-orientation in the process). The best fix will probably be to introduce a \"check_key()\" handler to the RSA_METHOD function table so that alternative implementations can also provide their own verifiers.</p>"},{"location":"man3/RSA_check_key/#see-also","title":"SEE ALSO","text":"<p>BN_is_prime_ex(3), ERR_get_error(3)</p>"},{"location":"man3/RSA_check_key/#history","title":"HISTORY","text":"<p>RSA_check_key_ex() appeared after OpenSSL 1.0.2.</p>"},{"location":"man3/RSA_check_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_generate_key/","title":"RSA_generate_key","text":""},{"location":"man3/RSA_generate_key/#name","title":"NAME","text":"<p>RSA_generate_key_ex, RSA_generate_key, RSA_generate_multi_prime_key - generate RSA key pair</p>"},{"location":"man3/RSA_generate_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);\nint RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x00908000L\nRSA *RSA_generate_key(int bits, unsigned long e,\n                      void (*callback)(int, int, void *), void *cb_arg);\n#endif\n</code></pre>"},{"location":"man3/RSA_generate_key/#description","title":"DESCRIPTION","text":"<p>RSA_generate_key_ex() generates a 2-prime RSA key pair and stores it in the RSA structure provided in rsa. The pseudo-random number generator must be seeded prior to calling RSA_generate_key_ex().</p> <p>RSA_generate_multi_prime_key() generates a multi-prime RSA key pair and stores it in the RSA structure provided in rsa. The number of primes is given by the primes parameter. The random number generator must be seeded when calling RSA_generate_multi_prime_key(). If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>The modulus size will be of length bits, the number of primes to form the modulus will be primes, and the public exponent will be e. Key sizes with num &lt; 1024 should be considered insecure. The exponent is an odd number, typically 3, 17 or 65537.</p> <p>In order to maintain adequate security level, the maximum number of permitted primes depends on modulus bit length:</p> <pre><code>&lt;1024 | &gt;=1024 | &gt;=4096 | &gt;=8192\n------+--------+--------+-------\n  2   |   3    |   4    |   5\n</code></pre> <p>A callback function may be used to provide feedback about the progress of the key generation. If cb is not NULL, it will be called as follows using the BN_GENCB_call() function described on the BN_generate_prime(3) page.</p> <p>RSA_generate_key() is similar to RSA_generate_key_ex() but expects an old-style callback function; see BN_generate_prime(3) for information on the old-style callback.</p> <ul> <li>While a random prime number is generated, it is called as described in BN_generate_prime(3).</li> <li>When the n-th randomly generated prime is rejected as not suitable for the key, BN_GENCB_call(cb, 2, n) is called.</li> <li>When a random p has been found with p-1 relatively prime to e, it is called as BN_GENCB_call(cb, 3, 0).</li> </ul> <p>The process is then repeated for prime q and other primes (if any) with BN_GENCB_call(cb, 3, i) where i indicates the i-th prime.</p>"},{"location":"man3/RSA_generate_key/#return-values","title":"RETURN VALUES","text":"<p>RSA_generate_multi_prime_key() returns 1 on success or 0 on error. RSA_generate_key_ex() returns 1 on success or 0 on error. The error codes can be obtained by ERR_get_error(3).</p> <p>RSA_generate_key() returns a pointer to the RSA structure or NULL if the key generation fails.</p>"},{"location":"man3/RSA_generate_key/#bugs","title":"BUGS","text":"<p>BN_GENCB_call(cb, 2, x) is used with two different meanings.</p>"},{"location":"man3/RSA_generate_key/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RAND_bytes(3), BN_generate_prime(3), RAND(7)</p>"},{"location":"man3/RSA_generate_key/#history","title":"HISTORY","text":"<p>RSA_generate_key() was deprecated in OpenSSL 0.9.8; use RSA_generate_key_ex() instead.</p>"},{"location":"man3/RSA_generate_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_get0_key/","title":"RSA_get0_key","text":""},{"location":"man3/RSA_get0_key/#name","title":"NAME","text":"<p>RSA_set0_key, RSA_set0_factors, RSA_set0_crt_params, RSA_get0_key, RSA_get0_factors, RSA_get0_crt_params, RSA_get0_n, RSA_get0_e, RSA_get0_d, RSA_get0_p, RSA_get0_q, RSA_get0_dmp1, RSA_get0_dmq1, RSA_get0_iqmp, RSA_get0_pss_params, RSA_clear_flags, RSA_test_flags, RSA_set_flags, RSA_get0_engine, RSA_get_multi_prime_extra_count, RSA_get0_multi_prime_factors, RSA_get0_multi_prime_crt_params, RSA_set0_multi_prime_params, RSA_get_version - Routines for getting and setting data in an RSA object</p>"},{"location":"man3/RSA_get0_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d);\nint RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q);\nint RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp);\nvoid RSA_get0_key(const RSA *r,\n                  const BIGNUM **n, const BIGNUM **e, const BIGNUM **d);\nvoid RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q);\nvoid RSA_get0_crt_params(const RSA *r,\n                         const BIGNUM **dmp1, const BIGNUM **dmq1,\n                         const BIGNUM **iqmp);\nconst BIGNUM *RSA_get0_n(const RSA *d);\nconst BIGNUM *RSA_get0_e(const RSA *d);\nconst BIGNUM *RSA_get0_d(const RSA *d);\nconst BIGNUM *RSA_get0_p(const RSA *d);\nconst BIGNUM *RSA_get0_q(const RSA *d);\nconst BIGNUM *RSA_get0_dmp1(const RSA *r);\nconst BIGNUM *RSA_get0_dmq1(const RSA *r);\nconst BIGNUM *RSA_get0_iqmp(const RSA *r);\nconst RSA_PSS_PARAMS *RSA_get0_pss_params(const RSA *r);\nvoid RSA_clear_flags(RSA *r, int flags);\nint RSA_test_flags(const RSA *r, int flags);\nvoid RSA_set_flags(RSA *r, int flags);\nENGINE *RSA_get0_engine(RSA *r);\nint RSA_get_multi_prime_extra_count(const RSA *r);\nint RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[]);\nint RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[],\n                                    const BIGNUM *coeffs[]);\nint RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[],\n                               BIGNUM *coeffs[], int pnum);\nint RSA_get_version(RSA *r);\n</code></pre>"},{"location":"man3/RSA_get0_key/#description","title":"DESCRIPTION","text":"<p>An RSA object contains the components for the public and private key, n, e, d, p, q, dmp1, dmq1 and iqmp.  n is the modulus common to both public and private key, e is the public exponent and d is the private exponent.  p, q, dmp1, dmq1 and iqmp are the factors for the second representation of a private key (see PKCS#1 section 3 Key Types), where p and q are the first and second factor of n and dmp1, dmq1 and iqmp are the exponents and coefficient for CRT calculations.</p> <p>For multi-prime RSA (defined in RFC 8017), there are also one or more 'triplet' in an RSA object. A triplet contains three members, r, d and t. r is the additional prime besides p and q. d and t are the exponent and coefficient for CRT calculations.</p> <p>The n, e and d parameters can be obtained by calling RSA_get0_key().  If they have not been set yet, then *n, *e and *d will be set to NULL.  Otherwise, they are set to pointers to their respective values. These point directly to the internal representations of the values and therefore should not be freed by the caller.</p> <p>The n, e and d parameter values can be set by calling RSA_set0_key() and passing the new values for n, e and d as parameters to the function.  The values n and e must be non-NULL the first time this function is called on a given RSA object. The value d may be NULL. On subsequent calls any of these values may be NULL which means the corresponding RSA field is left untouched. Calling this function transfers the memory management of the values to the RSA object, and therefore the values that have been passed in should not be freed by the caller after this function has been called.</p> <p>In a similar fashion, the p and q parameters can be obtained and set with RSA_get0_factors() and RSA_set0_factors(), and the dmp1, dmq1 and iqmp parameters can be obtained and set with RSA_get0_crt_params() and RSA_set0_crt_params().</p> <p>For RSA_get0_key(), RSA_get0_factors(), and RSA_get0_crt_params(), NULL value BIGNUM ** output parameters are permitted. The functions ignore NULL parameters but return values for other, non-NULL, parameters.</p> <p>For multi-prime RSA, RSA_get0_multi_prime_factors() and RSA_get0_multi_prime_params() can be used to obtain other primes and related CRT parameters. The return values are stored in an array of BIGNUM *. RSA_set0_multi_prime_params() sets a collect of multi-prime 'triplet' members (prime, exponent and coefficient) into an RSA object.</p> <p>Any of the values n, e, d, p, q, dmp1, dmq1, and iqmp can also be retrieved separately by the corresponding function RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp(), respectively.</p> <p>RSA_get0_pss_params() is used to retrieve the RSA-PSS parameters.</p> <p>RSA_set_flags() sets the flags in the flags parameter on the RSA object. Multiple flags can be passed in one go (bitwise ORed together). Any flags that are already set are left set. RSA_test_flags() tests to see whether the flags passed in the flags parameter are currently set in the RSA object. Multiple flags can be tested in one go. All flags that are currently set are returned, or zero if none of the flags are set. RSA_clear_flags() clears the specified flags within the RSA object.</p> <p>RSA_get0_engine() returns a handle to the ENGINE that has been set for this RSA object, or NULL if no such ENGINE has been set.</p> <p>RSA_get_version() returns the version of an RSA object r.</p>"},{"location":"man3/RSA_get0_key/#notes","title":"NOTES","text":"<p>Values retrieved with RSA_get0_key() are owned by the RSA object used in the call and may therefore not be passed to RSA_set0_key().  If needed, duplicate the received value using BN_dup() and pass the duplicate.  The same applies to RSA_get0_factors() and RSA_set0_factors() as well as RSA_get0_crt_params() and RSA_set0_crt_params().</p> <p>The caller should obtain the size by calling RSA_get_multi_prime_extra_count() in advance and allocate sufficient buffer to store the return values before calling RSA_get0_multi_prime_factors() and RSA_get0_multi_prime_params().</p> <p>RSA_set0_multi_prime_params() always clears the original multi-prime triplets in RSA object r and assign the new set of triplets into it.</p>"},{"location":"man3/RSA_get0_key/#return-values","title":"RETURN VALUES","text":"<p>RSA_set0_key(), RSA_set0_factors(), RSA_set0_crt_params() and RSA_set0_multi_prime_params() return 1 on success or 0 on failure.</p> <p>RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.</p> <p>RSA_get0_multi_prime_factors() and RSA_get0_multi_prime_crt_params() return 1 on success or 0 on failure.</p> <p>RSA_get_multi_prime_extra_count() returns two less than the number of primes in use, which is 0 for traditional RSA and the number of extra primes for multi-prime RSA.</p> <p>RSA_get_version() returns RSA_ASN1_VERSION_MULTI for multi-prime RSA and RSA_ASN1_VERSION_DEFAULT for normal two-prime RSA, as defined in RFC 8017.</p> <p>RSA_test_flags() returns the current state of the flags in the RSA object.</p> <p>RSA_get0_engine() returns the ENGINE set for the RSA object or NULL if no ENGINE has been set.</p>"},{"location":"man3/RSA_get0_key/#see-also","title":"SEE ALSO","text":"<p>RSA_new(3), RSA_size(3)</p>"},{"location":"man3/RSA_get0_key/#history","title":"HISTORY","text":"<p>The RSA_get0_pss_params() function was added in OpenSSL 1.1.1e.</p> <p>The RSA_get_multi_prime_extra_count(), RSA_get0_multi_prime_factors(), RSA_get0_multi_prime_crt_params(), RSA_set0_multi_prime_params(), and RSA_get_version() functions were added in OpenSSL 1.1.1.</p> <p>Other functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/RSA_get0_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_meth_new/","title":"RSA_meth_new","text":""},{"location":"man3/RSA_meth_new/#name","title":"NAME","text":"<p>RSA_meth_get0_app_data, RSA_meth_set0_app_data, RSA_meth_new, RSA_meth_free, RSA_meth_dup, RSA_meth_get0_name, RSA_meth_set1_name, RSA_meth_get_flags, RSA_meth_set_flags, RSA_meth_get_pub_enc, RSA_meth_set_pub_enc, RSA_meth_get_pub_dec, RSA_meth_set_pub_dec, RSA_meth_get_priv_enc, RSA_meth_set_priv_enc, RSA_meth_get_priv_dec, RSA_meth_set_priv_dec, RSA_meth_get_mod_exp, RSA_meth_set_mod_exp, RSA_meth_get_bn_mod_exp, RSA_meth_set_bn_mod_exp, RSA_meth_get_init, RSA_meth_set_init, RSA_meth_get_finish, RSA_meth_set_finish, RSA_meth_get_sign, RSA_meth_set_sign, RSA_meth_get_verify, RSA_meth_set_verify, RSA_meth_get_keygen, RSA_meth_set_keygen, RSA_meth_get_multi_prime_keygen, RSA_meth_set_multi_prime_keygen - Routines to build up RSA methods</p>"},{"location":"man3/RSA_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nRSA_METHOD *RSA_meth_new(const char *name, int flags);\nvoid RSA_meth_free(RSA_METHOD *meth);\n\nRSA_METHOD *RSA_meth_dup(const RSA_METHOD *meth);\n\nconst char *RSA_meth_get0_name(const RSA_METHOD *meth);\nint RSA_meth_set1_name(RSA_METHOD *meth, const char *name);\n\nint RSA_meth_get_flags(const RSA_METHOD *meth);\nint RSA_meth_set_flags(RSA_METHOD *meth, int flags);\n\nvoid *RSA_meth_get0_app_data(const RSA_METHOD *meth);\nint RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data);\n\nint (*RSA_meth_get_pub_enc(const RSA_METHOD *meth))(int flen, const unsigned char *from,\n                                                    unsigned char *to, RSA *rsa, int padding);\nint RSA_meth_set_pub_enc(RSA_METHOD *rsa,\n                         int (*pub_enc)(int flen, const unsigned char *from,\n                                        unsigned char *to, RSA *rsa,\n                                        int padding));\n\nint (*RSA_meth_get_pub_dec(const RSA_METHOD *meth))\n    (int flen, const unsigned char *from,\n     unsigned char *to, RSA *rsa, int padding);\nint RSA_meth_set_pub_dec(RSA_METHOD *rsa,\n                         int (*pub_dec)(int flen, const unsigned char *from,\n                                        unsigned char *to, RSA *rsa,\n                                        int padding));\n\nint (*RSA_meth_get_priv_enc(const RSA_METHOD *meth))(int flen, const unsigned char *from,\n                                                     unsigned char *to, RSA *rsa,\n                                                     int padding);\nint RSA_meth_set_priv_enc(RSA_METHOD *rsa,\n                          int (*priv_enc)(int flen, const unsigned char *from,\n                                          unsigned char *to, RSA *rsa, int padding));\n\nint (*RSA_meth_get_priv_dec(const RSA_METHOD *meth))(int flen, const unsigned char *from,\n                                                     unsigned char *to, RSA *rsa,\n                                                     int padding);\nint RSA_meth_set_priv_dec(RSA_METHOD *rsa,\n                          int (*priv_dec)(int flen, const unsigned char *from,\n                                          unsigned char *to, RSA *rsa, int padding));\n\n/* Can be null */\nint (*RSA_meth_get_mod_exp(const RSA_METHOD *meth))(BIGNUM *r0, const BIGNUM *i,\n                                                    RSA *rsa, BN_CTX *ctx);\nint RSA_meth_set_mod_exp(RSA_METHOD *rsa,\n                         int (*mod_exp)(BIGNUM *r0, const BIGNUM *i, RSA *rsa,\n                                        BN_CTX *ctx));\n\n/* Can be null */\nint (*RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))(BIGNUM *r, const BIGNUM *a,\n                                                       const BIGNUM *p, const BIGNUM *m,\n                                                       BN_CTX *ctx, BN_MONT_CTX *m_ctx);\nint RSA_meth_set_bn_mod_exp(RSA_METHOD *rsa,\n                            int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a,\n                                              const BIGNUM *p, const BIGNUM *m,\n                                              BN_CTX *ctx, BN_MONT_CTX *m_ctx));\n\n/* called at new */\nint (*RSA_meth_get_init(const RSA_METHOD *meth) (RSA *rsa);\nint RSA_meth_set_init(RSA_METHOD *rsa, int (*init (RSA *rsa));\n\n/* called at free */\nint (*RSA_meth_get_finish(const RSA_METHOD *meth))(RSA *rsa);\nint RSA_meth_set_finish(RSA_METHOD *rsa, int (*finish)(RSA *rsa));\n\nint (*RSA_meth_get_sign(const RSA_METHOD *meth))(int type, const unsigned char *m,\n                                                 unsigned int m_length,\n                                                 unsigned char *sigret,\n                                                 unsigned int *siglen, const RSA *rsa);\nint RSA_meth_set_sign(RSA_METHOD *rsa,\n                      int (*sign)(int type, const unsigned char *m,\n                                  unsigned int m_length, unsigned char *sigret,\n                                  unsigned int *siglen, const RSA *rsa));\n\nint (*RSA_meth_get_verify(const RSA_METHOD *meth))(int dtype, const unsigned char *m,\n                                                   unsigned int m_length,\n                                                   const unsigned char *sigbuf,\n                                                   unsigned int siglen, const RSA *rsa);\nint RSA_meth_set_verify(RSA_METHOD *rsa,\n                        int (*verify)(int dtype, const unsigned char *m,\n                                      unsigned int m_length,\n                                      const unsigned char *sigbuf,\n                                      unsigned int siglen, const RSA *rsa));\n\nint (*RSA_meth_get_keygen(const RSA_METHOD *meth))(RSA *rsa, int bits, BIGNUM *e,\n                                                   BN_GENCB *cb);\nint RSA_meth_set_keygen(RSA_METHOD *rsa,\n                        int (*keygen)(RSA *rsa, int bits, BIGNUM *e,\n                                      BN_GENCB *cb));\n\nint (*RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))(RSA *rsa, int bits,\n                                                               int primes, BIGNUM *e,\n                                                               BN_GENCB *cb);\n\nint RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,\n                                    int (*keygen) (RSA *rsa, int bits,\n                                                   int primes, BIGNUM *e,\n                                                   BN_GENCB *cb));\n</code></pre>"},{"location":"man3/RSA_meth_new/#description","title":"DESCRIPTION","text":"<p>The RSA_METHOD type is a structure used for the provision of custom RSA implementations. It provides a set of functions used by OpenSSL for the implementation of the various RSA capabilities. See the rsa page for more information.</p> <p>RSA_meth_new() creates a new RSA_METHOD structure. It should be given a unique name and a set of flags. The name should be a NULL terminated string, which will be duplicated and stored in the RSA_METHOD object. It is the callers responsibility to free the original string. The flags will be used during the construction of a new RSA object based on this RSA_METHOD. Any new RSA object will have those flags set by default.</p> <p>RSA_meth_dup() creates a duplicate copy of the RSA_METHOD object passed as a parameter. This might be useful for creating a new RSA_METHOD based on an existing one, but with some differences.</p> <p>RSA_meth_free() destroys an RSA_METHOD structure and frees up any memory associated with it.</p> <p>RSA_meth_get0_name() will return a pointer to the name of this RSA_METHOD. This is a pointer to the internal name string and so should not be freed by the caller. RSA_meth_set1_name() sets the name of the RSA_METHOD to name. The string is duplicated and the copy is stored in the RSA_METHOD structure, so the caller remains responsible for freeing the memory associated with the name.</p> <p>RSA_meth_get_flags() returns the current value of the flags associated with this RSA_METHOD. RSA_meth_set_flags() provides the ability to set these flags.</p> <p>The functions RSA_meth_get0_app_data() and RSA_meth_set0_app_data() provide the ability to associate implementation specific data with the RSA_METHOD. It is the application's responsibility to free this data before the RSA_METHOD is freed via a call to RSA_meth_free().</p> <p>RSA_meth_get_sign() and RSA_meth_set_sign() get and set the function used for creating an RSA signature respectively. This function will be called in response to the application calling RSA_sign(). The parameters for the function have the same meaning as for RSA_sign().</p> <p>RSA_meth_get_verify() and RSA_meth_set_verify() get and set the function used for verifying an RSA signature respectively. This function will be called in response to the application calling RSA_verify(). The parameters for the function have the same meaning as for RSA_verify().</p> <p>RSA_meth_get_mod_exp() and RSA_meth_set_mod_exp() get and set the function used for CRT computations.</p> <p>RSA_meth_get_bn_mod_exp() and RSA_meth_set_bn_mod_exp() get and set the function used for CRT computations, specifically the following value:</p> <pre><code>r = a ^ p mod m\n</code></pre> <p>Both the mod_exp() and bn_mod_exp() functions are called by the default OpenSSL method during encryption, decryption, signing and verification.</p> <p>RSA_meth_get_init() and RSA_meth_set_init() get and set the function used for creating a new RSA instance respectively. This function will be called in response to the application calling RSA_new() (if the current default RSA_METHOD is this one) or RSA_new_method(). The RSA_new() and RSA_new_method() functions will allocate the memory for the new RSA object, and a pointer to this newly allocated structure will be passed as a parameter to the function. This function may be NULL.</p> <p>RSA_meth_get_finish() and RSA_meth_set_finish() get and set the function used for destroying an instance of an RSA object respectively. This function will be called in response to the application calling RSA_free(). A pointer to the RSA to be destroyed is passed as a parameter. The destroy function should be used for RSA implementation specific clean up. The memory for the RSA itself should not be freed by this function. This function may be NULL.</p> <p>RSA_meth_get_keygen() and RSA_meth_set_keygen() get and set the function used for generating a new RSA key pair respectively. This function will be called in response to the application calling RSA_generate_key_ex(). The parameter for the function has the same meaning as for RSA_generate_key_ex().</p> <p>RSA_meth_get_multi_prime_keygen() and RSA_meth_set_multi_prime_keygen() get and set the function used for generating a new multi-prime RSA key pair respectively. This function will be called in response to the application calling RSA_generate_multi_prime_key(). The parameter for the function has the same meaning as for RSA_generate_multi_prime_key().</p> <p>RSA_meth_get_pub_enc(), RSA_meth_set_pub_enc(), RSA_meth_get_pub_dec(), RSA_meth_set_pub_dec(), RSA_meth_get_priv_enc(), RSA_meth_set_priv_enc(), RSA_meth_get_priv_dec(), RSA_meth_set_priv_dec() get and set the functions used for public and private key encryption and decryption. These functions will be called in response to the application calling RSA_public_encrypt(), RSA_private_decrypt(), RSA_private_encrypt() and RSA_public_decrypt() and take the same parameters as those.</p>"},{"location":"man3/RSA_meth_new/#return-values","title":"RETURN VALUES","text":"<p>RSA_meth_new() and RSA_meth_dup() return the newly allocated RSA_METHOD object or NULL on failure.</p> <p>RSA_meth_get0_name() and RSA_meth_get_flags() return the name and flags associated with the RSA_METHOD respectively.</p> <p>All other RSA_meth_get_*() functions return the appropriate function pointer that has been set in the RSA_METHOD, or NULL if no such pointer has yet been set.</p> <p>RSA_meth_set1_name and all RSA_meth_set_*() functions return 1 on success or 0 on failure.</p>"},{"location":"man3/RSA_meth_new/#see-also","title":"SEE ALSO","text":"<p>RSA_new(3), RSA_generate_key_ex(3), RSA_sign(3), RSA_set_method(3), RSA_size(3), RSA_get0_key(3), RSA_generate_multi_prime_key(3)</p>"},{"location":"man3/RSA_meth_new/#history","title":"HISTORY","text":"<p>RSA_meth_get_multi_prime_keygen() and RSA_meth_set_multi_prime_keygen() were added in OpenSSL 1.1.1.</p> <p>Other functions described here were added in OpenSSL 1.1.0.</p>"},{"location":"man3/RSA_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_new/","title":"RSA_new","text":""},{"location":"man3/RSA_new/#name","title":"NAME","text":"<p>RSA_new, RSA_free - allocate and free RSA objects</p>"},{"location":"man3/RSA_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nRSA *RSA_new(void);\n\nvoid RSA_free(RSA *rsa);\n</code></pre>"},{"location":"man3/RSA_new/#description","title":"DESCRIPTION","text":"<p>RSA_new() allocates and initializes an RSA structure. It is equivalent to calling RSA_new_method(NULL).</p> <p>RSA_free() frees the RSA structure and its components. The key is erased before the memory is returned to the system. If rsa is NULL nothing is done.</p>"},{"location":"man3/RSA_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, RSA_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3). Otherwise it returns a pointer to the newly allocated structure.</p> <p>RSA_free() returns no value.</p>"},{"location":"man3/RSA_new/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RSA_generate_key(3), RSA_new_method(3)</p>"},{"location":"man3/RSA_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/","title":"RSA_padding_add_PKCS1_type_1","text":""},{"location":"man3/RSA_padding_add_PKCS1_type_1/#name","title":"NAME","text":"<p>RSA_padding_add_PKCS1_type_1, RSA_padding_check_PKCS1_type_1, RSA_padding_add_PKCS1_type_2, RSA_padding_check_PKCS1_type_2, RSA_padding_add_PKCS1_OAEP, RSA_padding_check_PKCS1_OAEP, RSA_padding_add_PKCS1_OAEP_mgf1, RSA_padding_check_PKCS1_OAEP_mgf1, RSA_padding_add_SSLv23, RSA_padding_check_SSLv23, RSA_padding_add_none, RSA_padding_check_none - asymmetric encryption padding</p>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,\n                                 const unsigned char *f, int fl);\n\nint RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,\n                                   const unsigned char *f, int fl, int rsa_len);\n\nint RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,\n                                 const unsigned char *f, int fl);\n\nint RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,\n                                   const unsigned char *f, int fl, int rsa_len);\n\nint RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,\n                               const unsigned char *f, int fl,\n                               const unsigned char *p, int pl);\n\nint RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,\n                                 const unsigned char *f, int fl, int rsa_len,\n                                 const unsigned char *p, int pl);\n\nint RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,\n                                    const unsigned char *f, int fl,\n                                    const unsigned char *p, int pl,\n                                    const EVP_MD *md, const EVP_MD *mgf1md);\n\nint RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,\n                                      const unsigned char *f, int fl, int rsa_len,\n                                      const unsigned char *p, int pl,\n                                      const EVP_MD *md, const EVP_MD *mgf1md);\n\nint RSA_padding_add_SSLv23(unsigned char *to, int tlen,\n                           const unsigned char *f, int fl);\n\nint RSA_padding_check_SSLv23(unsigned char *to, int tlen,\n                             const unsigned char *f, int fl, int rsa_len);\n\nint RSA_padding_add_none(unsigned char *to, int tlen,\n                         const unsigned char *f, int fl);\n\nint RSA_padding_check_none(unsigned char *to, int tlen,\n                           const unsigned char *f, int fl, int rsa_len);\n</code></pre>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/#description","title":"DESCRIPTION","text":"<p>The RSA_padding_xxx_xxx() functions are called from the RSA encrypt, decrypt, sign and verify functions. Normally they should not be called from application programs.</p> <p>However, they can also be called directly to implement padding for other asymmetric ciphers. RSA_padding_add_PKCS1_OAEP() and RSA_padding_check_PKCS1_OAEP() may be used in an application combined with RSA_NO_PADDING in order to implement OAEP with an encoding parameter.</p> <p>RSA_padding_add_xxx() encodes fl bytes from f so as to fit into tlen bytes and stores the result at to. An error occurs if fl does not meet the size requirements of the encoding method.</p> <p>The following encoding methods are implemented:</p> <ul> <li> <p>PKCS1_type_1</p> <p>PKCS #1 v2.0 EMSA-PKCS1-v1_5 (PKCS #1 v1.5 block type 1); used for signatures</p> </li> <li> <p>PKCS1_type_2</p> <p>PKCS #1 v2.0 EME-PKCS1-v1_5 (PKCS #1 v1.5 block type 2)</p> </li> <li> <p>PKCS1_OAEP</p> <p>PKCS #1 v2.0 EME-OAEP</p> </li> <li> <p>SSLv23</p> <p>PKCS #1 EME-PKCS1-v1_5 with SSL-specific modification</p> </li> <li> <p>none</p> <p>simply copy the data</p> </li> </ul> <p>The random number generator must be seeded prior to calling RSA_padding_add_xxx(). If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>RSA_padding_check_xxx() verifies that the fl bytes at f contain a valid encoding for a rsa_len byte RSA key in the respective encoding method and stores the recovered data of at most tlen bytes (for RSA_NO_PADDING: of size tlen) at to.</p> <p>For RSA_padding_xxx_OAEP(), p points to the encoding parameter of length pl. p may be NULL if pl is 0.</p> <p>For RSA_padding_xxx_OAEP_mgf1(), md points to the md hash, if md is NULL that means md=sha1, and mgf1md points to the mgf1 hash, if mgf1md is NULL that means mgf1md=md.</p>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/#return-values","title":"RETURN VALUES","text":"<p>The RSA_padding_add_xxx() functions return 1 on success, 0 on error. The RSA_padding_check_xxx() functions return the length of the recovered data, -1 on error. Error codes can be obtained by calling ERR_get_error(3).</p>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/#warnings","title":"WARNINGS","text":"<p>The result of RSA_padding_check_PKCS1_type_2() is a very sensitive information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer PKCS1_OAEP padding. If that is not possible, the result of RSA_padding_check_PKCS1_type_2() should be checked in constant time if it matches the expected length of the plaintext and additionally some application specific consistency checks on the plaintext need to be performed in constant time. If the plaintext is rejected it must be kept secret which of the checks caused the application to reject the message. Do not remove the zero-padding from the decrypted raw RSA data which was computed by RSA_private_decrypt() with RSA_NO_PADDING, as this would create a small timing side channel which could be used to mount a Bleichenbacher attack against any padding mode including PKCS1_OAEP.</p>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/#see-also","title":"SEE ALSO","text":"<p>RSA_public_encrypt(3), RSA_private_decrypt(3), RSA_sign(3), RSA_verify(3), RAND(7)</p>"},{"location":"man3/RSA_padding_add_PKCS1_type_1/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_print/","title":"RSA_print","text":""},{"location":"man3/RSA_print/#name","title":"NAME","text":"<p>RSA_print, RSA_print_fp, DSAparams_print, DSAparams_print_fp, DSA_print, DSA_print_fp, DHparams_print, DHparams_print_fp - print cryptographic parameters</p>"},{"location":"man3/RSA_print/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_print(BIO *bp, RSA *x, int offset);\nint RSA_print_fp(FILE *fp, RSA *x, int offset);\n\n#include &lt;openssl/dsa.h&gt;\n\nint DSAparams_print(BIO *bp, DSA *x);\nint DSAparams_print_fp(FILE *fp, DSA *x);\nint DSA_print(BIO *bp, DSA *x, int offset);\nint DSA_print_fp(FILE *fp, DSA *x, int offset);\n\n#include &lt;openssl/dh.h&gt;\n\nint DHparams_print(BIO *bp, DH *x);\nint DHparams_print_fp(FILE *fp, DH *x);\n</code></pre>"},{"location":"man3/RSA_print/#description","title":"DESCRIPTION","text":"<p>A human-readable hexadecimal output of the components of the RSA key, DSA parameters or key or DH parameters is printed to bp or fp.</p> <p>The output lines are indented by offset spaces.</p>"},{"location":"man3/RSA_print/#return-values","title":"RETURN VALUES","text":"<p>These functions return 1 on success, 0 on error.</p>"},{"location":"man3/RSA_print/#see-also","title":"SEE ALSO","text":"<p>BN_bn2bin(3)</p>"},{"location":"man3/RSA_print/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_private_encrypt/","title":"RSA_private_encrypt","text":""},{"location":"man3/RSA_private_encrypt/#name","title":"NAME","text":"<p>RSA_private_encrypt, RSA_public_decrypt - low-level signature operations</p>"},{"location":"man3/RSA_private_encrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_private_encrypt(int flen, unsigned char *from,\n                        unsigned char *to, RSA *rsa, int padding);\n\nint RSA_public_decrypt(int flen, unsigned char *from,\n                       unsigned char *to, RSA *rsa, int padding);\n</code></pre>"},{"location":"man3/RSA_private_encrypt/#description","title":"DESCRIPTION","text":"<p>These functions handle RSA signatures at a low-level.</p> <p>RSA_private_encrypt() signs the flen bytes at from (usually a message digest with an algorithm identifier) using the private key rsa and stores the signature in to. to must point to RSA_size(rsa) bytes of memory.</p> <p>padding denotes one of the following modes:</p> <ul> <li> <p>RSA_PKCS1_PADDING</p> <p>PKCS #1 v1.5 padding. This function does not handle the algorithmIdentifier specified in PKCS #1. When generating or verifying PKCS #1 signatures, RSA_sign(3) and RSA_verify(3) should be used.</p> </li> <li> <p>RSA_NO_PADDING</p> <p>Raw RSA signature. This mode should only be used to implement cryptographically sound padding modes in the application code. Signing user data directly with RSA is insecure.</p> </li> </ul> <p>RSA_public_decrypt() recovers the message digest from the flen bytes long signature at from using the signer's public key rsa. to must point to a memory section large enough to hold the message digest (which is smaller than RSA_size(rsa) - 11). padding is the padding mode that was used to sign the data.</p>"},{"location":"man3/RSA_private_encrypt/#return-values","title":"RETURN VALUES","text":"<p>RSA_private_encrypt() returns the size of the signature (i.e., RSA_size(rsa)). RSA_public_decrypt() returns the size of the recovered message digest.</p> <p>On error, -1 is returned; the error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/RSA_private_encrypt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RSA_sign(3), RSA_verify(3)</p>"},{"location":"man3/RSA_private_encrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_public_encrypt/","title":"RSA_public_encrypt","text":""},{"location":"man3/RSA_public_encrypt/#name","title":"NAME","text":"<p>RSA_public_encrypt, RSA_private_decrypt - RSA public key cryptography</p>"},{"location":"man3/RSA_public_encrypt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_public_encrypt(int flen, const unsigned char *from,\n                       unsigned char *to, RSA *rsa, int padding);\n\nint RSA_private_decrypt(int flen, const unsigned char *from,\n                        unsigned char *to, RSA *rsa, int padding);\n</code></pre>"},{"location":"man3/RSA_public_encrypt/#description","title":"DESCRIPTION","text":"<p>RSA_public_encrypt() encrypts the flen bytes at from (usually a session key) using the public key rsa and stores the ciphertext in to. to must point to RSA_size(rsa) bytes of memory.</p> <p>padding denotes one of the following modes:</p> <ul> <li> <p>RSA_PKCS1_PADDING</p> <p>PKCS #1 v1.5 padding. This currently is the most widely used mode. However, it is highly recommended to use RSA_PKCS1_OAEP_PADDING in new applications. SEE WARNING BELOW.</p> </li> <li> <p>RSA_PKCS1_OAEP_PADDING</p> <p>EME-OAEP as defined in PKCS #1 v2.0 with SHA-1, MGF1 and an empty encoding parameter. This mode is recommended for all new applications.</p> </li> <li> <p>RSA_SSLV23_PADDING</p> <p>PKCS #1 v1.5 padding with an SSL-specific modification that denotes that the server is SSL3 capable.</p> </li> <li> <p>RSA_NO_PADDING</p> <p>Raw RSA encryption. This mode should only be used to implement cryptographically sound padding modes in the application code. Encrypting user data directly with RSA is insecure.</p> </li> </ul> <p>flen must not be more than RSA_size(rsa) - 11 for the PKCS #1 v1.5 based padding modes, not more than RSA_size(rsa) - 42 for RSA_PKCS1_OAEP_PADDING and exactly RSA_size(rsa) for RSA_NO_PADDING. When a padding mode other than RSA_NO_PADDING is in use, then RSA_public_encrypt() will include some random bytes into the ciphertext and therefore the ciphertext will be different each time, even if the plaintext and the public key are exactly identical. The returned ciphertext in to will always be zero padded to exactly RSA_size(rsa) bytes. to and from may overlap.</p> <p>RSA_private_decrypt() decrypts the flen bytes at from using the private key rsa and stores the plaintext in to. flen should be equal to RSA_size(rsa) but may be smaller, when leading zero bytes are in the ciphertext. Those are not important and may be removed, but RSA_public_encrypt() does not do that. to must point to a memory section large enough to hold the maximal possible decrypted data (which is equal to RSA_size(rsa) for RSA_NO_PADDING, RSA_size(rsa) - 11 for the PKCS #1 v1.5 based padding modes and RSA_size(rsa) - 42 for RSA_PKCS1_OAEP_PADDING). padding is the padding mode that was used to encrypt the data. to and from may overlap.</p>"},{"location":"man3/RSA_public_encrypt/#return-values","title":"RETURN VALUES","text":"<p>RSA_public_encrypt() returns the size of the encrypted data (i.e., RSA_size(rsa)). RSA_private_decrypt() returns the size of the recovered plaintext. A return value of 0 is not an error and means only that the plaintext was empty.</p> <p>On error, -1 is returned; the error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/RSA_public_encrypt/#warnings","title":"WARNINGS","text":"<p>Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer RSA_PKCS1_OAEP_PADDING.</p>"},{"location":"man3/RSA_public_encrypt/#conforming-to","title":"CONFORMING TO","text":"<p>SSL, PKCS #1 v2.0</p>"},{"location":"man3/RSA_public_encrypt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RAND_bytes(3), RSA_size(3)</p>"},{"location":"man3/RSA_public_encrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_set_method/","title":"RSA_set_method","text":""},{"location":"man3/RSA_set_method/#name","title":"NAME","text":"<p>RSA_set_default_method, RSA_get_default_method, RSA_set_method, RSA_get_method, RSA_PKCS1_OpenSSL, RSA_flags, RSA_new_method - select RSA method</p>"},{"location":"man3/RSA_set_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nvoid RSA_set_default_method(const RSA_METHOD *meth);\n\nRSA_METHOD *RSA_get_default_method(void);\n\nint RSA_set_method(RSA *rsa, const RSA_METHOD *meth);\n\nRSA_METHOD *RSA_get_method(const RSA *rsa);\n\nRSA_METHOD *RSA_PKCS1_OpenSSL(void);\n\nint RSA_flags(const RSA *rsa);\n\nRSA *RSA_new_method(ENGINE *engine);\n</code></pre>"},{"location":"man3/RSA_set_method/#description","title":"DESCRIPTION","text":"<p>An RSA_METHOD specifies the functions that OpenSSL uses for RSA operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these RSA API functions are affected by the use of ENGINE API calls.</p> <p>Initially, the default RSA_METHOD is the OpenSSL internal implementation, as returned by RSA_PKCS1_OpenSSL().</p> <p>RSA_set_default_method() makes meth the default method for all RSA structures created later. NB: This is true only whilst no ENGINE has been set as a default for RSA, so this function is no longer recommended. This function is not thread-safe and should not be called at the same time as other OpenSSL functions.</p> <p>RSA_get_default_method() returns a pointer to the current default RSA_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended.</p> <p>RSA_set_method() selects meth to perform all operations using the key rsa. This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have RSA keys that only work with certain RSA_METHOD implementations (e.g. from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the RSA_METHOD for the key can have unexpected results.</p> <p>RSA_get_method() returns a pointer to the RSA_METHOD being used by rsa. This method may or may not be supplied by an ENGINE implementation, but if it is, the return value can only be guaranteed to be valid as long as the RSA key itself is valid and does not have its implementation changed by RSA_set_method().</p> <p>RSA_flags() returns the flags that are set for rsa's current RSA_METHOD. See the BUGS section.</p> <p>RSA_new_method() allocates and initializes an RSA structure so that engine will be used for the RSA operations. If engine is NULL, the default ENGINE for RSA operations is used, and if no default ENGINE is set, the RSA_METHOD controlled by RSA_set_default_method() is used.</p> <p>RSA_flags() returns the flags that are set for rsa's current method.</p> <p>RSA_new_method() allocates and initializes an RSA structure so that method will be used for the RSA operations. If method is NULL, the default method is used.</p>"},{"location":"man3/RSA_set_method/#the-rsa_method-structure","title":"THE RSA_METHOD STRUCTURE","text":"<pre><code>typedef struct rsa_meth_st\n{\n    /* name of the implementation */\n    const char *name;\n\n    /* encrypt */\n    int (*rsa_pub_enc)(int flen, unsigned char *from,\n                       unsigned char *to, RSA *rsa, int padding);\n\n    /* verify arbitrary data */\n    int (*rsa_pub_dec)(int flen, unsigned char *from,\n                       unsigned char *to, RSA *rsa, int padding);\n\n    /* sign arbitrary data */\n    int (*rsa_priv_enc)(int flen, unsigned char *from,\n                        unsigned char *to, RSA *rsa, int padding);\n\n    /* decrypt */\n    int (*rsa_priv_dec)(int flen, unsigned char *from,\n                        unsigned char *to, RSA *rsa, int padding);\n\n    /* compute r0 = r0 ^ I mod rsa-&gt;n (May be NULL for some implementations) */\n    int (*rsa_mod_exp)(BIGNUM *r0, BIGNUM *I, RSA *rsa);\n\n    /* compute r = a ^ p mod m (May be NULL for some implementations) */\n    int (*bn_mod_exp)(BIGNUM *r, BIGNUM *a, const BIGNUM *p,\n                      const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);\n\n    /* called at RSA_new */\n    int (*init)(RSA *rsa);\n\n    /* called at RSA_free */\n    int (*finish)(RSA *rsa);\n\n    /*\n     * RSA_FLAG_EXT_PKEY        - rsa_mod_exp is called for private key\n     *                            operations, even if p,q,dmp1,dmq1,iqmp\n     *                            are NULL\n     * RSA_METHOD_FLAG_NO_CHECK - don't check pub/private match\n     */\n    int flags;\n\n    char *app_data; /* ?? */\n\n    int (*rsa_sign)(int type,\n                    const unsigned char *m, unsigned int m_length,\n                    unsigned char *sigret, unsigned int *siglen, const RSA *rsa);\n    int (*rsa_verify)(int dtype,\n                      const unsigned char *m, unsigned int m_length,\n                      const unsigned char *sigbuf, unsigned int siglen,\n                      const RSA *rsa);\n    /* keygen. If NULL builtin RSA key generation will be used */\n    int (*rsa_keygen)(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);\n\n} RSA_METHOD;\n</code></pre>"},{"location":"man3/RSA_set_method/#return-values","title":"RETURN VALUES","text":"<p>RSA_PKCS1_OpenSSL(), RSA_PKCS1_null_method(), RSA_get_default_method() and RSA_get_method() return pointers to the respective RSA_METHODs.</p> <p>RSA_set_default_method() returns no value.</p> <p>RSA_set_method() returns a pointer to the old RSA_METHOD implementation that was replaced. However, this return value should probably be ignored because if it was supplied by an ENGINE, the pointer could be invalidated at any time if the ENGINE is unloaded (in fact it could be unloaded as a result of the RSA_set_method() function releasing its handle to the ENGINE). For this reason, the return type may be replaced with a void declaration in a future release.</p> <p>RSA_new_method() returns NULL and sets an error code that can be obtained by ERR_get_error(3) if the allocation fails. Otherwise it returns a pointer to the newly allocated structure.</p>"},{"location":"man3/RSA_set_method/#bugs","title":"BUGS","text":"<p>The behaviour of RSA_flags() is a mis-feature that is left as-is for now to avoid creating compatibility problems. RSA functionality, such as the encryption functions, are controlled by the flags value in the RSA key itself, not by the flags value in the RSA_METHOD attached to the RSA key (which is what this function returns). If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags() function - in effect RSA_flags() behaves more like an RSA_default_flags() function (which does not currently exist).</p>"},{"location":"man3/RSA_set_method/#see-also","title":"SEE ALSO","text":"<p>RSA_new(3)</p>"},{"location":"man3/RSA_set_method/#history","title":"HISTORY","text":"<p>The RSA_null_method(), which was a partial attempt to avoid patent issues, was replaced to always return NULL in OpenSSL 1.1.1.</p>"},{"location":"man3/RSA_set_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_sign/","title":"RSA_sign","text":""},{"location":"man3/RSA_sign/#name","title":"NAME","text":"<p>RSA_sign, RSA_verify - RSA signatures</p>"},{"location":"man3/RSA_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_sign(int type, const unsigned char *m, unsigned int m_len,\n             unsigned char *sigret, unsigned int *siglen, RSA *rsa);\n\nint RSA_verify(int type, const unsigned char *m, unsigned int m_len,\n               unsigned char *sigbuf, unsigned int siglen, RSA *rsa);\n</code></pre>"},{"location":"man3/RSA_sign/#description","title":"DESCRIPTION","text":"<p>RSA_sign() signs the message digest m of size m_len using the private key rsa using RSASSA-PKCS1-v1_5 as specified in RFC 3447. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory. Note that PKCS #1 adds meta-data, placing limits on the size of the key that can be used. See RSA_private_encrypt(3) for lower-level operations.</p> <p>type denotes the message digest algorithm that was used to generate m. If type is NID_md5_sha1, an SSL signature (MD5 and SHA1 message digests with PKCS #1 padding and no algorithm identifier) is created.</p> <p>RSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest m of size m_len. type denotes the message digest algorithm that was used to generate the signature. rsa is the signer's public key.</p>"},{"location":"man3/RSA_sign/#return-values","title":"RETURN VALUES","text":"<p>RSA_sign() returns 1 on success. RSA_verify() returns 1 on successful verification.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/RSA_sign/#conforming-to","title":"CONFORMING TO","text":"<p>SSL, PKCS #1 v2.0</p>"},{"location":"man3/RSA_sign/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RSA_private_encrypt(3), RSA_public_decrypt(3)</p>"},{"location":"man3/RSA_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/","title":"RSA_sign_ASN1_OCTET_STRING","text":""},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#name","title":"NAME","text":"<p>RSA_sign_ASN1_OCTET_STRING, RSA_verify_ASN1_OCTET_STRING - RSA signatures</p>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_sign_ASN1_OCTET_STRING(int dummy, unsigned char *m,\n                               unsigned int m_len, unsigned char *sigret,\n                               unsigned int *siglen, RSA *rsa);\n\nint RSA_verify_ASN1_OCTET_STRING(int dummy, unsigned char *m,\n                                 unsigned int m_len, unsigned char *sigbuf,\n                                 unsigned int siglen, RSA *rsa);\n</code></pre>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#description","title":"DESCRIPTION","text":"<p>RSA_sign_ASN1_OCTET_STRING() signs the octet string m of size m_len using the private key rsa represented in DER using PKCS #1 padding. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory.</p> <p>dummy is ignored.</p> <p>The random number generator must be seeded when calling RSA_sign_ASN1_OCTET_STRING(). If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to external circumstances (see RAND(7)), the operation will fail.</p> <p>RSA_verify_ASN1_OCTET_STRING() verifies that the signature sigbuf of size siglen is the DER representation of a given octet string m of size m_len. dummy is ignored. rsa is the signer's public key.</p>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#return-values","title":"RETURN VALUES","text":"<p>RSA_sign_ASN1_OCTET_STRING() returns 1 on success, 0 otherwise. RSA_verify_ASN1_OCTET_STRING() returns 1 on successful verification, 0 otherwise.</p> <p>The error codes can be obtained by ERR_get_error(3).</p>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#bugs","title":"BUGS","text":"<p>These functions serve no recognizable purpose.</p>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), RAND_bytes(3), RSA_sign(3), RSA_verify(3), RAND(7)</p>"},{"location":"man3/RSA_sign_ASN1_OCTET_STRING/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/RSA_size/","title":"RSA_size","text":""},{"location":"man3/RSA_size/#name","title":"NAME","text":"<p>RSA_size, RSA_bits, RSA_security_bits - get RSA modulus size or security bits</p>"},{"location":"man3/RSA_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rsa.h&gt;\n\nint RSA_size(const RSA *rsa);\n\nint RSA_bits(const RSA *rsa);\n\nint RSA_security_bits(const RSA *rsa)\n</code></pre>"},{"location":"man3/RSA_size/#description","title":"DESCRIPTION","text":"<p>RSA_size() returns the RSA modulus size in bytes. It can be used to determine how much memory must be allocated for an RSA encrypted value.</p> <p>RSA_bits() returns the number of significant bits.</p> <p>rsa and rsa-&gt;n must not be NULL.</p> <p>RSA_security_bits() returns the number of security bits of the given rsa key. See BN_security_bits(3).</p>"},{"location":"man3/RSA_size/#return-values","title":"RETURN VALUES","text":"<p>RSA_size() returns the size of modulus in bytes.</p> <p>DSA_bits() returns the number of bits in the key.</p> <p>RSA_security_bits() returns the number of security bits.</p>"},{"location":"man3/RSA_size/#see-also","title":"SEE ALSO","text":"<p>BN_num_bits(3)</p>"},{"location":"man3/RSA_size/#history","title":"HISTORY","text":"<p>The RSA_bits() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/RSA_size/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SCT_new/","title":"SCT_new","text":""},{"location":"man3/SCT_new/#name","title":"NAME","text":"<p>SCT_new, SCT_new_from_base64, SCT_free, SCT_LIST_free, SCT_get_version, SCT_set_version, SCT_get_log_entry_type, SCT_set_log_entry_type, SCT_get0_log_id, SCT_set0_log_id, SCT_set1_log_id, SCT_get_timestamp, SCT_set_timestamp, SCT_get_signature_nid, SCT_set_signature_nid, SCT_get0_signature, SCT_set0_signature, SCT_set1_signature, SCT_get0_extensions, SCT_set0_extensions, SCT_set1_extensions, SCT_get_source, SCT_set_source - A Certificate Transparency Signed Certificate Timestamp</p>"},{"location":"man3/SCT_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\ntypedef enum {\n    CT_LOG_ENTRY_TYPE_NOT_SET = -1,\n    CT_LOG_ENTRY_TYPE_X509 = 0,\n    CT_LOG_ENTRY_TYPE_PRECERT = 1\n} ct_log_entry_type_t;\n\ntypedef enum {\n    SCT_VERSION_NOT_SET = -1,\n    SCT_VERSION_V1 = 0\n} sct_version_t;\n\ntypedef enum {\n    SCT_SOURCE_UNKNOWN,\n    SCT_SOURCE_TLS_EXTENSION,\n    SCT_SOURCE_X509V3_EXTENSION,\n    SCT_SOURCE_OCSP_STAPLED_RESPONSE\n} sct_source_t;\n\nSCT *SCT_new(void);\nSCT *SCT_new_from_base64(unsigned char version,\n                         const char *logid_base64,\n                         ct_log_entry_type_t entry_type,\n                         uint64_t timestamp,\n                         const char *extensions_base64,\n                         const char *signature_base64);\n\nvoid SCT_free(SCT *sct);\nvoid SCT_LIST_free(STACK_OF(SCT) *a);\n\nsct_version_t SCT_get_version(const SCT *sct);\nint SCT_set_version(SCT *sct, sct_version_t version);\n\nct_log_entry_type_t SCT_get_log_entry_type(const SCT *sct);\nint SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type);\n\nsize_t SCT_get0_log_id(const SCT *sct, unsigned char **log_id);\nint SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len);\nint SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len);\n\nuint64_t SCT_get_timestamp(const SCT *sct);\nvoid SCT_set_timestamp(SCT *sct, uint64_t timestamp);\n\nint SCT_get_signature_nid(const SCT *sct);\nint SCT_set_signature_nid(SCT *sct, int nid);\n\nsize_t SCT_get0_signature(const SCT *sct, unsigned char **sig);\nvoid SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len);\nint SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len);\n\nsize_t SCT_get0_extensions(const SCT *sct, unsigned char **ext);\nvoid SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len);\nint SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len);\n\nsct_source_t SCT_get_source(const SCT *sct);\nint SCT_set_source(SCT *sct, sct_source_t source);\n</code></pre>"},{"location":"man3/SCT_new/#description","title":"DESCRIPTION","text":"<p>Signed Certificate Timestamps (SCTs) are defined by RFC 6962, Section 3.2. They constitute a promise by a Certificate Transparency (CT) log to publicly record a certificate. By cryptographically verifying that a log did indeed issue an SCT, some confidence can be gained that the certificate is publicly known.</p> <p>An internal representation of an SCT can be created in one of two ways. The first option is to create a blank SCT, using SCT_new(), and then populate it using:</p> <ul> <li> <p>SCT_set_version() to set the SCT version.</p> <p>Only SCT_VERSION_V1 is currently supported.</p> </li> <li> <p>SCT_set_log_entry_type() to set the type of certificate the SCT was issued for:</p> <p>CT_LOG_ENTRY_TYPE_X509 for a normal certificate. CT_LOG_ENTRY_TYPE_PRECERT for a pre-certificate.</p> </li> <li> <p>SCT_set0_log_id() or SCT_set1_log_id() to set the LogID of the CT log that the SCT came from.</p> <p>The former takes ownership, whereas the latter makes a copy. See RFC 6962, Section 3.2 for the definition of LogID.</p> </li> <li> <p>SCT_set_timestamp() to set the time the SCT was issued (epoch time in milliseconds).</p> </li> <li>SCT_set_signature_nid() to set the NID of the signature.</li> <li> <p>SCT_set0_signature() or SCT_set1_signature() to set the raw signature value.</p> <p>The former takes ownership, whereas the latter makes a copy.</p> </li> <li> <p>SCT_set0_extensions() or SCT_set1_extensions to provide SCT extensions.</p> <p>The former takes ownership, whereas the latter makes a copy.</p> </li> </ul> <p>Alternatively, the SCT can be pre-populated from the following data using SCT_new_from_base64():</p> <ul> <li>The SCT version (only SCT_VERSION_V1 is currently supported).</li> <li>The LogID (see RFC 6962, Section 3.2), base64 encoded.</li> <li>The type of certificate the SCT was issued for: CT_LOG_ENTRY_TYPE_X509 for a normal certificate. CT_LOG_ENTRY_TYPE_PRECERT for a pre-certificate.</li> <li>The time that the SCT was issued (epoch time in milliseconds).</li> <li>The SCT extensions, base64 encoded.</li> <li>The SCT signature, base64 encoded.</li> </ul> <p>SCT_set_source() can be used to record where the SCT was found (TLS extension, X.509 certificate extension or OCSP response). This is not required for verifying the SCT.</p>"},{"location":"man3/SCT_new/#notes","title":"NOTES","text":"<p>Some of the setters return int, instead of void. These will all return 1 on success, 0 on failure. They will not make changes on failure.</p> <p>All of the setters will reset the validation status of the SCT to SCT_VALIDATION_STATUS_NOT_SET (see SCT_validate(3)).</p> <p>SCT_set_source() will call SCT_set_log_entry_type() if the type of certificate the SCT was issued for can be inferred from where the SCT was found. For example, an SCT found in an X.509 extension must have been issued for a pre- certificate.</p> <p>SCT_set_source() will not refuse unknown values.</p>"},{"location":"man3/SCT_new/#return-values","title":"RETURN VALUES","text":"<p>SCT_set_version() returns 1 if the specified version is supported, 0 otherwise.</p> <p>SCT_set_log_entry_type() returns 1 if the specified log entry type is supported, 0 otherwise.</p> <p>SCT_set0_log_id() and SCT_set1_log_id return 1 if the specified LogID is a valid SHA-256 hash, 0 otherwise. Additionally, SCT_set1_log_id returns 0 if malloc fails.</p> <p>SCT_set_signature_nid returns 1 if the specified NID is supported, 0 otherwise.</p> <p>SCT_set1_extensions and SCT_set1_signature return 1 if the supplied buffer is copied successfully, 0 otherwise (i.e. if malloc fails).</p> <p>SCT_set_source returns 1 on success, 0 otherwise.</p>"},{"location":"man3/SCT_new/#see-also","title":"SEE ALSO","text":"<p>ct(7), SCT_validate(3), OBJ_nid2obj(3)</p>"},{"location":"man3/SCT_new/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SCT_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SCT_print/","title":"SCT_print","text":""},{"location":"man3/SCT_print/#name","title":"NAME","text":"<p>SCT_print, SCT_LIST_print, SCT_validation_status_string - Prints Signed Certificate Timestamps in a human-readable way</p>"},{"location":"man3/SCT_print/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\nvoid SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);\nvoid SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,\n                    const char *separator, const CTLOG_STORE *logs);\nconst char *SCT_validation_status_string(const SCT *sct);\n</code></pre>"},{"location":"man3/SCT_print/#description","title":"DESCRIPTION","text":"<p>SCT_print() prints a single Signed Certificate Timestamp (SCT) to a bio in a human-readable format. SCT_LIST_print() prints an entire list of SCTs in a similar way. A separator can be specified to delimit each SCT in the output.</p> <p>The output can be indented by a specified number of spaces. If a CTLOG_STORE is provided, it will be used to print the description of the CT log that issued each SCT (if that log is in the CTLOG_STORE). Alternatively, NULL can be passed as the CTLOG_STORE parameter to disable this feature.</p> <p>SCT_validation_status_string() will return the validation status of an SCT as a human-readable string. Call SCT_validate() or SCT_LIST_validate() beforehand in order to set the validation status of an SCT first.</p>"},{"location":"man3/SCT_print/#return-values","title":"RETURN VALUES","text":"<p>SCT_validation_status_string() returns a null-terminated string representing the validation status of an SCT object.</p>"},{"location":"man3/SCT_print/#see-also","title":"SEE ALSO","text":"<p>ct(7), bio(7), CTLOG_STORE_new(3), SCT_validate(3)</p>"},{"location":"man3/SCT_print/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SCT_print/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SCT_validate/","title":"SCT_validate","text":""},{"location":"man3/SCT_validate/#name","title":"NAME","text":"<p>SCT_validate, SCT_LIST_validate, SCT_get_validation_status - checks Signed Certificate Timestamps (SCTs) are valid</p>"},{"location":"man3/SCT_validate/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\ntypedef enum {\n    SCT_VALIDATION_STATUS_NOT_SET,\n    SCT_VALIDATION_STATUS_UNKNOWN_LOG,\n    SCT_VALIDATION_STATUS_VALID,\n    SCT_VALIDATION_STATUS_INVALID,\n    SCT_VALIDATION_STATUS_UNVERIFIED,\n    SCT_VALIDATION_STATUS_UNKNOWN_VERSION\n} sct_validation_status_t;\n\nint SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);\nint SCT_LIST_validate(const STACK_OF(SCT) *scts, CT_POLICY_EVAL_CTX *ctx);\nsct_validation_status_t SCT_get_validation_status(const SCT *sct);\n</code></pre>"},{"location":"man3/SCT_validate/#description","title":"DESCRIPTION","text":"<p>SCT_validate() will check that an SCT is valid and verify its signature. SCT_LIST_validate() performs the same checks on an entire stack of SCTs. The result of the validation checks can be obtained by passing the SCT to SCT_get_validation_status().</p> <p>A CT_POLICY_EVAL_CTX must be provided that specifies:</p> <ul> <li> <p>The certificate the SCT was issued for.</p> <p>Failure to provide the certificate will result in the validation status being SCT_VALIDATION_STATUS_UNVERIFIED.</p> </li> <li> <p>The issuer of that certificate.</p> <p>This is only required if the SCT was issued for a pre-certificate (see RFC 6962). If it is required but not provided, the validation status will be SCT_VALIDATION_STATUS_UNVERIFIED.</p> </li> <li> <p>A CTLOG_STORE that contains the CT log that issued this SCT.</p> <p>If the SCT was issued by a log that is not in this CTLOG_STORE, the validation status will be SCT_VALIDATION_STATUS_UNKNOWN_LOG.</p> </li> </ul> <p>If the SCT is of an unsupported version (only v1 is currently supported), the validation status will be SCT_VALIDATION_STATUS_UNKNOWN_VERSION.</p> <p>If the SCT's signature is incorrect, its timestamp is in the future (relative to the time in CT_POLICY_EVAL_CTX), or if it is otherwise invalid, the validation status will be SCT_VALIDATION_STATUS_INVALID.</p> <p>If all checks pass, the validation status will be SCT_VALIDATION_STATUS_VALID.</p>"},{"location":"man3/SCT_validate/#notes","title":"NOTES","text":"<p>A return value of 0 from SCT_LIST_validate() should not be interpreted as a failure. At a minimum, only one valid SCT may provide sufficient confidence that a certificate has been publicly logged.</p>"},{"location":"man3/SCT_validate/#return-values","title":"RETURN VALUES","text":"<p>SCT_validate() returns a negative integer if an internal error occurs, 0 if the SCT fails validation, or 1 if the SCT passes validation.</p> <p>SCT_LIST_validate() returns a negative integer if an internal error occurs, 0 if any of SCTs fails validation, or 1 if they all pass validation.</p> <p>SCT_get_validation_status() returns the validation status of the SCT. If SCT_validate() or SCT_LIST_validate() have not been passed that SCT, the returned value will be SCT_VALIDATION_STATUS_NOT_SET.</p>"},{"location":"man3/SCT_validate/#see-also","title":"SEE ALSO","text":"<p>ct(7)</p>"},{"location":"man3/SCT_validate/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SCT_validate/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SHA256_Init/","title":"SHA256_Init","text":""},{"location":"man3/SHA256_Init/#name","title":"NAME","text":"<p>SHA1, SHA1_Init, SHA1_Update, SHA1_Final, SHA224, SHA224_Init, SHA224_Update, SHA224_Final, SHA256, SHA256_Init, SHA256_Update, SHA256_Final, SHA384, SHA384_Init, SHA384_Update, SHA384_Final, SHA512, SHA512_Init, SHA512_Update, SHA512_Final - Secure Hash Algorithm</p>"},{"location":"man3/SHA256_Init/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/sha.h&gt;\n\nint SHA1_Init(SHA_CTX *c);\nint SHA1_Update(SHA_CTX *c, const void *data, size_t len);\nint SHA1_Final(unsigned char *md, SHA_CTX *c);\nunsigned char *SHA1(const unsigned char *d, size_t n,\n                    unsigned char *md);\n\nint SHA224_Init(SHA256_CTX *c);\nint SHA224_Update(SHA256_CTX *c, const void *data, size_t len);\nint SHA224_Final(unsigned char *md, SHA256_CTX *c);\nunsigned char *SHA224(const unsigned char *d, size_t n,\n                      unsigned char *md);\n\nint SHA256_Init(SHA256_CTX *c);\nint SHA256_Update(SHA256_CTX *c, const void *data, size_t len);\nint SHA256_Final(unsigned char *md, SHA256_CTX *c);\nunsigned char *SHA256(const unsigned char *d, size_t n,\n                      unsigned char *md);\n\nint SHA384_Init(SHA512_CTX *c);\nint SHA384_Update(SHA512_CTX *c, const void *data, size_t len);\nint SHA384_Final(unsigned char *md, SHA512_CTX *c);\nunsigned char *SHA384(const unsigned char *d, size_t n,\n                      unsigned char *md);\n\nint SHA512_Init(SHA512_CTX *c);\nint SHA512_Update(SHA512_CTX *c, const void *data, size_t len);\nint SHA512_Final(unsigned char *md, SHA512_CTX *c);\nunsigned char *SHA512(const unsigned char *d, size_t n,\n                      unsigned char *md);\n</code></pre>"},{"location":"man3/SHA256_Init/#description","title":"DESCRIPTION","text":"<p>Applications should use the higher level functions EVP_DigestInit(3) etc. instead of calling the hash functions directly.</p> <p>SHA-1 (Secure Hash Algorithm) is a cryptographic hash function with a 160 bit output.</p> <p>SHA1() computes the SHA-1 message digest of the n bytes at d and places it in md (which must have space for SHA_DIGEST_LENGTH == 20 bytes of output). If md is NULL, the digest is placed in a static array. Note: setting md to NULL is not thread safe.</p> <p>The following functions may be used if the message is not completely stored in memory:</p> <p>SHA1_Init() initializes a SHA_CTX structure.</p> <p>SHA1_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at data).</p> <p>SHA1_Final() places the message digest in md, which must have space for SHA_DIGEST_LENGTH == 20 bytes of output, and erases the SHA_CTX.</p> <p>The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions. Note that SHA224 and SHA256 use a SHA256_CTX object instead of SHA_CTX. SHA384 and SHA512 use SHA512_CTX. The buffer md must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH). Also note that, as for the SHA1() function above, the SHA224(), SHA256(), SHA384() and SHA512() functions are not thread safe if md is NULL.</p>"},{"location":"man3/SHA256_Init/#return-values","title":"RETURN VALUES","text":"<p>SHA1(), SHA224(), SHA256(), SHA384() and SHA512() return a pointer to the hash value.</p> <p>SHA1_Init(), SHA1_Update() and SHA1_Final() and equivalent SHA224, SHA256, SHA384 and SHA512 functions return 1 for success, 0 otherwise.</p>"},{"location":"man3/SHA256_Init/#conforming-to","title":"CONFORMING TO","text":"<p>US Federal Information Processing Standard FIPS PUB 180-4 (Secure Hash Standard), ANSI X9.30</p>"},{"location":"man3/SHA256_Init/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestInit(3)</p>"},{"location":"man3/SHA256_Init/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SMIME_read_CMS/","title":"SMIME_read_CMS","text":""},{"location":"man3/SMIME_read_CMS/#name","title":"NAME","text":"<p>SMIME_read_CMS - parse S/MIME message</p>"},{"location":"man3/SMIME_read_CMS/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nCMS_ContentInfo *SMIME_read_CMS(BIO *in, BIO **bcont);\n</code></pre>"},{"location":"man3/SMIME_read_CMS/#description","title":"DESCRIPTION","text":"<p>SMIME_read_CMS() parses a message in S/MIME format.</p> <p>in is a BIO to read the message from.</p> <p>If cleartext signing is used then the content is saved in a memory bio which is written to *bcont, otherwise *bcont is set to NULL.</p> <p>The parsed CMS_ContentInfo structure is returned or NULL if an error occurred.</p>"},{"location":"man3/SMIME_read_CMS/#notes","title":"NOTES","text":"<p>If *bcont is not NULL then the message is clear text signed. *bcont can then be passed to CMS_verify() with the CMS_DETACHED flag set.</p> <p>Otherwise the type of the returned structure can be determined using CMS_get0_type().</p> <p>To support future functionality if bcont is not NULL *bcont should be initialized to NULL. For example:</p> <pre><code>BIO *cont = NULL;\nCMS_ContentInfo *cms;\n\ncms = SMIME_read_CMS(in, &amp;cont);\n</code></pre>"},{"location":"man3/SMIME_read_CMS/#bugs","title":"BUGS","text":"<p>The MIME parser used by SMIME_read_CMS() is somewhat primitive.  While it will handle most S/MIME messages more complex compound formats may not work.</p> <p>The parser assumes that the CMS_ContentInfo structure is always base64 encoded and will not handle the case where it is in binary format or uses quoted printable format.</p> <p>The use of a memory BIO to hold the signed content limits the size of message which can be processed due to memory restraints: a streaming single pass option should be available.</p>"},{"location":"man3/SMIME_read_CMS/#return-values","title":"RETURN VALUES","text":"<p>SMIME_read_CMS() returns a valid CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/SMIME_read_CMS/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_type(3), SMIME_read_CMS(3), CMS_sign(3), CMS_verify(3), CMS_encrypt(3), CMS_decrypt(3)</p>"},{"location":"man3/SMIME_read_CMS/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SMIME_read_PKCS7/","title":"SMIME_read_PKCS7","text":""},{"location":"man3/SMIME_read_PKCS7/#name","title":"NAME","text":"<p>SMIME_read_PKCS7 - parse S/MIME message</p>"},{"location":"man3/SMIME_read_PKCS7/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nPKCS7 *SMIME_read_PKCS7(BIO *in, BIO **bcont);\n</code></pre>"},{"location":"man3/SMIME_read_PKCS7/#description","title":"DESCRIPTION","text":"<p>SMIME_read_PKCS7() parses a message in S/MIME format.</p> <p>in is a BIO to read the message from.</p> <p>If cleartext signing is used then the content is saved in a memory bio which is written to *bcont, otherwise *bcont is set to NULL.</p> <p>The parsed PKCS#7 structure is returned or NULL if an error occurred.</p>"},{"location":"man3/SMIME_read_PKCS7/#notes","title":"NOTES","text":"<p>If *bcont is not NULL then the message is clear text signed. *bcont can then be passed to PKCS7_verify() with the PKCS7_DETACHED flag set.</p> <p>Otherwise the type of the returned structure can be determined using PKCS7_type_is_enveloped(), etc.</p> <p>To support future functionality if bcont is not NULL *bcont should be initialized to NULL. For example:</p> <pre><code>BIO *cont = NULL;\nPKCS7 *p7;\n\np7 = SMIME_read_PKCS7(in, &amp;cont);\n</code></pre>"},{"location":"man3/SMIME_read_PKCS7/#bugs","title":"BUGS","text":"<p>The MIME parser used by SMIME_read_PKCS7() is somewhat primitive. While it will handle most S/MIME messages more complex compound formats may not work.</p> <p>The parser assumes that the PKCS7 structure is always base64 encoded and will not handle the case where it is in binary format or uses quoted printable format.</p> <p>The use of a memory BIO to hold the signed content limits the size of message which can be processed due to memory restraints: a streaming single pass option should be available.</p>"},{"location":"man3/SMIME_read_PKCS7/#return-values","title":"RETURN VALUES","text":"<p>SMIME_read_PKCS7() returns a valid PKCS7 structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).</p>"},{"location":"man3/SMIME_read_PKCS7/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), SMIME_read_PKCS7(3), PKCS7_sign(3), PKCS7_verify(3), PKCS7_encrypt(3) PKCS7_decrypt(3)</p>"},{"location":"man3/SMIME_read_PKCS7/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SMIME_write_CMS/","title":"SMIME_write_CMS","text":""},{"location":"man3/SMIME_write_CMS/#name","title":"NAME","text":"<p>SMIME_write_CMS - convert CMS structure to S/MIME format</p>"},{"location":"man3/SMIME_write_CMS/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint SMIME_write_CMS(BIO *out, CMS_ContentInfo *cms, BIO *data, int flags);\n</code></pre>"},{"location":"man3/SMIME_write_CMS/#description","title":"DESCRIPTION","text":"<p>SMIME_write_CMS() adds the appropriate MIME headers to a CMS structure to produce an S/MIME message.</p> <p>out is the BIO to write the data to. cms is the appropriate CMS_ContentInfo structure. If streaming is enabled then the content must be supplied in the data argument. flags is an optional set of flags.</p>"},{"location":"man3/SMIME_write_CMS/#notes","title":"NOTES","text":"<p>The following flags can be passed in the flags parameter.</p> <p>If CMS_DETACHED is set then cleartext signing will be used, this option only makes sense for SignedData where CMS_DETACHED is also set when CMS_sign() is called.</p> <p>If the CMS_TEXT flag is set MIME headers for type text/plain are added to the content, this only makes sense if CMS_DETACHED is also set.</p> <p>If the CMS_STREAM flag is set streaming is performed. This flag should only be set if CMS_STREAM was also set in the previous call to a CMS_ContentInfo creation function.</p> <p>If cleartext signing is being used and CMS_STREAM not set then the data must be read twice: once to compute the signature in CMS_sign() and once to output the S/MIME message.</p> <p>If streaming is performed the content is output in BER format using indefinite length constructed encoding except in the case of signed data with detached content where the content is absent and DER format is used.</p>"},{"location":"man3/SMIME_write_CMS/#bugs","title":"BUGS","text":"<p>SMIME_write_CMS() always base64 encodes CMS structures, there should be an option to disable this.</p>"},{"location":"man3/SMIME_write_CMS/#return-values","title":"RETURN VALUES","text":"<p>SMIME_write_CMS() returns 1 for success or 0 for failure.</p>"},{"location":"man3/SMIME_write_CMS/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_verify(3), CMS_encrypt(3) CMS_decrypt(3)</p>"},{"location":"man3/SMIME_write_CMS/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SMIME_write_PKCS7/","title":"SMIME_write_PKCS7","text":""},{"location":"man3/SMIME_write_PKCS7/#name","title":"NAME","text":"<p>SMIME_write_PKCS7 - convert PKCS#7 structure to S/MIME format</p>"},{"location":"man3/SMIME_write_PKCS7/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nint SMIME_write_PKCS7(BIO *out, PKCS7 *p7, BIO *data, int flags);\n</code></pre>"},{"location":"man3/SMIME_write_PKCS7/#description","title":"DESCRIPTION","text":"<p>SMIME_write_PKCS7() adds the appropriate MIME headers to a PKCS#7 structure to produce an S/MIME message.</p> <p>out is the BIO to write the data to. p7 is the appropriate PKCS7 structure. If streaming is enabled then the content must be supplied in the data argument. flags is an optional set of flags.</p>"},{"location":"man3/SMIME_write_PKCS7/#notes","title":"NOTES","text":"<p>The following flags can be passed in the flags parameter.</p> <p>If PKCS7_DETACHED is set then cleartext signing will be used, this option only makes sense for signedData where PKCS7_DETACHED is also set when PKCS7_sign() is also called.</p> <p>If the PKCS7_TEXT flag is set MIME headers for type text/plain are added to the content, this only makes sense if PKCS7_DETACHED is also set.</p> <p>If the PKCS7_STREAM flag is set streaming is performed. This flag should only be set if PKCS7_STREAM was also set in the previous call to PKCS7_sign() or PKCS7_encrypt().</p> <p>If cleartext signing is being used and PKCS7_STREAM not set then the data must be read twice: once to compute the signature in PKCS7_sign() and once to output the S/MIME message.</p> <p>If streaming is performed the content is output in BER format using indefinite length constructed encoding except in the case of signed data with detached content where the content is absent and DER format is used.</p>"},{"location":"man3/SMIME_write_PKCS7/#bugs","title":"BUGS","text":"<p>SMIME_write_PKCS7() always base64 encodes PKCS#7 structures, there should be an option to disable this.</p>"},{"location":"man3/SMIME_write_PKCS7/#return-values","title":"RETURN VALUES","text":"<p>SMIME_write_PKCS7() returns 1 for success or 0 for failure.</p>"},{"location":"man3/SMIME_write_PKCS7/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_sign(3), PKCS7_verify(3), PKCS7_encrypt(3) PKCS7_decrypt(3)</p>"},{"location":"man3/SMIME_write_PKCS7/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CIPHER_get_name/","title":"SSL_CIPHER_get_name","text":""},{"location":"man3/SSL_CIPHER_get_name/#name","title":"NAME","text":"<p>SSL_CIPHER_get_name, SSL_CIPHER_standard_name, OPENSSL_cipher_name, SSL_CIPHER_get_bits, SSL_CIPHER_get_version, SSL_CIPHER_description, SSL_CIPHER_get_cipher_nid, SSL_CIPHER_get_digest_nid, SSL_CIPHER_get_handshake_digest, SSL_CIPHER_get_kx_nid, SSL_CIPHER_get_auth_nid, SSL_CIPHER_is_aead, SSL_CIPHER_find, SSL_CIPHER_get_id, SSL_CIPHER_get_protocol_id - get SSL_CIPHER properties</p>"},{"location":"man3/SSL_CIPHER_get_name/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst char *SSL_CIPHER_get_name(const SSL_CIPHER *cipher);\nconst char *SSL_CIPHER_standard_name(const SSL_CIPHER *cipher);\nconst char *OPENSSL_cipher_name(const char *stdname);\nint SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *alg_bits);\nchar *SSL_CIPHER_get_version(const SSL_CIPHER *cipher);\nchar *SSL_CIPHER_description(const SSL_CIPHER *cipher, char *buf, int size);\nint SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);\nint SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);\nconst EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c);\nint SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);\nint SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);\nint SSL_CIPHER_is_aead(const SSL_CIPHER *c);\nconst SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr);\nuint32_t SSL_CIPHER_get_id(const SSL_CIPHER *c);\nuint32_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c);\n</code></pre>"},{"location":"man3/SSL_CIPHER_get_name/#description","title":"DESCRIPTION","text":"<p>SSL_CIPHER_get_name() returns a pointer to the name of cipher. If the cipher is NULL, it returns \"(NONE)\".</p> <p>SSL_CIPHER_standard_name() returns a pointer to the standard RFC name of cipher. If the cipher is NULL, it returns \"(NONE)\". If the cipher has no standard name, it returns NULL. If cipher was defined in both SSLv3 and TLS, it returns the TLS name.</p> <p>OPENSSL_cipher_name() returns a pointer to the OpenSSL name of stdname. If the stdname is NULL, or stdname has no corresponding OpenSSL name, it returns \"(NONE)\". Where both exist, stdname should be the TLS name rather than the SSLv3 name.</p> <p>SSL_CIPHER_get_bits() returns the number of secret bits used for cipher. If cipher is NULL, 0 is returned.</p> <p>SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher.  It returns \"(NONE)\" if cipher is NULL.</p> <p>SSL_CIPHER_get_cipher_nid() returns the cipher NID corresponding to c. If there is no cipher (e.g. for cipher suites with no encryption) then NID_undef is returned.</p> <p>SSL_CIPHER_get_digest_nid() returns the digest NID corresponding to the MAC used by c during record encryption/decryption. If there is no digest (e.g. for AEAD cipher suites) then NID_undef is returned.</p> <p>SSL_CIPHER_get_handshake_digest() returns an EVP_MD for the digest used during the SSL/TLS handshake when using the SSL_CIPHER c. Note that this may be different to the digest used to calculate the MAC for encrypted records.</p> <p>SSL_CIPHER_get_kx_nid() returns the key exchange NID corresponding to the method used by c. If there is no key exchange, then NID_undef is returned. If any appropriate key exchange algorithm can be used (as in the case of TLS 1.3 cipher suites) NID_kx_any is returned. Examples (not comprehensive):</p> <pre><code>NID_kx_rsa\nNID_kx_ecdhe\nNID_kx_dhe\nNID_kx_psk\n</code></pre> <p>SSL_CIPHER_get_auth_nid() returns the authentication NID corresponding to the method used by c. If there is no authentication, then NID_undef is returned. If any appropriate authentication algorithm can be used (as in the case of TLS 1.3 cipher suites) NID_auth_any is returned. Examples (not comprehensive):</p> <pre><code>NID_auth_rsa\nNID_auth_ecdsa\nNID_auth_psk\n</code></pre> <p>SSL_CIPHER_is_aead() returns 1 if the cipher c is AEAD (e.g. GCM or ChaCha20/Poly1305), and 0 if it is not AEAD.</p> <p>SSL_CIPHER_find() returns a SSL_CIPHER structure which has the cipher ID stored in ptr. The ptr parameter is a two element array of char, which stores the two-byte TLS cipher ID (as allocated by IANA) in network byte order. This parameter is usually retrieved from a TLS packet by using functions like SSL_client_hello_get0_ciphers(3).  SSL_CIPHER_find() returns NULL if an error occurs or the indicated cipher is not found.</p> <p>SSL_CIPHER_get_id() returns the OpenSSL-specific ID of the given cipher c. That ID is not the same as the IANA-specific ID.</p> <p>SSL_CIPHER_get_protocol_id() returns the two-byte ID used in the TLS protocol of the given cipher c.</p> <p>SSL_CIPHER_description() returns a textual description of the cipher used into the buffer buf of length len provided.  If buf is provided, it must be at least 128 bytes, otherwise a buffer will be allocated using OPENSSL_malloc().  If the provided buffer is too small, or the allocation fails, NULL is returned.</p> <p>The string returned by SSL_CIPHER_description() consists of several fields separated by whitespace:</p> <ul> <li> <p>&lt;ciphername&gt;</p> <p>Textual representation of the cipher name.</p> </li> <li> <p>&lt;protocol version&gt;</p> <p>The minimum protocol version that the ciphersuite supports, such as TLSv1.2. Note that this is not always the same as the protocol version in which the ciphersuite was first defined because some ciphersuites are backwards compatible with earlier protocol versions.</p> </li> <li> <p>Kx=&lt;key exchange&gt;</p> <p>Key exchange method such as RSA, ECDHE, etc.</p> </li> <li> <p>Au=&lt;authentication&gt;</p> <p>Authentication method such as RSA, None, etc.. None is the representation of anonymous ciphers.</p> </li> <li> <p>Enc=&lt;symmetric encryption method&gt;</p> <p>Encryption method, with number of secret bits, such as AESGCM(128).</p> </li> <li> <p>Mac=&lt;message authentication code&gt;</p> <p>Message digest, such as SHA256.</p> </li> </ul> <p>Some examples for the output of SSL_CIPHER_description():</p> <pre><code>ECDHE-RSA-AES256-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD\nRSA-PSK-AES256-CBC-SHA384 TLSv1.0 Kx=RSAPSK   Au=RSA  Enc=AES(256)  Mac=SHA384\n</code></pre>"},{"location":"man3/SSL_CIPHER_get_name/#return-values","title":"RETURN VALUES","text":"<p>SSL_CIPHER_get_name(), SSL_CIPHER_standard_name(), OPENSSL_cipher_name(), SSL_CIPHER_get_version() and SSL_CIPHER_description() return the corresponding value in a null-terminated string for a specific cipher or \"(NONE)\" if the cipher is not found.</p> <p>SSL_CIPHER_get_bits() returns a positive integer representing the number of secret bits or 0 if an error occurred.</p> <p>SSL_CIPHER_get_cipher_nid(), SSL_CIPHER_get_digest_nid(), SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() return the NID value or NID_undef if an error occurred.</p> <p>SSL_CIPHER_get_handshake_digest() returns a valid EVP_MD structure or NULL if an error occurred.</p> <p>SSL_CIPHER_is_aead() returns 1 if the cipher is AEAD or 0 otherwise.</p> <p>SSL_CIPHER_find() returns a valid SSL_CIPHER structure or NULL if an error occurred.</p> <p>SSL_CIPHER_get_id() returns a 4-byte integer representing the OpenSSL-specific ID.</p> <p>SSL_CIPHER_get_protocol_id() returns a 2-byte integer representing the TLS protocol-specific ID.</p>"},{"location":"man3/SSL_CIPHER_get_name/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_current_cipher(3), SSL_get_ciphers(3), ciphers(1)</p>"},{"location":"man3/SSL_CIPHER_get_name/#history","title":"HISTORY","text":"<p>The SSL_CIPHER_get_version() function was updated to always return the correct protocol string in OpenSSL 1.1.0.</p> <p>The SSL_CIPHER_description() function was changed to return NULL on error, rather than a fixed string, in OpenSSL 1.1.0.</p> <p>The SSL_CIPHER_get_handshake_digest() function was added in OpenSSL 1.1.1.</p> <p>The SSL_CIPHER_standard_name() function was globally available in OpenSSL 1.1.1.  Before OpenSSL 1.1.1, tracing (enable-ssl-trace argument to Configure) was required to enable this function.</p> <p>The OPENSSL_cipher_name() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CIPHER_get_name/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_COMP_add_compression_method/","title":"SSL_COMP_add_compression_method","text":""},{"location":"man3/SSL_COMP_add_compression_method/#name","title":"NAME","text":"<p>SSL_COMP_add_compression_method, SSL_COMP_get_compression_methods, SSL_COMP_get0_name, SSL_COMP_get_id, SSL_COMP_free_compression_methods - handle SSL/TLS integrated compression methods</p>"},{"location":"man3/SSL_COMP_add_compression_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);\nSTACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void);\nconst char *SSL_COMP_get0_name(const SSL_COMP *comp);\nint SSL_COMP_get_id(const SSL_COMP *comp);\n</code></pre> <p>Deprecated:</p> <pre><code>#if OPENSSL_API_COMPAT &lt; 0x10100000L\nvoid SSL_COMP_free_compression_methods(void)\n#endif\n</code></pre>"},{"location":"man3/SSL_COMP_add_compression_method/#description","title":"DESCRIPTION","text":"<p>SSL_COMP_add_compression_method() adds the compression method cm with the identifier id to the list of available compression methods. This list is globally maintained for all SSL operations within this application. It cannot be set for specific SSL_CTX or SSL objects.</p> <p>SSL_COMP_get_compression_methods() returns a stack of all of the available compression methods or NULL on error.</p> <p>SSL_COMP_get0_name() returns the name of the compression method comp.</p> <p>SSL_COMP_get_id() returns the id of the compression method comp.</p> <p>SSL_COMP_free_compression_methods() releases any resources acquired to maintain the internal table of compression methods.</p>"},{"location":"man3/SSL_COMP_add_compression_method/#notes","title":"NOTES","text":"<p>The TLS standard (or SSLv3) allows the integration of compression methods into the communication. The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers. It is therefore currently not recommended to integrate compression into applications. Applications for non-public use may agree on certain compression methods. Using different compression methods with the same identifier will lead to connection failure.</p> <p>An OpenSSL client speaking a protocol that allows compression (SSLv3, TLSv1) will unconditionally send the list of all compression methods enabled with SSL_COMP_add_compression_method() to the server during the handshake. Unlike the mechanisms to set a cipher list, there is no method available to restrict the list of compression method on a per connection basis.</p> <p>An OpenSSL server will match the identifiers listed by a client against its own compression methods and will unconditionally activate compression when a matching identifier is found. There is no way to restrict the list of compression methods supported on a per connection basis.</p> <p>If enabled during compilation, the OpenSSL library will have the COMP_zlib() compression method available.</p>"},{"location":"man3/SSL_COMP_add_compression_method/#return-values","title":"RETURN VALUES","text":"<p>SSL_COMP_add_compression_method() may return the following values:</p> <ul> <li> <p>0</p> <p>The operation succeeded.</p> </li> <li> <p>1</p> <p>The operation failed. Check the error queue to find out the reason.</p> </li> </ul> <p>SSL_COMP_get_compression_methods() returns the stack of compressions methods or NULL on error.</p> <p>SSL_COMP_get0_name() returns the name of the compression method or NULL on error.</p> <p>SSL_COMP_get_id() returns the name of the compression method or -1 on error.</p>"},{"location":"man3/SSL_COMP_add_compression_method/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_COMP_add_compression_method/#history","title":"HISTORY","text":"<p>The SSL_COMP_free_compression_methods() function was deprecated in OpenSSL 1.1.0. The SSL_COMP_get0_name() and SSL_comp_get_id() functions were added in OpenSSL 1.1.0d.</p>"},{"location":"man3/SSL_COMP_add_compression_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CONF_CTX_new/","title":"SSL_CONF_CTX_new","text":""},{"location":"man3/SSL_CONF_CTX_new/#name","title":"NAME","text":"<p>SSL_CONF_CTX_new, SSL_CONF_CTX_free - SSL configuration allocation functions</p>"},{"location":"man3/SSL_CONF_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL_CONF_CTX *SSL_CONF_CTX_new(void);\nvoid SSL_CONF_CTX_free(SSL_CONF_CTX *cctx);\n</code></pre>"},{"location":"man3/SSL_CONF_CTX_new/#description","title":"DESCRIPTION","text":"<p>The function SSL_CONF_CTX_new() allocates and initialises an SSL_CONF_CTX structure for use with the SSL_CONF functions.</p> <p>The function SSL_CONF_CTX_free() frees up the context cctx. If cctx is NULL nothing is done.</p>"},{"location":"man3/SSL_CONF_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>SSL_CONF_CTX_new() returns either the newly allocated SSL_CONF_CTX structure or NULL if an error occurs.</p> <p>SSL_CONF_CTX_free() does not return a value.</p>"},{"location":"man3/SSL_CONF_CTX_new/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_CTX_set_flags(3), SSL_CONF_CTX_set_ssl_ctx(3), SSL_CONF_CTX_set1_prefix(3), SSL_CONF_cmd(3), SSL_CONF_cmd_argv(3)</p>"},{"location":"man3/SSL_CONF_CTX_new/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CONF_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/","title":"SSL_CONF_CTX_set1_prefix","text":""},{"location":"man3/SSL_CONF_CTX_set1_prefix/#name","title":"NAME","text":"<p>SSL_CONF_CTX_set1_prefix - Set configuration context command prefix</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nunsigned int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *prefix);\n</code></pre>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#description","title":"DESCRIPTION","text":"<p>The function SSL_CONF_CTX_set1_prefix() sets the command prefix of cctx to prefix. If prefix is NULL it is restored to the default value.</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#notes","title":"NOTES","text":"<p>Command prefixes alter the commands recognised by subsequent SSL_CONF_cmd() calls. For example for files, if the prefix \"SSL\" is set then command names such as \"SSLProtocol\", \"SSLOptions\" etc. are recognised instead of \"Protocol\" and \"Options\". Similarly for command lines if the prefix is \"--ssl-\" then \"--ssl-no_tls1_2\" is recognised instead of \"-no_tls1_2\".</p> <p>If the SSL_CONF_FLAG_CMDLINE flag is set then prefix checks are case sensitive and \"-\" is the default. In the unlikely even an application explicitly wants to set no prefix it must be explicitly set to \"\".</p> <p>If the SSL_CONF_FLAG_FILE flag is set then prefix checks are case insensitive and no prefix is the default.</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#return-values","title":"RETURN VALUES","text":"<p>SSL_CONF_CTX_set1_prefix() returns 1 for success and 0 for failure.</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_CTX_new(3), SSL_CONF_CTX_set_flags(3), SSL_CONF_CTX_set_ssl_ctx(3), SSL_CONF_cmd(3), SSL_CONF_cmd_argv(3)</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CONF_CTX_set1_prefix/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CONF_CTX_set_flags/","title":"SSL_CONF_CTX_set_flags","text":""},{"location":"man3/SSL_CONF_CTX_set_flags/#name","title":"NAME","text":"<p>SSL_CONF_CTX_set_flags, SSL_CONF_CTX_clear_flags - Set or clear SSL configuration context flags</p>"},{"location":"man3/SSL_CONF_CTX_set_flags/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nunsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags);\nunsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx, unsigned int flags);\n</code></pre>"},{"location":"man3/SSL_CONF_CTX_set_flags/#description","title":"DESCRIPTION","text":"<p>The function SSL_CONF_CTX_set_flags() sets flags in the context cctx.</p> <p>The function SSL_CONF_CTX_clear_flags() clears flags in the context cctx.</p>"},{"location":"man3/SSL_CONF_CTX_set_flags/#notes","title":"NOTES","text":"<p>The flags set affect how subsequent calls to SSL_CONF_cmd() or SSL_CONF_argv() behave.</p> <p>Currently the following flags values are recognised:</p> <ul> <li> <p>SSL_CONF_FLAG_CMDLINE, SSL_CONF_FLAG_FILE</p> <p>recognise options intended for command line or configuration file use. At least one of these flags must be set.</p> </li> <li> <p>SSL_CONF_FLAG_CLIENT, SSL_CONF_FLAG_SERVER</p> <p>recognise options intended for use in SSL/TLS clients or servers. One or both of these flags must be set.</p> </li> <li> <p>SSL_CONF_FLAG_CERTIFICATE</p> <p>recognise certificate and private key options.</p> </li> <li> <p>SSL_CONF_FLAG_REQUIRE_PRIVATE</p> <p>If this option is set then if a private key is not specified for a certificate it will attempt to load a private key from the certificate file when SSL_CONF_CTX_finish() is called. If a key cannot be loaded from the certificate file an error occurs.</p> </li> <li> <p>SSL_CONF_FLAG_SHOW_ERRORS</p> <p>indicate errors relating to unrecognised options or missing arguments in the error queue. If this option isn't set such errors are only reflected in the return values of SSL_CONF_set_cmd() or SSL_CONF_set_argv()</p> </li> </ul>"},{"location":"man3/SSL_CONF_CTX_set_flags/#return-values","title":"RETURN VALUES","text":"<p>SSL_CONF_CTX_set_flags() and SSL_CONF_CTX_clear_flags() returns the new flags value after setting or clearing flags.</p>"},{"location":"man3/SSL_CONF_CTX_set_flags/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_CTX_new(3), SSL_CONF_CTX_set_ssl_ctx(3), SSL_CONF_CTX_set1_prefix(3), SSL_CONF_cmd(3), SSL_CONF_cmd_argv(3)</p>"},{"location":"man3/SSL_CONF_CTX_set_flags/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CONF_CTX_set_flags/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/","title":"SSL_CONF_CTX_set_ssl_ctx","text":""},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#name","title":"NAME","text":"<p>SSL_CONF_CTX_set_ssl_ctx, SSL_CONF_CTX_set_ssl - set context to configure</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx);\nvoid SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#description","title":"DESCRIPTION","text":"<p>SSL_CONF_CTX_set_ssl_ctx() sets the context associated with cctx to the SSL_CTX structure ctx. Any previous SSL or SSL_CTX associated with cctx is cleared. Subsequent calls to SSL_CONF_cmd() will be sent to ctx.</p> <p>SSL_CONF_CTX_set_ssl() sets the context associated with cctx to the SSL structure ssl. Any previous SSL or SSL_CTX associated with cctx is cleared. Subsequent calls to SSL_CONF_cmd() will be sent to ssl.</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#notes","title":"NOTES","text":"<p>The context need not be set or it can be set to NULL in which case only syntax checking of commands is performed, where possible.</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#return-values","title":"RETURN VALUES","text":"<p>SSL_CONF_CTX_set_ssl_ctx() and SSL_CTX_set_ssl() do not return a value.</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_CTX_new(3), SSL_CONF_CTX_set_flags(3), SSL_CONF_CTX_set1_prefix(3), SSL_CONF_cmd(3), SSL_CONF_cmd_argv(3)</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CONF_CTX_set_ssl_ctx/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CONF_cmd/","title":"SSL_CONF_cmd","text":""},{"location":"man3/SSL_CONF_cmd/#name","title":"NAME","text":"<p>SSL_CONF_cmd_value_type, SSL_CONF_cmd - send configuration command</p>"},{"location":"man3/SSL_CONF_cmd/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value);\nint SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd);\n</code></pre>"},{"location":"man3/SSL_CONF_cmd/#description","title":"DESCRIPTION","text":"<p>The function SSL_CONF_cmd() performs configuration operation cmd with optional parameter value on ctx. Its purpose is to simplify application configuration of SSL_CTX or SSL structures by providing a common framework for command line options or configuration files.</p> <p>SSL_CONF_cmd_value_type() returns the type of value that cmd refers to.</p>"},{"location":"man3/SSL_CONF_cmd/#supported-command-line-commands","title":"SUPPORTED COMMAND LINE COMMANDS","text":"<p>Currently supported cmd names for command lines (i.e. when the flag SSL_CONF_CMDLINE is set) are listed below. Note: all cmd names are case sensitive. Unless otherwise stated commands can be used by both clients and servers and the value parameter is not used. The default prefix for command line commands is - and that is reflected below.</p> <ul> <li> <p>-sigalgs</p> <p>This sets the supported signature algorithms for TLSv1.2 and TLSv1.3. For clients this value is used directly for the supported signature algorithms extension. For servers it is used to determine which signature algorithms to support.</p> <p>The value argument should be a colon separated list of signature algorithms in order of decreasing preference of the form algorithm+hash or signature_scheme. algorithm is one of RSA, DSA or ECDSA and hash is a supported algorithm OID short name such as SHA1, SHA224, SHA256, SHA384 of SHA512. Note: algorithm and hash names are case sensitive. signature_scheme is one of the signature schemes defined in TLSv1.3, specified using the IETF name, e.g., ecdsa_secp256r1_sha256, ed25519, or rsa_pss_pss_sha256.</p> <p>If this option is not set then all signature algorithms supported by the OpenSSL library are permissible.</p> <p>Note: algorithms which specify a PKCS#1 v1.5 signature scheme (either by using RSA as the algorithm or by using one of the rsa_pkcs1_* identifiers) are ignored in TLSv1.3 and will not be negotiated.</p> </li> <li> <p>-client_sigalgs</p> <p>This sets the supported signature algorithms associated with client authentication for TLSv1.2 and TLSv1.3. For servers the value is used in the signature_algorithms field of a CertificateRequest message. For clients it is used to determine which signature algorithm to use with the client certificate. If a server does not request a certificate this option has no effect.</p> <p>The syntax of value is identical to -sigalgs. If not set then the value set for -sigalgs will be used instead.</p> </li> <li> <p>-groups</p> <p>This sets the supported groups. For clients, the groups are sent using the supported groups extension. For servers, it is used to determine which group to use. This setting affects groups used for signatures (in TLSv1.2 and earlier) and key exchange. The first group listed will also be used for the key_share sent by a client in a TLSv1.3 ClientHello.</p> <p>The value argument is a colon separated list of groups. The group can be either the NIST name (e.g. P-256), some other commonly used name where applicable (e.g. X25519) or an OpenSSL OID name (e.g. prime256v1). Group names are case sensitive. The list should be in order of preference with the most preferred group first.</p> </li> <li> <p>-curves</p> <p>This is a synonym for the \"-groups\" command.</p> </li> <li> <p>-named_curve</p> <p>This sets the temporary curve used for ephemeral ECDH modes. Only used by servers</p> <p>The value argument is a curve name or the special value auto which picks an appropriate curve based on client and server preferences. The curve can be either the NIST name (e.g. P-256) or an OpenSSL OID name (e.g. prime256v1). Curve names are case sensitive.</p> </li> <li> <p>-cipher</p> <p>Sets the TLSv1.2 and below ciphersuite list to value. This list will be combined with any configured TLSv1.3 ciphersuites. Note: syntax checking of value is currently not performed unless a SSL or SSL_CTX structure is associated with cctx.</p> </li> <li> <p>-ciphersuites</p> <p>Sets the available ciphersuites for TLSv1.3 to value. This is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names in order of preference. This list will be combined any configured TLSv1.2 and below ciphersuites. See ciphers(1) for more information.</p> </li> <li> <p>-cert</p> <p>Attempts to use the file value as the certificate for the appropriate context. It currently uses SSL_CTX_use_certificate_chain_file() if an SSL_CTX structure is set or SSL_use_certificate_file() with filetype PEM if an SSL structure is set. This option is only supported if certificate operations are permitted.</p> </li> <li> <p>-key</p> <p>Attempts to use the file value as the private key for the appropriate context. This option is only supported if certificate operations are permitted. Note: if no -key option is set then a private key is not loaded unless the flag SSL_CONF_FLAG_REQUIRE_PRIVATE is set.</p> </li> <li> <p>-dhparam</p> <p>Attempts to use the file value as the set of temporary DH parameters for the appropriate context. This option is only supported if certificate operations are permitted.</p> </li> <li> <p>-record_padding</p> <p>Attempts to pad TLSv1.3 records so that they are a multiple of value in length on send. A value of 0 or 1 turns off padding. Otherwise, the value must be &gt;1 or &lt;=16384.</p> </li> <li> <p>-no_renegotiation</p> <p>Disables all attempts at renegotiation in TLSv1.2 and earlier, same as setting SSL_OP_NO_RENEGOTIATION.</p> </li> <li> <p>-min_protocol, -max_protocol</p> <p>Sets the minimum and maximum supported protocol. Currently supported protocol values are SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3 for TLS; DTLSv1, DTLSv1.2 for DTLS, and None for no limit. If either the lower or upper bound is not specified then only the other bound applies, if specified. If your application supports both TLS and DTLS you can specify any of these options twice, once with a bound for TLS and again with an appropriate bound for DTLS. To restrict the supported protocol versions use these commands rather than the deprecated alternative commands below.</p> </li> <li> <p>-no_ssl3, -no_tls1, -no_tls1_1, -no_tls1_2, -no_tls1_3</p> <p>Disables protocol support for SSLv3, TLSv1.0, TLSv1.1, TLSv1.2 or TLSv1.3 by setting the corresponding options SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2 and SSL_OP_NO_TLSv1_3 respectively. These options are deprecated, instead use -min_protocol and -max_protocol.</p> </li> <li> <p>-bugs</p> <p>Various bug workarounds are set, same as setting SSL_OP_ALL.</p> </li> <li> <p>-comp</p> <p>Enables support for SSL/TLS compression, same as clearing SSL_OP_NO_COMPRESSION. This command was introduced in OpenSSL 1.1.0. As of OpenSSL 1.1.0, compression is off by default.</p> </li> <li> <p>-no_comp</p> <p>Disables support for SSL/TLS compression, same as setting SSL_OP_NO_COMPRESSION. As of OpenSSL 1.1.0, compression is off by default.</p> </li> <li> <p>-no_ticket</p> <p>Disables support for session tickets, same as setting SSL_OP_NO_TICKET.</p> </li> <li> <p>-serverpref</p> <p>Use server and not client preference order when determining which cipher suite, signature algorithm or elliptic curve to use for an incoming connection. Equivalent to SSL_OP_CIPHER_SERVER_PREFERENCE. Only used by servers.</p> </li> <li> <p>-prioritize_chacha</p> <p>Prioritize ChaCha ciphers when the client has a ChaCha20 cipher at the top of its preference list. This usually indicates a client without AES hardware acceleration (e.g. mobile) is in use. Equivalent to SSL_OP_PRIORITIZE_CHACHA. Only used by servers. Requires -serverpref.</p> </li> <li> <p>-no_resumption_on_reneg</p> <p>set SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION flag. Only used by servers.</p> </li> <li> <p>-legacyrenegotiation</p> <p>permits the use of unsafe legacy renegotiation. Equivalent to setting SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION.</p> </li> <li> <p>-legacy_server_connect, -no_legacy_server_connect</p> <p>permits or prohibits the use of unsafe legacy renegotiation for OpenSSL clients only. Equivalent to setting or clearing SSL_OP_LEGACY_SERVER_CONNECT. Set by default.</p> </li> <li> <p>-allow_no_dhe_kex</p> <p>In TLSv1.3 allow a non-(ec)dhe based key exchange mode on resumption. This means that there will be no forward secrecy for the resumed session.</p> </li> <li> <p>-strict</p> <p>enables strict mode protocol handling. Equivalent to setting SSL_CERT_FLAG_TLS_STRICT.</p> </li> <li> <p>-anti_replay, -no_anti_replay</p> <p>Switches replay protection, on or off respectively. With replay protection on, OpenSSL will automatically detect if a session ticket has been used more than once, TLSv1.3 has been negotiated, and early data is enabled on the server. A full handshake is forced if a session ticket is used a second or subsequent time. Anti-Replay is on by default unless overridden by a configuration file and is only used by servers. Anti-replay measures are required for compliance with the TLSv1.3 specification. Some applications may be able to mitigate the replay risks in other ways and in such cases the built-in OpenSSL functionality is not required. Switching off anti-replay is equivalent to SSL_OP_NO_ANTI_REPLAY.</p> </li> </ul>"},{"location":"man3/SSL_CONF_cmd/#supported-configuration-file-commands","title":"SUPPORTED CONFIGURATION FILE COMMANDS","text":"<p>Currently supported cmd names for configuration files (i.e. when the flag SSL_CONF_FLAG_FILE is set) are listed below. All configuration file cmd names are case insensitive so signaturealgorithms is recognised as well as SignatureAlgorithms. Unless otherwise stated the value names are also case insensitive.</p> <p>Note: the command prefix (if set) alters the recognised cmd values.</p> <ul> <li> <p>CipherString</p> <p>Sets the ciphersuite list for TLSv1.2 and below to value. This list will be combined with any configured TLSv1.3 ciphersuites. Note: syntax checking of value is currently not performed unless an SSL or SSL_CTX structure is associated with cctx.</p> </li> <li> <p>Ciphersuites</p> <p>Sets the available ciphersuites for TLSv1.3 to value. This is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names in order of preference. This list will be combined any configured TLSv1.2 and below ciphersuites. See ciphers(1) for more information.</p> </li> <li> <p>Certificate</p> <p>Attempts to use the file value as the certificate for the appropriate context. It currently uses SSL_CTX_use_certificate_chain_file() if an SSL_CTX structure is set or SSL_use_certificate_file() with filetype PEM if an SSL structure is set. This option is only supported if certificate operations are permitted.</p> </li> <li> <p>PrivateKey</p> <p>Attempts to use the file value as the private key for the appropriate context. This option is only supported if certificate operations are permitted. Note: if no PrivateKey option is set then a private key is not loaded unless the SSL_CONF_FLAG_REQUIRE_PRIVATE is set.</p> </li> <li> <p>ChainCAFile, ChainCAPath, VerifyCAFile, VerifyCAPath</p> <p>These options indicate a file or directory used for building certificate chains or verifying certificate chains. These options are only supported if certificate operations are permitted.</p> </li> <li> <p>RequestCAFile</p> <p>This option indicates a file containing a set of certificates in PEM form. The subject names of the certificates are sent to the peer in the certificate_authorities extension for TLS 1.3 (in ClientHello or CertificateRequest) or in a certificate request for previous versions or TLS.</p> </li> <li> <p>ServerInfoFile</p> <p>Attempts to use the file value in the \"serverinfo\" extension using the function SSL_CTX_use_serverinfo_file.</p> </li> <li> <p>DHParameters</p> <p>Attempts to use the file value as the set of temporary DH parameters for the appropriate context. This option is only supported if certificate operations are permitted.</p> </li> <li> <p>RecordPadding</p> <p>Attempts to pad TLSv1.3 records so that they are a multiple of value in length on send. A value of 0 or 1 turns off padding. Otherwise, the value must be &gt;1 or &lt;=16384.</p> </li> <li> <p>SignatureAlgorithms</p> <p>This sets the supported signature algorithms for TLSv1.2 and TLSv1.3. For clients this value is used directly for the supported signature algorithms extension. For servers it is used to determine which signature algorithms to support.</p> <p>The value argument should be a colon separated list of signature algorithms in order of decreasing preference of the form algorithm+hash or signature_scheme. algorithm is one of RSA, DSA or ECDSA and hash is a supported algorithm OID short name such as SHA1, SHA224, SHA256, SHA384 of SHA512. Note: algorithm and hash names are case sensitive. signature_scheme is one of the signature schemes defined in TLSv1.3, specified using the IETF name, e.g., ecdsa_secp256r1_sha256, ed25519, or rsa_pss_pss_sha256.</p> <p>If this option is not set then all signature algorithms supported by the OpenSSL library are permissible.</p> <p>Note: algorithms which specify a PKCS#1 v1.5 signature scheme (either by using RSA as the algorithm or by using one of the rsa_pkcs1_* identifiers) are ignored in TLSv1.3 and will not be negotiated.</p> </li> <li> <p>ClientSignatureAlgorithms</p> <p>This sets the supported signature algorithms associated with client authentication for TLSv1.2 and TLSv1.3. For servers the value is used in the signature_algorithms field of a CertificateRequest message. For clients it is used to determine which signature algorithm to use with the client certificate. If a server does not request a certificate this option has no effect.</p> <p>The syntax of value is identical to SignatureAlgorithms. If not set then the value set for SignatureAlgorithms will be used instead.</p> </li> <li> <p>Groups</p> <p>This sets the supported groups. For clients, the groups are sent using the supported groups extension. For servers, it is used to determine which group to use. This setting affects groups used for signatures (in TLSv1.2 and earlier) and key exchange. The first group listed will also be used for the key_share sent by a client in a TLSv1.3 ClientHello.</p> <p>The value argument is a colon separated list of groups. The group can be either the NIST name (e.g. P-256), some other commonly used name where applicable (e.g. X25519) or an OpenSSL OID name (e.g. prime256v1). Group names are case sensitive. The list should be in order of preference with the most preferred group first.</p> </li> <li> <p>Curves</p> <p>This is a synonym for the \"Groups\" command.</p> </li> <li> <p>MinProtocol</p> <p>This sets the minimum supported SSL, TLS or DTLS version.</p> <p>Currently supported protocol values are SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3, DTLSv1 and DTLSv1.2. The SSL and TLS bounds apply only to TLS-based contexts, while the DTLS bounds apply only to DTLS-based contexts. The command can be repeated with one instance setting a TLS bound, and the other setting a DTLS bound. The value None applies to both types of contexts and disables the limits.</p> </li> <li> <p>MaxProtocol</p> <p>This sets the maximum supported SSL, TLS or DTLS version.</p> <p>Currently supported protocol values are SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3, DTLSv1 and DTLSv1.2. The SSL and TLS bounds apply only to TLS-based contexts, while the DTLS bounds apply only to DTLS-based contexts. The command can be repeated with one instance setting a TLS bound, and the other setting a DTLS bound. The value None applies to both types of contexts and disables the limits.</p> </li> <li> <p>Protocol</p> <p>This can be used to enable or disable certain versions of the SSL, TLS or DTLS protocol.</p> <p>The value argument is a comma separated list of supported protocols to enable or disable. If a protocol is preceded by - that version is disabled.</p> <p>All protocol versions are enabled by default. You need to disable at least one protocol version for this setting have any effect. Only enabling some protocol versions does not disable the other protocol versions.</p> <p>Currently supported protocol values are SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3, DTLSv1 and DTLSv1.2. The special value ALL refers to all supported versions.</p> <p>This can't enable protocols that are disabled using MinProtocol or MaxProtocol, but can disable protocols that are still allowed by them.</p> <p>The Protocol command is fragile and deprecated; do not use it. Use MinProtocol and MaxProtocol instead. If you do use Protocol, make sure that the resulting range of enabled protocols has no \"holes\", e.g. if TLS 1.0 and TLS 1.2 are both enabled, make sure to also leave TLS 1.1 enabled.</p> </li> <li> <p>Options</p> <p>The value argument is a comma separated list of various flags to set. If a flag string is preceded - it is disabled. See the SSL_CTX_set_options(3) function for more details of individual options.</p> <p>Each option is listed below. Where an operation is enabled by default the -flag syntax is needed to disable it.</p> <p>SessionTicket: session ticket support, enabled by default. Inverse of SSL_OP_NO_TICKET: that is -SessionTicket is the same as setting SSL_OP_NO_TICKET.</p> <p>Compression: SSL/TLS compression support, disabled by default. Inverse of SSL_OP_NO_COMPRESSION.</p> <p>EmptyFragments: use empty fragments as a countermeasure against a SSL 3.0/TLS 1.0 protocol vulnerability affecting CBC ciphers. It is set by default. Inverse of SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS.</p> <p>Bugs: enable various bug workarounds. Same as SSL_OP_ALL.</p> <p>DHSingle: enable single use DH keys, set by default. Inverse of SSL_OP_DH_SINGLE. Only used by servers.</p> <p>ECDHSingle: enable single use ECDH keys, set by default. Inverse of SSL_OP_ECDH_SINGLE. Only used by servers.</p> <p>ServerPreference: use server and not client preference order when determining which cipher suite, signature algorithm or elliptic curve to use for an incoming connection.  Equivalent to SSL_OP_CIPHER_SERVER_PREFERENCE. Only used by servers.</p> <p>PrioritizeChaCha: prioritizes ChaCha ciphers when the client has a ChaCha20 cipher at the top of its preference list. This usually indicates a mobile client is in use. Equivalent to SSL_OP_PRIORITIZE_CHACHA. Only used by servers.</p> <p>NoResumptionOnRenegotiation: set SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION flag. Only used by servers.</p> <p>NoRenegotiation: disables all attempts at renegotiation in TLSv1.2 and earlier, same as setting SSL_OP_NO_RENEGOTIATION.</p> <p>UnsafeLegacyRenegotiation: permits the use of unsafe legacy renegotiation. Equivalent to SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION.</p> <p>UnsafeLegacyServerConnect: permits the use of unsafe legacy renegotiation for OpenSSL clients only. Equivalent to SSL_OP_LEGACY_SERVER_CONNECT. Set by default.</p> <p>EncryptThenMac: use encrypt-then-mac extension, enabled by default. Inverse of SSL_OP_NO_ENCRYPT_THEN_MAC: that is, -EncryptThenMac is the same as setting SSL_OP_NO_ENCRYPT_THEN_MAC.</p> <p>AllowNoDHEKEX: In TLSv1.3 allow a non-(ec)dhe based key exchange mode on resumption. This means that there will be no forward secrecy for the resumed session. Equivalent to SSL_OP_ALLOW_NO_DHE_KEX.</p> <p>MiddleboxCompat: If set then dummy Change Cipher Spec (CCS) messages are sent in TLSv1.3. This has the effect of making TLSv1.3 look more like TLSv1.2 so that middleboxes that do not understand TLSv1.3 will not drop the connection. This option is set by default. A future version of OpenSSL may not set this by default. Equivalent to SSL_OP_ENABLE_MIDDLEBOX_COMPAT.</p> <p>AntiReplay: If set then OpenSSL will automatically detect if a session ticket has been used more than once, TLSv1.3 has been negotiated, and early data is enabled on the server. A full handshake is forced if a session ticket is used a second or subsequent time. This option is set by default and is only used by servers. Anti-replay measures are required to comply with the TLSv1.3 specification. Some applications may be able to mitigate the replay risks in other ways and in such cases the built-in OpenSSL functionality is not required. Disabling anti-replay is equivalent to setting SSL_OP_NO_ANTI_REPLAY.</p> </li> <li> <p>VerifyMode</p> <p>The value argument is a comma separated list of flags to set.</p> <p>Peer enables peer verification: for clients only.</p> <p>Request requests but does not require a certificate from the client. Servers only.</p> <p>Require requests and requires a certificate from the client: an error occurs if the client does not present a certificate. Servers only.</p> <p>Once requests a certificate from a client only on the initial connection: not when renegotiating. Servers only.</p> <p>RequestPostHandshake configures the connection to support requests but does not require a certificate from the client post-handshake. A certificate will not be requested during the initial handshake. The server application must provide a mechanism to request a certificate post-handshake. Servers only. TLSv1.3 only.</p> <p>RequiresPostHandshake configures the connection to support requests and requires a certificate from the client post-handshake: an error occurs if the client does not present a certificate. A certificate will not be requested during the initial handshake. The server application must provide a mechanism to request a certificate post-handshake. Servers only. TLSv1.3 only.</p> </li> <li> <p>ClientCAFile, ClientCAPath</p> <p>A file or directory of certificates in PEM format whose names are used as the set of acceptable names for client CAs. Servers only. This option is only supported if certificate operations are permitted.</p> </li> </ul>"},{"location":"man3/SSL_CONF_cmd/#supported-command-types","title":"SUPPORTED COMMAND TYPES","text":"<p>The function SSL_CONF_cmd_value_type() currently returns one of the following types:</p> <ul> <li> <p>SSL_CONF_TYPE_UNKNOWN</p> <p>The cmd string is unrecognised, this return value can be use to flag syntax errors.</p> </li> <li> <p>SSL_CONF_TYPE_STRING</p> <p>The value is a string without any specific structure.</p> </li> <li> <p>SSL_CONF_TYPE_FILE</p> <p>The value is a filename.</p> </li> <li> <p>SSL_CONF_TYPE_DIR</p> <p>The value is a directory name.</p> </li> <li> <p>SSL_CONF_TYPE_NONE</p> <p>The value string is not used e.g. a command line option which doesn't take an argument.</p> </li> </ul>"},{"location":"man3/SSL_CONF_cmd/#notes","title":"NOTES","text":"<p>The order of operations is significant. This can be used to set either defaults or values which cannot be overridden. For example if an application calls:</p> <pre><code>SSL_CONF_cmd(ctx, \"Protocol\", \"-SSLv3\");\nSSL_CONF_cmd(ctx, userparam, uservalue);\n</code></pre> <p>it will disable SSLv3 support by default but the user can override it. If however the call sequence is:</p> <pre><code>SSL_CONF_cmd(ctx, userparam, uservalue);\nSSL_CONF_cmd(ctx, \"Protocol\", \"-SSLv3\");\n</code></pre> <p>SSLv3 is always disabled and attempt to override this by the user are ignored.</p> <p>By checking the return code of SSL_CONF_cmd() it is possible to query if a given cmd is recognised, this is useful if SSL_CONF_cmd() values are mixed with additional application specific operations.</p> <p>For example an application might call SSL_CONF_cmd() and if it returns -2 (unrecognised command) continue with processing of application specific commands.</p> <p>Applications can also use SSL_CONF_cmd() to process command lines though the utility function SSL_CONF_cmd_argv() is normally used instead. One way to do this is to set the prefix to an appropriate value using SSL_CONF_CTX_set1_prefix(), pass the current argument to cmd and the following argument to value (which may be NULL).</p> <p>In this case if the return value is positive then it is used to skip that number of arguments as they have been processed by SSL_CONF_cmd(). If -2 is returned then cmd is not recognised and application specific arguments can be checked instead. If -3 is returned a required argument is missing and an error is indicated. If 0 is returned some other error occurred and this can be reported back to the user.</p> <p>The function SSL_CONF_cmd_value_type() can be used by applications to check for the existence of a command or to perform additional syntax checking or translation of the command value. For example if the return value is SSL_CONF_TYPE_FILE an application could translate a relative pathname to an absolute pathname.</p>"},{"location":"man3/SSL_CONF_cmd/#return-values","title":"RETURN VALUES","text":"<p>SSL_CONF_cmd() returns 1 if the value of cmd is recognised and value is NOT used and 2 if both cmd and value are used. In other words it returns the number of arguments processed. This is useful when processing command lines.</p> <p>A return value of -2 means cmd is not recognised.</p> <p>A return value of -3 means cmd is recognised and the command requires a value but value is NULL.</p> <p>A return code of 0 indicates that both cmd and value are valid but an error occurred attempting to perform the operation: for example due to an error in the syntax of value in this case the error queue may provide additional information.</p>"},{"location":"man3/SSL_CONF_cmd/#examples","title":"EXAMPLES","text":"<p>Set supported signature algorithms:</p> <pre><code>SSL_CONF_cmd(ctx, \"SignatureAlgorithms\", \"ECDSA+SHA256:RSA+SHA256:DSA+SHA256\");\n</code></pre> <p>There are various ways to select the supported protocols.</p> <p>This set the minimum protocol version to TLSv1, and so disables SSLv3. This is the recommended way to disable protocols.</p> <pre><code>SSL_CONF_cmd(ctx, \"MinProtocol\", \"TLSv1\");\n</code></pre> <p>The following also disables SSLv3:</p> <pre><code>SSL_CONF_cmd(ctx, \"Protocol\", \"-SSLv3\");\n</code></pre> <p>The following will first enable all protocols, and then disable SSLv3. If no protocol versions were disabled before this has the same effect as \"-SSLv3\", but if some versions were disables this will re-enable them before disabling SSLv3.</p> <pre><code>SSL_CONF_cmd(ctx, \"Protocol\", \"ALL,-SSLv3\");\n</code></pre> <p>Only enable TLSv1.2:</p> <pre><code>SSL_CONF_cmd(ctx, \"MinProtocol\", \"TLSv1.2\");\nSSL_CONF_cmd(ctx, \"MaxProtocol\", \"TLSv1.2\");\n</code></pre> <p>This also only enables TLSv1.2:</p> <pre><code>SSL_CONF_cmd(ctx, \"Protocol\", \"-ALL,TLSv1.2\");\n</code></pre> <p>Disable TLS session tickets:</p> <pre><code>SSL_CONF_cmd(ctx, \"Options\", \"-SessionTicket\");\n</code></pre> <p>Enable compression:</p> <pre><code>SSL_CONF_cmd(ctx, \"Options\", \"Compression\");\n</code></pre> <p>Set supported curves to P-256, P-384:</p> <pre><code>SSL_CONF_cmd(ctx, \"Curves\", \"P-256:P-384\");\n</code></pre>"},{"location":"man3/SSL_CONF_cmd/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_CTX_new(3), SSL_CONF_CTX_set_flags(3), SSL_CONF_CTX_set1_prefix(3), SSL_CONF_CTX_set_ssl_ctx(3), SSL_CONF_cmd_argv(3), SSL_CTX_set_options(3)</p>"},{"location":"man3/SSL_CONF_cmd/#history","title":"HISTORY","text":"<p>The SSL_CONF_cmd() function was added in OpenSSL 1.0.2.</p> <p>The SSL_OP_NO_SSL2 option doesn't have effect since 1.1.0, but the macro is retained for backwards compatibility.</p> <p>The SSL_CONF_TYPE_NONE was added in OpenSSL 1.1.0. In earlier versions of OpenSSL passing a command which didn't take an argument would return SSL_CONF_TYPE_UNKNOWN.</p> <p>MinProtocol and MaxProtocol where added in OpenSSL 1.1.0.</p> <p>AllowNoDHEKEX and PrioritizeChaCha were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CONF_cmd/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CONF_cmd_argv/","title":"SSL_CONF_cmd_argv","text":""},{"location":"man3/SSL_CONF_cmd_argv/#name","title":"NAME","text":"<p>SSL_CONF_cmd_argv - SSL configuration command line processing</p>"},{"location":"man3/SSL_CONF_cmd_argv/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv);\n</code></pre>"},{"location":"man3/SSL_CONF_cmd_argv/#description","title":"DESCRIPTION","text":"<p>The function SSL_CONF_cmd_argv() processes at most two command line arguments from pargv and pargc. The values of pargv and pargc are updated to reflect the number of command options processed. The pargc argument can be set to NULL if it is not used.</p>"},{"location":"man3/SSL_CONF_cmd_argv/#return-values","title":"RETURN VALUES","text":"<p>SSL_CONF_cmd_argv() returns the number of command arguments processed: 0, 1, 2 or a negative error code.</p> <p>If -2 is returned then an argument for a command is missing.</p> <p>If -1 is returned the command is recognised but couldn't be processed due to an error: for example a syntax error in the argument.</p>"},{"location":"man3/SSL_CONF_cmd_argv/#see-also","title":"SEE ALSO","text":"<p>SSL_CONF_CTX_new(3), SSL_CONF_CTX_set_flags(3), SSL_CONF_CTX_set1_prefix(3), SSL_CONF_CTX_set_ssl_ctx(3), SSL_CONF_cmd(3)</p>"},{"location":"man3/SSL_CONF_cmd_argv/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CONF_cmd_argv/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/","title":"SSL_CTX_add1_chain_cert","text":""},{"location":"man3/SSL_CTX_add1_chain_cert/#name","title":"NAME","text":"<p>SSL_CTX_set0_chain, SSL_CTX_set1_chain, SSL_CTX_add0_chain_cert, SSL_CTX_add1_chain_cert, SSL_CTX_get0_chain_certs, SSL_CTX_clear_chain_certs, SSL_set0_chain, SSL_set1_chain, SSL_add0_chain_cert, SSL_add1_chain_cert, SSL_get0_chain_certs, SSL_clear_chain_certs, SSL_CTX_build_cert_chain, SSL_build_cert_chain, SSL_CTX_select_current_cert, SSL_select_current_cert, SSL_CTX_set_current_cert, SSL_set_current_cert - extra chain certificate processing</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set0_chain(SSL_CTX *ctx, STACK_OF(X509) *sk);\nint SSL_CTX_set1_chain(SSL_CTX *ctx, STACK_OF(X509) *sk);\nint SSL_CTX_add0_chain_cert(SSL_CTX *ctx, X509 *x509);\nint SSL_CTX_add1_chain_cert(SSL_CTX *ctx, X509 *x509);\nint SSL_CTX_get0_chain_certs(SSL_CTX *ctx, STACK_OF(X509) **sk);\nint SSL_CTX_clear_chain_certs(SSL_CTX *ctx);\n\nint SSL_set0_chain(SSL *ssl, STACK_OF(X509) *sk);\nint SSL_set1_chain(SSL *ssl, STACK_OF(X509) *sk);\nint SSL_add0_chain_cert(SSL *ssl, X509 *x509);\nint SSL_add1_chain_cert(SSL *ssl, X509 *x509);\nint SSL_get0_chain_certs(SSL *ssl, STACK_OF(X509) **sk);\nint SSL_clear_chain_certs(SSL *ssl);\n\nint SSL_CTX_build_cert_chain(SSL_CTX *ctx, flags);\nint SSL_build_cert_chain(SSL *ssl, flags);\n\nint SSL_CTX_select_current_cert(SSL_CTX *ctx, X509 *x509);\nint SSL_select_current_cert(SSL *ssl, X509 *x509);\nint SSL_CTX_set_current_cert(SSL_CTX *ctx, long op);\nint SSL_set_current_cert(SSL *ssl, long op);\n</code></pre>"},{"location":"man3/SSL_CTX_add1_chain_cert/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set0_chain() and SSL_CTX_set1_chain() set the certificate chain associated with the current certificate of ctx to sk.</p> <p>SSL_CTX_add0_chain_cert() and SSL_CTX_add1_chain_cert() append the single certificate x509 to the chain associated with the current certificate of ctx.</p> <p>SSL_CTX_get0_chain_certs() retrieves the chain associated with the current certificate of ctx.</p> <p>SSL_CTX_clear_chain_certs() clears any existing chain associated with the current certificate of ctx.  (This is implemented by calling SSL_CTX_set0_chain() with sk set to NULL).</p> <p>SSL_CTX_build_cert_chain() builds the certificate chain for ctx normally this uses the chain store or the verify store if the chain store is not set. If the function is successful the built chain will replace any existing chain. The flags parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs, SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain, SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain (effectively sanity checking and rearranging them if necessary), the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors during verification: if flag SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is also set verification errors are cleared from the error queue.</p> <p>Each of these functions operates on the current end entity (i.e. server or client) certificate. This is the last certificate loaded or selected on the corresponding ctx structure.</p> <p>SSL_CTX_select_current_cert() selects x509 as the current end entity certificate, but only if x509 has already been loaded into ctx using a function such as SSL_CTX_use_certificate().</p> <p>SSL_set0_chain(), SSL_set1_chain(), SSL_add0_chain_cert(), SSL_add1_chain_cert(), SSL_get0_chain_certs(), SSL_clear_chain_certs(), SSL_build_cert_chain(), SSL_select_current_cert() and SSL_set_current_cert() are similar except they apply to SSL structure ssl.</p> <p>SSL_CTX_set_current_cert() changes the current certificate to a value based on the op argument. Currently op can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate. These two operations can be used to iterate over all certificates in an SSL_CTX structure.</p> <p>SSL_set_current_cert() also supports the option SSL_CERT_SET_SERVER. If ssl is a server and has sent a certificate to a connected client this option sets that certificate to the current certificate and returns 1. If the negotiated cipher suite is anonymous (and thus no certificate will be sent) 2 is returned and the current certificate is unchanged. If ssl is not a server or a certificate has not been sent 0 is returned and the current certificate is unchanged.</p> <p>All these functions are implemented as macros. Those containing a 1 increment the reference count of the supplied certificate or chain so it must be freed at some point after the operation. Those containing a 0 do not increment reference counts and the supplied certificate or chain MUST NOT be freed after the operation.</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/#notes","title":"NOTES","text":"<p>The chains associate with an SSL_CTX structure are copied to any SSL structures when SSL_new() is called. SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX.</p> <p>One chain can be set for each key type supported by a server. So, for example, an RSA and a DSA certificate can (and often will) have different chains.</p> <p>The functions SSL_CTX_build_cert_chain() and SSL_build_cert_chain() can be used to check application configuration and to ensure any necessary subordinate CAs are sent in the correct order. Misconfigured applications sending incorrect certificate chains often cause problems with peers.</p> <p>For example an application can add any set of certificates using SSL_CTX_use_certificate_chain_file() then call SSL_CTX_build_cert_chain() with the option SSL_BUILD_CHAIN_FLAG_CHECK to check and reorder them.</p> <p>Applications can issue non fatal warnings when checking chains by setting the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERRORS and checking the return value.</p> <p>Calling SSL_CTX_build_cert_chain() or SSL_build_cert_chain() is more efficient than the automatic chain building as it is only performed once. Automatic chain building is performed on each new session.</p> <p>If any certificates are added using these functions no certificates added using SSL_CTX_add_extra_chain_cert() will be used.</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/#return-values","title":"RETURN VALUES","text":"<p>SSL_set_current_cert() with SSL_CERT_SET_SERVER return 1 for success, 2 if no server certificate is used because the cipher suites is anonymous and 0 for failure.</p> <p>SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for success and 0 for failure. If the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR and a verification error occurs then 2 is returned.</p> <p>All other functions return 1 for success and 0 for failure.</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_add_extra_chain_cert(3)</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CTX_add1_chain_cert/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/","title":"SSL_CTX_add_extra_chain_cert","text":""},{"location":"man3/SSL_CTX_add_extra_chain_cert/#name","title":"NAME","text":"<p>SSL_CTX_add_extra_chain_cert, SSL_CTX_clear_extra_chain_certs - add or clear extra chain certificates</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_add_extra_chain_cert(SSL_CTX *ctx, X509 *x509);\nlong SSL_CTX_clear_extra_chain_certs(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_add_extra_chain_cert() adds the certificate x509 to the extra chain certificates associated with ctx. Several certificates can be added one after another.</p> <p>SSL_CTX_clear_extra_chain_certs() clears all extra chain certificates associated with ctx.</p> <p>These functions are implemented as macros.</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#notes","title":"NOTES","text":"<p>When sending a certificate chain, extra chain certificates are sent in order following the end entity certificate.</p> <p>If no chain is specified, the library will try to complete the chain from the available CA certificates in the trusted CA storage, see SSL_CTX_load_verify_locations(3).</p> <p>The x509 certificate provided to SSL_CTX_add_extra_chain_cert() will be freed by the library when the SSL_CTX is destroyed. An application should not free the x509 object.</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#restrictions","title":"RESTRICTIONS","text":"<p>Only one set of extra chain certificates can be specified per SSL_CTX structure. Different chains for different certificates (for example if both RSA and DSA certificates are specified by the same server) or different SSL structures with the same parent SSL_CTX cannot be specified using this function. For more flexibility functions such as SSL_add1_chain_cert() should be used instead.</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_add_extra_chain_cert() and SSL_CTX_clear_extra_chain_certs() return 1 on success and 0 for failure. Check out the error stack to find out the reason for failure.</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_use_certificate(3), SSL_CTX_set_client_cert_cb(3), SSL_CTX_load_verify_locations(3) SSL_CTX_set0_chain(3) SSL_CTX_set1_chain(3) SSL_CTX_add0_chain_cert(3) SSL_CTX_add1_chain_cert(3) SSL_set0_chain(3) SSL_set1_chain(3) SSL_add0_chain_cert(3) SSL_add1_chain_cert(3) SSL_CTX_build_cert_chain(3) SSL_build_cert_chain(3)</p>"},{"location":"man3/SSL_CTX_add_extra_chain_cert/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_add_session/","title":"SSL_CTX_add_session","text":""},{"location":"man3/SSL_CTX_add_session/#name","title":"NAME","text":"<p>SSL_CTX_add_session, SSL_CTX_remove_session - manipulate session cache</p>"},{"location":"man3/SSL_CTX_add_session/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *c);\n\nint SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *c);\n</code></pre>"},{"location":"man3/SSL_CTX_add_session/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_add_session() adds the session c to the context ctx. The reference count for session c is incremented by 1. If a session with the same session id already exists, the old session is removed by calling SSL_SESSION_free(3).</p> <p>SSL_CTX_remove_session() removes the session c from the context ctx and marks it as non-resumable. SSL_SESSION_free(3) is called once for c.</p>"},{"location":"man3/SSL_CTX_add_session/#notes","title":"NOTES","text":"<p>When adding a new session to the internal session cache, it is examined whether a session with the same session id already exists. In this case it is assumed that both sessions are identical. If the same session is stored in a different SSL_SESSION object, The old session is removed and replaced by the new session. If the session is actually identical (the SSL_SESSION object is identical), SSL_CTX_add_session() is a no-op, and the return value is 0.</p> <p>If a server SSL_CTX is configured with the SSL_SESS_CACHE_NO_INTERNAL_STORE flag then the internal cache will not be populated automatically by new sessions negotiated by the SSL/TLS implementation, even though the internal cache will be searched automatically for session-resume requests (the latter can be suppressed by SSL_SESS_CACHE_NO_INTERNAL_LOOKUP). So the application can use SSL_CTX_add_session() directly to have full control over the sessions that can be resumed if desired.</p>"},{"location":"man3/SSL_CTX_add_session/#return-values","title":"RETURN VALUES","text":"<p>The following values are returned by all functions:</p> <ul> <li> <p>0</p> <p>The operation failed. In case of the add operation, it was tried to add the same (identical) session twice. In case of the remove operation, the session was not found in the cache.</p> </li> <li> <p>1</p> <p>The operation succeeded.</p> </li> </ul>"},{"location":"man3/SSL_CTX_add_session/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_session_cache_mode(3), SSL_SESSION_free(3)</p>"},{"location":"man3/SSL_CTX_add_session/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_config/","title":"SSL_CTX_config","text":""},{"location":"man3/SSL_CTX_config/#name","title":"NAME","text":"<p>SSL_CTX_config, SSL_config - configure SSL_CTX or SSL structure</p>"},{"location":"man3/SSL_CTX_config/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_config(SSL_CTX *ctx, const char *name);\nint SSL_config(SSL *s, const char *name);\n</code></pre>"},{"location":"man3/SSL_CTX_config/#description","title":"DESCRIPTION","text":"<p>The functions SSL_CTX_config() and SSL_config() configure an SSL_CTX or SSL structure using the configuration name.</p>"},{"location":"man3/SSL_CTX_config/#notes","title":"NOTES","text":"<p>By calling SSL_CTX_config() or SSL_config() an application can perform many complex tasks based on the contents of the configuration file: greatly simplifying application configuration code. A degree of future proofing can also be achieved: an application can support configuration features in newer versions of OpenSSL automatically.</p> <p>A configuration file must have been previously loaded, for example using CONF_modules_load_file(). See config(5) for details of the configuration file syntax.</p>"},{"location":"man3/SSL_CTX_config/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_config() and SSL_config() return 1 for success or 0 if an error occurred.</p>"},{"location":"man3/SSL_CTX_config/#examples","title":"EXAMPLES","text":"<p>If the file \"config.cnf\" contains the following:</p> <pre><code>testapp = test_sect\n\n[test_sect]\n# list of configuration modules\n\nssl_conf = ssl_sect\n\n[ssl_sect]\nserver = server_section\n\n[server_section]\nRSA.Certificate = server-rsa.pem\nECDSA.Certificate = server-ecdsa.pem\nCiphers = ALL:!RC4\n</code></pre> <p>An application could call:</p> <pre><code>if (CONF_modules_load_file(\"config.cnf\", \"testapp\", 0) &lt;= 0) {\n    fprintf(stderr, \"Error processing config file\\n\");\n    goto err;\n}\n\nctx = SSL_CTX_new(TLS_server_method());\n\nif (SSL_CTX_config(ctx, \"server\") == 0) {\n    fprintf(stderr, \"Error configuring server.\\n\");\n    goto err;\n}\n</code></pre> <p>In this example two certificates and the cipher list are configured without the need for any additional application code.</p>"},{"location":"man3/SSL_CTX_config/#see-also","title":"SEE ALSO","text":"<p>config(5), SSL_CONF_cmd(3), CONF_modules_load_file(3)</p>"},{"location":"man3/SSL_CTX_config/#history","title":"HISTORY","text":"<p>The SSL_CTX_config() and SSL_config() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_config/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_ctrl/","title":"SSL_CTX_ctrl","text":""},{"location":"man3/SSL_CTX_ctrl/#name","title":"NAME","text":"<p>SSL_CTX_ctrl, SSL_CTX_callback_ctrl, SSL_ctrl, SSL_callback_ctrl - internal handling functions for SSL_CTX and SSL objects</p>"},{"location":"man3/SSL_CTX_ctrl/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);\nlong SSL_CTX_callback_ctrl(SSL_CTX *, int cmd, void (*fp)());\n\nlong SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg);\nlong SSL_callback_ctrl(SSL *, int cmd, void (*fp)());\n</code></pre>"},{"location":"man3/SSL_CTX_ctrl/#description","title":"DESCRIPTION","text":"<p>The SSL_*_ctrl() family of functions is used to manipulate settings of the SSL_CTX and SSL objects. Depending on the command cmd the arguments larg, parg, or fp are evaluated. These functions should never be called directly. All functionalities needed are made available via other functions or macros.</p>"},{"location":"man3/SSL_CTX_ctrl/#return-values","title":"RETURN VALUES","text":"<p>The return values of the SSL*_ctrl() functions depend on the command supplied via the cmd parameter.</p>"},{"location":"man3/SSL_CTX_ctrl/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_CTX_ctrl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_dane_enable/","title":"SSL_CTX_dane_enable","text":""},{"location":"man3/SSL_CTX_dane_enable/#name","title":"NAME","text":"<p>SSL_CTX_dane_enable, SSL_CTX_dane_mtype_set, SSL_dane_enable, SSL_dane_tlsa_add, SSL_get0_dane_authority, SSL_get0_dane_tlsa, SSL_CTX_dane_set_flags, SSL_CTX_dane_clear_flags, SSL_dane_set_flags, SSL_dane_clear_flags - enable DANE TLS authentication of the remote TLS server in the local TLS client</p>"},{"location":"man3/SSL_CTX_dane_enable/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_dane_enable(SSL_CTX *ctx);\nint SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md,\n                           uint8_t mtype, uint8_t ord);\nint SSL_dane_enable(SSL *s, const char *basedomain);\nint SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,\n                      uint8_t mtype, unsigned const char *data, size_t dlen);\nint SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki);\nint SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,\n                       uint8_t *mtype, unsigned const char **data,\n                       size_t *dlen);\nunsigned long SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags);\nunsigned long SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags);\nunsigned long SSL_dane_set_flags(SSL *ssl, unsigned long flags);\nunsigned long SSL_dane_clear_flags(SSL *ssl, unsigned long flags);\n</code></pre>"},{"location":"man3/SSL_CTX_dane_enable/#description","title":"DESCRIPTION","text":"<p>These functions implement support for DANE TLSA (RFC6698 and RFC7671) peer authentication.</p> <p>SSL_CTX_dane_enable() must be called first to initialize the shared state required for DANE support. Individual connections associated with the context can then enable per-connection DANE support as appropriate. DANE authentication is implemented in the X509_verify_cert(3) function, and applications that override X509_verify_cert(3) via SSL_CTX_set_cert_verify_callback(3) are responsible to authenticate the peer chain in whatever manner they see fit.</p> <p>SSL_CTX_dane_mtype_set() may then be called zero or more times to adjust the supported digest algorithms. This must be done before any SSL handles are created for the context.</p> <p>The mtype argument specifies a DANE TLSA matching type and the md argument specifies the associated digest algorithm handle. The ord argument specifies a strength ordinal. Algorithms with a larger strength ordinal are considered more secure. Strength ordinals are used to implement RFC7671 digest algorithm agility. Specifying a NULL digest algorithm for a matching type disables support for that matching type. Matching type Full(0) cannot be modified or disabled.</p> <p>By default, matching type <code>SHA2-256(1)</code> (see RFC7218 for definitions of the DANE TLSA parameter acronyms) is mapped to <code>EVP_sha256()</code> with a strength ordinal of <code>1</code> and matching type <code>SHA2-512(2)</code> is mapped to <code>EVP_sha512()</code> with a strength ordinal of <code>2</code>.</p> <p>SSL_dane_enable() must be called before the SSL handshake is initiated with SSL_connect(3) if (and only if) you want to enable DANE for that connection. (The connection must be associated with a DANE-enabled SSL context). The basedomain argument specifies the RFC7671 TLSA base domain, which will be the primary peer reference identifier for certificate name checks. Additional server names can be specified via SSL_add1_host(3). The basedomain is used as the default SNI hint if none has yet been specified via SSL_set_tlsext_host_name(3).</p> <p>SSL_dane_tlsa_add() may then be called one or more times, to load each of the TLSA records that apply to the remote TLS peer. (This too must be done prior to the beginning of the SSL handshake). The arguments specify the fields of the TLSA record. The data field is provided in binary (wire RDATA) form, not the hexadecimal ASCII presentation form, with an explicit length passed via dlen. The library takes a copy of the data buffer contents and the caller may free the original data buffer when convenient. A return value of 0 indicates that \"unusable\" TLSA records (with invalid or unsupported parameters) were provided. A negative return value indicates an internal error in processing the record.</p> <p>The caller is expected to check the return value of each SSL_dane_tlsa_add() call and take appropriate action if none are usable or an internal error is encountered in processing some records.</p> <p>If no TLSA records are added successfully, DANE authentication is not enabled, and authentication will be based on any configured traditional trust-anchors; authentication success in this case does not mean that the peer was DANE-authenticated.</p> <p>SSL_get0_dane_authority() can be used to get more detailed information about the matched DANE trust-anchor after successful connection completion. The return value is negative if DANE verification failed (or was not enabled), 0 if an EE TLSA record directly matched the leaf certificate, or a positive number indicating the depth at which a TA record matched an issuer certificate. The complete verified chain can be retrieved via SSL_get0_verified_chain(3). The return value is an index into this verified chain, rather than the list of certificates sent by the peer as returned by SSL_get_peer_cert_chain(3).</p> <p>If the mcert argument is not NULL and a TLSA record matched a chain certificate, a pointer to the matching certificate is returned via mcert. The returned address is a short-term internal reference to the certificate and must not be freed by the application. Applications that want to retain access to the certificate can call X509_up_ref(3) to obtain a long-term reference which must then be freed via X509_free(3) once no longer needed.</p> <p>If no TLSA records directly matched any elements of the certificate chain, but a DANE-TA(2) SPKI(1) Full(0) record provided the public key that signed an element of the chain, then that key is returned via mspki argument (if not NULL). In this case the return value is the depth of the top-most element of the validated certificate chain. As with mcert this is a short-term internal reference, and EVP_PKEY_up_ref(3) and EVP_PKEY_free(3) can be used to acquire and release long-term references respectively.</p> <p>SSL_get0_dane_tlsa() can be used to retrieve the fields of the TLSA record that matched the peer certificate chain. The return value indicates the match depth or failure to match just as with SSL_get0_dane_authority(). When the return value is nonnegative, the storage pointed to by the usage, selector, mtype and data parameters is updated to the corresponding TLSA record fields. The data field is in binary wire form, and is therefore not NUL-terminated, its length is returned via the dlen parameter. If any of these parameters is NULL, the corresponding field is not returned. The data parameter is set to a short-term internal-copy of the associated data field and must not be freed by the application. Applications that need long-term access to this field need to copy the content.</p> <p>SSL_CTX_dane_set_flags() and SSL_dane_set_flags() can be used to enable optional DANE verification features. SSL_CTX_dane_clear_flags() and SSL_dane_clear_flags() can be used to disable the same features. The flags argument is a bit mask of the features to enable or disable. The flags set for an SSL_CTX context are copied to each SSL handle associated with that context at the time the handle is created. Subsequent changes in the context's flags have no effect on the flags set for the handle.</p> <p>At present, the only available option is DANE_FLAG_NO_DANE_EE_NAMECHECKS which can be used to disable server name checks when authenticating via DANE-EE(3) TLSA records. For some applications, primarily web browsers, it is not safe to disable name checks due to \"unknown key share\" attacks, in which a malicious server can convince a client that a connection to a victim server is instead a secure connection to the malicious server. The malicious server may then be able to violate cross-origin scripting restrictions. Thus, despite the text of RFC7671, name checks are by default enabled for DANE-EE(3) TLSA records, and can be disabled in applications where it is safe to do so. In particular, SMTP and XMPP clients should set this option as SRV and MX records already make it possible for a remote domain to redirect client connections to any server of its choice, and in any case SMTP and XMPP clients do not execute scripts downloaded from remote servers.</p>"},{"location":"man3/SSL_CTX_dane_enable/#return-values","title":"RETURN VALUES","text":"<p>The functions SSL_CTX_dane_enable(), SSL_CTX_dane_mtype_set(), SSL_dane_enable() and SSL_dane_tlsa_add() return a positive value on success. Negative return values indicate resource problems (out of memory, etc.) in the SSL library, while a return value of 0 indicates incorrect usage or invalid input, such as an unsupported TLSA record certificate usage, selector or matching type. Invalid input also includes malformed data, either a digest length that does not match the digest algorithm, or a <code>Full(0)</code> (binary ASN.1 DER form) certificate or a public key that fails to parse.</p> <p>The functions SSL_get0_dane_authority() and SSL_get0_dane_tlsa() return a negative value when DANE authentication failed or was not enabled, a nonnegative value indicates the chain depth at which the TLSA record matched a chain certificate, or the depth of the top-most certificate, when the TLSA record is a full public key that is its signer.</p> <p>The functions SSL_CTX_dane_set_flags(), SSL_CTX_dane_clear_flags(), SSL_dane_set_flags() and SSL_dane_clear_flags() return the flags in effect before they were called.</p>"},{"location":"man3/SSL_CTX_dane_enable/#examples","title":"EXAMPLES","text":"<p>Suppose \"smtp.example.com\" is the MX host of the domain \"example.com\", and has DNSSEC-validated TLSA records. The calls below will perform DANE authentication and arrange to match either the MX hostname or the destination domain name in the SMTP server certificate. Wildcards are supported, but must match the entire label. The actual name matched in the certificate (which might be a wildcard) is retrieved, and must be copied by the application if it is to be retained beyond the lifetime of the SSL connection.</p> <pre><code>SSL_CTX *ctx;\nSSL *ssl;\nint (*verify_cb)(int ok, X509_STORE_CTX *sctx) = NULL;\nint num_usable = 0;\nconst char *nexthop_domain = \"example.com\";\nconst char *dane_tlsa_domain = \"smtp.example.com\";\nuint8_t usage, selector, mtype;\n\nif ((ctx = SSL_CTX_new(TLS_client_method())) == NULL)\n    /* error */\nif (SSL_CTX_dane_enable(ctx) &lt;= 0)\n    /* error */\nif ((ssl = SSL_new(ctx)) == NULL)\n    /* error */\nif (SSL_dane_enable(ssl, dane_tlsa_domain) &lt;= 0)\n    /* error */\n\n/*\n * For many applications it is safe to skip DANE-EE(3) namechecks.  Do not\n * disable the checks unless \"unknown key share\" attacks pose no risk for\n * your application.\n */\nSSL_dane_set_flags(ssl, DANE_FLAG_NO_DANE_EE_NAMECHECKS);\n\nif (!SSL_add1_host(ssl, nexthop_domain))\n    /* error */\nSSL_set_hostflags(ssl, X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);\n\nfor (... each TLSA record ...) {\n    unsigned char *data;\n    size_t len;\n    int ret;\n\n    /* set usage, selector, mtype, data, len */\n\n    /*\n     * Opportunistic DANE TLS clients support only DANE-TA(2) or DANE-EE(3).\n     * They treat all other certificate usages, and in particular PKIX-TA(0)\n     * and PKIX-EE(1), as unusable.\n     */\n    switch (usage) {\n    default:\n    case 0:     /* PKIX-TA(0) */\n    case 1:     /* PKIX-EE(1) */\n        continue;\n    case 2:     /* DANE-TA(2) */\n    case 3:     /* DANE-EE(3) */\n        break;\n    }\n\n    ret = SSL_dane_tlsa_add(ssl, usage, selector, mtype, data, len);\n    /* free data as appropriate */\n\n    if (ret &lt; 0)\n        /* handle SSL library internal error */\n    else if (ret == 0)\n        /* handle unusable TLSA record */\n    else\n        ++num_usable;\n}\n\n/*\n * At this point, the verification mode is still the default SSL_VERIFY_NONE.\n * Opportunistic DANE clients use unauthenticated TLS when all TLSA records\n * are unusable, so continue the handshake even if authentication fails.\n */\nif (num_usable == 0) {\n    /* Log all records unusable? */\n\n    /* Optionally set verify_cb to a suitable non-NULL callback. */\n    SSL_set_verify(ssl, SSL_VERIFY_NONE, verify_cb);\n} else {\n    /* At least one usable record.  We expect to verify the peer */\n\n    /* Optionally set verify_cb to a suitable non-NULL callback. */\n\n    /*\n     * Below we elect to fail the handshake when peer verification fails.\n     * Alternatively, use the permissive SSL_VERIFY_NONE verification mode,\n     * complete the handshake, check the verification status, and if not\n     * verified disconnect gracefully at the application layer, especially if\n     * application protocol supports informing the server that authentication\n     * failed.\n     */\n    SSL_set_verify(ssl, SSL_VERIFY_PEER, verify_cb);\n}\n\n/*\n * Load any saved session for resumption, making sure that the previous\n * session applied the same security and authentication requirements that\n * would be expected of a fresh connection.\n */\n\n/* Perform SSL_connect() handshake and handle errors here */\n\nif (SSL_session_reused(ssl)) {\n    if (SSL_get_verify_result(ssl) == X509_V_OK) {\n        /*\n         * Resumed session was originally verified, this connection is\n         * authenticated.\n         */\n    } else {\n        /*\n         * Resumed session was not originally verified, this connection is not\n         * authenticated.\n         */\n    }\n} else if (SSL_get_verify_result(ssl) == X509_V_OK) {\n    const char *peername = SSL_get0_peername(ssl);\n    EVP_PKEY *mspki = NULL;\n\n    int depth = SSL_get0_dane_authority(ssl, NULL, &amp;mspki);\n    if (depth &gt;= 0) {\n        (void) SSL_get0_dane_tlsa(ssl, &amp;usage, &amp;selector, &amp;mtype, NULL, NULL);\n        printf(\"DANE TLSA %d %d %d %s at depth %d\\n\", usage, selector, mtype,\n               (mspki != NULL) ? \"TA public key verified certificate\" :\n               depth ? \"matched TA certificate\" : \"matched EE certificate\",\n               depth);\n    }\n    if (peername != NULL) {\n        /* Name checks were in scope and matched the peername */\n        printf(\"Verified peername: %s\\n\", peername);\n    }\n} else {\n    /*\n     * Not authenticated, presumably all TLSA rrs unusable, but possibly a\n     * callback suppressed connection termination despite the presence of\n     * usable TLSA RRs none of which matched.  Do whatever is appropriate for\n     * fresh unauthenticated connections.\n     */\n}\n</code></pre>"},{"location":"man3/SSL_CTX_dane_enable/#notes","title":"NOTES","text":"<p>It is expected that the majority of clients employing DANE TLS will be doing \"opportunistic DANE TLS\" in the sense of RFC7672 and RFC7435. That is, they will use DANE authentication when DNSSEC-validated TLSA records are published for a given peer, and otherwise will use unauthenticated TLS or even cleartext.</p> <p>Such applications should generally treat any TLSA records published by the peer with usages PKIX-TA(0) and PKIX-EE(1) as \"unusable\", and should not include them among the TLSA records used to authenticate peer connections. In addition, some TLSA records with supported usages may be \"unusable\" as a result of invalid or unsupported parameters.</p> <p>When a peer has TLSA records, but none are \"usable\", an opportunistic application must avoid cleartext, but cannot authenticate the peer, and so should generally proceed with an unauthenticated connection. Opportunistic applications need to note the return value of each call to SSL_dane_tlsa_add(), and if all return 0 (due to invalid or unsupported parameters) disable peer authentication by calling SSL_set_verify(3) with mode equal to SSL_VERIFY_NONE.</p>"},{"location":"man3/SSL_CTX_dane_enable/#see-also","title":"SEE ALSO","text":"<p>SSL_new(3), SSL_add1_host(3), SSL_set_hostflags(3), SSL_set_tlsext_host_name(3), SSL_set_verify(3), SSL_CTX_set_cert_verify_callback(3), SSL_get0_verified_chain(3), SSL_get_peer_cert_chain(3), SSL_get_verify_result(3), SSL_connect(3), SSL_get0_peername(3), X509_verify_cert(3), X509_up_ref(3), X509_free(3), EVP_get_digestbyname(3), EVP_PKEY_up_ref(3), EVP_PKEY_free(3)</p>"},{"location":"man3/SSL_CTX_dane_enable/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_dane_enable/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_flush_sessions/","title":"SSL_CTX_flush_sessions","text":""},{"location":"man3/SSL_CTX_flush_sessions/#name","title":"NAME","text":"<p>SSL_CTX_flush_sessions - remove expired sessions</p>"},{"location":"man3/SSL_CTX_flush_sessions/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm);\n</code></pre>"},{"location":"man3/SSL_CTX_flush_sessions/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_flush_sessions() causes a run through the session cache of ctx to remove sessions expired at time tm.</p>"},{"location":"man3/SSL_CTX_flush_sessions/#notes","title":"NOTES","text":"<p>If enabled, the internal session cache will collect all sessions established up to the specified maximum number (see SSL_CTX_sess_set_cache_size()). As sessions will not be reused ones they are expired, they should be removed from the cache to save resources. This can either be done automatically whenever 255 new sessions were established (see SSL_CTX_set_session_cache_mode(3)) or manually by calling SSL_CTX_flush_sessions().</p> <p>The parameter tm specifies the time which should be used for the expiration test, in most cases the actual time given by time(0) will be used.</p> <p>SSL_CTX_flush_sessions() will only check sessions stored in the internal cache. When a session is found and removed, the remove_session_cb is however called to synchronize with the external cache (see SSL_CTX_sess_set_get_cb(3)).</p>"},{"location":"man3/SSL_CTX_flush_sessions/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_flush_sessions() does not return a value.</p>"},{"location":"man3/SSL_CTX_flush_sessions/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_session_cache_mode(3), SSL_CTX_set_timeout(3), SSL_CTX_sess_set_get_cb(3)</p>"},{"location":"man3/SSL_CTX_flush_sessions/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_free/","title":"SSL_CTX_free","text":""},{"location":"man3/SSL_CTX_free/#name","title":"NAME","text":"<p>SSL_CTX_free - free an allocated SSL_CTX object</p>"},{"location":"man3/SSL_CTX_free/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_free(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_free/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_free() decrements the reference count of ctx, and removes the SSL_CTX object pointed to by ctx and frees up the allocated memory if the reference count has reached 0.</p> <p>It also calls the free()ing procedures for indirectly affected items, if applicable: the session cache, the list of ciphers, the list of Client CAs, the certificates and keys.</p> <p>If ctx is NULL nothing is done.</p>"},{"location":"man3/SSL_CTX_free/#warnings","title":"WARNINGS","text":"<p>If a session-remove callback is set (SSL_CTX_sess_set_remove_cb()), this callback will be called for each session being freed from ctx's session cache. This implies, that all corresponding sessions from an external session cache are removed as well. If this is not desired, the user should explicitly unset the callback by calling SSL_CTX_sess_set_remove_cb(ctx, NULL) prior to calling SSL_CTX_free().</p>"},{"location":"man3/SSL_CTX_free/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_free() does not provide diagnostic information.</p>"},{"location":"man3/SSL_CTX_free/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_new(3), ssl(7), SSL_CTX_sess_set_get_cb(3)</p>"},{"location":"man3/SSL_CTX_free/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_get0_param/","title":"SSL_CTX_get0_param","text":""},{"location":"man3/SSL_CTX_get0_param/#name","title":"NAME","text":"<p>SSL_CTX_get0_param, SSL_get0_param, SSL_CTX_set1_param, SSL_set1_param - get and set verification parameters</p>"},{"location":"man3/SSL_CTX_get0_param/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nX509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx)\nX509_VERIFY_PARAM *SSL_get0_param(SSL *ssl)\nint SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm)\nint SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm)\n</code></pre>"},{"location":"man3/SSL_CTX_get0_param/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_get0_param() and SSL_get0_param() retrieve an internal pointer to the verification parameters for ctx or ssl respectively. The returned pointer must not be freed by the calling application.</p> <p>SSL_CTX_set1_param() and SSL_set1_param() set the verification parameters to vpm for ctx or ssl.</p>"},{"location":"man3/SSL_CTX_get0_param/#notes","title":"NOTES","text":"<p>Typically parameters are retrieved from an SSL_CTX or SSL structure using SSL_CTX_get0_param() or SSL_get0_param() and an application modifies them to suit its needs: for example to add a hostname check.</p>"},{"location":"man3/SSL_CTX_get0_param/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_get0_param() and SSL_get0_param() return a pointer to an X509_VERIFY_PARAM structure.</p> <p>SSL_CTX_set1_param() and SSL_set1_param() return 1 for success and 0 for failure.</p>"},{"location":"man3/SSL_CTX_get0_param/#examples","title":"EXAMPLES","text":"<p>Check hostname matches \"www.foo.com\" in peer certificate:</p> <pre><code>X509_VERIFY_PARAM *vpm = SSL_get0_param(ssl);\nX509_VERIFY_PARAM_set1_host(vpm, \"www.foo.com\", 0);\n</code></pre>"},{"location":"man3/SSL_CTX_get0_param/#see-also","title":"SEE ALSO","text":"<p>X509_VERIFY_PARAM_set_flags(3)</p>"},{"location":"man3/SSL_CTX_get0_param/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CTX_get0_param/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_get_verify_mode/","title":"SSL_CTX_get_verify_mode","text":""},{"location":"man3/SSL_CTX_get_verify_mode/#name","title":"NAME","text":"<p>SSL_CTX_get_verify_mode, SSL_get_verify_mode, SSL_CTX_get_verify_depth, SSL_get_verify_depth, SSL_get_verify_callback, SSL_CTX_get_verify_callback - get currently set verification parameters</p>"},{"location":"man3/SSL_CTX_get_verify_mode/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_get_verify_mode(const SSL_CTX *ctx);\nint SSL_get_verify_mode(const SSL *ssl);\nint SSL_CTX_get_verify_depth(const SSL_CTX *ctx);\nint SSL_get_verify_depth(const SSL *ssl);\nint (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx))(int, X509_STORE_CTX *);\nint (*SSL_get_verify_callback(const SSL *ssl))(int, X509_STORE_CTX *);\n</code></pre>"},{"location":"man3/SSL_CTX_get_verify_mode/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_get_verify_mode() returns the verification mode currently set in ctx.</p> <p>SSL_get_verify_mode() returns the verification mode currently set in ssl.</p> <p>SSL_CTX_get_verify_depth() returns the verification depth limit currently set in ctx. If no limit has been explicitly set, -1 is returned and the default value will be used.</p> <p>SSL_get_verify_depth() returns the verification depth limit currently set in ssl. If no limit has been explicitly set, -1 is returned and the default value will be used.</p> <p>SSL_CTX_get_verify_callback() returns a function pointer to the verification callback currently set in ctx. If no callback was explicitly set, the NULL pointer is returned and the default callback will be used.</p> <p>SSL_get_verify_callback() returns a function pointer to the verification callback currently set in ssl. If no callback was explicitly set, the NULL pointer is returned and the default callback will be used.</p>"},{"location":"man3/SSL_CTX_get_verify_mode/#return-values","title":"RETURN VALUES","text":"<p>See DESCRIPTION</p>"},{"location":"man3/SSL_CTX_get_verify_mode/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_verify(3)</p>"},{"location":"man3/SSL_CTX_get_verify_mode/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_has_client_custom_ext/","title":"SSL_CTX_has_client_custom_ext","text":""},{"location":"man3/SSL_CTX_has_client_custom_ext/#name","title":"NAME","text":"<p>SSL_CTX_has_client_custom_ext - check whether a handler exists for a particular client extension type</p>"},{"location":"man3/SSL_CTX_has_client_custom_ext/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx, unsigned int ext_type);\n</code></pre>"},{"location":"man3/SSL_CTX_has_client_custom_ext/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_has_client_custom_ext() checks whether a handler has been set for a client extension of type ext_type using SSL_CTX_add_client_custom_ext().</p>"},{"location":"man3/SSL_CTX_has_client_custom_ext/#return-values","title":"RETURN VALUES","text":"<p>Returns 1 if a handler has been set, 0 otherwise.</p>"},{"location":"man3/SSL_CTX_has_client_custom_ext/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_add_client_custom_ext(3)</p>"},{"location":"man3/SSL_CTX_has_client_custom_ext/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_load_verify_locations/","title":"SSL_CTX_load_verify_locations","text":""},{"location":"man3/SSL_CTX_load_verify_locations/#name","title":"NAME","text":"<p>SSL_CTX_load_verify_locations, SSL_CTX_set_default_verify_paths, SSL_CTX_set_default_verify_dir, SSL_CTX_set_default_verify_file - set default locations for trusted CA certificates</p>"},{"location":"man3/SSL_CTX_load_verify_locations/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,\n                                  const char *CApath);\n\nint SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);\n\nint SSL_CTX_set_default_verify_dir(SSL_CTX *ctx);\n\nint SSL_CTX_set_default_verify_file(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_load_verify_locations/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_load_verify_locations() specifies the locations for ctx, at which CA certificates for verification purposes are located. The certificates available via CAfile and CApath are trusted.</p> <p>SSL_CTX_set_default_verify_paths() specifies that the default locations from which CA certificates are loaded should be used. There is one default directory and one default file. The default CA certificates directory is called \"certs\" in the default OpenSSL directory. Alternatively the SSL_CERT_DIR environment variable can be defined to override this location. The default CA certificates file is called \"cert.pem\" in the default OpenSSL directory. Alternatively the SSL_CERT_FILE environment variable can be defined to override this location.</p> <p>SSL_CTX_set_default_verify_dir() is similar to SSL_CTX_set_default_verify_paths() except that just the default directory is used.</p> <p>SSL_CTX_set_default_verify_file() is similar to SSL_CTX_set_default_verify_paths() except that just the default file is used.</p>"},{"location":"man3/SSL_CTX_load_verify_locations/#notes","title":"NOTES","text":"<p>If CAfile is not NULL, it points to a file of CA certificates in PEM format. The file can contain several CA certificates identified by</p> <pre><code>-----BEGIN CERTIFICATE-----\n... (CA certificate in base64 encoding) ...\n-----END CERTIFICATE-----\n</code></pre> <p>sequences. Before, between, and after the certificates text is allowed which can be used e.g. for descriptions of the certificates.</p> <p>The CAfile is processed on execution of the SSL_CTX_load_verify_locations() function.</p> <p>If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (e.g. 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links.</p> <p>The certificates in CApath are only looked up when required, e.g. when building the certificate chain or when actually performing the verification of a peer certificate.</p> <p>When looking up CA certificates, the OpenSSL library will first search the certificates in CAfile, then those in CApath. Certificate matching is done based on the subject name, the key identifier (if present), and the serial number as taken from the certificate to be verified. If these data do not match, the next certificate will be tried. If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure.</p> <p>In server mode, when requesting a client certificate, the server must send the list of CAs of which it will accept client certificates. This list is not influenced by the contents of CAfile or CApath and must explicitly be set using the SSL_CTX_set_client_CA_list(3) family of functions.</p> <p>When building its own certificate chain, an OpenSSL client/server will try to fill in missing certificates from CAfile/CApath, if the certificate chain was not explicitly specified (see SSL_CTX_add_extra_chain_cert(3), SSL_CTX_use_certificate(3).</p>"},{"location":"man3/SSL_CTX_load_verify_locations/#warnings","title":"WARNINGS","text":"<p>If several CA certificates matching the name, key identifier, and serial number condition are available, only the first one will be examined. This may lead to unexpected results if the same CA certificate is available with different expiration dates. If a \"certificate expired\" verification error occurs, no other certificate will be searched. Make sure to not have expired certificates mixed with valid ones.</p>"},{"location":"man3/SSL_CTX_load_verify_locations/#return-values","title":"RETURN VALUES","text":"<p>For SSL_CTX_load_verify_locations the following return values can occur:</p> <ul> <li> <p>0</p> <p>The operation failed because CAfile and CApath are NULL or the processing at one of the locations specified failed. Check the error stack to find out the reason.</p> </li> <li> <p>1</p> <p>The operation succeeded.</p> </li> </ul> <p>SSL_CTX_set_default_verify_paths(), SSL_CTX_set_default_verify_dir() and SSL_CTX_set_default_verify_file() all return 1 on success or 0 on failure. A missing default location is still treated as a success.</p>"},{"location":"man3/SSL_CTX_load_verify_locations/#examples","title":"EXAMPLES","text":"<p>Generate a CA certificate file with descriptive text from the CA certificates ca1.pem ca2.pem ca3.pem:</p> <pre><code>#!/bin/sh\nrm CAfile.pem\nfor i in ca1.pem ca2.pem ca3.pem ; do\n    openssl x509 -in $i -text &gt;&gt; CAfile.pem\ndone\n</code></pre> <p>Prepare the directory /some/where/certs containing several CA certificates for use as CApath:</p> <pre><code>cd /some/where/certs\nc_rehash .\n</code></pre>"},{"location":"man3/SSL_CTX_load_verify_locations/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_client_CA_list(3), SSL_get_client_CA_list(3), SSL_CTX_use_certificate(3), SSL_CTX_add_extra_chain_cert(3), SSL_CTX_set_cert_store(3), SSL_CTX_set_client_CA_list(3)</p>"},{"location":"man3/SSL_CTX_load_verify_locations/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_new/","title":"SSL_CTX_new","text":""},{"location":"man3/SSL_CTX_new/#name","title":"NAME","text":"<p>TLSv1_2_method, TLSv1_2_server_method, TLSv1_2_client_method, SSL_CTX_new, SSL_CTX_up_ref, SSLv3_method, SSLv3_server_method, SSLv3_client_method, TLSv1_method, TLSv1_server_method, TLSv1_client_method, TLSv1_1_method, TLSv1_1_server_method, TLSv1_1_client_method, TLS_method, TLS_server_method, TLS_client_method, SSLv23_method, SSLv23_server_method, SSLv23_client_method, DTLS_method, DTLS_server_method, DTLS_client_method, DTLSv1_method, DTLSv1_server_method, DTLSv1_client_method, DTLSv1_2_method, DTLSv1_2_server_method, DTLSv1_2_client_method - create a new SSL_CTX object as framework for TLS/SSL or DTLS enabled functions</p>"},{"location":"man3/SSL_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL_CTX *SSL_CTX_new(const SSL_METHOD *method);\nint SSL_CTX_up_ref(SSL_CTX *ctx);\n\nconst SSL_METHOD *TLS_method(void);\nconst SSL_METHOD *TLS_server_method(void);\nconst SSL_METHOD *TLS_client_method(void);\n\nconst SSL_METHOD *SSLv23_method(void);\nconst SSL_METHOD *SSLv23_server_method(void);\nconst SSL_METHOD *SSLv23_client_method(void);\n\n#ifndef OPENSSL_NO_SSL3_METHOD\nconst SSL_METHOD *SSLv3_method(void);\nconst SSL_METHOD *SSLv3_server_method(void);\nconst SSL_METHOD *SSLv3_client_method(void);\n#endif\n\n#ifndef OPENSSL_NO_TLS1_METHOD\nconst SSL_METHOD *TLSv1_method(void);\nconst SSL_METHOD *TLSv1_server_method(void);\nconst SSL_METHOD *TLSv1_client_method(void);\n#endif\n\n#ifndef OPENSSL_NO_TLS1_1_METHOD\nconst SSL_METHOD *TLSv1_1_method(void);\nconst SSL_METHOD *TLSv1_1_server_method(void);\nconst SSL_METHOD *TLSv1_1_client_method(void);\n#endif\n\n#ifndef OPENSSL_NO_TLS1_2_METHOD\nconst SSL_METHOD *TLSv1_2_method(void);\nconst SSL_METHOD *TLSv1_2_server_method(void);\nconst SSL_METHOD *TLSv1_2_client_method(void);\n#endif\n\nconst SSL_METHOD *DTLS_method(void);\nconst SSL_METHOD *DTLS_server_method(void);\nconst SSL_METHOD *DTLS_client_method(void);\n\n#ifndef OPENSSL_NO_DTLS1_METHOD\nconst SSL_METHOD *DTLSv1_method(void);\nconst SSL_METHOD *DTLSv1_server_method(void);\nconst SSL_METHOD *DTLSv1_client_method(void);\n#endif\n\n#ifndef OPENSSL_NO_DTLS1_2_METHOD\nconst SSL_METHOD *DTLSv1_2_method(void);\nconst SSL_METHOD *DTLSv1_2_server_method(void);\nconst SSL_METHOD *DTLSv1_2_client_method(void);\n#endif\n</code></pre>"},{"location":"man3/SSL_CTX_new/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_new() creates a new SSL_CTX object as framework to establish TLS/SSL or DTLS enabled connections. An SSL_CTX object is reference counted. Creating an SSL_CTX object for the first time increments the reference count. Freeing it (using SSL_CTX_free) decrements it. When the reference count drops to zero, any memory or resources allocated to the SSL_CTX object are freed. SSL_CTX_up_ref() increments the reference count for an existing SSL_CTX structure.</p>"},{"location":"man3/SSL_CTX_new/#notes","title":"NOTES","text":"<p>The SSL_CTX object uses method as connection method. The methods exist in a generic type (for client and server use), a server only type, and a client only type. method can be of the following types:</p> <ul> <li> <p>TLS_method(), TLS_server_method(), TLS_client_method()</p> <p>These are the general-purpose version-flexible SSL/TLS methods. The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server. The supported protocols are SSLv3, TLSv1, TLSv1.1, TLSv1.2 and TLSv1.3. Applications should use these methods, and avoid the version-specific methods described below, which are deprecated.</p> </li> <li> <p>SSLv23_method(), SSLv23_server_method(), SSLv23_client_method()</p> <p>These functions do not exist anymore, they have been renamed to TLS_method(), TLS_server_method() and TLS_client_method() respectively. Currently, the old function calls are renamed to the corresponding new ones by preprocessor macros, to ensure that existing code which uses the old function names still compiles. However, using the old function names is deprecated and new code should call the new functions instead.</p> </li> <li> <p>TLSv1_2_method(), TLSv1_2_server_method(), TLSv1_2_client_method()</p> <p>A TLS/SSL connection established with these methods will only understand the TLSv1.2 protocol. These methods are deprecated.</p> </li> <li> <p>TLSv1_1_method(), TLSv1_1_server_method(), TLSv1_1_client_method()</p> <p>A TLS/SSL connection established with these methods will only understand the TLSv1.1 protocol.  These methods are deprecated.</p> </li> <li> <p>TLSv1_method(), TLSv1_server_method(), TLSv1_client_method()</p> <p>A TLS/SSL connection established with these methods will only understand the TLSv1 protocol. These methods are deprecated.</p> </li> <li> <p>SSLv3_method(), SSLv3_server_method(), SSLv3_client_method()</p> <p>A TLS/SSL connection established with these methods will only understand the SSLv3 protocol. The SSLv3 protocol is deprecated and should not be used.</p> </li> <li> <p>DTLS_method(), DTLS_server_method(), DTLS_client_method()</p> <p>These are the version-flexible DTLS methods. Currently supported protocols are DTLS 1.0 and DTLS 1.2.</p> </li> <li> <p>DTLSv1_2_method(), DTLSv1_2_server_method(), DTLSv1_2_client_method()</p> <p>These are the version-specific methods for DTLSv1.2. These methods are deprecated.</p> </li> <li> <p>DTLSv1_method(), DTLSv1_server_method(), DTLSv1_client_method()</p> <p>These are the version-specific methods for DTLSv1. These methods are deprecated.</p> </li> </ul> <p>SSL_CTX_new() initializes the list of ciphers, the session cache setting, the callbacks, the keys and certificates and the options to their default values.</p> <p>TLS_method(), TLS_server_method(), TLS_client_method(), DTLS_method(), DTLS_server_method() and DTLS_client_method() are the version-flexible methods. All other methods only support one specific protocol version. Use the version-flexible methods instead of the version specific methods.</p> <p>If you want to limit the supported protocols for the version flexible methods you can use SSL_CTX_set_min_proto_version(3), SSL_set_min_proto_version(3), SSL_CTX_set_max_proto_version(3) and SSL_set_max_proto_version(3) functions. Using these functions it is possible to choose e.g. TLS_server_method() and be able to negotiate with all possible clients, but to only allow newer protocols like TLS 1.0, TLS 1.1, TLS 1.2 or TLS 1.3.</p> <p>The list of protocols available can also be limited using the SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_3, SSL_OP_NO_TLSv1_2 and SSL_OP_NO_TLSv1_3 options of the SSL_CTX_set_options(3) or SSL_set_options(3) functions, but this approach is not recommended. Clients should avoid creating \"holes\" in the set of protocols they support. When disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions. In clients, when a protocol version is disabled without disabling all previous protocol versions, the effect is to also disable all subsequent protocol versions.</p> <p>The SSLv3 protocol is deprecated and should generally not be used. Applications should typically use SSL_CTX_set_min_proto_version(3) to set the minimum protocol to at least TLS1_VERSION.</p>"},{"location":"man3/SSL_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>The creation of a new SSL_CTX object failed. Check the error stack to find out the reason.</p> </li> <li> <p>Pointer to an SSL_CTX object</p> <p>The return value points to an allocated SSL_CTX object.</p> <p>SSL_CTX_up_ref() returns 1 for success and 0 for failure.</p> </li> </ul>"},{"location":"man3/SSL_CTX_new/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_options(3), SSL_CTX_free(3), SSL_accept(3), SSL_CTX_set_min_proto_version(3), ssl(7), SSL_set_connect_state(3)</p>"},{"location":"man3/SSL_CTX_new/#history","title":"HISTORY","text":"<p>Support for SSLv2 and the corresponding SSLv2_method(), SSLv2_server_method() and SSLv2_client_method() functions where removed in OpenSSL 1.1.0.</p> <p>SSLv23_method(), SSLv23_server_method() and SSLv23_client_method() were deprecated and the preferred TLS_method(), TLS_server_method() and TLS_client_method() functions were added in OpenSSL 1.1.0.</p> <p>All version-specific methods were deprecated in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_sess_number/","title":"SSL_CTX_sess_number","text":""},{"location":"man3/SSL_CTX_sess_number/#name","title":"NAME","text":"<p>SSL_CTX_sess_number, SSL_CTX_sess_connect, SSL_CTX_sess_connect_good, SSL_CTX_sess_connect_renegotiate, SSL_CTX_sess_accept, SSL_CTX_sess_accept_good, SSL_CTX_sess_accept_renegotiate, SSL_CTX_sess_hits, SSL_CTX_sess_cb_hits, SSL_CTX_sess_misses, SSL_CTX_sess_timeouts, SSL_CTX_sess_cache_full - obtain session cache statistics</p>"},{"location":"man3/SSL_CTX_sess_number/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_sess_number(SSL_CTX *ctx);\nlong SSL_CTX_sess_connect(SSL_CTX *ctx);\nlong SSL_CTX_sess_connect_good(SSL_CTX *ctx);\nlong SSL_CTX_sess_connect_renegotiate(SSL_CTX *ctx);\nlong SSL_CTX_sess_accept(SSL_CTX *ctx);\nlong SSL_CTX_sess_accept_good(SSL_CTX *ctx);\nlong SSL_CTX_sess_accept_renegotiate(SSL_CTX *ctx);\nlong SSL_CTX_sess_hits(SSL_CTX *ctx);\nlong SSL_CTX_sess_cb_hits(SSL_CTX *ctx);\nlong SSL_CTX_sess_misses(SSL_CTX *ctx);\nlong SSL_CTX_sess_timeouts(SSL_CTX *ctx);\nlong SSL_CTX_sess_cache_full(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_sess_number/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_sess_number() returns the current number of sessions in the internal session cache.</p> <p>SSL_CTX_sess_connect() returns the number of started SSL/TLS handshakes in client mode.</p> <p>SSL_CTX_sess_connect_good() returns the number of successfully established SSL/TLS sessions in client mode.</p> <p>SSL_CTX_sess_connect_renegotiate() returns the number of started renegotiations in client mode.</p> <p>SSL_CTX_sess_accept() returns the number of started SSL/TLS handshakes in server mode.</p> <p>SSL_CTX_sess_accept_good() returns the number of successfully established SSL/TLS sessions in server mode.</p> <p>SSL_CTX_sess_accept_renegotiate() returns the number of started renegotiations in server mode.</p> <p>SSL_CTX_sess_hits() returns the number of successfully reused sessions. In client mode a session set with SSL_set_session(3) successfully reused is counted as a hit. In server mode a session successfully retrieved from internal or external cache is counted as a hit.</p> <p>SSL_CTX_sess_cb_hits() returns the number of successfully retrieved sessions from the external session cache in server mode.</p> <p>SSL_CTX_sess_misses() returns the number of sessions proposed by clients that were not found in the internal session cache in server mode.</p> <p>SSL_CTX_sess_timeouts() returns the number of sessions proposed by clients and either found in the internal or external session cache in server mode,  but that were invalid due to timeout. These sessions are not included in the SSL_CTX_sess_hits() count.</p> <p>SSL_CTX_sess_cache_full() returns the number of sessions that were removed because the maximum session cache size was exceeded.</p>"},{"location":"man3/SSL_CTX_sess_number/#return-values","title":"RETURN VALUES","text":"<p>The functions return the values indicated in the DESCRIPTION section.</p>"},{"location":"man3/SSL_CTX_sess_number/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_set_session(3), SSL_CTX_set_session_cache_mode(3) SSL_CTX_sess_set_cache_size(3)</p>"},{"location":"man3/SSL_CTX_sess_number/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_sess_set_cache_size/","title":"SSL_CTX_sess_set_cache_size","text":""},{"location":"man3/SSL_CTX_sess_set_cache_size/#name","title":"NAME","text":"<p>SSL_CTX_sess_set_cache_size, SSL_CTX_sess_get_cache_size - manipulate session cache size</p>"},{"location":"man3/SSL_CTX_sess_set_cache_size/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_sess_set_cache_size(SSL_CTX *ctx, long t);\nlong SSL_CTX_sess_get_cache_size(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_sess_set_cache_size/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_sess_set_cache_size() sets the size of the internal session cache of context ctx to t. This value is a hint and not an absolute; see the notes below.</p> <p>SSL_CTX_sess_get_cache_size() returns the currently valid session cache size.</p>"},{"location":"man3/SSL_CTX_sess_set_cache_size/#notes","title":"NOTES","text":"<p>The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT, currently 1024*20, so that up to 20000 sessions can be held. This size can be modified using the SSL_CTX_sess_set_cache_size() call. A special case is the size 0, which is used for unlimited size.</p> <p>If adding the session makes the cache exceed its size, then unused sessions are dropped from the end of the cache. Cache space may also be reclaimed by calling SSL_CTX_flush_sessions(3) to remove expired sessions.</p> <p>If the size of the session cache is reduced and more sessions are already in the session cache, old session will be removed at the next time a session shall be added. This removal is not synchronized with the expiration of sessions.</p>"},{"location":"man3/SSL_CTX_sess_set_cache_size/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_sess_set_cache_size() returns the previously valid size.</p> <p>SSL_CTX_sess_get_cache_size() returns the currently valid size.</p>"},{"location":"man3/SSL_CTX_sess_set_cache_size/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_session_cache_mode(3), SSL_CTX_sess_number(3), SSL_CTX_flush_sessions(3)</p>"},{"location":"man3/SSL_CTX_sess_set_cache_size/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_sess_set_get_cb/","title":"SSL_CTX_sess_set_get_cb","text":""},{"location":"man3/SSL_CTX_sess_set_get_cb/#name","title":"NAME","text":"<p>SSL_CTX_sess_set_new_cb, SSL_CTX_sess_set_remove_cb, SSL_CTX_sess_set_get_cb, SSL_CTX_sess_get_new_cb, SSL_CTX_sess_get_remove_cb, SSL_CTX_sess_get_get_cb - provide callback functions for server side external session caching</p>"},{"location":"man3/SSL_CTX_sess_set_get_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,\n                             int (*new_session_cb)(SSL *, SSL_SESSION *));\nvoid SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,\n                                void (*remove_session_cb)(SSL_CTX *ctx,\n                                                          SSL_SESSION *));\nvoid SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,\n                             SSL_SESSION (*get_session_cb)(SSL *,\n                                                           const unsigned char *,\n                                                           int, int *));\n\nint (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx))(struct ssl_st *ssl,\n                                             SSL_SESSION *sess);\nvoid (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx))(struct ssl_ctx_st *ctx,\n                                                 SSL_SESSION *sess);\nSSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx))(struct ssl_st *ssl,\n                                                      const unsigned char *data,\n                                                      int len, int *copy);\n</code></pre>"},{"location":"man3/SSL_CTX_sess_set_get_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_sess_set_new_cb() sets the callback function that is called whenever a new session was negotiated.</p> <p>SSL_CTX_sess_set_remove_cb() sets the callback function that is called whenever a session is removed by the SSL engine.  For example, this can occur because a session is considered faulty or has become obsolete because of exceeding the timeout value.</p> <p>SSL_CTX_sess_set_get_cb() sets the callback function that is called whenever a TLS client proposed to resume a session but the session could not be found in the internal session cache (see SSL_CTX_set_session_cache_mode(3)). (TLS server only.)</p> <p>SSL_CTX_sess_get_new_cb(), SSL_CTX_sess_get_remove_cb(), and SSL_CTX_sess_get_get_cb() retrieve the function pointers set by the corresponding set callback functions. If a callback function has not been set, the NULL pointer is returned.</p>"},{"location":"man3/SSL_CTX_sess_set_get_cb/#notes","title":"NOTES","text":"<p>In order to allow external session caching, synchronization with the internal session cache is realized via callback functions. Inside these callback functions, session can be saved to disk or put into a database using the d2i_SSL_SESSION(3) interface.</p> <p>The new_session_cb() is called whenever a new session has been negotiated and session caching is enabled (see SSL_CTX_set_session_cache_mode(3)).  The new_session_cb() is passed the ssl connection and the nascent ssl session sess. Since sessions are reference-counted objects, the reference count on the session is incremented before the callback, on behalf of the application.  If the callback returns 0, the session will be immediately removed from the internal cache and the reference count released. If the callback returns 1, the application retains the reference (for an entry in the application-maintained \"external session cache\"), and is responsible for calling SSL_SESSION_free() when the session reference is no longer in use.</p> <p>Note that in TLSv1.3, sessions are established after the main handshake has completed. The server decides when to send the client the session information and this may occur some time after the end of the handshake (or not at all). This means that applications should expect the new_session_cb() function to be invoked during the handshake (for &lt;= TLSv1.2) or after the handshake (for TLSv1.3). It is also possible in TLSv1.3 for multiple sessions to be established with a single connection. In these case the new_session_cb() function will be invoked multiple times.</p> <p>In TLSv1.3 it is recommended that each SSL_SESSION object is only used for resumption once. One way of enforcing that is for applications to call SSL_CTX_remove_session(3) after a session has been used.</p> <p>The remove_session_cb() is called whenever the SSL engine removes a session from the internal cache. This can happen when the session is removed because it is expired or when a connection was not shutdown cleanly. It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called. The remove_session_cb() is passed the ctx and the ssl session sess. It does not provide any feedback.</p> <p>The get_session_cb() is only called on SSL/TLS servers, and is given the session id proposed by the client. The get_session_cb() is always called, even when session caching was disabled. The get_session_cb() is passed the ssl connection and the session id of length length at the memory location data. By setting the parameter copy to 1, the callback can require the SSL engine to increment the reference count of the SSL_SESSION object; setting copy to 0 causes the reference count to remain unchanged. If the get_session_cb() does not write to copy, the reference count is incremented and the session must be explicitly freed with SSL_SESSION_free(3).</p>"},{"location":"man3/SSL_CTX_sess_set_get_cb/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_sess_get_new_cb(), SSL_CTX_sess_get_remove_cb() and SSL_CTX_sess_get_get_cb() return different callback function pointers respectively.</p>"},{"location":"man3/SSL_CTX_sess_set_get_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), d2i_SSL_SESSION(3), SSL_CTX_set_session_cache_mode(3), SSL_CTX_flush_sessions(3), SSL_SESSION_free(3), SSL_CTX_free(3)</p>"},{"location":"man3/SSL_CTX_sess_set_get_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_sessions/","title":"SSL_CTX_sessions","text":""},{"location":"man3/SSL_CTX_sessions/#name","title":"NAME","text":"<p>SSL_CTX_sessions - access internal session cache</p>"},{"location":"man3/SSL_CTX_sessions/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nstruct lhash_st *SSL_CTX_sessions(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_sessions/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_sessions() returns a pointer to the lhash databases containing the internal session cache for ctx.</p>"},{"location":"man3/SSL_CTX_sessions/#notes","title":"NOTES","text":"<p>The sessions in the internal session cache are kept in an LHASH(3) type database. It is possible to directly access this database e.g. for searching. In parallel, the sessions form a linked list which is maintained separately from the LHASH(3) operations, so that the database must not be modified directly but by using the SSL_CTX_add_session(3) family of functions.</p>"},{"location":"man3/SSL_CTX_sessions/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_sessions() returns a pointer to the lhash of SSL_SESSION.</p>"},{"location":"man3/SSL_CTX_sessions/#see-also","title":"SEE ALSO","text":"<p>ssl(7), LHASH(3), SSL_CTX_add_session(3), SSL_CTX_set_session_cache_mode(3)</p>"},{"location":"man3/SSL_CTX_sessions/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set0_CA_list/","title":"SSL_CTX_set0_CA_list","text":""},{"location":"man3/SSL_CTX_set0_CA_list/#name","title":"NAME","text":"<p>SSL_CTX_set_client_CA_list, SSL_set_client_CA_list, SSL_get_client_CA_list, SSL_CTX_get_client_CA_list, SSL_CTX_add_client_CA, SSL_add_client_CA, SSL_set0_CA_list, SSL_CTX_set0_CA_list, SSL_get0_CA_list, SSL_CTX_get0_CA_list, SSL_add1_to_CA_list, SSL_CTX_add1_to_CA_list, SSL_get0_peer_CA_list - get or set CA list</p>"},{"location":"man3/SSL_CTX_set0_CA_list/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *list);\nvoid SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *list);\nSTACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s);\nSTACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *ctx);\nint SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *cacert);\nint SSL_add_client_CA(SSL *ssl, X509 *cacert);\n\nvoid SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);\nvoid SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);\nconst STACK_OF(X509_NAME) *SSL_CTX_get0_CA_list(const SSL_CTX *ctx);\nconst STACK_OF(X509_NAME) *SSL_get0_CA_list(const SSL *s);\nint SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x);\nint SSL_add1_to_CA_list(SSL *ssl, const X509 *x);\n\nconst STACK_OF(X509_NAME) *SSL_get0_peer_CA_list(const SSL *s);\n</code></pre>"},{"location":"man3/SSL_CTX_set0_CA_list/#description","title":"DESCRIPTION","text":"<p>The functions described here set and manage the list of CA names that are sent between two communicating peers.</p> <p>For TLS versions 1.2 and earlier the list of CA names is only sent from the server to the client when requesting a client certificate. So any list of CA names set is never sent from client to server and the list of CA names retrieved by SSL_get0_peer_CA_list() is always NULL.</p> <p>For TLS 1.3 the list of CA names is sent using the certificate_authorities extension and may be sent by a client (in the ClientHello message) or by a server (when requesting a certificate).</p> <p>In most cases it is not necessary to set CA names on the client side. The list of CA names that are acceptable to the client will be sent in plaintext to the server. This has privacy implications and may also have performance implications if the list is large. This optional capability was introduced as part of TLSv1.3 and therefore setting CA names on the client side will have no impact if that protocol version has been disabled. Most servers do not need this and so this should be avoided unless required.</p> <p>The \"client CA list\" functions below only have an effect when called on the server side.</p> <p>SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for ctx. Ownership of list is transferred to ctx and it should not be freed by the caller.</p> <p>SSL_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for the chosen ssl, overriding the setting valid for ssl's SSL_CTX object. Ownership of list is transferred to s and it should not be freed by the caller.</p> <p>SSL_CTX_get_client_CA_list() returns the list of client CAs explicitly set for ctx using SSL_CTX_set_client_CA_list(). The returned list should not be freed by the caller.</p> <p>SSL_get_client_CA_list() returns the list of client CAs explicitly set for ssl using SSL_set_client_CA_list() or ssl's SSL_CTX object with SSL_CTX_set_client_CA_list(), when in server mode. In client mode, SSL_get_client_CA_list returns the list of client CAs sent from the server, if any. The returned list should not be freed by the caller.</p> <p>SSL_CTX_add_client_CA() adds the CA name extracted from cacert to the list of CAs sent to the client when requesting a client certificate for ctx.</p> <p>SSL_add_client_CA() adds the CA name extracted from cacert to the list of CAs sent to the client when requesting a client certificate for the chosen ssl, overriding the setting valid for ssl's SSL_CTX object.</p> <p>SSL_get0_peer_CA_list() retrieves the list of CA names (if any) the peer has sent. This can be called on either the server or the client side. The returned list should not be freed by the caller.</p> <p>The \"generic CA list\" functions below are very similar to the \"client CA list\" functions except that they have an effect on both the server and client sides. The lists of CA names managed are separate - so you cannot (for example) set CA names using the \"client CA list\" functions and then get them using the \"generic CA list\" functions. Where a mix of the two types of functions has been used on the server side then the \"client CA list\" functions take precedence. Typically, on the server side, the \"client CA list \" functions should be used in preference. As noted above in most cases it is not necessary to set CA names on the client side.</p> <p>SSL_CTX_set0_CA_list() sets the list of CAs to be sent to the peer to name_list. Ownership of name_list is transferred to ctx and it should not be freed by the caller.</p> <p>SSL_set0_CA_list() sets the list of CAs to be sent to the peer to name_list overriding any list set in the parent SSL_CTX of s. Ownership of name_list is transferred to s and it should not be freed by the caller.</p> <p>SSL_CTX_get0_CA_list() retrieves any previously set list of CAs set for ctx. The returned list should not be freed by the caller.</p> <p>SSL_get0_CA_list() retrieves any previously set list of CAs set for s or if none are set the list from the parent SSL_CTX is retrieved. The returned list should not be freed by the caller.</p> <p>SSL_CTX_add1_to_CA_list() appends the CA subject name extracted from x to the list of CAs sent to peer for ctx.</p> <p>SSL_add1_to_CA_list() appends the CA subject name extracted from x to the list of CAs sent to the peer for s, overriding the setting in the parent SSL_CTX.</p>"},{"location":"man3/SSL_CTX_set0_CA_list/#notes","title":"NOTES","text":"<p>When a TLS/SSL server requests a client certificate (see SSL_CTX_set_verify(3)), it sends a list of CAs, for which it will accept certificates, to the client.</p> <p>This list must explicitly be set using SSL_CTX_set_client_CA_list() or SSL_CTX_set0_CA_list() for ctx and SSL_set_client_CA_list() or SSL_set0_CA_list() for the specific ssl. The list specified overrides the previous setting. The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification.</p> <p>If the list of acceptable CAs is compiled in a file, the SSL_load_client_CA_file(3) function can be used to help to import the necessary data.</p> <p>SSL_CTX_add_client_CA(), SSL_CTX_add1_to_CA_list(), SSL_add_client_CA() and SSL_add1_to_CA_list() can be used to add additional items the list of CAs. If no list was specified before using SSL_CTX_set_client_CA_list(), SSL_CTX_set0_CA_list(), SSL_set_client_CA_list() or SSL_set0_CA_list(), a new CA list for ctx or ssl (as appropriate) is opened.</p>"},{"location":"man3/SSL_CTX_set0_CA_list/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set0_CA_list() and SSL_set0_CA_list() do not return a value.</p> <p>SSL_CTX_get_client_CA_list(), SSL_get_client_CA_list(), SSL_CTX_get0_CA_list() and SSL_get0_CA_list() return a stack of CA names or NULL is no CA names are set.</p> <p>SSL_CTX_add_client_CA(),SSL_add_client_CA(), SSL_CTX_add1_to_CA_list() and SSL_add1_to_CA_list() return 1 for success and 0 for failure.</p> <p>SSL_get0_peer_CA_list() returns a stack of CA names sent by the peer or NULL or an empty stack if no list was sent.</p>"},{"location":"man3/SSL_CTX_set0_CA_list/#examples","title":"EXAMPLES","text":"<p>Scan all certificates in CAfile and list them as acceptable CAs:</p> <pre><code>SSL_CTX_set_client_CA_list(ctx, SSL_load_client_CA_file(CAfile));\n</code></pre>"},{"location":"man3/SSL_CTX_set0_CA_list/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_load_client_CA_file(3), SSL_CTX_load_verify_locations(3)</p>"},{"location":"man3/SSL_CTX_set0_CA_list/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set1_curves/","title":"SSL_CTX_set1_curves","text":""},{"location":"man3/SSL_CTX_set1_curves/#name","title":"NAME","text":"<p>SSL_CTX_set1_groups, SSL_CTX_set1_groups_list, SSL_set1_groups, SSL_set1_groups_list, SSL_get1_groups, SSL_get_shared_group, SSL_CTX_set1_curves, SSL_CTX_set1_curves_list, SSL_set1_curves, SSL_set1_curves_list, SSL_get1_curves, SSL_get_shared_curve - EC supported curve functions</p>"},{"location":"man3/SSL_CTX_set1_curves/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set1_groups(SSL_CTX *ctx, int *glist, int glistlen);\nint SSL_CTX_set1_groups_list(SSL_CTX *ctx, char *list);\n\nint SSL_set1_groups(SSL *ssl, int *glist, int glistlen);\nint SSL_set1_groups_list(SSL *ssl, char *list);\n\nint SSL_get1_groups(SSL *ssl, int *groups);\nint SSL_get_shared_group(SSL *s, int n);\n\nint SSL_CTX_set1_curves(SSL_CTX *ctx, int *clist, int clistlen);\nint SSL_CTX_set1_curves_list(SSL_CTX *ctx, char *list);\n\nint SSL_set1_curves(SSL *ssl, int *clist, int clistlen);\nint SSL_set1_curves_list(SSL *ssl, char *list);\n\nint SSL_get1_curves(SSL *ssl, int *curves);\nint SSL_get_shared_curve(SSL *s, int n);\n</code></pre>"},{"location":"man3/SSL_CTX_set1_curves/#description","title":"DESCRIPTION","text":"<p>For all of the functions below that set the supported groups there must be at least one group in the list.</p> <p>SSL_CTX_set1_groups() sets the supported groups for ctx to glistlen groups in the array glist. The array consist of all NIDs of groups in preference order. For a TLS client the groups are used directly in the supported groups extension. For a TLS server the groups are used to determine the set of shared groups.</p> <p>SSL_CTX_set1_groups_list() sets the supported groups for ctx to string list. The string is a colon separated list of group NIDs or names, for example \"P-521:P-384:P-256\".</p> <p>SSL_set1_groups() and SSL_set1_groups_list() are similar except they set supported groups for the SSL structure ssl.</p> <p>SSL_get1_groups() returns the set of supported groups sent by a client in the supported groups extension. It returns the total number of supported groups. The groups parameter can be NULL to simply return the number of groups for memory allocation purposes. The groups array is in the form of a set of group NIDs in preference order. It can return zero if the client did not send a supported groups extension.</p> <p>SSL_get_shared_group() returns shared group n for a server-side SSL ssl. If n is -1 then the total number of shared groups is returned, which may be zero. Other than for diagnostic purposes, most applications will only be interested in the first shared group so n is normally set to zero. If the value n is out of range, NID_undef is returned.</p> <p>All these functions are implemented as macros.</p> <p>The curve functions are synonyms for the equivalently named group functions and are identical in every respect. They exist because, prior to TLS1.3, there was only the concept of supported curves. In TLS1.3 this was renamed to supported groups, and extended to include Diffie Hellman groups. The group functions should be used in preference.</p>"},{"location":"man3/SSL_CTX_set1_curves/#notes","title":"NOTES","text":"<p>If an application wishes to make use of several of these functions for configuration purposes either on a command line or in a file it should consider using the SSL_CONF interface instead of manually parsing options.</p>"},{"location":"man3/SSL_CTX_set1_curves/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set1_groups(), SSL_CTX_set1_groups_list(), SSL_set1_groups() and SSL_set1_groups_list(), return 1 for success and 0 for failure.</p> <p>SSL_get1_groups() returns the number of groups, which may be zero.</p> <p>SSL_get_shared_group() returns the NID of shared group n or NID_undef if there is no shared group n; or the total number of shared groups if n is -1.</p> <p>When called on a client ssl, SSL_get_shared_group() has no meaning and returns -1.</p>"},{"location":"man3/SSL_CTX_set1_curves/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_add_extra_chain_cert(3)</p>"},{"location":"man3/SSL_CTX_set1_curves/#history","title":"HISTORY","text":"<p>The curve functions were added in OpenSSL 1.0.2. The equivalent group functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set1_curves/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set1_sigalgs/","title":"SSL_CTX_set1_sigalgs","text":""},{"location":"man3/SSL_CTX_set1_sigalgs/#name","title":"NAME","text":"<p>SSL_CTX_set1_sigalgs, SSL_set1_sigalgs, SSL_CTX_set1_sigalgs_list, SSL_set1_sigalgs_list, SSL_CTX_set1_client_sigalgs, SSL_set1_client_sigalgs, SSL_CTX_set1_client_sigalgs_list, SSL_set1_client_sigalgs_list - set supported signature algorithms</p>"},{"location":"man3/SSL_CTX_set1_sigalgs/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set1_sigalgs(SSL_CTX *ctx, const int *slist, long slistlen);\nlong SSL_set1_sigalgs(SSL *ssl, const int *slist, long slistlen);\nlong SSL_CTX_set1_sigalgs_list(SSL_CTX *ctx, const char *str);\nlong SSL_set1_sigalgs_list(SSL *ssl, const char *str);\n\nlong SSL_CTX_set1_client_sigalgs(SSL_CTX *ctx, const int *slist, long slistlen);\nlong SSL_set1_client_sigalgs(SSL *ssl, const int *slist, long slistlen);\nlong SSL_CTX_set1_client_sigalgs_list(SSL_CTX *ctx, const char *str);\nlong SSL_set1_client_sigalgs_list(SSL *ssl, const char *str);\n</code></pre>"},{"location":"man3/SSL_CTX_set1_sigalgs/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set1_sigalgs() and SSL_set1_sigalgs() set the supported signature algorithms for ctx or ssl. The array slist of length slistlen must consist of pairs of NIDs corresponding to digest and public key algorithms.</p> <p>SSL_CTX_set1_sigalgs_list() and SSL_set1_sigalgs_list() set the supported signature algorithms for ctx or ssl. The str parameter must be a null terminated string consisting of a colon separated list of elements, where each element is either a combination of a public key algorithm and a digest separated by +, or a TLS 1.3-style named SignatureScheme such as rsa_pss_pss_sha256.</p> <p>SSL_CTX_set1_client_sigalgs(), SSL_set1_client_sigalgs(), SSL_CTX_set1_client_sigalgs_list() and SSL_set1_client_sigalgs_list() set signature algorithms related to client authentication, otherwise they are identical to SSL_CTX_set1_sigalgs(), SSL_set1_sigalgs(), SSL_CTX_set1_sigalgs_list() and SSL_set1_sigalgs_list().</p> <p>All these functions are implemented as macros. The signature algorithm parameter (integer array or string) is not freed: the application should free it, if necessary.</p>"},{"location":"man3/SSL_CTX_set1_sigalgs/#notes","title":"NOTES","text":"<p>If an application wishes to allow the setting of signature algorithms as one of many user configurable options it should consider using the more flexible SSL_CONF API instead.</p> <p>The signature algorithms set by a client are used directly in the supported signature algorithm in the client hello message.</p> <p>The supported signature algorithms set by a server are not sent to the client but are used to determine the set of shared signature algorithms and (if server preferences are set with SSL_OP_CIPHER_SERVER_PREFERENCE) their order.</p> <p>The client authentication signature algorithms set by a server are sent in a certificate request message if client authentication is enabled, otherwise they are unused.</p> <p>Similarly client authentication signature algorithms set by a client are used to determined the set of client authentication shared signature algorithms.</p> <p>Signature algorithms will neither be advertised nor used if the security level prohibits them (for example SHA1 if the security level is 4 or more).</p> <p>Currently the NID_md5, NID_sha1, NID_sha224, NID_sha256, NID_sha384 and NID_sha512 digest NIDs are supported and the public key algorithm NIDs EVP_PKEY_RSA, EVP_PKEY_RSA_PSS, EVP_PKEY_DSA and EVP_PKEY_EC.</p> <p>The short or long name values for digests can be used in a string (for example \"MD5\", \"SHA1\", \"SHA224\", \"SHA256\", \"SHA384\", \"SHA512\") and the public key algorithm strings \"RSA\", \"RSA-PSS\", \"DSA\" or \"ECDSA\".</p> <p>The TLS 1.3 signature scheme names (such as \"rsa_pss_pss_sha256\") can also be used with the _list forms of the API.</p> <p>The use of MD5 as a digest is strongly discouraged due to security weaknesses.</p>"},{"location":"man3/SSL_CTX_set1_sigalgs/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 for failure.</p>"},{"location":"man3/SSL_CTX_set1_sigalgs/#examples","title":"EXAMPLES","text":"<p>Set supported signature algorithms to SHA256 with ECDSA and SHA256 with RSA using an array:</p> <pre><code>const int slist[] = {NID_sha256, EVP_PKEY_EC, NID_sha256, EVP_PKEY_RSA};\n\nSSL_CTX_set1_sigalgs(ctx, slist, 4);\n</code></pre> <p>Set supported signature algorithms to SHA256 with ECDSA and SHA256 with RSA using a string:</p> <pre><code>SSL_CTX_set1_sigalgs_list(ctx, \"ECDSA+SHA256:RSA+SHA256\");\n</code></pre>"},{"location":"man3/SSL_CTX_set1_sigalgs/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_shared_sigalgs(3), SSL_CONF_CTX_new(3)</p>"},{"location":"man3/SSL_CTX_set1_sigalgs/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/","title":"SSL_CTX_set1_verify_cert_store","text":""},{"location":"man3/SSL_CTX_set1_verify_cert_store/#name","title":"NAME","text":"<p>SSL_CTX_set0_verify_cert_store, SSL_CTX_set1_verify_cert_store, SSL_CTX_set0_chain_cert_store, SSL_CTX_set1_chain_cert_store, SSL_set0_verify_cert_store, SSL_set1_verify_cert_store, SSL_set0_chain_cert_store, SSL_set1_chain_cert_store, SSL_CTX_get0_verify_cert_store, SSL_CTX_get0_chain_cert_store, SSL_get0_verify_cert_store, SSL_get0_chain_cert_store - set certificate verification or chain store</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set0_verify_cert_store(SSL_CTX *ctx, X509_STORE *st);\nint SSL_CTX_set1_verify_cert_store(SSL_CTX *ctx, X509_STORE *st);\nint SSL_CTX_set0_chain_cert_store(SSL_CTX *ctx, X509_STORE *st);\nint SSL_CTX_set1_chain_cert_store(SSL_CTX *ctx, X509_STORE *st);\nint SSL_CTX_get0_verify_cert_store(SSL_CTX *ctx, X509_STORE **st);\nint SSL_CTX_get0_chain_cert_store(SSL_CTX *ctx, X509_STORE **st);\n\nint SSL_set0_verify_cert_store(SSL *ctx, X509_STORE *st);\nint SSL_set1_verify_cert_store(SSL *ctx, X509_STORE *st);\nint SSL_set0_chain_cert_store(SSL *ctx, X509_STORE *st);\nint SSL_set1_chain_cert_store(SSL *ctx, X509_STORE *st);\nint SSL_get0_verify_cert_store(SSL *ctx, X509_STORE **st);\nint SSL_get0_chain_cert_store(SSL *ctx, X509_STORE **st);\n</code></pre>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set0_verify_cert_store() and SSL_CTX_set1_verify_cert_store() set the certificate store used for certificate verification to st.</p> <p>SSL_CTX_set0_chain_cert_store() and SSL_CTX_set1_chain_cert_store() set the certificate store used for certificate chain building to st.</p> <p>SSL_set0_verify_cert_store(), SSL_set1_verify_cert_store(), SSL_set0_chain_cert_store() and SSL_set1_chain_cert_store() are similar except they apply to SSL structure ssl.</p> <p>SSL_CTX_get0_verify_chain_store(), SSL_get0_verify_chain_store(), SSL_CTX_get0_chain_cert_store() and SSL_get0_chain_cert_store() retrieve the objects previously set via the above calls. A pointer to the object (or NULL if no such object has been set) is written to *st.</p> <p>All these functions are implemented as macros. Those containing a 1 increment the reference count of the supplied store so it must be freed at some point after the operation. Those containing a 0 do not increment reference counts and the supplied store MUST NOT be freed after the operation.</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#notes","title":"NOTES","text":"<p>The stores pointers associated with an SSL_CTX structure are copied to any SSL structures when SSL_new() is called. As a result SSL structures will not be affected if the parent SSL_CTX store pointer is set to a new value.</p> <p>The verification store is used to verify the certificate chain sent by the peer: that is an SSL/TLS client will use the verification store to verify the server's certificate chain and a SSL/TLS server will use it to verify any client certificate chain.</p> <p>The chain store is used to build the certificate chain.</p> <p>If the mode SSL_MODE_NO_AUTO_CHAIN is set or a certificate chain is configured already (for example using the functions such as SSL_CTX_add1_chain_cert(3) or SSL_CTX_add_extra_chain_cert(3)) then automatic chain building is disabled.</p> <p>If the mode SSL_MODE_NO_AUTO_CHAIN is set then automatic chain building is disabled.</p> <p>If the chain or the verification store is not set then the store associated with the parent SSL_CTX is used instead to retain compatibility with previous versions of OpenSSL.</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 for success and 0 for failure.</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_add_extra_chain_cert(3) SSL_CTX_set0_chain(3) SSL_CTX_set1_chain(3) SSL_CTX_add0_chain_cert(3) SSL_CTX_add1_chain_cert(3) SSL_set0_chain(3) SSL_set1_chain(3) SSL_add0_chain_cert(3) SSL_add1_chain_cert(3) SSL_CTX_build_cert_chain(3) SSL_build_cert_chain(3)</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/SSL_CTX_set1_verify_cert_store/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/","title":"SSL_CTX_set_alpn_select_cb","text":""},{"location":"man3/SSL_CTX_set_alpn_select_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_alpn_protos, SSL_set_alpn_protos, SSL_CTX_set_alpn_select_cb, SSL_CTX_set_next_proto_select_cb, SSL_CTX_set_next_protos_advertised_cb, SSL_select_next_proto, SSL_get0_alpn_selected, SSL_get0_next_proto_negotiated - handle application layer protocol negotiation (ALPN)</p>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,\n                            unsigned int protos_len);\nint SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,\n                        unsigned int protos_len);\nvoid SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,\n                                int (*cb) (SSL *ssl,\n                                           const unsigned char **out,\n                                           unsigned char *outlen,\n                                           const unsigned char *in,\n                                           unsigned int inlen,\n                                           void *arg), void *arg);\nvoid SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,\n                            unsigned int *len);\n\nvoid SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *ctx,\n                                           int (*cb)(SSL *ssl,\n                                                     const unsigned char **out,\n                                                     unsigned int *outlen,\n                                                     void *arg),\n                                           void *arg);\nvoid SSL_CTX_set_next_proto_select_cb(SSL_CTX *ctx,\n                              int (*cb)(SSL *s,\n                                        unsigned char **out,\n                                        unsigned char *outlen,\n                                        const unsigned char *in,\n                                        unsigned int inlen,\n                                        void *arg),\n                              void *arg);\nint SSL_select_next_proto(unsigned char **out, unsigned char *outlen,\n                          const unsigned char *server,\n                          unsigned int server_len,\n                          const unsigned char *client,\n                          unsigned int client_len)\nvoid SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,\n                            unsigned *len);\n</code></pre>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() are used by the client to set the list of protocols available to be negotiated. The protos must be in protocol-list format, described below. The length of protos is specified in protos_len.</p> <p>SSL_CTX_set_alpn_select_cb() sets the application callback cb used by a server to select which protocol to use for the incoming connection. When cb is NULL, ALPN is not used. The arg value is a pointer which is passed to the application callback.</p> <p>cb is the application defined callback. The in, inlen parameters are a vector in protocol-list format. The value of the out, outlen vector should be set to the value of a single protocol selected from the in, inlen vector. The out buffer may point directly into in, or to a buffer that outlives the handshake. The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb().</p> <p>SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in out, outlen. The out value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in out, outlen. This function can also be used in the NPN callback.</p> <p>SSL_CTX_set_next_proto_select_cb() sets a callback cb that is called when a client needs to select a protocol from the server's provided list, and a user-defined pointer argument arg which will be passed to this callback. For the callback itself, out must be set to point to the selected protocol (which may be within in). The length of the protocol name must be written into outlen. The server's advertised protocols are provided in in and inlen. The callback can assume that in is syntactically valid. The client must select a protocol. It is fatal to the connection if this callback returns a value other than SSL_TLSEXT_ERR_OK. The arg parameter is the pointer set via SSL_CTX_set_next_proto_select_cb().</p> <p>SSL_CTX_set_next_protos_advertised_cb() sets a callback cb that is called when a TLS server needs a list of supported protocols for Next Protocol Negotiation. The returned list must be in protocol-list format, described below.  The list is returned by setting out to point to it and outlen to its length. This memory will not be modified, but the SSL does keep a reference to it. The callback should return SSL_TLSEXT_ERR_OK if it wishes to advertise. Otherwise, no such extension will be included in the ServerHello.</p> <p>SSL_get0_alpn_selected() returns a pointer to the selected protocol in data with length len. It is not NUL-terminated. data is set to NULL and len is set to 0 if no protocol has been selected. data must not be freed.</p> <p>SSL_get0_next_proto_negotiated() sets data and len to point to the client's requested protocol for this connection. If the client did not request any protocol or NPN is not enabled, then data is set to NULL and len to 0. Note that the client can request any protocol it chooses. The value returned from this function need not be a member of the list of supported protocols provided by the callback.</p>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/#notes","title":"NOTES","text":"<p>The protocol-lists must be in wire-format, which is defined as a vector of nonempty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable.</p> <p>Example:</p> <pre><code>unsigned char vector[] = {\n    6, 's', 'p', 'd', 'y', '/', '1',\n    8, 'h', 't', 't', 'p', '/', '1', '.', '1'\n};\nunsigned int length = sizeof(vector);\n</code></pre> <p>The ALPN callback is executed after the servername callback; as that servername callback may update the SSL_CTX, and subsequently, the ALPN callback.</p> <p>If there is no ALPN proposed in the ClientHello, the ALPN callback is not invoked.</p>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() return 0 on success, and non-0 on failure. WARNING: these functions reverse the return value convention.</p> <p>SSL_select_next_proto() returns one of the following:</p> <ul> <li> <p>OPENSSL_NPN_NEGOTIATED</p> <p>A match was found and is returned in out, outlen.</p> </li> <li> <p>OPENSSL_NPN_NO_OVERLAP</p> <p>No match was found. The first item in client, client_len is returned in out, outlen.</p> </li> </ul> <p>The ALPN select callback cb, must return one of the following:</p> <ul> <li> <p>SSL_TLSEXT_ERR_OK</p> <p>ALPN protocol selected.</p> </li> <li> <p>SSL_TLSEXT_ERR_ALERT_FATAL</p> <p>There was no overlap between the client's supplied list and the server configuration.</p> </li> <li> <p>SSL_TLSEXT_ERR_NOACK</p> <p>ALPN protocol not selected, e.g., because no ALPN protocols are configured for this connection.</p> </li> </ul> <p>The callback set using SSL_CTX_set_next_proto_select_cb() should return SSL_TLSEXT_ERR_OK if successful. Any other value is fatal to the connection.</p> <p>The callback set using SSL_CTX_set_next_protos_advertised_cb() should return SSL_TLSEXT_ERR_OK if it wishes to advertise. Otherwise, no such extension will be included in the ServerHello.</p>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_tlsext_servername_callback(3), SSL_CTX_set_tlsext_servername_arg(3)</p>"},{"location":"man3/SSL_CTX_set_alpn_select_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_cert_cb/","title":"SSL_CTX_set_cert_cb","text":""},{"location":"man3/SSL_CTX_set_cert_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_cert_cb, SSL_set_cert_cb - handle certificate callback function</p>"},{"location":"man3/SSL_CTX_set_cert_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_cert_cb(SSL_CTX *c, int (*cert_cb)(SSL *ssl, void *arg),\n                         void *arg);\nvoid SSL_set_cert_cb(SSL *s, int (*cert_cb)(SSL *ssl, void *arg), void *arg);\n\nint (*cert_cb)(SSL *ssl, void *arg);\n</code></pre>"},{"location":"man3/SSL_CTX_set_cert_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_cert_cb() and SSL_set_cert_cb() sets the cert_cb() callback, arg value is pointer which is passed to the application callback.</p> <p>When cert_cb() is NULL, no callback function is used.</p> <p>cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue.</p>"},{"location":"man3/SSL_CTX_set_cert_cb/#notes","title":"NOTES","text":"<p>An application will typically call SSL_use_certificate() and SSL_use_PrivateKey() to set the end entity certificate and private key. It can add intermediate and optionally the root CA certificates using SSL_add1_chain_cert().</p> <p>It might also call SSL_certs_clear() to delete any certificates associated with the SSL object.</p> <p>The certificate callback functionality supersedes the (largely broken) functionality provided by the old client certificate callback interface. It is always called even is a certificate is already set so the callback can modify or delete the existing certificate.</p> <p>A more advanced callback might examine the handshake parameters and set whatever chain is appropriate. For example a legacy client supporting only TLSv1.0 might receive a certificate chain signed using SHA1 whereas a TLSv1.2 or later client which advertises support for SHA256 could receive a chain using SHA256.</p> <p>Normal server sanity checks are performed on any certificates set by the callback. So if an EC chain is set for a curve the client does not support it will not be used.</p>"},{"location":"man3/SSL_CTX_set_cert_cb/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_cert_cb() and SSL_set_cert_cb() do not return values.</p>"},{"location":"man3/SSL_CTX_set_cert_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_use_certificate(3), SSL_add1_chain_cert(3), SSL_get_client_CA_list(3), SSL_clear(3), SSL_free(3)</p>"},{"location":"man3/SSL_CTX_set_cert_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2014-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_cert_store/","title":"SSL_CTX_set_cert_store","text":""},{"location":"man3/SSL_CTX_set_cert_store/#name","title":"NAME","text":"<p>SSL_CTX_set_cert_store, SSL_CTX_set1_cert_store, SSL_CTX_get_cert_store - manipulate X509 certificate verification storage</p>"},{"location":"man3/SSL_CTX_set_cert_store/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_cert_store(SSL_CTX *ctx, X509_STORE *store);\nvoid SSL_CTX_set1_cert_store(SSL_CTX *ctx, X509_STORE *store);\nX509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_cert_store/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_cert_store() sets/replaces the certificate verification storage of ctx to/with store. If another X509_STORE object is currently set in ctx, it will be X509_STORE_free()ed.</p> <p>SSL_CTX_set1_cert_store() sets/replaces the certificate verification storage of ctx to/with store. The store's reference count is incremented. If another X509_STORE object is currently set in ctx, it will be X509_STORE_free()ed.</p> <p>SSL_CTX_get_cert_store() returns a pointer to the current certificate verification storage.</p>"},{"location":"man3/SSL_CTX_set_cert_store/#notes","title":"NOTES","text":"<p>In order to verify the certificates presented by the peer, trusted CA certificates must be accessed. These CA certificates are made available via lookup methods, handled inside the X509_STORE. From the X509_STORE the X509_STORE_CTX used when verifying certificates is created.</p> <p>Typically the trusted certificate store is handled indirectly via using SSL_CTX_load_verify_locations(3). Using the SSL_CTX_set_cert_store() and SSL_CTX_get_cert_store() functions it is possible to manipulate the X509_STORE object beyond the SSL_CTX_load_verify_locations(3) call.</p> <p>Currently no detailed documentation on how to use the X509_STORE object is available. Not all members of the X509_STORE are used when the verification takes place. So will e.g. the verify_callback() be overridden with the verify_callback() set via the SSL_CTX_set_verify(3) family of functions. This document must therefore be updated when documentation about the X509_STORE object and its handling becomes available.</p> <p>SSL_CTX_set_cert_store() does not increment the store's reference count, so it should not be used to assign an X509_STORE that is owned by another SSL_CTX.</p> <p>To share X509_STOREs between two SSL_CTXs, use SSL_CTX_get_cert_store() to get the X509_STORE from the first SSL_CTX, and then use SSL_CTX_set1_cert_store() to assign to the second SSL_CTX and increment the reference count of the X509_STORE.</p>"},{"location":"man3/SSL_CTX_set_cert_store/#restrictions","title":"RESTRICTIONS","text":"<p>The X509_STORE structure used by an SSL_CTX is used for verifying peer certificates and building certificate chains, it is also shared by every child SSL structure. Applications wanting finer control can use functions such as SSL_CTX_set1_verify_cert_store() instead.</p>"},{"location":"man3/SSL_CTX_set_cert_store/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_cert_store() does not return diagnostic output.</p> <p>SSL_CTX_set1_cert_store() does not return diagnostic output.</p> <p>SSL_CTX_get_cert_store() returns the current setting.</p>"},{"location":"man3/SSL_CTX_set_cert_store/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_load_verify_locations(3), SSL_CTX_set_verify(3)</p>"},{"location":"man3/SSL_CTX_set_cert_store/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/","title":"SSL_CTX_set_cert_verify_callback","text":""},{"location":"man3/SSL_CTX_set_cert_verify_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_cert_verify_callback - set peer certificate verification procedure</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,\n                                      int (*callback)(X509_STORE_CTX *, void *),\n                                      void *arg);\n</code></pre>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_cert_verify_callback() sets the verification callback function for ctx. SSL objects that are created from ctx inherit the setting valid at the time when SSL_new(3) is called.</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#notes","title":"NOTES","text":"<p>Whenever a certificate is verified during a SSL/TLS handshake, a verification function is called. If the application does not explicitly specify a verification callback function, the built-in verification function is used. If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback(), the supplied callback function is called instead. By setting callback to NULL, the default behaviour is restored.</p> <p>When the verification must be performed, callback will be called with the arguments callback(X509_STORE_CTX *x509_store_ctx, void *arg). The argument arg is specified by the application when setting callback.</p> <p>callback should return 1 to indicate verification success and 0 to indicate verification failure. If SSL_VERIFY_PEER is set and callback returns 0, the handshake will fail. As the verification procedure may allow the connection to continue in the case of failure (by always returning 1) the verification result must be set in any case using the error member of x509_store_ctx so that the calling application will be informed about the detailed result of the verification procedure!</p> <p>Within x509_store_ctx, callback has access to the verify_callback function set using SSL_CTX_set_verify(3).</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_cert_verify_callback() does not return a value.</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#warnings","title":"WARNINGS","text":"<p>Do not mix the verification callback described in this function with the verify_callback function called during the verification process. The latter is set using the SSL_CTX_set_verify(3) family of functions.</p> <p>Providing a complete verification procedure including certificate purpose settings etc is a complex task. The built-in procedure is quite powerful and in most cases it should be sufficient to modify its behaviour using the verify_callback function.</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#bugs","title":"BUGS","text":"<p>SSL_CTX_set_cert_verify_callback() does not provide diagnostic information.</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_verify(3), SSL_get_verify_result(3), SSL_CTX_load_verify_locations(3)</p>"},{"location":"man3/SSL_CTX_set_cert_verify_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_cipher_list/","title":"SSL_CTX_set_cipher_list","text":""},{"location":"man3/SSL_CTX_set_cipher_list/#name","title":"NAME","text":"<p>SSL_CTX_set_cipher_list, SSL_set_cipher_list, SSL_CTX_set_ciphersuites, SSL_set_ciphersuites - choose list of available SSL_CIPHERs</p>"},{"location":"man3/SSL_CTX_set_cipher_list/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str);\nint SSL_set_cipher_list(SSL *ssl, const char *str);\n\nint SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str);\nint SSL_set_ciphersuites(SSL *s, const char *str);\n</code></pre>"},{"location":"man3/SSL_CTX_set_cipher_list/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_cipher_list() sets the list of available ciphers (TLSv1.2 and below) for ctx using the control string str. The format of the string is described in ciphers(1). The list of ciphers is inherited by all ssl objects created from ctx. This function does not impact TLSv1.3 ciphersuites. Use SSL_CTX_set_ciphersuites() to configure those.</p> <p>SSL_set_cipher_list() sets the list of ciphers (TLSv1.2 and below) only for ssl.</p> <p>SSL_CTX_set_ciphersuites() is used to configure the available TLSv1.3 ciphersuites for ctx. This is a simple colon (\":\") separated list of TLSv1.3 ciphersuite names in order of preference. Valid TLSv1.3 ciphersuite names are:</p> <ul> <li>TLS_AES_128_GCM_SHA256</li> <li>TLS_AES_256_GCM_SHA384</li> <li>TLS_CHACHA20_POLY1305_SHA256</li> <li>TLS_AES_128_CCM_SHA256</li> <li>TLS_AES_128_CCM_8_SHA256</li> </ul> <p>An empty list is permissible. The default value for the this setting is:</p> <p>\"TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256\"</p> <p>SSL_set_ciphersuites() is the same as SSL_CTX_set_ciphersuites() except it configures the ciphersuites for ssl.</p>"},{"location":"man3/SSL_CTX_set_cipher_list/#notes","title":"NOTES","text":"<p>The control string str for SSL_CTX_set_cipher_list() and SSL_set_cipher_list() should be universally usable and not depend on details of the library configuration (ciphers compiled in). Thus no syntax checking takes place. Items that are not recognized, because the corresponding ciphers are not compiled in or because they are mistyped, are simply ignored. Failure is only flagged if no ciphers could be collected at all.</p> <p>It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient unless the security level excludes it. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key.</p> <p>A RSA cipher can only be chosen, when a RSA certificate is available. RSA ciphers using DHE need a certificate and key and additional DH-parameters (see SSL_CTX_set_tmp_dh_callback(3)).</p> <p>A DSA cipher can only be chosen, when a DSA certificate is available. DSA ciphers always use DH key exchange and therefore need DH-parameters (see SSL_CTX_set_tmp_dh_callback(3)).</p> <p>When these conditions are not met for any cipher in the list (e.g. a client only supports export RSA ciphers with an asymmetric key length of 512 bits and the server is not configured to use temporary RSA keys), the \"no shared cipher\" (SSL_R_NO_SHARED_CIPHER) error is generated and the handshake will fail.</p>"},{"location":"man3/SSL_CTX_set_cipher_list/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_cipher_list() and SSL_set_cipher_list() return 1 if any cipher could be selected and 0 on complete failure.</p> <p>SSL_CTX_set_ciphersuites() and SSL_set_ciphersuites() return 1 if the requested ciphersuite list was configured, and 0 otherwise.</p>"},{"location":"man3/SSL_CTX_set_cipher_list/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_ciphers(3), SSL_CTX_use_certificate(3), SSL_CTX_set_tmp_dh_callback(3), ciphers(1)</p>"},{"location":"man3/SSL_CTX_set_cipher_list/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/","title":"SSL_CTX_set_client_cert_cb","text":""},{"location":"man3/SSL_CTX_set_client_cert_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_client_cert_cb, SSL_CTX_get_client_cert_cb - handle client certificate callback function</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,\n                                int (*client_cert_cb)(SSL *ssl, X509 **x509,\n                                                      EVP_PKEY **pkey));\nint (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx))(SSL *ssl, X509 **x509,\n                                                EVP_PKEY **pkey);\nint (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey);\n</code></pre>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_client_cert_cb() sets the client_cert_cb() callback, that is called when a client certificate is requested by a server and no certificate was yet set for the SSL object.</p> <p>When client_cert_cb() is NULL, no callback function is used.</p> <p>SSL_CTX_get_client_cert_cb() returns a pointer to the currently set callback function.</p> <p>client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and \"1\" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, \"0\" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue.</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#notes","title":"NOTES","text":"<p>During a handshake (or renegotiation) a server may request a certificate from the client. A client certificate must only be sent, when the server did send the request.</p> <p>When a certificate was set using the SSL_CTX_use_certificate(3) family of functions, it will be sent to the server. The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server. This constraint is violated by the default behavior of the OpenSSL library. Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent.</p> <p>If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called. If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate() and SSL_use_private_key() functions. Thus it will permanently install the certificate and key for this SSL object. It will not be reset by calling SSL_clear(3). If the callback returns no certificate, the OpenSSL library will not send a certificate.</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_get_client_cert_cb() returns function pointer of client_cert_cb() or NULL if the callback is not set.</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#bugs","title":"BUGS","text":"<p>The client_cert_cb() cannot return a complete certificate chain, it can only return one client certificate. If the chain only has a length of 2, the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server. For a longer chain, the client must send the complete chain (with the option to leave out the root CA certificate). This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object (resulting in having to add CA certificates that otherwise maybe would not be trusted), or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert(3) function, which is only available for the SSL_CTX object as a whole and that therefore probably can only apply for one client certificate, making the concept of the callback function (to allow the choice from several certificates) questionable.</p> <p>Once the SSL object has been used in conjunction with the callback function, the certificate will be set for the SSL object and will not be cleared even when SSL_clear(3) is being called. It is therefore mandatory to destroy the SSL object using SSL_free(3) and create a new one to return to the previous state.</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_use_certificate(3), SSL_CTX_add_extra_chain_cert(3), SSL_get_client_CA_list(3), SSL_clear(3), SSL_free(3)</p>"},{"location":"man3/SSL_CTX_set_client_cert_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/","title":"SSL_CTX_set_client_hello_cb","text":""},{"location":"man3/SSL_CTX_set_client_hello_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_client_hello_cb, SSL_client_hello_cb_fn, SSL_client_hello_isv2, SSL_client_hello_get0_legacy_version, SSL_client_hello_get0_random, SSL_client_hello_get0_session_id, SSL_client_hello_get0_ciphers, SSL_client_hello_get0_compression_methods, SSL_client_hello_get1_extensions_present, SSL_client_hello_get0_ext - callback functions for early server-side ClientHello processing</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>typedef int (*SSL_client_hello_cb_fn)(SSL *s, int *al, void *arg);\nvoid SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn *f,\n                                 void *arg);\nint SSL_client_hello_isv2(SSL *s);\nunsigned int SSL_client_hello_get0_legacy_version(SSL *s);\nsize_t SSL_client_hello_get0_random(SSL *s, const unsigned char **out);\nsize_t SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out);\nsize_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out);\nsize_t SSL_client_hello_get0_compression_methods(SSL *s,\n                                                 const unsigned char **out);\nint SSL_client_hello_get1_extensions_present(SSL *s, int **out,\n                                             size_t *outlen);\nint SSL_client_hello_get0_ext(SSL *s, int type, const unsigned char **out,\n                              size_t *outlen);\n</code></pre>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_client_hello_cb() sets the callback function, which is automatically called during the early stages of ClientHello processing on the server. The argument supplied when setting the callback is passed back to the callback at runtime.  A callback that returns failure (0) will cause the connection to terminate, and callbacks returning failure should indicate what alert value is to be sent in the al parameter.  A callback may also return a negative value to suspend the handshake, and the handshake function will return immediately.  SSL_get_error(3) will return SSL_ERROR_WANT_CLIENT_HELLO_CB to indicate that the handshake was suspended. It is the job of the ClientHello callback to store information about the state of the last call if needed to continue.  On the next call into the handshake function, the ClientHello callback will be called again, and, if it returns success, normal handshake processing will continue from that point.</p> <p>SSL_client_hello_isv2() indicates whether the ClientHello was carried in a SSLv2 record and is in the SSLv2 format.  The SSLv2 format has substantial differences from the normal SSLv3 format, including using three bytes per cipher suite, and not allowing extensions.  Additionally, the SSLv2 format 'challenge' field is exposed via SSL_client_hello_get0_random(), padded to SSL3_RANDOM_SIZE bytes with zeros if needed.  For SSLv2 format ClientHellos, SSL_client_hello_get0_compression_methods() returns a dummy list that only includes the null compression method, since the SSLv2 format does not include a mechanism by which to negotiate compression.</p> <p>SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), and SSL_client_hello_get0_compression_methods() provide access to the corresponding ClientHello fields, returning the field length and optionally setting an out pointer to the octets of that field.</p> <p>Similarly, SSL_client_hello_get0_ext() provides access to individual extensions from the ClientHello on a per-extension basis.  For the provided wire protocol extension type value, the extension value and length are returned in the output parameters (if present).</p> <p>SSL_client_hello_get1_extensions_present() can be used prior to SSL_client_hello_get0_ext(), to determine which extensions are present in the ClientHello before querying for them.  The out and outlen parameters are both required, and on success the caller must release the storage allocated for *out using OPENSSL_free().  The contents of *out is an array of integers holding the numerical value of the TLS extension types in the order they appear in the ClientHello.  *outlen contains the number of elements in the array. In situations when the ClientHello has no extensions, the function will return success with *out set to NULL and *outlen set to 0.</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#notes","title":"NOTES","text":"<p>The ClientHello callback provides a vast window of possibilities for application code to affect the TLS handshake.  A primary use of the callback is to allow the server to examine the server name indication extension provided by the client in order to select an appropriate certificate to present, and make other configuration adjustments relevant to that server name and its configuration.  Such configuration changes can include swapping out the associated SSL_CTX pointer, modifying the server's list of permitted TLS versions, changing the server's cipher list in response to the client's cipher list, etc.</p> <p>It is also recommended that applications utilize a ClientHello callback and not use a servername callback, in order to avoid unexpected behavior that occurs due to the relative order of processing between things like session resumption and the historical servername callback.</p> <p>The SSL_client_hello_* family of functions may only be called from code executing within a ClientHello callback.</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#return-values","title":"RETURN VALUES","text":"<p>The application's supplied ClientHello callback returns SSL_CLIENT_HELLO_SUCCESS on success, SSL_CLIENT_HELLO_ERROR on failure, and SSL_CLIENT_HELLO_RETRY to suspend processing.</p> <p>SSL_client_hello_isv2() returns 1 for SSLv2-format ClientHellos and 0 otherwise.</p> <p>SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), and SSL_client_hello_get0_compression_methods() return the length of the corresponding ClientHello fields.  If zero is returned, the output pointer should not be assumed to be valid.</p> <p>SSL_client_hello_get0_ext() returns 1 if the extension of type 'type' is present, and 0 otherwise.</p> <p>SSL_client_hello_get1_extensions_present() returns 1 on success and 0 on failure.</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_tlsext_servername_callback(3), SSL_bytes_to_cipher_list</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#history","title":"HISTORY","text":"<p>The SSL ClientHello callback, SSL_client_hello_isv2(), SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), SSL_client_hello_get0_compression_methods(), SSL_client_hello_get0_ext(), and SSL_client_hello_get1_extensions_present() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_client_hello_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/","title":"SSL_CTX_set_ct_validation_callback","text":""},{"location":"man3/SSL_CTX_set_ct_validation_callback/#name","title":"NAME","text":"<p>ssl_ct_validation_cb, SSL_enable_ct, SSL_CTX_enable_ct, SSL_disable_ct, SSL_CTX_disable_ct, SSL_set_ct_validation_callback, SSL_CTX_set_ct_validation_callback, SSL_ct_is_enabled, SSL_CTX_ct_is_enabled - control Certificate Transparency policy</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*ssl_ct_validation_cb)(const CT_POLICY_EVAL_CTX *ctx,\n                                   const STACK_OF(SCT) *scts, void *arg);\n\nint SSL_enable_ct(SSL *s, int validation_mode);\nint SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode);\nint SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,\n                                   void *arg);\nint SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,\n                                       ssl_ct_validation_cb callback,\n                                       void *arg);\nvoid SSL_disable_ct(SSL *s);\nvoid SSL_CTX_disable_ct(SSL_CTX *ctx);\nint SSL_ct_is_enabled(const SSL *s);\nint SSL_CTX_ct_is_enabled(const SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#description","title":"DESCRIPTION","text":"<p>SSL_enable_ct() and SSL_CTX_enable_ct() enable the processing of signed certificate timestamps (SCTs) either for a given SSL connection or for all connections that share the given SSL context, respectively. This is accomplished by setting a built-in CT validation callback. The behaviour of the callback is determined by the validation_mode argument, which can be either of SSL_CT_VALIDATION_PERMISSIVE or SSL_CT_VALIDATION_STRICT as described below.</p> <p>If validation_mode is equal to SSL_CT_VALIDATION_STRICT, then in a full TLS handshake with the verification mode set to SSL_VERIFY_PEER, if the peer presents no valid SCTs the handshake will be aborted. If the verification mode is SSL_VERIFY_NONE, the handshake will continue despite lack of valid SCTs. However, in that case if the verification status before the built-in callback was X509_V_OK it will be set to X509_V_ERR_NO_VALID_SCTS after the callback. Applications can call SSL_get_verify_result(3) to check the status at handshake completion, even after session resumption since the verification status is part of the saved session state. See SSL_set_verify(3), &lt;SSL_get_verify_result(3)&gt;, SSL_session_reused(3).</p> <p>If validation_mode is equal to SSL_CT_VALIDATION_PERMISSIVE, then the handshake continues, and the verification status is not modified, regardless of the validation status of any SCTs. The application can still inspect the validation status of the SCTs at handshake completion. Note that with session resumption there will not be any SCTs presented during the handshake. Therefore, in applications that delay SCT policy enforcement until after handshake completion, such delayed SCT checks should only be performed when the session is not resumed.</p> <p>SSL_set_ct_validation_callback() and SSL_CTX_set_ct_validation_callback() register a custom callback that may implement a different policy than either of the above. This callback can examine the peer's SCTs and determine whether they are sufficient to allow the connection to continue. The TLS handshake is aborted if the verification mode is not SSL_VERIFY_NONE and the callback returns a non-positive result.</p> <p>An arbitrary callback context argument, arg, can be passed in when setting the callback. This will be passed to the callback whenever it is invoked. Ownership of this context remains with the caller.</p> <p>If no callback is set, SCTs will not be requested and Certificate Transparency validation will not occur.</p> <p>No callback will be invoked when the peer presents no certificate, e.g. by employing an anonymous (aNULL) cipher suite. In that case the handshake continues as it would had no callback been requested. Callbacks are also not invoked when the peer certificate chain is invalid or validated via DANE-TA(2) or DANE-EE(3) TLSA records which use a private X.509 PKI, or no X.509 PKI at all, respectively. Clients that require SCTs are expected to not have enabled any aNULL ciphers nor to have specified server verification via DANE-TA(2) or DANE-EE(3) TLSA records.</p> <p>SSL_disable_ct() and SSL_CTX_disable_ct() turn off CT processing, whether enabled via the built-in or the custom callbacks, by setting a NULL callback. These may be implemented as macros.</p> <p>SSL_ct_is_enabled() and SSL_CTX_ct_is_enabled() return 1 if CT processing is enabled via either SSL_enable_ct() or a non-null custom callback, and 0 otherwise.</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#notes","title":"NOTES","text":"<p>When SCT processing is enabled, OCSP stapling will be enabled. This is because one possible source of SCTs is the OCSP response from a server.</p> <p>The time returned by SSL_SESSION_get_time() will be used to evaluate whether any presented SCTs have timestamps that are in the future (and therefore invalid).</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#restrictions","title":"RESTRICTIONS","text":"<p>Certificate Transparency validation cannot be enabled and so a callback cannot be set if a custom client extension handler has been registered to handle SCT extensions (TLSEXT_TYPE_signed_certificate_timestamp).</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_enable_ct(), SSL_CTX_enable_ct(), SSL_CTX_set_ct_validation_callback() and SSL_set_ct_validation_callback() return 1 if the callback is successfully set. They return 0 if an error occurs, e.g. a custom client extension handler has been setup to handle SCTs.</p> <p>SSL_disable_ct() and SSL_CTX_disable_ct() do not return a result.</p> <p>SSL_CTX_ct_is_enabled() and SSL_ct_is_enabled() return a 1 if a non-null CT validation callback is set, or 0 if no callback (or equivalently a NULL callback) is set.</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), &lt;SSL_get_verify_result(3)&gt;, SSL_session_reused(3), SSL_set_verify(3), SSL_CTX_set_verify(3), SSL_SESSION_get_time(3)</p>"},{"location":"man3/SSL_CTX_set_ct_validation_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/","title":"SSL_CTX_set_ctlog_list_file","text":""},{"location":"man3/SSL_CTX_set_ctlog_list_file/#name","title":"NAME","text":"<p>SSL_CTX_set_default_ctlog_list_file, SSL_CTX_set_ctlog_list_file - load a Certificate Transparency log list from a file</p>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx);\nint SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path);\n</code></pre>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_default_ctlog_list_file() loads a list of Certificate Transparency (CT) logs from the default file location, \"ct_log_list.cnf\", found in the directory where OpenSSL is installed.</p> <p>SSL_CTX_set_ctlog_list_file() loads a list of CT logs from a specific path. See CTLOG_STORE_new(3) for the file format.</p>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/#notes","title":"NOTES","text":"<p>These functions will not clear the existing CT log list - it will be appended to. To replace the existing list, use SSL_CTX_set0_ctlog_store first.</p> <p>If an error occurs whilst parsing a particular log entry in the file, that log entry will be skipped.</p>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_default_ctlog_list_file() and SSL_CTX_set_ctlog_list_file() return 1 if the log list is successfully loaded, and 0 if an error occurs. In the case of an error, the log list may have been partially loaded.</p>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_ct_validation_callback(3), CTLOG_STORE_new(3)</p>"},{"location":"man3/SSL_CTX_set_ctlog_list_file/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/","title":"SSL_CTX_set_default_passwd_cb","text":""},{"location":"man3/SSL_CTX_set_default_passwd_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_default_passwd_cb, SSL_CTX_set_default_passwd_cb_userdata, SSL_CTX_get_default_passwd_cb, SSL_CTX_get_default_passwd_cb_userdata, SSL_set_default_passwd_cb, SSL_set_default_passwd_cb_userdata, SSL_get_default_passwd_cb, SSL_get_default_passwd_cb_userdata - set or get passwd callback for encrypted PEM file handling</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);\nvoid SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);\npem_password_cb *SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx);\nvoid *SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx);\n\nvoid SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb);\nvoid SSL_set_default_passwd_cb_userdata(SSL *s, void *u);\npem_password_cb *SSL_get_default_passwd_cb(SSL *s);\nvoid *SSL_get_default_passwd_cb_userdata(SSL *s);\n</code></pre>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_default_passwd_cb() sets the default password callback called when loading/storing a PEM certificate with encryption.</p> <p>SSL_CTX_set_default_passwd_cb_userdata() sets a pointer to userdata, u, which will be provided to the password callback on invocation.</p> <p>SSL_CTX_get_default_passwd_cb() returns a function pointer to the password callback currently set in ctx. If no callback was explicitly set, the NULL pointer is returned.</p> <p>SSL_CTX_get_default_passwd_cb_userdata() returns a pointer to the userdata currently set in ctx. If no userdata was explicitly set, the NULL pointer is returned.</p> <p>SSL_set_default_passwd_cb(), SSL_set_default_passwd_cb_userdata(), SSL_get_default_passwd_cb() and SSL_get_default_passwd_cb_userdata() perform the same function as their SSL_CTX counterparts, but using an SSL object.</p> <p>The password callback, which must be provided by the application, hands back the password to be used during decryption. On invocation a pointer to userdata is provided. The function must store the password into the provided buffer buf which is of size size. The actual length of the password must be returned to the calling function. rwflag indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1). For more details, see pem_password_cb(3).</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#notes","title":"NOTES","text":"<p>When loading or storing private keys, a password might be supplied to protect the private key. The way this password can be supplied may depend on the application. If only one private key is handled, it can be practical to have the callback handle the password dialog interactively. If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times. In the last case, the password could be stored into the userdata storage and the callback only returns the password already stored.</p> <p>When asking for the password interactively, the callback can use rwflag to check, whether an item shall be encrypted (rwflag=1). In this case the password dialog may ask for the same password twice for comparison in order to catch typos, that would make decryption impossible.</p> <p>Other items in PEM formatting (certificates) can also be encrypted, it is however not usual, as certificate information is considered public.</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#return-values","title":"RETURN VALUES","text":"<p>These functions do not provide diagnostic information.</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#examples","title":"EXAMPLES","text":"<p>The following example returns the password provided as userdata to the calling function. The password is considered to be a '\\0' terminated string. If the password does not fit into the buffer, the password is truncated.</p> <pre><code>int my_cb(char *buf, int size, int rwflag, void *u)\n{\n    strncpy(buf, (char *)u, size);\n    buf[size - 1] = '\\0';\n    return strlen(buf);\n}\n</code></pre>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_use_certificate(3)</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#history","title":"HISTORY","text":"<p>SSL_CTX_get_default_passwd_cb(), SSL_CTX_get_default_passwd_cb_userdata(), SSL_set_default_passwd_cb() and SSL_set_default_passwd_cb_userdata() were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_set_default_passwd_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_ex_data/","title":"SSL_CTX_set_ex_data","text":""},{"location":"man3/SSL_CTX_set_ex_data/#name","title":"NAME","text":"<p>SSL_CTX_get_ex_data, SSL_CTX_set_ex_data, SSL_get_ex_data, SSL_set_ex_data - Store and retrieve extra data from the SSL_CTX, SSL or SSL_SESSION</p>"},{"location":"man3/SSL_CTX_set_ex_data/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid *SSL_CTX_get_ex_data(const SSL_CTX *s, int idx);\n\nint SSL_CTX_set_ex_data(SSL_CTX *s, int idx, void *arg);\n\nvoid *SSL_get_ex_data(const SSL *s, int idx);\n\nint SSL_set_ex_data(SSL *s, int idx, void *arg);\n</code></pre>"},{"location":"man3/SSL_CTX_set_ex_data/#description","title":"DESCRIPTION","text":"<p>SSL*_set_ex_data() functions can be used to store arbitrary user data into the SSL_CTX, or SSL object. The user must supply a unique index which they can subsequently use to retrieve the data using SSL*_get_ex_data().</p> <p>For more detailed information see CRYPTO_get_ex_data(3) and CRYPTO_set_ex_data(3) which implement these functions and CRYPTO_get_ex_new_index(3) for generating a unique index.</p>"},{"location":"man3/SSL_CTX_set_ex_data/#return-values","title":"RETURN VALUES","text":"<p>The SSL*_set_ex_data() functions return 1 if the item is successfully stored and 0 if it is not. The SSL*_get_ex_data() functions return the ex_data pointer if successful, otherwise NULL.</p>"},{"location":"man3/SSL_CTX_set_ex_data/#see-also","title":"SEE ALSO","text":"<p>CRYPTO_get_ex_data(3), CRYPTO_set_ex_data(3), CRYPTO_get_ex_new_index(3)</p>"},{"location":"man3/SSL_CTX_set_ex_data/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_generate_session_id/","title":"SSL_CTX_set_generate_session_id","text":""},{"location":"man3/SSL_CTX_set_generate_session_id/#name","title":"NAME","text":"<p>SSL_CTX_set_generate_session_id, SSL_set_generate_session_id, SSL_has_matching_session_id, GEN_SESSION_CB - manipulate generation of SSL session IDs (server only)</p>"},{"location":"man3/SSL_CTX_set_generate_session_id/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*GEN_SESSION_CB)(SSL *ssl, unsigned char *id,\n                              unsigned int *id_len);\n\nint SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb);\nint SSL_set_generate_session_id(SSL *ssl, GEN_SESSION_CB, cb);\nint SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,\n                                unsigned int id_len);\n</code></pre>"},{"location":"man3/SSL_CTX_set_generate_session_id/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_generate_session_id() sets the callback function for generating new session ids for SSL/TLS sessions for ctx to be cb.</p> <p>SSL_set_generate_session_id() sets the callback function for generating new session ids for SSL/TLS sessions for ssl to be cb.</p> <p>SSL_has_matching_session_id() checks, whether a session with id id (of length id_len) is already contained in the internal session cache of the parent context of ssl.</p>"},{"location":"man3/SSL_CTX_set_generate_session_id/#notes","title":"NOTES","text":"<p>When a new session is established between client and server, the server generates a session id. The session id is an arbitrary sequence of bytes. The length of the session id is between 1 and 32 bytes.  The session id is not security critical but must be unique for the server. Additionally, the session id is transmitted in the clear when reusing the session so it must not contain sensitive information.</p> <p>Without a callback being set, an OpenSSL server will generate a unique session id from pseudo random numbers of the maximum possible length. Using the callback function, the session id can be changed to contain additional information like e.g. a host id in order to improve load balancing or external caching techniques.</p> <p>The callback function receives a pointer to the memory location to put id into and a pointer to the maximum allowed length id_len. The buffer at location id is only guaranteed to have the size id_len. The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location id exceeding the given limit.</p> <p>The location id is filled with 0x00 before the callback is called, so the callback may only fill part of the possible length and leave id_len untouched while maintaining reproducibility.</p> <p>Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes e.g. a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions.</p> <p>SSL_has_matching_session_id() will only query the internal session cache, not the external one. Since the session id is generated before the handshake is completed, it is not immediately added to the cache. If another thread is using the same internal session cache, a race condition can occur in that another thread generates the same session id. Collisions can also occur when using an external session cache, since the external cache is not tested with SSL_has_matching_session_id() and the same race condition applies.</p> <p>The callback must return 0 if it cannot generate a session id for whatever reason and return 1 on success.</p>"},{"location":"man3/SSL_CTX_set_generate_session_id/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_generate_session_id() and SSL_set_generate_session_id() always return 1.</p> <p>SSL_has_matching_session_id() returns 1 if another session with the same id is already in the cache.</p>"},{"location":"man3/SSL_CTX_set_generate_session_id/#examples","title":"EXAMPLES","text":"<p>The callback function listed will generate a session id with the server id given, and will fill the rest with pseudo random bytes:</p> <pre><code>const char session_id_prefix = \"www-18\";\n\n#define MAX_SESSION_ID_ATTEMPTS 10\nstatic int generate_session_id(SSL *ssl, unsigned char *id,\n                               unsigned int *id_len)\n{\n    unsigned int count = 0;\n\n    do {\n        RAND_pseudo_bytes(id, *id_len);\n        /*\n         * Prefix the session_id with the required prefix. NB: If our\n         * prefix is too long, clip it - but there will be worse effects\n         * anyway, e.g. the server could only possibly create 1 session\n         * ID (i.e. the prefix!) so all future session negotiations will\n         * fail due to conflicts.\n         */\n        memcpy(id, session_id_prefix, strlen(session_id_prefix) &lt; *id_len ?\n                                      strlen(session_id_prefix) : *id_len);\n    } while (SSL_has_matching_session_id(ssl, id, *id_len)\n              &amp;&amp; ++count &lt; MAX_SESSION_ID_ATTEMPTS);\n    if (count &gt;= MAX_SESSION_ID_ATTEMPTS)\n        return 0;\n    return 1;\n}\n</code></pre>"},{"location":"man3/SSL_CTX_set_generate_session_id/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_version(3)</p>"},{"location":"man3/SSL_CTX_set_generate_session_id/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_info_callback/","title":"SSL_CTX_set_info_callback","text":""},{"location":"man3/SSL_CTX_set_info_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_info_callback, SSL_CTX_get_info_callback, SSL_set_info_callback, SSL_get_info_callback - handle information callback for SSL connections</p>"},{"location":"man3/SSL_CTX_set_info_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_info_callback(SSL_CTX *ctx, void (*callback)());\nvoid (*SSL_CTX_get_info_callback(const SSL_CTX *ctx))();\n\nvoid SSL_set_info_callback(SSL *ssl, void (*callback)());\nvoid (*SSL_get_info_callback(const SSL *ssl))();\n</code></pre>"},{"location":"man3/SSL_CTX_set_info_callback/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_info_callback() sets the callback function, that can be used to obtain state information for SSL objects created from ctx during connection setup and use. The setting for ctx is overridden from the setting for a specific SSL object, if specified. When callback is NULL, no callback function is used.</p> <p>SSL_set_info_callback() sets the callback function, that can be used to obtain state information for ssl during connection setup and use. When callback is NULL, the callback setting currently valid for ctx is used.</p> <p>SSL_CTX_get_info_callback() returns a pointer to the currently set information callback function for ctx.</p> <p>SSL_get_info_callback() returns a pointer to the currently set information callback function for ssl.</p>"},{"location":"man3/SSL_CTX_set_info_callback/#notes","title":"NOTES","text":"<p>When setting up a connection and during use, it is possible to obtain state information from the SSL/TLS engine. When set, an information callback function is called whenever a significant event occurs such as: the state changes, an alert appears, or an error occurs.</p> <p>The callback function is called as callback(SSL *ssl, int where, int ret). The where argument specifies information about where (in which context) the callback function was called. If ret is 0, an error condition occurred. If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information.</p> <p>where is a bit mask made up of the following bits:</p> <ul> <li> <p>SSL_CB_LOOP</p> <p>Callback has been called to indicate state change or some other significant state machine event. This may mean that the callback gets invoked more than once per state in some situations.</p> </li> <li> <p>SSL_CB_EXIT</p> <p>Callback has been called to indicate exit of a handshake function. This will happen after the end of a handshake, but may happen at other times too such as on error or when IO might otherwise block and nonblocking is being used.</p> </li> <li> <p>SSL_CB_READ</p> <p>Callback has been called during read operation.</p> </li> <li> <p>SSL_CB_WRITE</p> <p>Callback has been called during write operation.</p> </li> <li> <p>SSL_CB_ALERT</p> <p>Callback has been called due to an alert being sent or received.</p> </li> <li> <p>SSL_CB_READ_ALERT               (SSL_CB_ALERT|SSL_CB_READ)</p> </li> <li>SSL_CB_WRITE_ALERT              (SSL_CB_ALERT|SSL_CB_WRITE)</li> <li>SSL_CB_ACCEPT_LOOP              (SSL_ST_ACCEPT|SSL_CB_LOOP)</li> <li>SSL_CB_ACCEPT_EXIT              (SSL_ST_ACCEPT|SSL_CB_EXIT)</li> <li>SSL_CB_CONNECT_LOOP             (SSL_ST_CONNECT|SSL_CB_LOOP)</li> <li>SSL_CB_CONNECT_EXIT             (SSL_ST_CONNECT|SSL_CB_EXIT)</li> <li> <p>SSL_CB_HANDSHAKE_START</p> <p>Callback has been called because a new handshake is started. It also occurs when resuming a handshake following a pause to handle early data.</p> </li> <li> <p>SSL_CB_HANDSHAKE_DONE</p> <p>Callback has been called because a handshake is finished.  It also occurs if the handshake is paused to allow the exchange of early data.</p> </li> </ul> <p>The current state information can be obtained using the SSL_state_string(3) family of functions.</p> <p>The ret information can be evaluated using the SSL_alert_type_string(3) family of functions.</p>"},{"location":"man3/SSL_CTX_set_info_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_set_info_callback() does not provide diagnostic information.</p> <p>SSL_get_info_callback() returns the current setting.</p>"},{"location":"man3/SSL_CTX_set_info_callback/#examples","title":"EXAMPLES","text":"<p>The following example callback function prints state strings, information about alerts being handled and error messages to the bio_err BIO.</p> <pre><code>void apps_ssl_info_callback(SSL *s, int where, int ret)\n{\n    const char *str;\n    int w = where &amp; ~SSL_ST_MASK;\n\n    if (w &amp; SSL_ST_CONNECT)\n        str = \"SSL_connect\";\n    else if (w &amp; SSL_ST_ACCEPT)\n        str = \"SSL_accept\";\n    else\n        str = \"undefined\";\n\n    if (where &amp; SSL_CB_LOOP) {\n        BIO_printf(bio_err, \"%s:%s\\n\", str, SSL_state_string_long(s));\n    } else if (where &amp; SSL_CB_ALERT) {\n        str = (where &amp; SSL_CB_READ) ? \"read\" : \"write\";\n        BIO_printf(bio_err, \"SSL3 alert %s:%s:%s\\n\", str,\n                   SSL_alert_type_string_long(ret),\n                   SSL_alert_desc_string_long(ret));\n    } else if (where &amp; SSL_CB_EXIT) {\n        if (ret == 0) {\n            BIO_printf(bio_err, \"%s:failed in %s\\n\",\n                       str, SSL_state_string_long(s));\n        } else if (ret &lt; 0) {\n            BIO_printf(bio_err, \"%s:error in %s\\n\",\n                       str, SSL_state_string_long(s));\n        }\n    }\n}\n</code></pre>"},{"location":"man3/SSL_CTX_set_info_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_state_string(3), SSL_alert_type_string(3)</p>"},{"location":"man3/SSL_CTX_set_info_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_keylog_callback/","title":"SSL_CTX_set_keylog_callback","text":""},{"location":"man3/SSL_CTX_set_keylog_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_keylog_callback, SSL_CTX_get_keylog_callback, SSL_CTX_keylog_cb_func - logging TLS key material</p>"},{"location":"man3/SSL_CTX_set_keylog_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef void (*SSL_CTX_keylog_cb_func)(const SSL *ssl, const char *line);\n\nvoid SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb);\nSSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_keylog_callback/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_keylog_callback() sets the TLS key logging callback. This callback is called whenever TLS key material is generated or received, in order to allow applications to store this keying material for debugging purposes.</p> <p>SSL_CTX_get_keylog_callback() retrieves the previously set TLS key logging callback. If no callback has been set, this will return NULL. When there is no key logging callback, or if SSL_CTX_set_keylog_callback is called with NULL as the value of cb, no logging of key material will be done.</p> <p>The key logging callback is called with two items: the ssl object associated with the connection, and line, a string containing the key material in the format used by NSS for its SSLKEYLOGFILE debugging output. To recreate that file, the key logging callback should log line, followed by a newline. line will always be a NULL-terminated string.</p>"},{"location":"man3/SSL_CTX_set_keylog_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_get_keylog_callback() returns a pointer to SSL_CTX_keylog_cb_func or NULL if the callback is not set.</p>"},{"location":"man3/SSL_CTX_set_keylog_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_CTX_set_keylog_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_max_cert_list/","title":"SSL_CTX_set_max_cert_list","text":""},{"location":"man3/SSL_CTX_set_max_cert_list/#name","title":"NAME","text":"<p>SSL_CTX_set_max_cert_list, SSL_CTX_get_max_cert_list, SSL_set_max_cert_list, SSL_get_max_cert_list - manipulate allowed size for the peer's certificate chain</p>"},{"location":"man3/SSL_CTX_set_max_cert_list/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_max_cert_list(SSL_CTX *ctx, long size);\nlong SSL_CTX_get_max_cert_list(SSL_CTX *ctx);\n\nlong SSL_set_max_cert_list(SSL *ssl, long size);\nlong SSL_get_max_cert_list(SSL *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_max_cert_list/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_max_cert_list() sets the maximum size allowed for the peer's certificate chain for all SSL objects created from ctx to be &lt;size&gt; bytes. The SSL objects inherit the setting valid for ctx at the time SSL_new(3) is being called.</p> <p>SSL_CTX_get_max_cert_list() returns the currently set maximum size for ctx.</p> <p>SSL_set_max_cert_list() sets the maximum size allowed for the peer's certificate chain for ssl to be &lt;size&gt; bytes. This setting stays valid until a new value is set.</p> <p>SSL_get_max_cert_list() returns the currently set maximum size for ssl.</p>"},{"location":"man3/SSL_CTX_set_max_cert_list/#notes","title":"NOTES","text":"<p>During the handshake process, the peer may send a certificate chain. The TLS/SSL standard does not give any maximum size of the certificate chain. The OpenSSL library handles incoming data by a dynamically allocated buffer. In order to prevent this buffer from growing without bounds due to data received from a faulty or malicious peer, a maximum size for the certificate chain is set.</p> <p>The default value for the maximum certificate chain size is 100kB (30kB on the 16-bit DOS platform). This should be sufficient for usual certificate chains (OpenSSL's default maximum chain length is 10, see SSL_CTX_set_verify(3), and certificates without special extensions have a typical size of 1-2kB).</p> <p>For special applications it can be necessary to extend the maximum certificate chain size allowed to be sent by the peer, see e.g. the work on \"Internet X.509 Public Key Infrastructure Proxy Certificate Profile\" and \"TLS Delegation Protocol\" at http://www.ietf.org/ and http://www.globus.org/ .</p> <p>Under normal conditions it should never be necessary to set a value smaller than the default, as the buffer is handled dynamically and only uses the memory actually required by the data sent by the peer.</p> <p>If the maximum certificate chain size allowed is exceeded, the handshake will fail with a SSL_R_EXCESSIVE_MESSAGE_SIZE error.</p>"},{"location":"man3/SSL_CTX_set_max_cert_list/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_max_cert_list() and SSL_set_max_cert_list() return the previously set value.</p> <p>SSL_CTX_get_max_cert_list() and SSL_get_max_cert_list() return the currently set value.</p>"},{"location":"man3/SSL_CTX_set_max_cert_list/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3), SSL_CTX_set_verify(3)</p>"},{"location":"man3/SSL_CTX_set_max_cert_list/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/","title":"SSL_CTX_set_min_proto_version","text":""},{"location":"man3/SSL_CTX_set_min_proto_version/#name","title":"NAME","text":"<p>SSL_CTX_set_min_proto_version, SSL_CTX_set_max_proto_version, SSL_CTX_get_min_proto_version, SSL_CTX_get_max_proto_version, SSL_set_min_proto_version, SSL_set_max_proto_version, SSL_get_min_proto_version, SSL_get_max_proto_version - Get and set minimum and maximum supported protocol version</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_min_proto_version(SSL_CTX *ctx, int version);\nint SSL_CTX_set_max_proto_version(SSL_CTX *ctx, int version);\nint SSL_CTX_get_min_proto_version(SSL_CTX *ctx);\nint SSL_CTX_get_max_proto_version(SSL_CTX *ctx);\n\nint SSL_set_min_proto_version(SSL *ssl, int version);\nint SSL_set_max_proto_version(SSL *ssl, int version);\nint SSL_get_min_proto_version(SSL *ssl);\nint SSL_get_max_proto_version(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_CTX_set_min_proto_version/#description","title":"DESCRIPTION","text":"<p>The functions get or set the minimum and maximum supported protocol versions for the ctx or ssl. This works in combination with the options set via SSL_CTX_set_options(3) that also make it possible to disable specific protocol versions. Use these functions instead of disabling specific protocol versions.</p> <p>Setting the minimum or maximum version to 0, will enable protocol versions down to the lowest version, or up to the highest version supported by the library, respectively.</p> <p>Getters return 0 in case ctx or ssl have been configured to automatically use the lowest or highest version supported by the library.</p> <p>Currently supported versions are SSL3_VERSION, TLS1_VERSION, TLS1_1_VERSION, TLS1_2_VERSION, TLS1_3_VERSION for TLS and DTLS1_VERSION, DTLS1_2_VERSION for DTLS.</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/#return-values","title":"RETURN VALUES","text":"<p>These setter functions return 1 on success and 0 on failure. The getter functions return the configured version or 0 for auto-configuration of lowest or highest protocol, respectively.</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/#notes","title":"NOTES","text":"<p>All these functions are implemented using macros.</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_options(3), SSL_CONF_cmd(3)</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/#history","title":"HISTORY","text":"<p>The setter functions were added in OpenSSL 1.1.0. The getter functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_min_proto_version/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_mode/","title":"SSL_CTX_set_mode","text":""},{"location":"man3/SSL_CTX_set_mode/#name","title":"NAME","text":"<p>SSL_CTX_set_mode, SSL_CTX_clear_mode, SSL_set_mode, SSL_clear_mode, SSL_CTX_get_mode, SSL_get_mode - manipulate SSL engine mode</p>"},{"location":"man3/SSL_CTX_set_mode/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_mode(SSL_CTX *ctx, long mode);\nlong SSL_CTX_clear_mode(SSL_CTX *ctx, long mode);\nlong SSL_set_mode(SSL *ssl, long mode);\nlong SSL_clear_mode(SSL *ssl, long mode);\n\nlong SSL_CTX_get_mode(SSL_CTX *ctx);\nlong SSL_get_mode(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_CTX_set_mode/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_mode() adds the mode set via bit mask in mode to ctx. Options already set before are not cleared. SSL_CTX_clear_mode() removes the mode set via bit mask in mode from ctx.</p> <p>SSL_set_mode() adds the mode set via bit mask in mode to ssl. Options already set before are not cleared. SSL_clear_mode() removes the mode set via bit mask in mode from ssl.</p> <p>SSL_CTX_get_mode() returns the mode set for ctx.</p> <p>SSL_get_mode() returns the mode set for ssl.</p>"},{"location":"man3/SSL_CTX_set_mode/#notes","title":"NOTES","text":"<p>The following mode changes are available:</p> <ul> <li> <p>SSL_MODE_ENABLE_PARTIAL_WRITE</p> <p>Allow SSL_write_ex(..., n, &amp;r) to return with 0 &lt; r &lt; n (i.e. report success when just a single record has been written). This works in a similar way for SSL_write(). When not set (the default), SSL_write_ex() or SSL_write() will only report success once the complete chunk was written. Once SSL_write_ex() or SSL_write() returns successful, r bytes have been written and the next call to SSL_write_ex() or SSL_write() must only send the n-r bytes left, imitating the behaviour of write().</p> </li> <li> <p>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</p> <p>Make it possible to retry SSL_write_ex() or SSL_write() with changed buffer location (the buffer contents must stay the same). This is not the default to avoid the misconception that nonblocking SSL_write() behaves like nonblocking write().</p> </li> <li> <p>SSL_MODE_AUTO_RETRY</p> <p>During normal operations, non-application data records might need to be sent or received that the application is not aware of. If a non-application data record was processed, SSL_read_ex(3) and SSL_read(3) can return with a failure and indicate the need to retry with SSL_ERROR_WANT_READ. If such a non-application data record was processed, the flag SSL_MODE_AUTO_RETRY causes it to try to process the next record instead of returning.</p> <p>In a nonblocking environment applications must be prepared to handle incomplete read/write operations. Setting SSL_MODE_AUTO_RETRY for a nonblocking BIO will process non-application data records until either no more data is available or an application data record has been processed.</p> <p>In a blocking environment, applications are not always prepared to deal with the functions returning intermediate reports such as retry requests, and setting the SSL_MODE_AUTO_RETRY flag will cause the functions to only return after successfully processing an application data record or a failure.</p> <p>Turning off SSL_MODE_AUTO_RETRY can be useful with blocking BIOs in case they are used in combination with something like select() or poll(). Otherwise the call to SSL_read() or SSL_read_ex() might hang when a non-application record was sent and no application data was sent.</p> </li> <li> <p>SSL_MODE_RELEASE_BUFFERS</p> <p>When we no longer need a read buffer or a write buffer for a given SSL, then release the memory we were using to hold it. Using this flag can save around 34k per idle SSL connection. This flag has no effect on SSL v2 connections, or on DTLS connections.</p> </li> <li> <p>SSL_MODE_SEND_FALLBACK_SCSV</p> <p>Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications that reconnect with a downgraded protocol version; see draft-ietf-tls-downgrade-scsv-00 for details.</p> <p>DO NOT ENABLE THIS if your application attempts a normal handshake. Only use this in explicit fallback retries, following the guidance in draft-ietf-tls-downgrade-scsv-00.</p> </li> <li> <p>SSL_MODE_ASYNC</p> <p>Enable asynchronous processing. TLS I/O operations may indicate a retry with SSL_ERROR_WANT_ASYNC with this mode set if an asynchronous capable engine is used to perform cryptographic operations. See SSL_get_error(3).</p> </li> <li> <p>SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG</p> <p>Older versions of OpenSSL had a bug in the computation of the label length used for computing the endpoint-pair shared secret. The bug was that the terminating zero was included in the length of the label. Setting this option enables this behaviour to allow interoperability with such broken implementations. Please note that setting this option breaks interoperability with correct implementations. This option only applies to DTLS over SCTP.</p> </li> </ul> <p>All modes are off by default except for SSL_MODE_AUTO_RETRY which is on by default since 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_mode/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_mode() and SSL_set_mode() return the new mode bit mask after adding mode.</p> <p>SSL_CTX_get_mode() and SSL_get_mode() return the current bit mask.</p>"},{"location":"man3/SSL_CTX_set_mode/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_read_ex(3), SSL_read(3), SSL_write_ex(3) or SSL_write(3), SSL_get_error(3)</p>"},{"location":"man3/SSL_CTX_set_mode/#history","title":"HISTORY","text":"<p>SSL_MODE_ASYNC was added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_set_mode/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_msg_callback/","title":"SSL_CTX_set_msg_callback","text":""},{"location":"man3/SSL_CTX_set_msg_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_msg_callback, SSL_CTX_set_msg_callback_arg, SSL_set_msg_callback, SSL_set_msg_callback_arg - install callback for observing protocol messages</p>"},{"location":"man3/SSL_CTX_set_msg_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_msg_callback(SSL_CTX *ctx,\n                              void (*cb)(int write_p, int version,\n                                         int content_type, const void *buf,\n                                         size_t len, SSL *ssl, void *arg));\nvoid SSL_CTX_set_msg_callback_arg(SSL_CTX *ctx, void *arg);\n\nvoid SSL_set_msg_callback(SSL *ssl,\n                          void (*cb)(int write_p, int version,\n                                     int content_type, const void *buf,\n                                     size_t len, SSL *ssl, void *arg));\nvoid SSL_set_msg_callback_arg(SSL *ssl, void *arg);\n</code></pre>"},{"location":"man3/SSL_CTX_set_msg_callback/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_msg_callback() or SSL_set_msg_callback() can be used to define a message callback function cb for observing all SSL/TLS protocol messages (such as handshake messages) that are received or sent, as well as other events that occur during processing. SSL_CTX_set_msg_callback_arg() and SSL_set_msg_callback_arg() can be used to set argument arg to the callback function, which is available for arbitrary application use.</p> <p>SSL_CTX_set_msg_callback() and SSL_CTX_set_msg_callback_arg() specify default settings that will be copied to new SSL objects by SSL_new(3). SSL_set_msg_callback() and SSL_set_msg_callback_arg() modify the actual settings of an SSL object. Using a NULL pointer for cb disables the message callback.</p> <p>When cb is called by the SSL/TLS library the function arguments have the following meaning:</p> <ul> <li> <p>write_p</p> <p>This flag is 0 when a protocol message has been received and 1 when a protocol message has been sent.</p> </li> <li> <p>version</p> <p>The protocol version according to which the protocol message is interpreted by the library such as TLS1_3_VERSION, TLS1_2_VERSION etc. This is set to 0 for the SSL3_RT_HEADER pseudo content type (see NOTES below).</p> </li> <li> <p>content_type</p> <p>This is one of the content type values defined in the protocol specification (SSL3_RT_CHANGE_CIPHER_SPEC, SSL3_RT_ALERT, SSL3_RT_HANDSHAKE; but never SSL3_RT_APPLICATION_DATA because the callback will only be called for protocol messages). Alternatively it may be a \"pseudo\" content type. These pseudo content types are used to signal some other event in the processing of data (see NOTES below).</p> </li> <li> <p>buf, len</p> <p>buf points to a buffer containing the protocol message or other data (in the case of pseudo content types), which consists of len bytes. The buffer is no longer valid after the callback function has returned.</p> </li> <li> <p>ssl</p> <p>The SSL object that received or sent the message.</p> </li> <li> <p>arg</p> <p>The user-defined argument optionally defined by SSL_CTX_set_msg_callback_arg() or SSL_set_msg_callback_arg().</p> </li> </ul>"},{"location":"man3/SSL_CTX_set_msg_callback/#notes","title":"NOTES","text":"<p>Protocol messages are passed to the callback function after decryption and fragment collection where applicable. (Thus record boundaries are not visible.)</p> <p>If processing a received protocol message results in an error, the callback function may not be called.  For example, the callback function will never see messages that are considered too large to be processed.</p> <p>Due to automatic protocol version negotiation, version is not necessarily the protocol version used by the sender of the message: If a TLS 1.0 ClientHello message is received by an SSL 3.0-only server, version will be SSL3_VERSION.</p> <p>Pseudo content type values may be sent at various points during the processing of data. The following pseudo content types are currently defined:</p> <ul> <li> <p>SSL3_RT_HEADER</p> <p>Used when a record is sent or received. The buf contains the record header bytes only.</p> </li> <li> <p>SSL3_RT_INNER_CONTENT_TYPE</p> <p>Used when an encrypted TLSv1.3 record is sent or received. In encrypted TLSv1.3 records the content type in the record header is always SSL3_RT_APPLICATION_DATA. The real content type for the record is contained in an \"inner\" content type. buf contains the encoded \"inner\" content type byte.</p> </li> </ul>"},{"location":"man3/SSL_CTX_set_msg_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_msg_callback(), SSL_CTX_set_msg_callback_arg(), SSL_set_msg_callback() and SSL_set_msg_callback_arg() do not return values.</p>"},{"location":"man3/SSL_CTX_set_msg_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3)</p>"},{"location":"man3/SSL_CTX_set_msg_callback/#history","title":"HISTORY","text":"<p>The pseudo content type SSL3_RT_INNER_CONTENT_TYPE was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_msg_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_num_tickets/","title":"SSL_CTX_set_num_tickets","text":""},{"location":"man3/SSL_CTX_set_num_tickets/#name","title":"NAME","text":"<p>SSL_set_num_tickets, SSL_get_num_tickets, SSL_CTX_set_num_tickets, SSL_CTX_get_num_tickets - control the number of TLSv1.3 session tickets that are issued</p>"},{"location":"man3/SSL_CTX_set_num_tickets/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_set_num_tickets(SSL *s, size_t num_tickets);\nsize_t SSL_get_num_tickets(SSL *s);\nint SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets);\nsize_t SSL_CTX_get_num_tickets(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_num_tickets/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_num_tickets() and SSL_set_num_tickets() can be called for a server application and set the number of TLSv1.3 session tickets that will be sent to the client after a full handshake. Set the desired value (which could be 0) in the num_tickets argument. Typically these functions should be called before the start of the handshake.</p> <p>The default number of tickets is 2. Following a resumption the number of tickets issued will never be more than 1 regardless of the value set via SSL_set_num_tickets() or SSL_CTX_set_num_tickets(). If num_tickets is set to 0 then no tickets will be issued for either a normal connection or a resumption.</p> <p>Tickets are also issued on receipt of a post-handshake certificate from the client following a request by the server using SSL_verify_client_post_handshake(3). These new tickets will be associated with the updated client identity (i.e. including their certificate and verification status). The number of tickets issued will normally be the same as was used for the initial handshake. If the initial handshake was a full handshake then SSL_set_num_tickets() can be called again prior to calling SSL_verify_client_post_handshake() to update the number of tickets that will be sent.</p> <p>SSL_CTX_get_num_tickets() and SSL_get_num_tickets() return the number of tickets set by a previous call to SSL_CTX_set_num_tickets() or SSL_set_num_tickets(), or 2 if no such call has been made.</p>"},{"location":"man3/SSL_CTX_set_num_tickets/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_num_tickets() and SSL_set_num_tickets() return 1 on success or 0 on failure.</p> <p>SSL_CTX_get_num_tickets() and SSL_get_num_tickets() return the number of tickets that have been previously set.</p>"},{"location":"man3/SSL_CTX_set_num_tickets/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_num_tickets/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_options/","title":"SSL_CTX_set_options","text":""},{"location":"man3/SSL_CTX_set_options/#name","title":"NAME","text":"<p>SSL_CTX_set_options, SSL_set_options, SSL_CTX_clear_options, SSL_clear_options, SSL_CTX_get_options, SSL_get_options, SSL_get_secure_renegotiation_support - manipulate SSL options</p>"},{"location":"man3/SSL_CTX_set_options/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_options(SSL_CTX *ctx, long options);\nlong SSL_set_options(SSL *ssl, long options);\n\nlong SSL_CTX_clear_options(SSL_CTX *ctx, long options);\nlong SSL_clear_options(SSL *ssl, long options);\n\nlong SSL_CTX_get_options(SSL_CTX *ctx);\nlong SSL_get_options(SSL *ssl);\n\nlong SSL_get_secure_renegotiation_support(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_CTX_set_options/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_options() adds the options set via bit mask in options to ctx. Options already set before are not cleared!</p> <p>SSL_set_options() adds the options set via bit mask in options to ssl. Options already set before are not cleared!</p> <p>SSL_CTX_clear_options() clears the options set via bit mask in options to ctx.</p> <p>SSL_clear_options() clears the options set via bit mask in options to ssl.</p> <p>SSL_CTX_get_options() returns the options set for ctx.</p> <p>SSL_get_options() returns the options set for ssl.</p> <p>SSL_get_secure_renegotiation_support() indicates whether the peer supports secure renegotiation. Note, this is implemented via a macro.</p>"},{"location":"man3/SSL_CTX_set_options/#notes","title":"NOTES","text":"<p>The behaviour of the SSL library can be changed by setting several options. The options are coded as bit masks and can be combined by a bitwise or operation (|).</p> <p>SSL_CTX_set_options() and SSL_set_options() affect the (external) protocol behaviour of the SSL library. The (internal) behaviour of the API can be changed by using the similar SSL_CTX_set_mode(3) and SSL_set_mode() functions.</p> <p>During a handshake, the option settings of the SSL object are used. When a new SSL object is created from a context using SSL_new(), the current option setting is copied. Changes to ctx do not affect already created SSL objects. SSL_clear() does not affect the settings.</p> <p>The following bug workaround options are available:</p> <ul> <li> <p>SSL_OP_SAFARI_ECDHE_ECDSA_BUG</p> <p>Don't prefer ECDHE-ECDSA ciphers when the client appears to be Safari on OS X. OS X 10.8..10.8.3 has broken support for ECDHE-ECDSA ciphers.</p> </li> <li> <p>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</p> <p>Disables a countermeasure against a SSL 3.0/TLS 1.0 protocol vulnerability affecting CBC ciphers, which cannot be handled by some broken SSL implementations.  This option has no effect for connections using other ciphers.</p> </li> <li> <p>SSL_OP_TLSEXT_PADDING</p> <p>Adds a padding extension to ensure the ClientHello size is never between 256 and 511 bytes in length. This is needed as a workaround for some implementations.</p> </li> <li> <p>SSL_OP_ALL</p> <p>All of the above bug workarounds plus SSL_OP_LEGACY_SERVER_CONNECT as mentioned below.</p> </li> </ul> <p>It is usually safe to use SSL_OP_ALL to enable the bug workaround options if compatibility with somewhat broken implementations is desired.</p> <p>The following modifying options are available:</p> <ul> <li> <p>SSL_OP_TLS_ROLLBACK_BUG</p> <p>Disable version rollback attack detection.</p> <p>During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello. Some clients violate this rule by adapting to the server's answer. (Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3. In this case the client must still use the same SSLv3.1=TLSv1 announcement. Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.)</p> </li> <li> <p>SSL_OP_CIPHER_SERVER_PREFERENCE</p> <p>When choosing a cipher, use the server's preferences instead of the client preferences. When not set, the SSL server will always follow the clients preferences. When set, the SSL/TLS server will choose following its own preferences.</p> </li> <li> <p>SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2, SSL_OP_NO_TLSv1_3, SSL_OP_NO_DTLSv1, SSL_OP_NO_DTLSv1_2</p> <p>These options turn off the SSLv3, TLSv1, TLSv1.1, TLSv1.2 or TLSv1.3 protocol versions with TLS or the DTLSv1, DTLSv1.2 versions with DTLS, respectively. As of OpenSSL 1.1.0, these options are deprecated, use SSL_CTX_set_min_proto_version(3) and SSL_CTX_set_max_proto_version(3) instead.</p> </li> <li> <p>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</p> <p>When performing renegotiation as a server, always start a new session (i.e., session resumption requests are only accepted in the initial handshake). This option is not needed for clients.</p> </li> <li> <p>SSL_OP_NO_COMPRESSION</p> <p>Do not use compression even if it is supported.</p> </li> <li> <p>SSL_OP_NO_QUERY_MTU</p> <p>Do not query the MTU. Only affects DTLS connections.</p> </li> <li> <p>SSL_OP_COOKIE_EXCHANGE</p> <p>Turn on Cookie Exchange as described in RFC4347 Section 4.2.1. Only affects DTLS connections.</p> </li> <li> <p>SSL_OP_NO_TICKET</p> <p>SSL/TLS supports two mechanisms for resuming sessions: session ids and stateless session tickets.</p> <p>When using session ids a copy of the session information is cached on the server and a unique id is sent to the client. When the client wishes to resume it provides the unique id so that the server can retrieve the session information from its cache.</p> <p>When using stateless session tickets the server uses a session ticket encryption key to encrypt the session information. This encrypted data is sent to the client as a \"ticket\". When the client wishes to resume it sends the encrypted data back to the server. The server uses its key to decrypt the data and resume the session. In this way the server can operate statelessly - no session information needs to be cached locally.</p> <p>The TLSv1.3 protocol only supports tickets and does not directly support session ids. However, OpenSSL allows two modes of ticket operation in TLSv1.3: stateful and stateless. Stateless tickets work the same way as in TLSv1.2 and below. Stateful tickets mimic the session id behaviour available in TLSv1.2 and below. The session information is cached on the server and the session id is wrapped up in a ticket and sent back to the client. When the client wishes to resume, it presents a ticket in the same way as for stateless tickets. The server can then extract the session id from the ticket and retrieve the session information from its cache.</p> <p>By default OpenSSL will use stateless tickets. The SSL_OP_NO_TICKET option will cause stateless tickets to not be issued. In TLSv1.2 and below this means no ticket gets sent to the client at all. In TLSv1.3 a stateful ticket will be sent. This is a server-side option only.</p> <p>In TLSv1.3 it is possible to suppress all tickets (stateful and stateless) from being sent by calling SSL_CTX_set_num_tickets(3) or SSL_set_num_tickets(3).</p> </li> <li> <p>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</p> <p>Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See the SECURE RENEGOTIATION section for more details.</p> </li> <li> <p>SSL_OP_LEGACY_SERVER_CONNECT</p> <p>Allow legacy insecure renegotiation between OpenSSL and unpatched servers only: this option is currently set by default. See the SECURE RENEGOTIATION section for more details.</p> </li> <li> <p>SSL_OP_NO_ENCRYPT_THEN_MAC</p> <p>Normally clients and servers will transparently attempt to negotiate the RFC7366 Encrypt-then-MAC option on TLS and DTLS connection.</p> <p>If this option is set, Encrypt-then-MAC is disabled. Clients will not propose, and servers will not accept the extension.</p> </li> <li> <p>SSL_OP_NO_RENEGOTIATION</p> <p>Disable all renegotiation in TLSv1.2 and earlier. Do not send HelloRequest messages, and ignore renegotiation requests via ClientHello.</p> </li> <li> <p>SSL_OP_ALLOW_NO_DHE_KEX</p> <p>In TLSv1.3 allow a non-(ec)dhe based key exchange mode on resumption. This means that there will be no forward secrecy for the resumed session.</p> </li> <li> <p>SSL_OP_PRIORITIZE_CHACHA</p> <p>When SSL_OP_CIPHER_SERVER_PREFERENCE is set, temporarily reprioritize ChaCha20-Poly1305 ciphers to the top of the server cipher list if a ChaCha20-Poly1305 cipher is at the top of the client cipher list. This helps those clients (e.g. mobile) use ChaCha20-Poly1305 if that cipher is anywhere in the server cipher list; but still allows other clients to use AES and other ciphers. Requires SSL_OP_CIPHER_SERVER_PREFERENCE.</p> </li> <li> <p>SSL_OP_ENABLE_MIDDLEBOX_COMPAT</p> <p>If set then dummy Change Cipher Spec (CCS) messages are sent in TLSv1.3. This has the effect of making TLSv1.3 look more like TLSv1.2 so that middleboxes that do not understand TLSv1.3 will not drop the connection. Regardless of whether this option is set or not CCS messages received from the peer will always be ignored in TLSv1.3. This option is set by default. To switch it off use SSL_clear_options(). A future version of OpenSSL may not set this by default.</p> </li> <li> <p>SSL_OP_NO_ANTI_REPLAY</p> <p>By default, when a server is configured for early data (i.e., max_early_data &gt; 0), OpenSSL will switch on replay protection. See SSL_read_early_data(3) for a description of the replay protection feature. Anti-replay measures are required to comply with the TLSv1.3 specification. Some applications may be able to mitigate the replay risks in other ways and in such cases the built in OpenSSL functionality is not required. Those applications can turn this feature off by setting this option. This is a server-side opton only. It is ignored by clients.</p> </li> </ul> <p>The following options no longer have any effect but their identifiers are retained for compatibility purposes:</p> <ul> <li>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</li> <li>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</li> <li>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</li> <li>SSL_OP_TLS_D5_BUG</li> <li>SSL_OP_TLS_BLOCK_PADDING_BUG</li> <li>SSL_OP_MSIE_SSLV2_RSA_PADDING</li> <li>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</li> <li>SSL_OP_MICROSOFT_SESS_ID_BUG</li> <li>SSL_OP_NETSCAPE_CHALLENGE_BUG</li> <li>SSL_OP_PKCS1_CHECK_1</li> <li>SSL_OP_PKCS1_CHECK_2</li> <li>SSL_OP_SINGLE_DH_USE</li> <li>SSL_OP_SINGLE_ECDH_USE</li> <li>SSL_OP_EPHEMERAL_RSA</li> </ul>"},{"location":"man3/SSL_CTX_set_options/#secure-renegotiation","title":"SECURE RENEGOTIATION","text":"<p>OpenSSL always attempts to use secure renegotiation as described in RFC5746. This counters the prefix attack described in CVE-2009-3555 and elsewhere.</p> <p>This attack has far reaching consequences which application writers should be aware of. In the description below an implementation supporting secure renegotiation is referred to as patched. A server not supporting secure renegotiation is referred to as unpatched.</p> <p>The following sections describe the operations permitted by OpenSSL's secure renegotiation implementation.</p>"},{"location":"man3/SSL_CTX_set_options/#patched-client-and-server","title":"Patched client and server","text":"<p>Connections and renegotiation are always permitted by OpenSSL implementations.</p>"},{"location":"man3/SSL_CTX_set_options/#unpatched-client-and-patched-openssl-server","title":"Unpatched client and patched OpenSSL server","text":"<p>The initial connection succeeds but client renegotiation is denied by the server with a no_renegotiation warning alert if TLS v1.0 is used or a fatal handshake_failure alert in SSL v3.0.</p> <p>If the patched OpenSSL server attempts to renegotiate a fatal handshake_failure alert is sent. This is because the server code may be unaware of the unpatched nature of the client.</p> <p>If the option SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION is set then renegotiation always succeeds.</p>"},{"location":"man3/SSL_CTX_set_options/#patched-openssl-client-and-unpatched-server","title":"Patched OpenSSL client and unpatched server.","text":"<p>If the option SSL_OP_LEGACY_SERVER_CONNECT or SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION is set then initial connections and renegotiation between patched OpenSSL clients and unpatched servers succeeds. If neither option is set then initial connections to unpatched servers will fail.</p> <p>The option SSL_OP_LEGACY_SERVER_CONNECT is currently set by default even though it has security implications: otherwise it would be impossible to connect to unpatched servers (i.e. all of them initially) and this is clearly not acceptable. Renegotiation is permitted because this does not add any additional security issues: during an attack clients do not see any renegotiations anyway.</p> <p>As more servers become patched the option SSL_OP_LEGACY_SERVER_CONNECT will not be set by default in a future version of OpenSSL.</p> <p>OpenSSL client applications wishing to ensure they can connect to unpatched servers should always set SSL_OP_LEGACY_SERVER_CONNECT</p> <p>OpenSSL client applications that want to ensure they can not connect to unpatched servers (and thus avoid any security issues) should always clear SSL_OP_LEGACY_SERVER_CONNECT using SSL_CTX_clear_options() or SSL_clear_options().</p> <p>The difference between the SSL_OP_LEGACY_SERVER_CONNECT and SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION options is that SSL_OP_LEGACY_SERVER_CONNECT enables initial connections and secure renegotiation between OpenSSL clients and unpatched servers only, while SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION allows initial connections and renegotiation between OpenSSL and unpatched clients or servers.</p>"},{"location":"man3/SSL_CTX_set_options/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_options() and SSL_set_options() return the new options bit mask after adding options.</p> <p>SSL_CTX_clear_options() and SSL_clear_options() return the new options bit mask after clearing options.</p> <p>SSL_CTX_get_options() and SSL_get_options() return the current bit mask.</p> <p>SSL_get_secure_renegotiation_support() returns 1 is the peer supports secure renegotiation and 0 if it does not.</p>"},{"location":"man3/SSL_CTX_set_options/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3), SSL_clear(3), SSL_CTX_set_tmp_dh_callback(3), SSL_CTX_set_min_proto_version(3), dhparam(1)</p>"},{"location":"man3/SSL_CTX_set_options/#history","title":"HISTORY","text":"<p>The attempt to always try to use secure renegotiation was added in OpenSSL 0.9.8m.</p> <p>The SSL_OP_PRIORITIZE_CHACHA and SSL_OP_NO_RENEGOTIATION options were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_options/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/","title":"SSL_CTX_set_psk_client_callback","text":""},{"location":"man3/SSL_CTX_set_psk_client_callback/#name","title":"NAME","text":"<p>SSL_psk_client_cb_func, SSL_psk_use_session_cb_func, SSL_CTX_set_psk_client_callback, SSL_set_psk_client_callback, SSL_CTX_set_psk_use_session_callback, SSL_set_psk_use_session_callback - set PSK client callback</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*SSL_psk_use_session_cb_func)(SSL *ssl, const EVP_MD *md,\n                                           const unsigned char **id,\n                                           size_t *idlen,\n                                           SSL_SESSION **sess);\n\n\nvoid SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,\n                                          SSL_psk_use_session_cb_func cb);\nvoid SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb);\n\n\ntypedef unsigned int (*SSL_psk_client_cb_func)(SSL *ssl,\n                                               const char *hint,\n                                               char *identity,\n                                               unsigned int max_identity_len,\n                                               unsigned char *psk,\n                                               unsigned int max_psk_len);\n\nvoid SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb);\nvoid SSL_set_psk_client_callback(SSL *ssl, SSL_psk_client_cb_func cb);\n</code></pre>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#description","title":"DESCRIPTION","text":"<p>A client application wishing to use TLSv1.3 PSKs should use either SSL_CTX_set_psk_use_session_callback() or SSL_set_psk_use_session_callback() as appropriate. These functions cannot be used for TLSv1.2 and below PSKs.</p> <p>The callback function is given a pointer to the SSL connection in ssl.</p> <p>The first time the callback is called for a connection the md parameter is NULL. In some circumstances the callback will be called a second time. In that case the server will have specified a ciphersuite to use already and the PSK must be compatible with the digest for that ciphersuite. The digest will be given in md. The PSK returned by the callback is allowed to be different between the first and second time it is called.</p> <p>On successful completion the callback must store a pointer to an identifier for the PSK in *id. The identifier length in bytes should be stored in *idlen. The memory pointed to by *id remains owned by the application and should be freed by it as required at any point after the handshake is complete.</p> <p>Additionally the callback should store a pointer to an SSL_SESSION object in *sess. This is used as the basis for the PSK, and should, at a minimum, have the following fields set:</p> <ul> <li> <p>The master key</p> <p>This can be set via a call to SSL_SESSION_set1_master_key(3).</p> </li> <li> <p>A ciphersuite</p> <p>Only the handshake digest associated with the ciphersuite is relevant for the PSK (the server may go on to negotiate any ciphersuite which is compatible with the digest). The application can use any TLSv1.3 ciphersuite. If md is not NULL the handshake digest for the ciphersuite should be the same. The ciphersuite can be set via a call to &lt;SSL_SESSION_set_cipher(3)&gt;. The handshake digest of an SSL_CIPHER object can be checked using &lt;SSL_CIPHER_get_handshake_digest(3)&gt;.</p> </li> <li> <p>The protocol version</p> <p>This can be set via a call to SSL_SESSION_set_protocol_version(3) and should be TLS1_3_VERSION.</p> </li> </ul> <p>Additionally the maximum early data value should be set via a call to SSL_SESSION_set_max_early_data(3) if the PSK will be used for sending early data.</p> <p>Alternatively an SSL_SESSION created from a previous non-PSK handshake may also be used as the basis for a PSK.</p> <p>Ownership of the SSL_SESSION object is passed to the OpenSSL library and so it should not be freed by the application.</p> <p>It is also possible for the callback to succeed but not supply a PSK. In this case no PSK will be sent to the server but the handshake will continue. To do this the callback should return successfully and ensure that *sess is NULL. The contents of *id and *idlen will be ignored.</p> <p>A client application wishing to use PSK ciphersuites for TLSv1.2 and below must provide a different callback function. This function will be called when the client is sending the ClientKeyExchange message to the server.</p> <p>The purpose of the callback function is to select the PSK identity and the pre-shared key to use during the connection setup phase.</p> <p>The callback is set using functions SSL_CTX_set_psk_client_callback() or SSL_set_psk_client_callback(). The callback function is given the connection in parameter ssl, a NULL-terminated PSK identity hint sent by the server in parameter hint, a buffer identity of length max_identity_len bytes where the resulting NUL-terminated identity is to be stored, and a buffer psk of length max_psk_len bytes where the resulting pre-shared key is to be stored.</p> <p>The callback for use in TLSv1.2 will also work in TLSv1.3 although it is recommended to use SSL_CTX_set_psk_use_session_callback() or SSL_set_psk_use_session_callback() for this purpose instead. If TLSv1.3 has been negotiated then OpenSSL will first check to see if a callback has been set via SSL_CTX_set_psk_use_session_callback() or SSL_set_psk_use_session_callback() and it will use that in preference. If no such callback is present then it will check to see if a callback has been set via SSL_CTX_set_psk_client_callback() or SSL_set_psk_client_callback() and use that. In this case the hint value will always be NULL and the handshake digest will default to SHA-256 for any returned PSK. TLSv1.3 early data exchanges are possible in PSK connections only with the SSL_psk_use_session_cb_func callback, and are not possible with the SSL_psk_client_cb_func callback.</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#notes","title":"NOTES","text":"<p>Note that parameter hint given to the callback may be NULL.</p> <p>A connection established via a TLSv1.3 PSK will appear as if session resumption has occurred so that SSL_session_reused(3) will return true.</p> <p>There are no known security issues with sharing the same PSK between TLSv1.2 (or below) and TLSv1.3. However, the RFC has this note of caution:</p> <p>\"While there is no known way in which the same PSK might produce related output in both versions, only limited analysis has been done.  Implementations can ensure safety from cross-protocol related output by not reusing PSKs between TLS 1.3 and TLS 1.2.\"</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#return-values","title":"RETURN VALUES","text":"<p>Return values from the SSL_psk_client_cb_func callback are interpreted as follows:</p> <p>On success (callback found a PSK identity and a pre-shared key to use) the length (&gt; 0) of psk in bytes is returned.</p> <p>Otherwise or on errors the callback should return 0. In this case the connection setup fails.</p> <p>The SSL_psk_use_session_cb_func callback should return 1 on success or 0 on failure. In the event of failure the connection setup fails.</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_psk_find_session_callback(3), SSL_set_psk_find_session_callback(3)</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#history","title":"HISTORY","text":"<p>SSL_CTX_set_psk_use_session_callback() and SSL_set_psk_use_session_callback() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_psk_client_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/","title":"SSL_CTX_set_quiet_shutdown","text":""},{"location":"man3/SSL_CTX_set_quiet_shutdown/#name","title":"NAME","text":"<p>SSL_CTX_set_quiet_shutdown, SSL_CTX_get_quiet_shutdown, SSL_set_quiet_shutdown, SSL_get_quiet_shutdown - manipulate shutdown behaviour</p>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);\nint SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);\n\nvoid SSL_set_quiet_shutdown(SSL *ssl, int mode);\nint SSL_get_quiet_shutdown(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_quiet_shutdown() sets the \"quiet shutdown\" flag for ctx to be mode. SSL objects created from ctx inherit the mode valid at the time SSL_new(3) is called. mode may be 0 or 1.</p> <p>SSL_CTX_get_quiet_shutdown() returns the \"quiet shutdown\" setting of ctx.</p> <p>SSL_set_quiet_shutdown() sets the \"quiet shutdown\" flag for ssl to be mode. The setting stays valid until ssl is removed with SSL_free(3) or SSL_set_quiet_shutdown() is called again. It is not changed when SSL_clear(3) is called. mode may be 0 or 1.</p> <p>SSL_get_quiet_shutdown() returns the \"quiet shutdown\" setting of ssl.</p>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/#notes","title":"NOTES","text":"<p>Normally when a SSL connection is finished, the parties must send out close_notify alert messages using SSL_shutdown(3) for a clean shutdown.</p> <p>When setting the \"quiet shutdown\" flag to 1, SSL_shutdown(3) will set the internal flags to SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN. (SSL_shutdown(3) then behaves like SSL_set_shutdown(3) called with SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.) The session is thus considered to be shutdown, but no close_notify alert is sent to the peer. This behaviour violates the TLS standard.</p> <p>The default is normal shutdown behaviour as described by the TLS standard.</p>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_quiet_shutdown() and SSL_set_quiet_shutdown() do not return diagnostic information.</p> <p>SSL_CTX_get_quiet_shutdown() and SSL_get_quiet_shutdown return the current setting.</p>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_shutdown(3), SSL_set_shutdown(3), SSL_new(3), SSL_clear(3), SSL_free(3)</p>"},{"location":"man3/SSL_CTX_set_quiet_shutdown/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_read_ahead/","title":"SSL_CTX_set_read_ahead","text":""},{"location":"man3/SSL_CTX_set_read_ahead/#name","title":"NAME","text":"<p>SSL_CTX_set_read_ahead, SSL_CTX_get_read_ahead, SSL_set_read_ahead, SSL_get_read_ahead, SSL_CTX_get_default_read_ahead - manage whether to read as many input bytes as possible</p>"},{"location":"man3/SSL_CTX_set_read_ahead/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_set_read_ahead(SSL *s, int yes);\nint SSL_get_read_ahead(const SSL *s);\n\nSSL_CTX_set_read_ahead(SSL_CTX *ctx, int yes);\nlong SSL_CTX_get_read_ahead(SSL_CTX *ctx);\nlong SSL_CTX_get_default_read_ahead(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_read_ahead/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_read_ahead() and SSL_set_read_ahead() set whether we should read as many input bytes as possible (for nonblocking reads) or not. For example if x bytes are currently required by OpenSSL, but y bytes are available from the underlying BIO (where y &gt; x), then OpenSSL will read all y bytes into its buffer (providing that the buffer is large enough) if reading ahead is on, or x bytes otherwise. Setting the parameter yes to 0 turns reading ahead is off, other values turn it on. SSL_CTX_set_default_read_ahead() is identical to SSL_CTX_set_read_ahead().</p> <p>SSL_CTX_get_read_ahead() and SSL_get_read_ahead() indicate whether reading ahead has been set or not. SSL_CTX_get_default_read_ahead() is identical to SSL_CTX_get_read_ahead().</p>"},{"location":"man3/SSL_CTX_set_read_ahead/#notes","title":"NOTES","text":"<p>These functions have no impact when used with DTLS. The return values for SSL_CTX_get_read_head() and SSL_get_read_ahead() are undefined for DTLS. Setting read_ahead can impact the behaviour of the SSL_pending() function (see SSL_pending(3)).</p> <p>Since SSL_read() can return SSL_ERROR_WANT_READ for non-application data records, and SSL_has_pending() can't tell the difference between processed and unprocessed data, it's recommended that if read ahead is turned on that SSL_MODE_AUTO_RETRY is not turned off using SSL_CTX_clear_mode(). That will prevent getting SSL_ERROR_WANT_READ when there is still a complete record available that hasn't been processed.</p> <p>If the application wants to continue to use the underlying transport (e.g. TCP connection) after the SSL connection is finished using SSL_shutdown() reading ahead should be turned off. Otherwise the SSL structure might read data that it shouldn't.</p>"},{"location":"man3/SSL_CTX_set_read_ahead/#return-values","title":"RETURN VALUES","text":"<p>SSL_get_read_ahead() and SSL_CTX_get_read_ahead() return 0 if reading ahead is off, and non zero otherwise.</p>"},{"location":"man3/SSL_CTX_set_read_ahead/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_pending(3)</p>"},{"location":"man3/SSL_CTX_set_read_ahead/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/","title":"SSL_CTX_set_record_padding_callback","text":""},{"location":"man3/SSL_CTX_set_record_padding_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_record_padding_callback, SSL_set_record_padding_callback, SSL_CTX_set_record_padding_callback_arg, SSL_set_record_padding_callback_arg, SSL_CTX_get_record_padding_callback_arg, SSL_get_record_padding_callback_arg, SSL_CTX_set_block_padding, SSL_set_block_padding - install callback to specify TLS 1.3 record padding</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_record_padding_callback(SSL_CTX *ctx, size_t (*cb)(SSL *s, int type, size_t len, void *arg));\nvoid SSL_set_record_padding_callback(SSL *ssl, size_t (*cb)(SSL *s, int type, size_t len, void *arg));\n\nvoid SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg);\nvoid *SSL_CTX_get_record_padding_callback_arg(const SSL_CTX *ctx);\n\nvoid SSL_set_record_padding_callback_arg(SSL *ssl, void *arg);\nvoid *SSL_get_record_padding_callback_arg(const SSL *ssl);\n\nint SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size);\nint SSL_set_block_padding(SSL *ssl, size_t block_size);\n</code></pre>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_record_padding_callback() or SSL_set_record_padding_callback() can be used to assign a callback function cb to specify the padding for TLS 1.3 records. The value set in ctx is copied to a new SSL by SSL_new().</p> <p>SSL_CTX_set_record_padding_callback_arg() and SSL_set_record_padding_callback_arg() assign a value arg that is passed to the callback when it is invoked. The value set in ctx is copied to a new SSL by SSL_new().</p> <p>SSL_CTX_get_record_padding_callback_arg() and SSL_get_record_padding_callback_arg() retrieve the arg value that is passed to the callback.</p> <p>SSL_CTX_set_block_padding() and SSL_set_block_padding() pads the record to a multiple of the block_size. A block_size of 0 or 1 disables block padding. The limit of block_size is SSL3_RT_MAX_PLAIN_LENGTH.</p> <p>The callback is invoked for every record before encryption. The type parameter is the TLS record type that is being processed; may be one of SSL3_RT_APPLICATION_DATA, SSL3_RT_HANDSHAKE, or SSL3_RT_ALERT. The len parameter is the current plaintext length of the record before encryption. The arg parameter is the value set via SSL_CTX_set_record_padding_callback_arg() or SSL_set_record_padding_callback_arg().</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#return-values","title":"RETURN VALUES","text":"<p>The SSL_CTX_get_record_padding_callback_arg() and SSL_get_record_padding_callback_arg() functions return the arg value assigned in the corresponding set functions.</p> <p>The SSL_CTX_set_block_padding() and SSL_set_block_padding() functions return 1 on success or 0 if block_size is too large.</p> <p>The cb returns the number of padding bytes to add to the record. A return of 0 indicates no padding will be added. A return value that causes the record to exceed the maximum record size (SSL3_RT_MAX_PLAIN_LENGTH) will pad out to the maximum record size.</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#notes","title":"NOTES","text":"<p>The default behavior is to add no padding to the record.</p> <p>A user-supplied padding callback function will override the behavior set by SSL_set_block_padding() or SSL_CTX_set_block_padding(). Setting the user-supplied callback to NULL will restore the configured block padding behavior.</p> <p>These functions only apply to TLS 1.3 records being written.</p> <p>Padding bytes are not added in constant-time.</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3)</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#history","title":"HISTORY","text":"<p>The record padding API was added for TLS 1.3 support in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_record_padding_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_security_level/","title":"SSL_CTX_set_security_level","text":""},{"location":"man3/SSL_CTX_set_security_level/#name","title":"NAME","text":"<p>SSL_CTX_set_security_level, SSL_set_security_level, SSL_CTX_get_security_level, SSL_get_security_level, SSL_CTX_set_security_callback, SSL_set_security_callback, SSL_CTX_get_security_callback, SSL_get_security_callback, SSL_CTX_set0_security_ex_data, SSL_set0_security_ex_data, SSL_CTX_get0_security_ex_data, SSL_get0_security_ex_data - SSL/TLS security framework</p>"},{"location":"man3/SSL_CTX_set_security_level/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_security_level(SSL_CTX *ctx, int level);\nvoid SSL_set_security_level(SSL *s, int level);\n\nint SSL_CTX_get_security_level(const SSL_CTX *ctx);\nint SSL_get_security_level(const SSL *s);\n\nvoid SSL_CTX_set_security_callback(SSL_CTX *ctx,\n                                   int (*cb)(SSL *s, SSL_CTX *ctx, int op,\n                                             int bits, int nid,\n                                             void *other, void *ex));\n\nvoid SSL_set_security_callback(SSL *s, int (*cb)(SSL *s, SSL_CTX *ctx, int op,\n                                                 int bits, int nid,\n                                                 void *other, void *ex));\n\nint (*SSL_CTX_get_security_callback(const SSL_CTX *ctx))(SSL *s, SSL_CTX *ctx, int op,\n                                                         int bits, int nid, void *other,\n                                                         void *ex);\nint (*SSL_get_security_callback(const SSL *s))(SSL *s, SSL_CTX *ctx, int op,\n                                               int bits, int nid, void *other,\n                                               void *ex);\n\nvoid SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex);\nvoid SSL_set0_security_ex_data(SSL *s, void *ex);\n\nvoid *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);\nvoid *SSL_get0_security_ex_data(const SSL *s);\n</code></pre>"},{"location":"man3/SSL_CTX_set_security_level/#description","title":"DESCRIPTION","text":"<p>The functions SSL_CTX_set_security_level() and SSL_set_security_level() set the security level to level. If not set the library default security level is used.</p> <p>The functions SSL_CTX_get_security_level() and SSL_get_security_level() retrieve the current security level.</p> <p>SSL_CTX_set_security_callback(), SSL_set_security_callback(), SSL_CTX_get_security_callback() and SSL_get_security_callback() get or set the security callback associated with ctx or s. If not set a default security callback is used. The meaning of the parameters and the behaviour of the default callbacks is described below.</p> <p>SSL_CTX_set0_security_ex_data(), SSL_set0_security_ex_data(), SSL_CTX_get0_security_ex_data() and SSL_get0_security_ex_data() set the extra data pointer passed to the ex parameter of the callback. This value is passed to the callback verbatim and can be set to any convenient application specific value.</p>"},{"location":"man3/SSL_CTX_set_security_level/#default-callback-behaviour","title":"DEFAULT CALLBACK BEHAVIOUR","text":"<p>If an application doesn't set its own security callback the default callback is used. It is intended to provide sane defaults. The meaning of each level is described below.</p> <ul> <li> <p>Level 0</p> <p>Everything is permitted. This retains compatibility with previous versions of OpenSSL.</p> </li> <li> <p>Level 1</p> <p>The security level corresponds to a minimum of 80 bits of security. Any parameters offering below 80 bits of security are excluded. As a result RSA, DSA and DH keys shorter than 1024 bits and ECC keys shorter than 160 bits are prohibited. All export cipher suites are prohibited since they all offer less than 80 bits of security. SSL version 2 is prohibited. Any cipher suite using MD5 for the MAC is also prohibited.</p> </li> <li> <p>Level 2</p> <p>Security level set to 112 bits of security. As a result RSA, DSA and DH keys shorter than 2048 bits and ECC keys shorter than 224 bits are prohibited. In addition to the level 1 exclusions any cipher suite using RC4 is also prohibited. SSL version 3 is also not allowed. Compression is disabled.</p> </li> <li> <p>Level 3</p> <p>Security level set to 128 bits of security. As a result RSA, DSA and DH keys shorter than 3072 bits and ECC keys shorter than 256 bits are prohibited. In addition to the level 2 exclusions cipher suites not offering forward secrecy are prohibited. TLS versions below 1.1 are not permitted. Session tickets are disabled.</p> </li> <li> <p>Level 4</p> <p>Security level set to 192 bits of security. As a result RSA, DSA and DH keys shorter than 7680 bits and ECC keys shorter than 384 bits are prohibited.  Cipher suites using SHA1 for the MAC are prohibited. TLS versions below 1.2 are not permitted.</p> </li> <li> <p>Level 5</p> <p>Security level set to 256 bits of security. As a result RSA, DSA and DH keys shorter than 15360 bits and ECC keys shorter than 512 bits are prohibited.</p> </li> </ul>"},{"location":"man3/SSL_CTX_set_security_level/#application-defined-security-callbacks","title":"APPLICATION DEFINED SECURITY CALLBACKS","text":"<p>Documentation to be provided.</p>"},{"location":"man3/SSL_CTX_set_security_level/#notes","title":"NOTES","text":"<p>The default security level can be configured when OpenSSL is compiled by setting -DOPENSSL_TLS_SECURITY_LEVEL=level. If not set then 1 is used.</p> <p>The security framework disables or reject parameters inconsistent with the set security level. In the past this was difficult as applications had to set a number of distinct parameters (supported ciphers, supported curves supported signature algorithms) to achieve this end and some cases (DH parameter size for example) could not be checked at all.</p> <p>By setting an appropriate security level much of this complexity can be avoided.</p> <p>The bits of security limits affect all relevant parameters including cipher suite encryption algorithms, supported ECC curves, supported signature algorithms, DH parameter sizes, certificate key sizes and signature algorithms. This limit applies no matter what other custom settings an application has set: so if the cipher suite is set to ALL then only cipher suites consistent with the security level are permissible.</p> <p>See SP800-57 for how the security limits are related to individual algorithms.</p> <p>Some security levels require large key sizes for non-ECC public key algorithms which can severely degrade performance. For example 256 bits of security requires the use of RSA keys of at least 15360 bits in size.</p> <p>Some restrictions can be gracefully handled: for example cipher suites offering insufficient security are not sent by the client and will not be selected by the server. Other restrictions such as the peer certificate key size or the DH parameter size will abort the handshake with a fatal alert.</p> <p>Attempts to set certificates or parameters with insufficient security are also blocked. For example trying to set a certificate using a 512 bit RSA key using SSL_CTX_use_certificate() at level 1. Applications which do not check the return values for errors will misbehave: for example it might appear that a certificate is not set at all because it had been rejected.</p>"},{"location":"man3/SSL_CTX_set_security_level/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_security_level() and SSL_set_security_level() do not return values.</p> <p>SSL_CTX_get_security_level() and SSL_get_security_level() return a integer that represents the security level with SSL_CTX or SSL, respectively.</p> <p>SSL_CTX_set_security_callback() and SSL_set_security_callback() do not return values.</p> <p>SSL_CTX_get_security_callback() and SSL_get_security_callback() return the pointer to the security callback or NULL if the callback is not set.</p> <p>SSL_CTX_get0_security_ex_data() and SSL_get0_security_ex_data() return the extra data pointer or NULL if the ex data is not set.</p>"},{"location":"man3/SSL_CTX_set_security_level/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_set_security_level/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2014-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_session_cache_mode/","title":"SSL_CTX_set_session_cache_mode","text":""},{"location":"man3/SSL_CTX_set_session_cache_mode/#name","title":"NAME","text":"<p>SSL_CTX_set_session_cache_mode, SSL_CTX_get_session_cache_mode - enable/disable session caching</p>"},{"location":"man3/SSL_CTX_set_session_cache_mode/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_session_cache_mode(SSL_CTX ctx, long mode);\nlong SSL_CTX_get_session_cache_mode(SSL_CTX ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_session_cache_mode/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_session_cache_mode() enables/disables session caching by setting the operational mode for ctx to &lt;mode&gt;.</p> <p>SSL_CTX_get_session_cache_mode() returns the currently used cache mode.</p>"},{"location":"man3/SSL_CTX_set_session_cache_mode/#notes","title":"NOTES","text":"<p>The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse. The sessions can be held in memory for each ctx, if more than one SSL_CTX object is being maintained, the sessions are unique for each SSL_CTX object.</p> <p>In order to reuse a session, a client must send the session's id to the server. It can only send exactly one id.  The server then either agrees to reuse the session or it starts a full handshake (to create a new session).</p> <p>A server will look up the session in its internal session storage. If the session is not found in internal storage or lookups for the internal storage have been deactivated (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP), the server will try the external storage if available.</p> <p>Since a client may try to reuse a session intended for use in a different context, the session id context must be set by the server (see SSL_CTX_set_session_id_context(3)).</p> <p>The following session cache modes and modifiers are available:</p> <ul> <li> <p>SSL_SESS_CACHE_OFF</p> <p>No session caching for client or server takes place.</p> </li> <li> <p>SSL_SESS_CACHE_CLIENT</p> <p>Client sessions are added to the session cache. As there is no reliable way for the OpenSSL library to know whether a session should be reused or which session to choose (due to the abstract BIO layer the SSL engine does not have details about the connection), the application must select the session to be reused by using the SSL_set_session(3) function. This option is not activated by default.</p> </li> <li> <p>SSL_SESS_CACHE_SERVER</p> <p>Server sessions are added to the session cache. When a client proposes a session to be reused, the server looks for the corresponding session in (first) the internal session cache (unless SSL_SESS_CACHE_NO_INTERNAL_LOOKUP is set), then (second) in the external cache if available. If the session is found, the server will try to reuse the session.  This is the default.</p> </li> <li> <p>SSL_SESS_CACHE_BOTH</p> <p>Enable both SSL_SESS_CACHE_CLIENT and SSL_SESS_CACHE_SERVER at the same time.</p> </li> <li> <p>SSL_SESS_CACHE_NO_AUTO_CLEAR</p> <p>Normally the session cache is checked for expired sessions every 255 connections using the SSL_CTX_flush_sessions(3) function. Since this may lead to a delay which cannot be controlled, the automatic flushing may be disabled and SSL_CTX_flush_sessions(3) can be called explicitly by the application.</p> </li> <li> <p>SSL_SESS_CACHE_NO_INTERNAL_LOOKUP</p> <p>By setting this flag, session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache, even if sessions are automatically stored there. If external session caching callbacks are in use, this flag guarantees that all lookups are directed to the external cache. As automatic lookup only applies for SSL/TLS servers, the flag has no effect on clients.</p> </li> <li> <p>SSL_SESS_CACHE_NO_INTERNAL_STORE</p> <p>Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER, sessions negotiated in an SSL/TLS handshake may be cached for possible reuse. Normally a new session is added to the internal cache as well as any external session caching (callback) that is configured for the SSL_CTX. This flag will prevent sessions being stored in the internal cache (though the application can add them manually using SSL_CTX_add_session(3)). Note: in any SSL/TLS servers where external caching is configured, any successful session lookups in the external cache (i.e. for session-resume requests) would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well.</p> </li> <li> <p>SSL_SESS_CACHE_NO_INTERNAL</p> <p>Enable both SSL_SESS_CACHE_NO_INTERNAL_LOOKUP and SSL_SESS_CACHE_NO_INTERNAL_STORE at the same time.</p> </li> </ul> <p>The default mode is SSL_SESS_CACHE_SERVER.</p>"},{"location":"man3/SSL_CTX_set_session_cache_mode/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_session_cache_mode() returns the previously set cache mode.</p> <p>SSL_CTX_get_session_cache_mode() returns the currently set cache mode.</p>"},{"location":"man3/SSL_CTX_set_session_cache_mode/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_set_session(3), SSL_session_reused(3), SSL_CTX_add_session(3), SSL_CTX_sess_number(3), SSL_CTX_sess_set_cache_size(3), SSL_CTX_sess_set_get_cb(3), SSL_CTX_set_session_id_context(3), SSL_CTX_set_timeout(3), SSL_CTX_flush_sessions(3)</p>"},{"location":"man3/SSL_CTX_set_session_cache_mode/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_session_id_context/","title":"SSL_CTX_set_session_id_context","text":""},{"location":"man3/SSL_CTX_set_session_id_context/#name","title":"NAME","text":"<p>SSL_CTX_set_session_id_context, SSL_set_session_id_context - set context within which session can be reused (server side only)</p>"},{"location":"man3/SSL_CTX_set_session_id_context/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_session_id_context(SSL_CTX *ctx, const unsigned char *sid_ctx,\n                                   unsigned int sid_ctx_len);\nint SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,\n                               unsigned int sid_ctx_len);\n</code></pre>"},{"location":"man3/SSL_CTX_set_session_id_context/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_session_id_context() sets the context sid_ctx of length sid_ctx_len within which a session can be reused for the ctx object.</p> <p>SSL_set_session_id_context() sets the context sid_ctx of length sid_ctx_len within which a session can be reused for the ssl object.</p>"},{"location":"man3/SSL_CTX_set_session_id_context/#notes","title":"NOTES","text":"<p>Sessions are generated within a certain context. When exporting/importing sessions with i2d_SSL_SESSION/d2i_SSL_SESSION it would be possible, to re-import a session generated from another context (e.g. another application), which might lead to malfunctions. Therefore, each application must set its own session id context sid_ctx which is used to distinguish the contexts and is stored in exported sessions. The sid_ctx can be any kind of binary data with a given length, it is therefore possible to use e.g. the name of the application and/or the hostname and/or service name ...</p> <p>The session id context becomes part of the session. The session id context is set by the SSL/TLS server. The SSL_CTX_set_session_id_context() and SSL_set_session_id_context() functions are therefore only useful on the server side.</p> <p>OpenSSL clients will check the session id context returned by the server when reusing a session.</p> <p>The maximum length of the sid_ctx is limited to SSL_MAX_SID_CTX_LENGTH.</p>"},{"location":"man3/SSL_CTX_set_session_id_context/#warnings","title":"WARNINGS","text":"<p>If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail.</p> <p>If a server returns a different session id context to an OpenSSL client when reusing a session, an error will be flagged and the handshake will fail. OpenSSL servers will always return the correct session id context, as an OpenSSL server checks the session id context itself before reusing a session as described above.</p>"},{"location":"man3/SSL_CTX_set_session_id_context/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_session_id_context() and SSL_set_session_id_context() return the following values:</p> <ul> <li> <p>0</p> <p>The length sid_ctx_len of the session id context sid_ctx exceeded the maximum allowed length of SSL_MAX_SID_CTX_LENGTH. The error is logged to the error stack.</p> </li> <li> <p>1</p> <p>The operation succeeded.</p> </li> </ul>"},{"location":"man3/SSL_CTX_set_session_id_context/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_CTX_set_session_id_context/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/","title":"SSL_CTX_set_session_ticket_cb","text":""},{"location":"man3/SSL_CTX_set_session_ticket_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_session_ticket_cb, SSL_SESSION_get0_ticket_appdata, SSL_SESSION_set1_ticket_appdata, SSL_CTX_generate_session_ticket_fn, SSL_CTX_decrypt_session_ticket_fn - manage session ticket application data</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*SSL_CTX_generate_session_ticket_fn)(SSL *s, void *arg);\ntypedef SSL_TICKET_RETURN (*SSL_CTX_decrypt_session_ticket_fn)(SSL *s, SSL_SESSION *ss,\n                                                               const unsigned char *keyname,\n                                                               size_t keyname_len,\n                                                               SSL_TICKET_STATUS status,\n                                                               void *arg);\nint SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,\n                                  SSL_CTX_generate_session_ticket_fn gen_cb,\n                                  SSL_CTX_decrypt_session_ticket_fn dec_cb,\n                                  void *arg);\nint SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len);\nint SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len);\n</code></pre>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_set_session_ticket_cb() sets the application callbacks gen_cb and dec_cb that are used by a server to set and get application data stored with a session, and placed into a session ticket. Either callback function may be set to NULL. The value of arg is passed to the callbacks.</p> <p>gen_cb is the application defined callback invoked when a session ticket is about to be created. The application can call SSL_SESSION_set1_ticket_appdata() at this time to add application data to the session ticket. The value of arg is the same as that given to SSL_CTX_set_session_ticket_cb(). The gen_cb callback is defined as type SSL_CTX_generate_session_ticket_fn.</p> <p>dec_cb is the application defined callback invoked after session ticket decryption has been attempted and any session ticket application data is available. If ticket decryption was successful then the ss argument contains the session data. The keyname and keyname_len arguments identify the key used to decrypt the session ticket. The status argument is the result of the ticket decryption. See the NOTES section below for further details. The value of arg is the same as that given to SSL_CTX_set_session_ticket_cb(). The dec_cb callback is defined as type SSL_CTX_decrypt_session_ticket_fn.</p> <p>SSL_SESSION_set1_ticket_appdata() sets the application data specified by data and len into ss which is then placed into any generated session tickets. It can be called at any time before a session ticket is created to update the data placed into the session ticket. However, given that sessions and tickets are created by the handshake, the gen_cb is provided to notify the application that a session ticket is about to be generated.</p> <p>SSL_SESSION_get0_ticket_appdata() assigns data to the session ticket application data and assigns len to the length of the session ticket application data from ss. The application data can be set via SSL_SESSION_set1_ticket_appdata() or by a session ticket. NULL will be assigned to data and 0 will be assigned to len if there is no session ticket application data. SSL_SESSION_get0_ticket_appdata() can be called any time after a session has been created. The dec_cb is provided to notify the application that a session ticket has just been decrypted.</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#notes","title":"NOTES","text":"<p>When the dec_cb callback is invoked, the SSL_SESSION ss has not yet been assigned to the SSL s. The status indicates the result of the ticket decryption. The callback must check the status value before performing any action, as it is called even if ticket decryption fails.</p> <p>The keyname and keyname_len arguments to dec_cb may be used to identify the key that was used to encrypt the session ticket.</p> <p>The status argument can be any of these values:</p> <ul> <li> <p>SSL_TICKET_EMPTY</p> <p>Empty ticket present. No ticket data will be used and a new ticket should be sent to the client. This only occurs in TLSv1.2 or below. In TLSv1.3 it is not valid for a client to send an empty ticket.</p> </li> <li> <p>SSL_TICKET_NO_DECRYPT</p> <p>The ticket couldn't be decrypted. No ticket data will be used and a new ticket should be sent to the client.</p> </li> <li> <p>SSL_TICKET_SUCCESS</p> <p>A ticket was successfully decrypted, any session ticket application data should be available. A new ticket should not be sent to the client.</p> </li> <li> <p>SSL_TICKET_SUCCESS_RENEW</p> <p>Same as SSL_TICKET_SUCCESS, but a new ticket should be sent to the client.</p> </li> </ul> <p>The return value can be any of these values:</p> <ul> <li> <p>SSL_TICKET_RETURN_ABORT</p> <p>The handshake should be aborted, either because of an error or because of some policy. Note that in TLSv1.3 a client may send more than one ticket in a single handshake. Therefore, just because one ticket is unacceptable it does not mean that all of them are. For this reason this option should be used with caution.</p> </li> <li> <p>SSL_TICKET_RETURN_IGNORE</p> <p>Do not use a ticket (if one was available). Do not send a renewed ticket to the client.</p> </li> <li> <p>SSL_TICKET_RETURN_IGNORE_RENEW</p> <p>Do not use a ticket (if one was available). Send a renewed ticket to the client.</p> <p>If the callback does not wish to change the default ticket behaviour then it should return this value if status is SSL_TICKET_EMPTY or SSL_TICKET_NO_DECRYPT.</p> </li> <li> <p>SSL_TICKET_RETURN_USE</p> <p>Use the ticket. Do not send a renewed ticket to the client. It is an error for the callback to return this value if status has a value other than SSL_TICKET_SUCCESS or SSL_TICKET_SUCCESS_RENEW.</p> <p>If the callback does not wish to change the default ticket behaviour then it should return this value if status is SSL_TICKET_SUCCESS.</p> </li> <li> <p>SSL_TICKET_RETURN_USE_RENEW</p> <p>Use the ticket. Send a renewed ticket to the client. It is an error for the callback to return this value if status has a value other than SSL_TICKET_SUCCESS or SSL_TICKET_SUCCESS_RENEW.</p> <p>If the callback does not wish to change the default ticket behaviour then it should return this value if status is SSL_TICKET_SUCCESS_RENEW.</p> </li> </ul> <p>If status has the value SSL_TICKET_EMPTY or SSL_TICKET_NO_DECRYPT then no session data will be available and the callback must not use the ss argument. If status has the value SSL_TICKET_SUCCESS or SSL_TICKET_SUCCESS_RENEW then the application can call SSL_SESSION_get0_ticket_appdata() using the session provided in the ss argument to retrieve the application data.</p> <p>When the gen_cb callback is invoked, the SSL_get_session() function can be used to retrieve the SSL_SESSION for SSL_SESSION_set1_ticket_appdata().</p> <p>By default, in TLSv1.2 and below, a new session ticket is not issued on a successful resumption and therefore gen_cb will not be called. In TLSv1.3 the default behaviour is to always issue a new ticket on resumption. In both cases this behaviour can be changed if a ticket key callback is in use (see SSL_CTX_set_tlsext_ticket_key_cb(3)).</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#return-values","title":"RETURN VALUES","text":"<p>The SSL_CTX_set_session_ticket_cb(), SSL_SESSION_set1_ticket_appdata() and SSL_SESSION_get0_ticket_appdata() functions return 1 on success and 0 on failure.</p> <p>The gen_cb callback must return 1 to continue the connection. A return of 0 will terminate the connection with an INTERNAL_ERROR alert.</p> <p>The dec_cb callback must return a value as described in NOTES above.</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_session(3)</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#history","title":"HISTORY","text":"<p>The SSL_CTX_set_session_ticket_cb(), SSL_SESSION_set1_ticket_appdata() and SSL_SESSION_get_ticket_appdata() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_session_ticket_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/","title":"SSL_CTX_set_split_send_fragment","text":""},{"location":"man3/SSL_CTX_set_split_send_fragment/#name","title":"NAME","text":"<p>SSL_CTX_set_max_send_fragment, SSL_set_max_send_fragment, SSL_CTX_set_split_send_fragment, SSL_set_split_send_fragment, SSL_CTX_set_max_pipelines, SSL_set_max_pipelines, SSL_CTX_set_default_read_buffer_len, SSL_set_default_read_buffer_len, SSL_CTX_set_tlsext_max_fragment_length, SSL_set_tlsext_max_fragment_length, SSL_SESSION_get_max_fragment_length - Control fragment size settings and pipelining operations</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_max_send_fragment(SSL_CTX *ctx, long);\nlong SSL_set_max_send_fragment(SSL *ssl, long m);\n\nlong SSL_CTX_set_max_pipelines(SSL_CTX *ctx, long m);\nlong SSL_set_max_pipelines(SSL_CTX *ssl, long m);\n\nlong SSL_CTX_set_split_send_fragment(SSL_CTX *ctx, long m);\nlong SSL_set_split_send_fragment(SSL *ssl, long m);\n\nvoid SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len);\nvoid SSL_set_default_read_buffer_len(SSL *s, size_t len);\n\nint SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode);\nint SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode);\nuint8_t SSL_SESSION_get_max_fragment_length(SSL_SESSION *session);\n</code></pre>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#description","title":"DESCRIPTION","text":"<p>Some engines are able to process multiple simultaneous crypto operations. This capability could be utilised to parallelise the processing of a single connection. For example a single write can be split into multiple records and each one encrypted independently and in parallel. Note: this will only work in TLS1.1+. There is no support in SSLv3, TLSv1.0 or DTLS (any version). This capability is known as \"pipelining\" within OpenSSL.</p> <p>In order to benefit from the pipelining capability. You need to have an engine that provides ciphers that support this. The OpenSSL \"dasync\" engine provides AES128-SHA based ciphers that have this capability. However, these are for development and test purposes only.</p> <p>SSL_CTX_set_max_send_fragment() and SSL_set_max_send_fragment() set the max_send_fragment parameter for SSL_CTX and SSL objects respectively. This value restricts the amount of plaintext bytes that will be sent in any one SSL/TLS record. By default its value is SSL3_RT_MAX_PLAIN_LENGTH (16384). These functions will only accept a value in the range 512 - SSL3_RT_MAX_PLAIN_LENGTH.</p> <p>SSL_CTX_set_max_pipelines() and SSL_set_max_pipelines() set the maximum number of pipelines that will be used at any one time. This value applies to both \"read\" pipelining and \"write\" pipelining. By default only one pipeline will be used (i.e. normal non-parallel operation). The number of pipelines set must be in the range 1 - SSL_MAX_PIPELINES (32). Setting this to a value &gt; 1 will also automatically turn on \"read_ahead\" (see SSL_CTX_set_read_ahead(3)). This is explained further below. OpenSSL will only every use more than one pipeline if a cipher suite is negotiated that uses a pipeline capable cipher provided by an engine.</p> <p>Pipelining operates slightly differently for reading encrypted data compared to writing encrypted data. SSL_CTX_set_split_send_fragment() and SSL_set_split_send_fragment() define how data is split up into pipelines when writing encrypted data. The number of pipelines used will be determined by the amount of data provided to the SSL_write_ex() or SSL_write() call divided by split_send_fragment.</p> <p>For example if split_send_fragment is set to 2000 and max_pipelines is 4 then:</p> <p>SSL_write/SSL_write_ex called with 0-2000 bytes == 1 pipeline used</p> <p>SSL_write/SSL_write_ex called with 2001-4000 bytes == 2 pipelines used</p> <p>SSL_write/SSL_write_ex called with 4001-6000 bytes == 3 pipelines used</p> <p>SSL_write/SSL_write_ex called with 6001+ bytes == 4 pipelines used</p> <p>split_send_fragment must always be less than or equal to max_send_fragment. By default it is set to be equal to max_send_fragment. This will mean that the same number of records will always be created as would have been created in the non-parallel case, although the data will be apportioned differently. In the parallel case data will be spread equally between the pipelines.</p> <p>Read pipelining is controlled in a slightly different way than with write pipelining. While reading we are constrained by the number of records that the peer (and the network) can provide to us in one go. The more records we can get in one go the more opportunity we have to parallelise the processing. As noted above when setting max_pipelines to a value greater than one, read_ahead is automatically set. The read_ahead parameter causes OpenSSL to attempt to read as much data into the read buffer as the network can provide and will fit into the buffer. Without this set data is read into the read buffer one record at a time. The more data that can be read, the more opportunity there is for parallelising the processing at the cost of increased memory overhead per connection. Setting read_ahead can impact the behaviour of the SSL_pending() function (see SSL_pending(3)).</p> <p>The SSL_CTX_set_default_read_buffer_len() and SSL_set_default_read_buffer_len() functions control the size of the read buffer that will be used. The len parameter sets the size of the buffer. The value will only be used if it is greater than the default that would have been used anyway. The normal default value depends on a number of factors but it will be at least SSL3_RT_MAX_PLAIN_LENGTH + SSL3_RT_MAX_ENCRYPTED_OVERHEAD (16704) bytes.</p> <p>SSL_CTX_set_tlsext_max_fragment_length() sets the default maximum fragment length negotiation mode via value mode to ctx. This setting affects only SSL instances created after this function is called. It affects the client-side as only its side may initiate this extension use.</p> <p>SSL_set_tlsext_max_fragment_length() sets the maximum fragment length negotiation mode via value mode to ssl. This setting will be used during a handshake when extensions are exchanged between client and server. So it only affects SSL sessions created after this function is called. It affects the client-side as only its side may initiate this extension use.</p> <p>SSL_SESSION_get_max_fragment_length() gets the maximum fragment length negotiated in session.</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#return-values","title":"RETURN VALUES","text":"<p>All non-void functions return 1 on success and 0 on failure.</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#notes","title":"NOTES","text":"<p>The Maximum Fragment Length extension support is optional on the server side. If the server does not support this extension then SSL_SESSION_get_max_fragment_length() will return: TLSEXT_max_fragment_length_DISABLED.</p> <p>The following modes are available:</p> <ul> <li> <p>TLSEXT_max_fragment_length_DISABLED</p> <p>Disables Maximum Fragment Length Negotiation (default).</p> </li> <li> <p>TLSEXT_max_fragment_length_512</p> <p>Sets Maximum Fragment Length to 512 bytes.</p> </li> <li> <p>TLSEXT_max_fragment_length_1024</p> <p>Sets Maximum Fragment Length to 1024.</p> </li> <li> <p>TLSEXT_max_fragment_length_2048</p> <p>Sets Maximum Fragment Length to 2048.</p> </li> <li> <p>TLSEXT_max_fragment_length_4096</p> <p>Sets Maximum Fragment Length to 4096.</p> </li> </ul> <p>With the exception of SSL_CTX_set_default_read_buffer_len() SSL_set_default_read_buffer_len(), SSL_CTX_set_tlsext_max_fragment_length(), SSL_set_tlsext_max_fragment_length() and SSL_SESSION_get_max_fragment_length() all these functions are implemented using macros.</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_read_ahead(3), SSL_pending(3)</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#history","title":"HISTORY","text":"<p>The SSL_CTX_set_max_pipelines(), SSL_set_max_pipelines(), SSL_CTX_set_split_send_fragment(), SSL_set_split_send_fragment(), SSL_CTX_set_default_read_buffer_len() and  SSL_set_default_read_buffer_len() functions were added in OpenSSL 1.1.0.</p> <p>The SSL_CTX_set_tlsext_max_fragment_length(), SSL_set_tlsext_max_fragment_length() and SSL_SESSION_get_max_fragment_length() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_split_send_fragment/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_ssl_version/","title":"SSL_CTX_set_ssl_version","text":""},{"location":"man3/SSL_CTX_set_ssl_version/#name","title":"NAME","text":"<p>SSL_CTX_set_ssl_version, SSL_set_ssl_method, SSL_get_ssl_method - choose a new TLS/SSL method</p>"},{"location":"man3/SSL_CTX_set_ssl_version/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *method);\nint SSL_set_ssl_method(SSL *s, const SSL_METHOD *method);\nconst SSL_METHOD *SSL_get_ssl_method(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_CTX_set_ssl_version/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_ssl_version() sets a new default TLS/SSL method for SSL objects newly created from this ctx. SSL objects already created with SSL_new(3) are not affected, except when SSL_clear(3) is being called.</p> <p>SSL_set_ssl_method() sets a new TLS/SSL method for a particular ssl object. It may be reset, when SSL_clear() is called.</p> <p>SSL_get_ssl_method() returns a function pointer to the TLS/SSL method set in ssl.</p>"},{"location":"man3/SSL_CTX_set_ssl_version/#notes","title":"NOTES","text":"<p>The available method choices are described in SSL_CTX_new(3).</p> <p>When SSL_clear(3) is called and no session is connected to an SSL object, the method of the SSL object is reset to the method currently set in the corresponding SSL_CTX object.</p>"},{"location":"man3/SSL_CTX_set_ssl_version/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur for SSL_CTX_set_ssl_version() and SSL_set_ssl_method():</p> <ul> <li> <p>0</p> <p>The new choice failed, check the error stack to find out the reason.</p> </li> <li> <p>1</p> <p>The operation succeeded.</p> </li> </ul>"},{"location":"man3/SSL_CTX_set_ssl_version/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_new(3), SSL_new(3), SSL_clear(3), ssl(7), SSL_set_connect_state(3)</p>"},{"location":"man3/SSL_CTX_set_ssl_version/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/","title":"SSL_CTX_set_stateless_cookie_generate_cb","text":""},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_stateless_cookie_generate_cb, SSL_CTX_set_stateless_cookie_verify_cb, SSL_CTX_set_cookie_generate_cb, SSL_CTX_set_cookie_verify_cb - Callback functions for stateless TLS1.3 cookies</p>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_stateless_cookie_generate_cb(\n    SSL_CTX *ctx,\n    int (*gen_stateless_cookie_cb) (SSL *ssl,\n                                    unsigned char *cookie,\n                                    size_t *cookie_len));\nvoid SSL_CTX_set_stateless_cookie_verify_cb(\n    SSL_CTX *ctx,\n    int (*verify_stateless_cookie_cb) (SSL *ssl,\n                                       const unsigned char *cookie,\n                                       size_t cookie_len));\n\nvoid SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,\n                                    int (*app_gen_cookie_cb) (SSL *ssl,\n                                                              unsigned char\n                                                              *cookie,\n                                                              unsigned int\n                                                              *cookie_len));\nvoid SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,\n                                  int (*app_verify_cookie_cb) (SSL *ssl,\n                                                               const unsigned\n                                                               char *cookie,\n                                                               unsigned int\n                                                               cookie_len));\n</code></pre>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_stateless_cookie_generate_cb() sets the callback used by SSL_stateless(3) to generate the application-controlled portion of the cookie provided to clients in the HelloRetryRequest transmitted as a response to a ClientHello with a missing or invalid cookie. gen_stateless_cookie_cb() must write at most SSL_COOKIE_LENGTH bytes into cookie, and must write the number of bytes written to cookie_len. If a cookie cannot be generated, a zero return value can be used to abort the handshake.</p> <p>SSL_CTX_set_stateless_cookie_verify_cb() sets the callback used by SSL_stateless(3) to determine whether the application-controlled portion of a ClientHello cookie is valid. The cookie data is pointed to by cookie and is of length cookie_len. A nonzero return value from verify_stateless_cookie_cb() communicates that the cookie is valid. The integrity of the entire cookie, including the application-controlled portion, is automatically verified by HMAC before verify_stateless_cookie_cb() is called.</p> <p>SSL_CTX_set_cookie_generate_cb() sets the callback used by DTLSv1_listen(3) to generate the cookie provided to clients in the HelloVerifyRequest transmitted as a response to a ClientHello with a missing or invalid cookie. app_gen_cookie_cb()  must write at most DTLS1_COOKIE_LENGTH bytes into cookie, and must write the number of bytes written to cookie_len. If a cookie cannot be generated, a zero return value can be used to abort the handshake.</p> <p>SSL_CTX_set_cookie_verify_cb() sets the callback used by DTLSv1_listen(3) to determine whether the cookie in a ClientHello is valid. The cookie data is pointed to by cookie and is of length cookie_len. A nonzero return value from app_verify_cookie_cb() communicates that the cookie is valid. The integrity of the cookie is not verified by OpenSSL. This is an application responsibility.</p>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#return-values","title":"RETURN VALUES","text":"<p>Neither function returns a value.</p>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#see-also","title":"SEE ALSO","text":"<p>SSL_stateless(3), DTLSv1_listen(3)</p>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#history","title":"HISTORY","text":"<p>SSL_CTX_set_stateless_cookie_generate_cb() and SSL_CTX_set_stateless_cookie_verify_cb() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_stateless_cookie_generate_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_timeout/","title":"SSL_CTX_set_timeout","text":""},{"location":"man3/SSL_CTX_set_timeout/#name","title":"NAME","text":"<p>SSL_CTX_set_timeout, SSL_CTX_get_timeout - manipulate timeout values for session caching</p>"},{"location":"man3/SSL_CTX_set_timeout/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_timeout(SSL_CTX *ctx, long t);\nlong SSL_CTX_get_timeout(SSL_CTX *ctx);\n</code></pre>"},{"location":"man3/SSL_CTX_set_timeout/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_timeout() sets the timeout for newly created sessions for ctx to t. The timeout value t must be given in seconds.</p> <p>SSL_CTX_get_timeout() returns the currently set timeout value for ctx.</p>"},{"location":"man3/SSL_CTX_set_timeout/#notes","title":"NOTES","text":"<p>Whenever a new session is created, it is assigned a maximum lifetime. This lifetime is specified by storing the creation time of the session and the timeout value valid at this time. If the actual time is later than creation time plus timeout, the session is not reused.</p> <p>Due to this realization, all sessions behave according to the timeout value valid at the time of the session negotiation. Changes of the timeout value do not affect already established sessions.</p> <p>The expiration time of a single session can be modified using the SSL_SESSION_get_time(3) family of functions.</p> <p>Expired sessions are removed from the internal session cache, whenever SSL_CTX_flush_sessions(3) is called, either directly by the application or automatically (see SSL_CTX_set_session_cache_mode(3))</p> <p>The default value for session timeout is decided on a per protocol basis, see SSL_get_default_timeout(3). All currently supported protocols have the same default timeout value of 300 seconds.</p> <p>This timeout value is used as the ticket lifetime hint for stateless session tickets. It is also used as the timeout value within the ticket itself.</p> <p>For TLSv1.3, RFC8446 limits transmission of this value to 1 week (604800 seconds).</p> <p>For TLSv1.2, tickets generated during an initial handshake use the value as specified. Tickets generated during a resumed handshake have a value of 0 for the ticket lifetime hint.</p>"},{"location":"man3/SSL_CTX_set_timeout/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_timeout() returns the previously set timeout value.</p> <p>SSL_CTX_get_timeout() returns the currently set timeout value.</p>"},{"location":"man3/SSL_CTX_set_timeout/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_session_cache_mode(3), SSL_SESSION_get_time(3), SSL_CTX_flush_sessions(3), SSL_get_default_timeout(3)</p>"},{"location":"man3/SSL_CTX_set_timeout/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/","title":"SSL_CTX_set_tlsext_servername_callback","text":""},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_tlsext_servername_callback, SSL_CTX_set_tlsext_servername_arg, SSL_get_servername_type, SSL_get_servername, SSL_set_tlsext_host_name - handle server name indication (SNI)</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_CTX_set_tlsext_servername_callback(SSL_CTX *ctx,\n                                  int (*cb)(SSL *s, int *al, void *arg));\nlong SSL_CTX_set_tlsext_servername_arg(SSL_CTX *ctx, void *arg);\n\nconst char *SSL_get_servername(const SSL *s, const int type);\nint SSL_get_servername_type(const SSL *s);\n\nint SSL_set_tlsext_host_name(const SSL *s, const char *name);\n</code></pre>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#description","title":"DESCRIPTION","text":"<p>The functionality provided by the servername callback is mostly superseded by the ClientHello callback, which can be set using SSL_CTX_set_client_hello_cb(). However, even where the ClientHello callback is used, the servername callback is still necessary in order to acknowledge the servername requested by the client.</p> <p>SSL_CTX_set_tlsext_servername_callback() sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection. When cb is NULL, SNI is not used.</p> <p>The servername callback should return one of the following values:</p> <ul> <li> <p>SSL_TLSEXT_ERR_OK</p> <p>This is used to indicate that the servername requested by the client has been accepted. Typically a server will call SSL_set_SSL_CTX() in the callback to set up a different configuration for the selected servername in this case.</p> </li> <li> <p>SSL_TLSEXT_ERR_ALERT_FATAL</p> <p>In this case the servername requested by the client is not accepted and the handshake will be aborted. The value of the alert to be used should be stored in the location pointed to by the al parameter to the callback. By default this value is initialised to SSL_AD_UNRECOGNIZED_NAME.</p> </li> <li> <p>SSL_TLSEXT_ERR_ALERT_WARNING</p> <p>If this value is returned then the servername is not accepted by the server. However, the handshake will continue and send a warning alert instead. The value of the alert should be stored in the location pointed to by the al parameter as for SSL_TLSEXT_ERR_ALERT_FATAL above. Note that TLSv1.3 does not support warning alerts, so if TLSv1.3 has been negotiated then this return value is treated the same way as SSL_TLSEXT_ERR_NOACK.</p> </li> <li> <p>SSL_TLSEXT_ERR_NOACK</p> <p>This return value indicates that the servername is not accepted by the server. No alerts are sent and the server will not acknowledge the requested servername.</p> </li> </ul> <p>SSL_CTX_set_tlsext_servername_arg() sets a context-specific argument to be passed into the callback (via the arg parameter) for this SSL_CTX.</p> <p>The behaviour of SSL_get_servername() depends on a number of different factors. In particular note that in TLSv1.3 the servername is negotiated in every handshake. In TLSv1.2 the servername is only negotiated on initial handshakes and not on resumption handshakes.</p> <ul> <li> <p>On the client, before the handshake</p> <p>If a servername has been set via a call to SSL_set_tlsext_host_name() then it will return that servername.</p> <p>If one has not been set, but a TLSv1.2 resumption is being attempted and the session from the original handshake had a servername accepted by the server then it will return that servername.</p> <p>Otherwise it returns NULL.</p> </li> <li> <p>On the client, during or after the handshake and a TLSv1.2 (or below) resumption occurred</p> <p>If the session from the original handshake had a servername accepted by the server then it will return that servername.</p> <p>Otherwise it returns the servername set via SSL_set_tlsext_host_name() or NULL if it was not called.</p> </li> <li> <p>On the client, during or after the handshake and a TLSv1.2 (or below) resumption did not occur</p> <p>It will return the servername set via SSL_set_tlsext_host_name() or NULL if it was not called.</p> </li> <li> <p>On the server, before the handshake</p> <p>The function will always return NULL before the handshake</p> </li> <li> <p>On the server, after the servername extension has been processed and a TLSv1.2 (or below) resumption occurred</p> <p>If a servername was accepted by the server in the original handshake then it will return that servername, or NULL otherwise.</p> </li> <li> <p>On the server, after the servername extension has been processed and a TLSv1.2 (or below) resumption did not occur</p> <p>The function will return the servername requested by the client in this handshake or NULL if none was requested.</p> </li> </ul> <p>Note that the ClientHello callback occurs before a servername extension from the client is processed. The servername, certificate and ALPN callbacks occur after a servername extension from the client is processed.</p> <p>SSL_get_servername_type() returns the servername type or -1 if no servername is present. Currently the only supported type (defined in RFC3546) is TLSEXT_NAMETYPE_host_name.</p> <p>SSL_set_tlsext_host_name() sets the server name indication ClientHello extension to contain the value name. The type of server name indication extension is set to TLSEXT_NAMETYPE_host_name (defined in RFC3546).</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#notes","title":"NOTES","text":"<p>Several callbacks are executed during ClientHello processing, including the ClientHello, ALPN, and servername callbacks.  The ClientHello callback is executed first, then the servername callback, followed by the ALPN callback.</p> <p>The SSL_set_tlsext_host_name() function should only be called on SSL objects that will act as clients; otherwise the configured name will be ignored.</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_tlsext_servername_callback() and SSL_CTX_set_tlsext_servername_arg() both always return 1 indicating success. SSL_set_tlsext_host_name() returns 1 on success, 0 in case of error.</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_alpn_select_cb(3), SSL_get0_alpn_selected(3), SSL_CTX_set_client_hello_cb(3)</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#history","title":"HISTORY","text":"<p>SSL_get_servername() historically provided some unexpected results in certain corner cases. This has been fixed from OpenSSL 1.1.1e.</p> <p>Prior to 1.1.1e, when the client requested a servername in an initial TLSv1.2 handshake, the server accepted it, and then the client successfully resumed but set a different explicit servername in the second handshake then when called by the client it returned the servername from the second handshake. This has now been changed to return the servername requested in the original handshake.</p> <p>Also prior to 1.1.1e, if the client sent a servername in the first handshake but the server did not accept it, and then a second handshake occurred where TLSv1.2 resumption was successful then when called by the server it returned the servername requested in the original handshake. This has now been changed to NULL.</p>"},{"location":"man3/SSL_CTX_set_tlsext_servername_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_tlsext_status_cb/","title":"SSL_CTX_set_tlsext_status_cb","text":""},{"location":"man3/SSL_CTX_set_tlsext_status_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_tlsext_status_cb, SSL_CTX_get_tlsext_status_cb, SSL_CTX_set_tlsext_status_arg, SSL_CTX_get_tlsext_status_arg, SSL_CTX_set_tlsext_status_type, SSL_CTX_get_tlsext_status_type, SSL_set_tlsext_status_type, SSL_get_tlsext_status_type, SSL_get_tlsext_status_ocsp_resp, SSL_set_tlsext_status_ocsp_resp - OCSP Certificate Status Request functions</p>"},{"location":"man3/SSL_CTX_set_tlsext_status_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/tls1.h&gt;\n\nlong SSL_CTX_set_tlsext_status_cb(SSL_CTX *ctx, int (*callback)(SSL *, void *));\nlong SSL_CTX_get_tlsext_status_cb(SSL_CTX *ctx, int (**callback)(SSL *, void *));\n\nlong SSL_CTX_set_tlsext_status_arg(SSL_CTX *ctx, void *arg);\nlong SSL_CTX_get_tlsext_status_arg(SSL_CTX *ctx, void **arg);\n\nlong SSL_CTX_set_tlsext_status_type(SSL_CTX *ctx, int type);\nlong SSL_CTX_get_tlsext_status_type(SSL_CTX *ctx);\n\nlong SSL_set_tlsext_status_type(SSL *s, int type);\nlong SSL_get_tlsext_status_type(SSL *s);\n\nlong SSL_get_tlsext_status_ocsp_resp(ssl, unsigned char **resp);\nlong SSL_set_tlsext_status_ocsp_resp(ssl, unsigned char *resp, int len);\n</code></pre>"},{"location":"man3/SSL_CTX_set_tlsext_status_cb/#description","title":"DESCRIPTION","text":"<p>A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_CTX_set_tlsext_status_type() function prior to the creation of any SSL objects. Alternatively an application can call the SSL_set_tlsext_status_type() function on an individual SSL object prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the type argument. Calling SSL_CTX_get_tlsext_status_type() will return the type TLSEXT_STATUSTYPE_ocsp previously set via SSL_CTX_set_tlsext_status_type() or -1 if not set.</p> <p>The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake). The callback previously set via SSL_CTX_set_tlsext_status_cb() can be retrieved by calling SSL_CTX_get_tlsext_status_cb(), and the argument by calling SSL_CTX_get_tlsext_status_arg().</p> <p>On the client side SSL_get_tlsext_status_type() can be used to determine whether the client has previously called SSL_set_tlsext_status_type(). It will return TLSEXT_STATUSTYPE_ocsp if it has been called or -1 otherwise. On the server side SSL_get_tlsext_status_type() can be used to determine whether the client requested OCSP stapling. If the client requested it then this function will return TLSEXT_STATUSTYPE_ocsp, or -1 otherwise.</p> <p>The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp(). The value *resp will be updated to point to the OCSP response data and the return value will be the length of that data. Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE() function. If the server has not provided any response data then *resp will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp() will be -1.</p> <p>A server application must also call the SSL_CTX_set_tlsext_status_cb() function if it wants to be able to provide clients with OCSP Certificate Status responses. Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate(); obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp(). A pointer to the response data should be provided in the resp argument, and the length of that data should be in the len argument.</p>"},{"location":"man3/SSL_CTX_set_tlsext_status_cb/#return-values","title":"RETURN VALUES","text":"<p>The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if it is acceptable.</p> <p>The callback when used on the server side should return with either SSL_TLSEXT_ERR_OK (meaning that the OCSP response that has been set should be returned), SSL_TLSEXT_ERR_NOACK (meaning that an OCSP response should not be returned) or SSL_TLSEXT_ERR_ALERT_FATAL (meaning that a fatal error has occurred).</p> <p>SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(), SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.</p> <p>SSL_CTX_get_tlsext_status_type() returns the value previously set by SSL_CTX_set_tlsext_status_type(), or -1 if not set.</p> <p>SSL_get_tlsext_status_ocsp_resp() returns the length of the OCSP response data or -1 if there is no OCSP response data.</p> <p>SSL_get_tlsext_status_type() returns TLSEXT_STATUSTYPE_ocsp on the client side if SSL_set_tlsext_status_type() was previously called, or on the server side if the client requested OCSP stapling. Otherwise -1 is returned.</p>"},{"location":"man3/SSL_CTX_set_tlsext_status_cb/#history","title":"HISTORY","text":"<p>The SSL_get_tlsext_status_type(), SSL_CTX_get_tlsext_status_type() and SSL_CTX_set_tlsext_status_type() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_CTX_set_tlsext_status_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/","title":"SSL_CTX_set_tlsext_ticket_key_cb","text":""},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#name","title":"NAME","text":"<p>SSL_CTX_set_tlsext_ticket_key_cb - set a callback for session ticket processing</p>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/tls1.h&gt;\n\nlong SSL_CTX_set_tlsext_ticket_key_cb(SSL_CTX sslctx,\n    int (*cb)(SSL *s, unsigned char key_name[16],\n              unsigned char iv[EVP_MAX_IV_LENGTH],\n              EVP_CIPHER_CTX *ctx, HMAC_CTX *hctx, int enc));\n</code></pre>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_tlsext_ticket_key_cb() sets a callback function cb for handling session tickets for the ssl context sslctx. Session tickets, defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state. It only applies to TLS and there is no SSLv3 implementation.</p> <p>The callback function cb will be called for every client instigated TLS session when session ticket extension is presented in the TLS hello message. It is the responsibility of this function to create or retrieve the cryptographic parameters and to maintain their state.</p> <p>The OpenSSL library uses your callback function to help implement a common TLS ticket construction state according to RFC5077 Section 4 such that per session state is unnecessary and a small set of cryptographic variables needs to be maintained by the callback function implementation.</p> <p>In order to reuse a session, a TLS client must send the a session ticket extension to the server. The client can only send exactly one session ticket. The server, through the callback function, either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket.</p> <p>Before the callback function is started ctx and hctx have been initialised with EVP_CIPHER_CTX_reset(3) and HMAC_CTX_reset(3) respectively.</p> <p>For new sessions tickets, when the client doesn't present a session ticket, or an attempted retrieval of the ticket failed, or a renew option was indicated, the callback function will be called with enc equal to 1. The OpenSSL library expects that the function will set an arbitrary name, initialize iv, and set the cipher context ctx and the hash context hctx.</p> <p>The name is 16 characters long and is used as a key identifier.</p> <p>The iv length is the length of the IV of the corresponding cipher. The maximum IV length is EVP_MAX_IV_LENGTH bytes defined in evp.h.</p> <p>The initialization vector iv should be a random value. The cipher context ctx should use the initialisation vector iv. The cipher context can be set using EVP_EncryptInit_ex(3). The hmac context can be set using HMAC_Init_ex(3).</p> <p>When the client presents a session ticket, the callback function with be called with enc set to 0 indicating that the cb function should retrieve a set of parameters. In this case name and iv have already been parsed out of the session ticket. The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retrieved parameters and the initialization vector iv. using a function like EVP_DecryptInit_ex(3). The hctx needs to be set using HMAC_Init_ex(3).</p> <p>If the name is still valid but a renewal of the ticket is required the callback function should return 2. The library will call the callback again with an argument of enc equal to 1 to set the new ticket.</p> <p>The return value of the cb function is used by OpenSSL to determine what further processing will occur. The following return values have meaning:</p> <ul> <li> <p>2</p> <p>This indicates that the ctx and hctx have been set and the session can continue on those parameters. Additionally it indicates that the session ticket is in a renewal period and should be replaced. The OpenSSL library will call cb again with an enc argument of 1 to set the new ticket (see RFC5077 3.3 paragraph 2).</p> </li> <li> <p>1</p> <p>This indicates that the ctx and hctx have been set and the session can continue on those parameters.</p> </li> <li> <p>0</p> <p>This indicates that it was not possible to set/retrieve a session ticket and the SSL/TLS session will continue by negotiating a set of cryptographic parameters or using the alternate SSL/TLS resumption mechanism, session ids.</p> <p>If called with enc equal to 0 the library will call the cb again to get a new set of parameters.</p> </li> <li> <p>less than 0</p> <p>This indicates an error.</p> </li> </ul>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#notes","title":"NOTES","text":"<p>Session resumption shortcuts the TLS so that the client certificate negotiation don't occur. It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket. In a resumed session the applications will have all this state information available exactly as if a full negotiation had occurred.</p> <p>If an attacker can obtain the key used to encrypt a session ticket, they can obtain the master secret for any ticket using that key and decrypt any traffic using that session: even if the cipher suite supports forward secrecy. As a result applications may wish to use multiple keys and avoid using long term keys stored in files.</p> <p>Applications can use longer keys to maintain a consistent level of security. For example if a cipher suite uses 256 bit ciphers but only a 128 bit ticket key the overall security is only 128 bits because breaking the ticket key will enable an attacker to obtain the session keys.</p>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#return-values","title":"RETURN VALUES","text":"<p>Returns 1 to indicate the callback function was set and 0 otherwise.</p>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#examples","title":"EXAMPLES","text":"<p>Reference Implementation:</p> <pre><code>SSL_CTX_set_tlsext_ticket_key_cb(SSL, ssl_tlsext_ticket_key_cb);\n...\n\nstatic int ssl_tlsext_ticket_key_cb(SSL *s, unsigned char key_name[16],\n                                    unsigned char *iv, EVP_CIPHER_CTX *ctx,\n                                    HMAC_CTX *hctx, int enc)\n{\n    your_type_t *key; /* something that you need to implement */\n\n    if (enc) { /* create new session */\n        if (RAND_bytes(iv, EVP_MAX_IV_LENGTH) &lt;= 0)\n            return -1; /* insufficient random */\n\n        key = currentkey(); /* something that you need to implement */\n        if (key == NULL) {\n            /* current key doesn't exist or isn't valid */\n            key = createkey(); /*\n                                * Something that you need to implement.\n                                * createkey needs to initialise a name,\n                                * an aes_key, a hmac_key and optionally\n                                * an expire time.\n                                */\n            if (key == NULL) /* key couldn't be created */\n                return 0;\n        }\n        memcpy(key_name, key-&gt;name, 16);\n\n        EVP_EncryptInit_ex(&amp;ctx, EVP_aes_256_cbc(), NULL, key-&gt;aes_key, iv);\n        HMAC_Init_ex(&amp;hctx, key-&gt;hmac_key, 32, EVP_sha256(), NULL);\n\n        return 1;\n\n    } else { /* retrieve session */\n        time_t t = time(NULL);\n        key = findkey(key_name); /* something that you need to implement */\n\n        if (key == NULL || key-&gt;expire &lt; t)\n            return 0;\n\n        HMAC_Init_ex(&amp;hctx, key-&gt;hmac_key, 32, EVP_sha256(), NULL);\n        EVP_DecryptInit_ex(&amp;ctx, EVP_aes_256_cbc(), NULL, key-&gt;aes_key, iv);\n\n        if (key-&gt;expire &lt; t - RENEW_TIME) { /* RENEW_TIME: implement */\n            /*\n             * return 2 - This session will get a new ticket even though the\n             * current one is still valid.\n             */\n            return 2;\n        }\n        return 1;\n    }\n}\n</code></pre>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_set_session(3), SSL_session_reused(3), SSL_CTX_add_session(3), SSL_CTX_sess_number(3), SSL_CTX_sess_set_get_cb(3), SSL_CTX_set_session_id_context(3),</p>"},{"location":"man3/SSL_CTX_set_tlsext_ticket_key_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2014-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/","title":"SSL_CTX_set_tlsext_use_srtp","text":""},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/#name","title":"NAME","text":"<p>SSL_CTX_set_tlsext_use_srtp, SSL_set_tlsext_use_srtp, SSL_get_srtp_profiles, SSL_get_selected_srtp_profile - Configure and query SRTP support</p>"},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/srtp.h&gt;\n\nint SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles);\nint SSL_set_tlsext_use_srtp(SSL *ssl, const char *profiles);\n\nSTACK_OF(SRTP_PROTECTION_PROFILE) *SSL_get_srtp_profiles(SSL *ssl);\nSRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s);\n</code></pre>"},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/#description","title":"DESCRIPTION","text":"<p>SRTP is the Secure Real-Time Transport Protocol. OpenSSL implements support for the \"use_srtp\" DTLS extension defined in RFC5764. This provides a mechanism for establishing SRTP keying material, algorithms and parameters using DTLS. This capability may be used as part of an implementation that conforms to RFC5763. OpenSSL does not implement SRTP itself or RFC5763. Note that OpenSSL does not support the use of SRTP Master Key Identifiers (MKIs). Also note that this extension is only supported in DTLS. Any SRTP configuration will be ignored if a TLS connection is attempted.</p> <p>An OpenSSL client wishing to send the \"use_srtp\" extension should call SSL_CTX_set_tlsext_use_srtp() to set its use for all SSL objects subsequently created from an SSL_CTX. Alternatively a client may call SSL_set_tlsext_use_srtp() to set its use for an individual SSL object. The profiles parameters should point to a NUL-terminated, colon delimited list of SRTP protection profile names.</p> <p>The currently supported protection profile names are:</p> <ul> <li> <p>SRTP_AES128_CM_SHA1_80</p> <p>This corresponds to SRTP_AES128_CM_HMAC_SHA1_80 defined in RFC5764.</p> </li> <li> <p>SRTP_AES128_CM_SHA1_32</p> <p>This corresponds to SRTP_AES128_CM_HMAC_SHA1_32 defined in RFC5764.</p> </li> <li> <p>SRTP_AEAD_AES_128_GCM</p> <p>This corresponds to the profile of the same name defined in RFC7714.</p> </li> <li> <p>SRTP_AEAD_AES_256_GCM</p> <p>This corresponds to the profile of the same name defined in RFC7714.</p> </li> </ul> <p>Supplying an unrecognised protection profile name will result in an error.</p> <p>An OpenSSL server wishing to support the \"use_srtp\" extension should also call SSL_CTX_set_tlsext_use_srtp() or SSL_set_tlsext_use_srtp() to indicate the protection profiles that it is willing to negotiate.</p> <p>The currently configured list of protection profiles for either a client or a server can be obtained by calling SSL_get_srtp_profiles(). This returns a stack of SRTP_PROTECTION_PROFILE objects. The memory pointed to in the return value of this function should not be freed by the caller.</p> <p>After a handshake has been completed the negotiated SRTP protection profile (if any) can be obtained (on the client or the server) by calling SSL_get_selected_srtp_profile(). This function will return NULL if no SRTP protection profile was negotiated. The memory returned from this function should not be freed by the caller.</p> <p>If an SRTP protection profile has been successfully negotiated then the SRTP keying material (on both the client and server) should be obtained via a call to SSL_export_keying_material(3). This call should provide a label value of \"EXTRACTOR-dtls_srtp\" and a NULL context value (use_context is 0). The total length of keying material obtained should be equal to two times the sum of the master key length and the salt length as defined for the protection profile in use. This provides the client write master key, the server write master key, the client write master salt and the server write master salt in that order.</p>"},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_tlsext_use_srtp() and SSL_set_tlsext_use_srtp() return 0 on success or 1 on error.</p> <p>SSL_get_srtp_profiles() returns a stack of SRTP_PROTECTION_PROFILE objects on success or NULL on error or if no protection profiles have been configured.</p> <p>SSL_get_selected_srtp_profile() returns a pointer to an SRTP_PROTECTION_PROFILE object if one has been negotiated or NULL otherwise.</p>"},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/#see-also","title":"SEE ALSO","text":"<p>SSL_export_keying_material(3)</p>"},{"location":"man3/SSL_CTX_set_tlsext_use_srtp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/","title":"SSL_CTX_set_tmp_dh_callback","text":""},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#name","title":"NAME","text":"<p>SSL_CTX_set_tmp_dh_callback, SSL_CTX_set_tmp_dh, SSL_set_tmp_dh_callback, SSL_set_tmp_dh - handle DH keys for ephemeral key exchange</p>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,\n                                 DH *(*tmp_dh_callback)(SSL *ssl, int is_export,\n                                                        int keylength));\nlong SSL_CTX_set_tmp_dh(SSL_CTX *ctx, DH *dh);\n\nvoid SSL_set_tmp_dh_callback(SSL *ctx,\n                             DH *(*tmp_dh_callback)(SSL *ssl, int is_export,\n                                                    int keylength));\nlong SSL_set_tmp_dh(SSL *ssl, DH *dh)\n</code></pre>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_tmp_dh_callback() sets the callback function for ctx to be used when a DH parameters are required to tmp_dh_callback. The callback is inherited by all ssl objects created from ctx.</p> <p>SSL_CTX_set_tmp_dh() sets DH parameters to be used to be dh. The key is inherited by all ssl objects created from ctx.</p> <p>SSL_set_tmp_dh_callback() sets the callback only for ssl.</p> <p>SSL_set_tmp_dh() sets the parameters only for ssl.</p> <p>These functions apply to SSL/TLS servers only.</p>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#notes","title":"NOTES","text":"<p>When using a cipher with RSA authentication, an ephemeral DH key exchange can take place. Ciphers with DSA keys always use ephemeral DH keys as well. In these cases, the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing. Anonymous ciphers (without a permanent server key) also use ephemeral DH keys.</p> <p>Using ephemeral DH key exchange yields forward secrecy, as the connection can only be decrypted, when the DH key is known. By generating a temporary DH key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) key, as this key was only used for signing.</p> <p>In order to perform a DH key exchange the server must use a DH group (DH parameters) and generate a DH key. The server will always generate a new DH key during the negotiation.</p> <p>As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam(1) application. This application guarantees that \"strong\" primes are used.</p> <p>Files dh2048.pem, and dh4096.pem in the 'apps' directory of the current version of the OpenSSL distribution contain the 'SKIP' DH parameters, which use safe primes and were generated verifiably pseudo-randomly. These files can be converted into C code using the -C option of the dhparam(1) application. Generation of custom DH parameters during installation should still be preferred to stop an attacker from specializing on a commonly used group. File dh1024.pem contains old parameters that must not be used by applications.</p> <p>An application may either directly specify the DH parameters or can supply the DH parameters via a callback function.</p> <p>Previous versions of the callback used is_export and keylength parameters to control parameter generation for export and non-export cipher suites. Modern servers that do not support export cipher suites are advised to either use SSL_CTX_set_tmp_dh() or alternatively, use the callback but ignore keylength and is_export and simply supply at least 2048-bit parameters in the callback.</p>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_set_tmp_dh_callback() and SSL_set_tmp_dh_callback() do not return diagnostic output.</p> <p>SSL_CTX_set_tmp_dh() and SSL_set_tmp_dh() do return 1 on success and 0 on failure. Check the error queue to find out the reason of failure.</p>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#examples","title":"EXAMPLES","text":"<p>Setup DH parameters with a key length of 2048 bits. (Error handling partly left out.)</p> <p>Command-line parameter generation:</p> <pre><code>$ openssl dhparam -out dh_param_2048.pem 2048\n</code></pre> <p>Code for setting up parameters during server initialization:</p> <pre><code>SSL_CTX ctx = SSL_CTX_new();\n\nDH *dh_2048 = NULL;\nFILE *paramfile = fopen(\"dh_param_2048.pem\", \"r\");\n\nif (paramfile) {\n    dh_2048 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);\n    fclose(paramfile);\n} else {\n    /* Error. */\n}\nif (dh_2048 == NULL)\n    /* Error. */\nif (SSL_CTX_set_tmp_dh(ctx, dh_2048) != 1)\n    /* Error. */\n...\n</code></pre>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_cipher_list(3), SSL_CTX_set_options(3), ciphers(1), dhparam(1)</p>"},{"location":"man3/SSL_CTX_set_tmp_dh_callback/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_set_verify/","title":"SSL_CTX_set_verify","text":""},{"location":"man3/SSL_CTX_set_verify/#name","title":"NAME","text":"<p>SSL_get_ex_data_X509_STORE_CTX_idx, SSL_CTX_set_verify, SSL_set_verify, SSL_CTX_set_verify_depth, SSL_set_verify_depth, SSL_verify_cb, SSL_verify_client_post_handshake, SSL_set_post_handshake_auth, SSL_CTX_set_post_handshake_auth - set peer certificate verification parameters</p>"},{"location":"man3/SSL_CTX_set_verify/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*SSL_verify_cb)(int preverify_ok, X509_STORE_CTX *x509_ctx);\n\nvoid SSL_CTX_set_verify(SSL_CTX *ctx, int mode, SSL_verify_cb verify_callback);\nvoid SSL_set_verify(SSL *ssl, int mode, SSL_verify_cb verify_callback);\nSSL_get_ex_data_X509_STORE_CTX_idx(void);\n\nvoid SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);\nvoid SSL_set_verify_depth(SSL *ssl, int depth);\n\nint SSL_verify_client_post_handshake(SSL *ssl);\nvoid SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val);\nvoid SSL_set_post_handshake_auth(SSL *ssl, int val);\n</code></pre>"},{"location":"man3/SSL_CTX_set_verify/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_set_verify() sets the verification flags for ctx to be mode and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback.</p> <p>SSL_set_verify() sets the verification flags for ssl to be mode and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback. In this case last verify_callback set specifically for this ssl remains. If no special callback was set before, the default callback for the underlying ctx is used, that was valid at the time ssl was created with SSL_new(3). Within the callback function, SSL_get_ex_data_X509_STORE_CTX_idx can be called to get the data index of the current SSL object that is doing the verification.</p> <p>SSL_CTX_set_verify_depth() sets the maximum depth for the certificate chain verification that shall be allowed for ctx.</p> <p>SSL_set_verify_depth() sets the maximum depth for the certificate chain verification that shall be allowed for ssl.</p> <p>SSL_CTX_set_post_handshake_auth() and SSL_set_post_handshake_auth() enable the Post-Handshake Authentication extension to be added to the ClientHello such that post-handshake authentication can be requested by the server. If val is 0 then the extension is not sent, otherwise it is. By default the extension is not sent. A certificate callback will need to be set via SSL_CTX_set_client_cert_cb() if no certificate is provided at initialization.</p> <p>SSL_verify_client_post_handshake() causes a CertificateRequest message to be sent by a server on the given ssl connection. The SSL_VERIFY_PEER flag must be set; the SSL_VERIFY_POST_HANDSHAKE flag is optional.</p>"},{"location":"man3/SSL_CTX_set_verify/#notes","title":"NOTES","text":"<p>The verification of certificates can be controlled by a set of logically or'ed mode flags:</p> <ul> <li> <p>SSL_VERIFY_NONE</p> <p>Server mode: the server will not send a client certificate request to the client, so the client will not send a certificate.</p> <p>Client mode: if not using an anonymous cipher (by default disabled), the server will send a certificate which will be checked. The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result(3) function. The handshake will be continued regardless of the verification result.</p> </li> <li> <p>SSL_VERIFY_PEER</p> <p>Server mode: the server sends a client certificate request to the client. The certificate returned (if any) is checked. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT, SSL_VERIFY_CLIENT_ONCE and SSL_VERIFY_POST_HANDSHAKE flags.</p> <p>Client mode: the server certificate is verified. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. If no server certificate is sent, because an anonymous cipher is used, SSL_VERIFY_PEER is ignored.</p> </li> <li> <p>SSL_VERIFY_FAIL_IF_NO_PEER_CERT</p> <p>Server mode: if the client did not return a certificate, the TLS/SSL handshake is immediately terminated with a \"handshake failure\" alert. This flag must be used together with SSL_VERIFY_PEER.</p> <p>Client mode: ignored (see BUGS)</p> </li> <li> <p>SSL_VERIFY_CLIENT_ONCE</p> <p>Server mode: only request a client certificate once during the connection. Do not ask for a client certificate again during renegotiation or post-authentication if a certificate was requested during the initial handshake. This flag must be used together with SSL_VERIFY_PEER.</p> <p>Client mode: ignored (see BUGS)</p> </li> <li> <p>SSL_VERIFY_POST_HANDSHAKE</p> <p>Server mode: the server will not send a client certificate request during the initial handshake, but will send the request via SSL_verify_client_post_handshake(). This allows the SSL_CTX or SSL to be configured for post-handshake peer verification before the handshake occurs. This flag must be used together with SSL_VERIFY_PEER. TLSv1.3 only; no effect on pre-TLSv1.3 connections.</p> <p>Client mode: ignored (see BUGS)</p> </li> </ul> <p>If the mode is SSL_VERIFY_NONE none of the other flags may be set.</p> <p>The actual verification procedure is performed either using the built-in verification procedure or using another application provided verification function set with SSL_CTX_set_cert_verify_callback(3). The following descriptions apply in the case of the built-in procedure. An application provided procedure also has access to the verify depth information and the verify_callback() function, but the way this information is used may be different.</p> <p>SSL_CTX_set_verify_depth() and SSL_set_verify_depth() set a limit on the number of certificates between the end-entity and trust-anchor certificates. Neither the end-entity nor the trust-anchor certificates count against depth. If the certificate chain needed to reach a trusted issuer is longer than depth+2, X509_V_ERR_CERT_CHAIN_TOO_LONG will be issued. The depth count is \"level 0:peer certificate\", \"level 1: CA certificate\", \"level 2: higher level CA certificate\", and so on. Setting the maximum depth to 2 allows the levels 0, 1, 2 and 3 (0 being the end-entity and 3 the trust-anchor). The default depth limit is 100, allowing for the peer certificate, at most 100 intermediate CA certificates and a final trust anchor certificate.</p> <p>The verify_callback function is used to control the behaviour when the SSL_VERIFY_PEER flag is set. It must be supplied by the application and receives two arguments: preverify_ok indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0). x509_ctx is a pointer to the complete context used for the certificate chain verification.</p> <p>The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate. At each level signatures and issuer attributes are checked. Whenever a verification error is found, the error number is stored in x509_ctx and verify_callback is called with preverify_ok=0. By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES). If no error is found for a certificate, verify_callback is called with preverify_ok=1 before advancing to the next level.</p> <p>The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with \"verification failed\" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback.</p> <p>If no verify_callback is specified, the default callback will be used. Its return value is identical to preverify_ok, so that any verification failure will lead to a termination of the TLS/SSL handshake with an alert message, if SSL_VERIFY_PEER is set.</p> <p>After calling SSL_set_post_handshake_auth(), the client will need to add a certificate or certificate callback to its configuration before it can successfully authenticate. This must be called before SSL_connect().</p> <p>SSL_verify_client_post_handshake() requires that verify flags have been previously set, and that a client sent the post-handshake authentication extension. When the client returns a certificate the verify callback will be invoked. A write operation must take place for the Certificate Request to be sent to the client, this can be done with SSL_do_handshake() or SSL_write_ex(). Only one certificate request may be outstanding at any time.</p> <p>When post-handshake authentication occurs, a refreshed NewSessionTicket message is sent to the client.</p>"},{"location":"man3/SSL_CTX_set_verify/#bugs","title":"BUGS","text":"<p>In client mode, it is not checked whether the SSL_VERIFY_PEER flag is set, but whether any flags other than SSL_VERIFY_NONE are set. This can lead to unexpected behaviour if SSL_VERIFY_PEER and other flags are not used as required.</p>"},{"location":"man3/SSL_CTX_set_verify/#return-values","title":"RETURN VALUES","text":"<p>The SSL*_set_verify*() functions do not provide diagnostic information.</p> <p>The SSL_verify_client_post_handshake() function returns 1 if the request succeeded, and 0 if the request failed. The error stack can be examined to determine the failure reason.</p>"},{"location":"man3/SSL_CTX_set_verify/#examples","title":"EXAMPLES","text":"<p>The following code sequence realizes an example verify_callback function that will always continue the TLS/SSL handshake regardless of verification failure, if wished. The callback realizes a verification depth limit with more informational output.</p> <p>All verification errors are printed; information about the certificate chain is printed on request. The example is realized for a server that does allow but not require client certificates.</p> <p>The example makes use of the ex_data technique to store application data into/retrieve application data from the SSL structure (see CRYPTO_get_ex_new_index(3), SSL_get_ex_data_X509_STORE_CTX_idx(3)).</p> <pre><code>...\ntypedef struct {\n  int verbose_mode;\n  int verify_depth;\n  int always_continue;\n} mydata_t;\nint mydata_index;\n\n...\nstatic int verify_callback(int preverify_ok, X509_STORE_CTX *ctx)\n{\n    char    buf[256];\n    X509   *err_cert;\n    int     err, depth;\n    SSL    *ssl;\n    mydata_t *mydata;\n\n    err_cert = X509_STORE_CTX_get_current_cert(ctx);\n    err = X509_STORE_CTX_get_error(ctx);\n    depth = X509_STORE_CTX_get_error_depth(ctx);\n\n    /*\n     * Retrieve the pointer to the SSL of the connection currently treated\n     * and the application specific data stored into the SSL object.\n     */\n    ssl = X509_STORE_CTX_get_ex_data(ctx, SSL_get_ex_data_X509_STORE_CTX_idx());\n    mydata = SSL_get_ex_data(ssl, mydata_index);\n\n    X509_NAME_oneline(X509_get_subject_name(err_cert), buf, 256);\n\n    /*\n     * Catch a too long certificate chain. The depth limit set using\n     * SSL_CTX_set_verify_depth() is by purpose set to \"limit+1\" so\n     * that whenever the \"depth&gt;verify_depth\" condition is met, we\n     * have violated the limit and want to log this error condition.\n     * We must do it here, because the CHAIN_TOO_LONG error would not\n     * be found explicitly; only errors introduced by cutting off the\n     * additional certificates would be logged.\n     */\n    if (depth &gt; mydata-&gt;verify_depth) {\n        preverify_ok = 0;\n        err = X509_V_ERR_CERT_CHAIN_TOO_LONG;\n        X509_STORE_CTX_set_error(ctx, err);\n    }\n    if (!preverify_ok) {\n        printf(\"verify error:num=%d:%s:depth=%d:%s\\n\", err,\n               X509_verify_cert_error_string(err), depth, buf);\n    } else if (mydata-&gt;verbose_mode) {\n        printf(\"depth=%d:%s\\n\", depth, buf);\n    }\n\n    /*\n     * At this point, err contains the last verification error. We can use\n     * it for something special\n     */\n    if (!preverify_ok &amp;&amp; (err == X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT)) {\n        X509_NAME_oneline(X509_get_issuer_name(err_cert), buf, 256);\n        printf(\"issuer= %s\\n\", buf);\n    }\n\n    if (mydata-&gt;always_continue)\n        return 1;\n    else\n        return preverify_ok;\n}\n...\n\nmydata_t mydata;\n\n...\nmydata_index = SSL_get_ex_new_index(0, \"mydata index\", NULL, NULL, NULL);\n\n...\nSSL_CTX_set_verify(ctx, SSL_VERIFY_PEER | SSL_VERIFY_CLIENT_ONCE,\n                   verify_callback);\n\n/*\n * Let the verify_callback catch the verify_depth error so that we get\n * an appropriate error in the logfile.\n */\nSSL_CTX_set_verify_depth(verify_depth + 1);\n\n/*\n * Set up the SSL specific data into \"mydata\" and store it into th SSL\n * structure.\n */\nmydata.verify_depth = verify_depth; ...\nSSL_set_ex_data(ssl, mydata_index, &amp;mydata);\n\n...\nSSL_accept(ssl);       /* check of success left out for clarity */\nif (peer = SSL_get_peer_certificate(ssl)) {\n    if (SSL_get_verify_result(ssl) == X509_V_OK) {\n        /* The client sent a certificate which verified OK */\n    }\n}\n</code></pre>"},{"location":"man3/SSL_CTX_set_verify/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3), SSL_CTX_get_verify_mode(3), SSL_get_verify_result(3), SSL_CTX_load_verify_locations(3), SSL_get_peer_certificate(3), SSL_CTX_set_cert_verify_callback(3), SSL_get_ex_data_X509_STORE_CTX_idx(3), SSL_CTX_set_client_cert_cb(3), CRYPTO_get_ex_new_index(3)</p>"},{"location":"man3/SSL_CTX_set_verify/#history","title":"HISTORY","text":"<p>The SSL_VERIFY_POST_HANDSHAKE option, and the SSL_verify_client_post_handshake() and SSL_set_post_handshake_auth() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_set_verify/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_use_certificate/","title":"SSL_CTX_use_certificate","text":""},{"location":"man3/SSL_CTX_use_certificate/#name","title":"NAME","text":"<p>SSL_CTX_use_certificate, SSL_CTX_use_certificate_ASN1, SSL_CTX_use_certificate_file, SSL_use_certificate, SSL_use_certificate_ASN1, SSL_use_certificate_file, SSL_CTX_use_certificate_chain_file, SSL_use_certificate_chain_file, SSL_CTX_use_PrivateKey, SSL_CTX_use_PrivateKey_ASN1, SSL_CTX_use_PrivateKey_file, SSL_CTX_use_RSAPrivateKey, SSL_CTX_use_RSAPrivateKey_ASN1, SSL_CTX_use_RSAPrivateKey_file, SSL_use_PrivateKey_file, SSL_use_PrivateKey_ASN1, SSL_use_PrivateKey, SSL_use_RSAPrivateKey, SSL_use_RSAPrivateKey_ASN1, SSL_use_RSAPrivateKey_file, SSL_CTX_check_private_key, SSL_check_private_key, SSL_CTX_use_cert_and_key, SSL_use_cert_and_key - load certificate and key data</p>"},{"location":"man3/SSL_CTX_use_certificate/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);\nint SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, unsigned char *d);\nint SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);\nint SSL_use_certificate(SSL *ssl, X509 *x);\nint SSL_use_certificate_ASN1(SSL *ssl, unsigned char *d, int len);\nint SSL_use_certificate_file(SSL *ssl, const char *file, int type);\n\nint SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);\nint SSL_use_certificate_chain_file(SSL *ssl, const char *file);\n\nint SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);\nint SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx, unsigned char *d,\n                                long len);\nint SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);\nint SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);\nint SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned char *d, long len);\nint SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type);\nint SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);\nint SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, unsigned char *d, long len);\nint SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);\nint SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);\nint SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len);\nint SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);\n\nint SSL_CTX_check_private_key(const SSL_CTX *ctx);\nint SSL_check_private_key(const SSL *ssl);\n\nint SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x, EVP_PKEY *pkey, STACK_OF(X509) *chain, int override);\nint SSL_use_cert_and_key(SSL *ssl, X509 *x, EVP_PKEY *pkey, STACK_OF(X509) *chain, int override);\n</code></pre>"},{"location":"man3/SSL_CTX_use_certificate/#description","title":"DESCRIPTION","text":"<p>These functions load the certificates and private keys into the SSL_CTX or SSL object, respectively.</p> <p>The SSL_CTX_* class of functions loads the certificates and keys into the SSL_CTX object ctx. The information is passed to SSL objects ssl created from ctx with SSL_new(3) by copying, so that changes applied to ctx do not propagate to already existing SSL objects.</p> <p>The SSL_* class of functions only loads certificates and keys into a specific SSL object. The specific information is kept, when SSL_clear(3) is called for this SSL object.</p> <p>SSL_CTX_use_certificate() loads the certificate x into ctx, SSL_use_certificate() loads x into ssl. The rest of the certificates needed to form the complete certificate chain can be specified using the SSL_CTX_add_extra_chain_cert(3) function.</p> <p>SSL_CTX_use_certificate_ASN1() loads the ASN1 encoded certificate from the memory location d (with length len) into ctx, SSL_use_certificate_ASN1() loads the ASN1 encoded certificate into ssl.</p> <p>SSL_CTX_use_certificate_file() loads the first certificate stored in file into ctx. The formatting type of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_use_certificate_file() loads the certificate from file into ssl. See the NOTES section on why SSL_CTX_use_certificate_chain_file() should be preferred.</p> <p>SSL_CTX_use_certificate_chain_file() loads a certificate chain from file into ctx. The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA. SSL_use_certificate_chain_file() is similar except it loads the certificate chain into ssl.</p> <p>SSL_CTX_use_PrivateKey() adds pkey as private key to ctx. SSL_CTX_use_RSAPrivateKey() adds the private key rsa of type RSA to ctx. SSL_use_PrivateKey() adds pkey as private key to ssl; SSL_use_RSAPrivateKey() adds rsa as private key of type RSA to ssl. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate() or SSL_CTX_use_certificate() before setting the private key with SSL_CTX_use_PrivateKey() or SSL_use_PrivateKey().</p> <p>SSL_CTX_use_cert_and_key() and SSL_use_cert_and_key() assign the X.509 certificate x, private key key, and certificate chain onto the corresponding ssl or ctx. The pkey argument must be the private key of the X.509 certificate x. If the override argument is 0, then x, pkey and chain are set only if all were not previously set. If override is non-0, then the certificate, private key and chain certs are always set. If pkey is NULL, then the public key of x is used as the private key. This is intended to be used with hardware (via the ENGINE interface) that stores the private key securely, such that it cannot be accessed by OpenSSL. The reference count of the public key is incremented (twice if there is no private key); it is not copied nor duplicated. This allows all private key validations checks to succeed without an actual private key being assigned via SSL_CTX_use_PrivateKey(), etc.</p> <p>SSL_CTX_use_PrivateKey_ASN1() adds the private key of type pk stored at memory location d (length len) to ctx. SSL_CTX_use_RSAPrivateKey_ASN1() adds the private key of type RSA stored at memory location d (length len) to ctx. SSL_use_PrivateKey_ASN1() and SSL_use_RSAPrivateKey_ASN1() add the private key to ssl.</p> <p>SSL_CTX_use_PrivateKey_file() adds the first private key found in file to ctx. The formatting type of the private key must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_CTX_use_RSAPrivateKey_file() adds the first private RSA key found in file to ctx. SSL_use_PrivateKey_file() adds the first private key found in file to ssl; SSL_use_RSAPrivateKey_file() adds the first private RSA key found to ssl.</p> <p>SSL_CTX_check_private_key() checks the consistency of a private key with the corresponding certificate loaded into ctx. If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked. If e.g. the last item was a RSA certificate or key, the RSA key/certificate pair will be checked. SSL_check_private_key() performs the same check for ssl. If no key/certificate was explicitly added for this ssl, the last item added into ctx will be checked.</p>"},{"location":"man3/SSL_CTX_use_certificate/#notes","title":"NOTES","text":"<p>The internal certificate store of OpenSSL can hold several private key/certificate pairs at a time. The certificate used depends on the cipher selected, see also SSL_CTX_set_cipher_list(3).</p> <p>When reading certificates and private keys from file, files of type SSL_FILETYPE_ASN1 (also known as DER, binary encoding) can only contain one certificate or private key, consequently SSL_CTX_use_certificate_chain_file() is only applicable to PEM formatting. Files of type SSL_FILETYPE_PEM can contain more than one item.</p> <p>SSL_CTX_use_certificate_chain_file() adds the first certificate found in the file to the certificate store. The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert(3). Note: versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types, OpenSSL 1.0.2 and later have a separate chain store for each type. SSL_CTX_use_certificate_chain_file() should be used instead of the SSL_CTX_use_certificate_file() function in order to allow the use of complete certificate chains even when no trusted CA storage is used or when the CA issuing the certificate shall not be added to the trusted CA storage.</p> <p>If additional certificates are needed to complete the chain during the TLS negotiation, CA certificates are additionally looked up in the locations of trusted CA certificates, see SSL_CTX_load_verify_locations(3).</p> <p>The private keys loaded from file can be encrypted. In order to successfully load encrypted keys, a function returning the passphrase must have been supplied, see SSL_CTX_set_default_passwd_cb(3). (Certificate files might be encrypted as well from the technical point of view, it however does not make sense as the data in the certificate is considered public anyway.)</p> <p>All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set. Similarly all of the functions to set a new private key will replace any private key that has already been set. Applications should call SSL_CTX_check_private_key(3) or SSL_check_private_key(3) as appropriate after loading a new certificate and private key to confirm that the certificate and key match.</p>"},{"location":"man3/SSL_CTX_use_certificate/#return-values","title":"RETURN VALUES","text":"<p>On success, the functions return 1. Otherwise check out the error stack to find out the reason.</p>"},{"location":"man3/SSL_CTX_use_certificate/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3), SSL_clear(3), SSL_CTX_load_verify_locations(3), SSL_CTX_set_default_passwd_cb(3), SSL_CTX_set_cipher_list(3), SSL_CTX_set_client_CA_list(3), SSL_CTX_set_client_cert_cb(3), SSL_CTX_add_extra_chain_cert(3)</p>"},{"location":"man3/SSL_CTX_use_certificate/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/","title":"SSL_CTX_use_psk_identity_hint","text":""},{"location":"man3/SSL_CTX_use_psk_identity_hint/#name","title":"NAME","text":"<p>SSL_psk_server_cb_func, SSL_psk_find_session_cb_func, SSL_CTX_use_psk_identity_hint, SSL_use_psk_identity_hint, SSL_CTX_set_psk_server_callback, SSL_set_psk_server_callback, SSL_CTX_set_psk_find_session_callback, SSL_set_psk_find_session_callback - set PSK identity hint to use</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*SSL_psk_find_session_cb_func)(SSL *ssl,\n                                            const unsigned char *identity,\n                                            size_t identity_len,\n                                            SSL_SESSION **sess);\n\n\nvoid SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,\n                                           SSL_psk_find_session_cb_func cb);\nvoid SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb);\n\ntypedef unsigned int (*SSL_psk_server_cb_func)(SSL *ssl,\n                                               const char *identity,\n                                               unsigned char *psk,\n                                               unsigned int max_psk_len);\n\nint SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *hint);\nint SSL_use_psk_identity_hint(SSL *ssl, const char *hint);\n\nvoid SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb);\nvoid SSL_set_psk_server_callback(SSL *ssl, SSL_psk_server_cb_func cb);\n</code></pre>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#description","title":"DESCRIPTION","text":"<p>A server application wishing to use TLSv1.3 PSKs should set a callback using either SSL_CTX_set_psk_find_session_callback() or SSL_set_psk_find_session_callback() as appropriate.</p> <p>The callback function is given a pointer to the SSL connection in ssl and an identity in identity of length identity_len. The callback function should identify an SSL_SESSION object that provides the PSK details and store it in *sess. The SSL_SESSION object should, as a minimum, set the master key, the ciphersuite and the protocol version. See SSL_CTX_set_psk_use_session_callback(3) for details.</p> <p>It is also possible for the callback to succeed but not supply a PSK. In this case no PSK will be used but the handshake will continue. To do this the callback should return successfully and ensure that *sess is NULL.</p> <p>Identity hints are not relevant for TLSv1.3. A server application wishing to use PSK ciphersuites for TLSv1.2 and below may call SSL_CTX_use_psk_identity_hint() to set the given NUL-terminated PSK identity hint hint for SSL context object ctx. SSL_use_psk_identity_hint() sets the given NUL-terminated PSK identity hint hint for the SSL connection object ssl. If hint is NULL the current hint from ctx or ssl is deleted.</p> <p>In the case where PSK identity hint is NULL, the server does not send the ServerKeyExchange message to the client.</p> <p>A server application wishing to use PSKs for TLSv1.2 and below must provide a callback function which is called when the server receives the ClientKeyExchange message from the client. The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used during the connection setup phase. The callback is set using the functions SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback(). The callback function is given the connection in parameter ssl, NUL-terminated PSK identity sent by the client in parameter identity, and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored.</p> <p>The callback for use in TLSv1.2 will also work in TLSv1.3 although it is recommended to use SSL_CTX_set_psk_find_session_callback() or SSL_set_psk_find_session_callback() for this purpose instead. If TLSv1.3 has been negotiated then OpenSSL will first check to see if a callback has been set via SSL_CTX_set_psk_find_session_callback() or SSL_set_psk_find_session_callback() and it will use that in preference. If no such callback is present then it will check to see if a callback has been set via SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback() and use that. In this case the handshake digest will default to SHA-256 for any returned PSK. TLSv1.3 early data exchanges are possible in PSK connections only with the SSL_psk_find_session_cb_func callback, and are not possible with the SSL_psk_server_cb_func callback.</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#notes","title":"NOTES","text":"<p>A connection established via a TLSv1.3 PSK will appear as if session resumption has occurred so that SSL_session_reused(3) will return true.</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_use_psk_identity_hint() and SSL_use_psk_identity_hint() return 1 on success, 0 otherwise.</p> <p>Return values from the TLSv1.2 and below server callback are interpreted as follows:</p> <ul> <li> <p>0</p> <p>PSK identity was not found. An \"unknown_psk_identity\" alert message will be sent and the connection setup fails.</p> </li> <li> <p>&gt;0</p> <p>PSK identity was found and the server callback has provided the PSK successfully in parameter psk. Return value is the length of psk in bytes. It is an error to return a value greater than max_psk_len.</p> <p>If the PSK identity was not found but the callback instructs the protocol to continue anyway, the callback must provide some random data to psk and return the length of the random data, so the connection will fail with decryption_error before it will be finished completely.</p> </li> </ul> <p>The SSL_psk_find_session_cb_func callback should return 1 on success or 0 on failure. In the event of failure the connection setup fails.</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#notes_1","title":"NOTES","text":"<p>There are no known security issues with sharing the same PSK between TLSv1.2 (or below) and TLSv1.3. However, the RFC has this note of caution:</p> <p>\"While there is no known way in which the same PSK might produce related output in both versions, only limited analysis has been done.  Implementations can ensure safety from cross-protocol related output by not reusing PSKs between TLS 1.3 and TLS 1.2.\"</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_psk_use_session_callback(3), SSL_set_psk_use_session_callback(3)</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#history","title":"HISTORY","text":"<p>SSL_CTX_set_psk_find_session_callback() and SSL_set_psk_find_session_callback() were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_CTX_use_psk_identity_hint/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_CTX_use_serverinfo/","title":"SSL_CTX_use_serverinfo","text":""},{"location":"man3/SSL_CTX_use_serverinfo/#name","title":"NAME","text":"<p>SSL_CTX_use_serverinfo_ex, SSL_CTX_use_serverinfo, SSL_CTX_use_serverinfo_file - use serverinfo extension</p>"},{"location":"man3/SSL_CTX_use_serverinfo/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,\n                              const unsigned char *serverinfo,\n                              size_t serverinfo_length);\n\nint SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,\n                           size_t serverinfo_length);\n\nint SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);\n</code></pre>"},{"location":"man3/SSL_CTX_use_serverinfo/#description","title":"DESCRIPTION","text":"<p>These functions load \"serverinfo\" TLS extensions into the SSL_CTX. A \"serverinfo\" extension is returned in response to an empty ClientHello Extension.</p> <p>SSL_CTX_use_serverinfo_ex() loads one or more serverinfo extensions from a byte array into ctx. The version parameter specifies the format of the byte array provided in *serverinfo which is of length serverinfo_length.</p> <p>If version is SSL_SERVERINFOV2 then the extensions in the array must consist of a 4-byte context, a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data. The context and type values have the same meaning as for SSL_CTX_add_custom_ext(3). If serverinfo is being loaded for extensions to be added to a Certificate message, then the extension will only be added for the first certificate in the message (which is always the end-entity certificate).</p> <p>If version is SSL_SERVERINFOV1 then the extensions in the array must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data. The type value has the same meaning as for SSL_CTX_add_custom_ext(3). The following default context value will be used in this case:</p> <pre><code>SSL_EXT_TLS1_2_AND_BELOW_ONLY | SSL_EXT_CLIENT_HELLO\n| SSL_EXT_TLS1_2_SERVER_HELLO | SSL_EXT_IGNORE_ON_RESUMPTION\n</code></pre> <p>SSL_CTX_use_serverinfo() does the same thing as SSL_CTX_use_serverinfo_ex() except that there is no version parameter so a default version of SSL_SERVERINFOV1 is used instead.</p> <p>SSL_CTX_use_serverinfo_file() loads one or more serverinfo extensions from file into ctx.  The extensions must be in PEM format.  Each extension must be in a format as described above for SSL_CTX_use_serverinfo_ex().  Each PEM extension name must begin with the phrase \"BEGIN SERVERINFOV2 FOR \" for SSL_SERVERINFOV2 data or \"BEGIN SERVERINFO FOR \" for SSL_SERVERINFOV1 data.</p> <p>If more than one certificate (RSA/DSA) is installed using SSL_CTX_use_certificate(), the serverinfo extension will be loaded into the last certificate installed.  If e.g. the last item was a RSA certificate, the loaded serverinfo extension data will be loaded for that certificate.  To use the serverinfo extension for multiple certificates, SSL_CTX_use_serverinfo() needs to be called multiple times, once after each time a certificate is loaded via a call to SSL_CTX_use_certificate().</p>"},{"location":"man3/SSL_CTX_use_serverinfo/#return-values","title":"RETURN VALUES","text":"<p>On success, the functions return 1. On failure, the functions return 0.  Check out the error stack to find out the reason.</p>"},{"location":"man3/SSL_CTX_use_serverinfo/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2013-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_free/","title":"SSL_SESSION_free","text":""},{"location":"man3/SSL_SESSION_free/#name","title":"NAME","text":"<p>SSL_SESSION_new, SSL_SESSION_dup, SSL_SESSION_up_ref, SSL_SESSION_free - create, free and manage SSL_SESSION structures</p>"},{"location":"man3/SSL_SESSION_free/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL_SESSION *SSL_SESSION_new(void);\nSSL_SESSION *SSL_SESSION_dup(SSL_SESSION *src);\nint SSL_SESSION_up_ref(SSL_SESSION *ses);\nvoid SSL_SESSION_free(SSL_SESSION *session);\n</code></pre>"},{"location":"man3/SSL_SESSION_free/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_new() creates a new SSL_SESSION structure and returns a pointer to it.</p> <p>SSL_SESSION_dup() copies the contents of the SSL_SESSION structure in src and returns a pointer to it.</p> <p>SSL_SESSION_up_ref() increments the reference count on the given SSL_SESSION structure.</p> <p>SSL_SESSION_free() decrements the reference count of session and removes the SSL_SESSION structure pointed to by session and frees up the allocated memory, if the reference count has reached 0. If session is NULL nothing is done.</p>"},{"location":"man3/SSL_SESSION_free/#notes","title":"NOTES","text":"<p>SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode(3), the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, e.g. when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but it is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions(3) operation.</p> <p>SSL_SESSION_free() must only be called for SSL_SESSION objects, for which the reference count was explicitly incremented (e.g. by calling SSL_get1_session(), see SSL_get_session(3)) or when the SSL_SESSION object was generated outside a TLS handshake operation, e.g. by using d2i_SSL_SESSION(3). It must not be called on other SSL_SESSION objects, as this would cause incorrect reference counts and therefore program failures.</p>"},{"location":"man3/SSL_SESSION_free/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_new returns a pointer to the newly allocated SSL_SESSION structure or NULL on error.</p> <p>SSL_SESSION_up_ref returns 1 on success or 0 on error.</p>"},{"location":"man3/SSL_SESSION_free/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_session(3), SSL_CTX_set_session_cache_mode(3), SSL_CTX_flush_sessions(3), d2i_SSL_SESSION(3)</p>"},{"location":"man3/SSL_SESSION_free/#history","title":"HISTORY","text":"<p>The SSL_SESSION_dup() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_SESSION_free/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get0_cipher/","title":"SSL_SESSION_get0_cipher","text":""},{"location":"man3/SSL_SESSION_get0_cipher/#name","title":"NAME","text":"<p>SSL_SESSION_get0_cipher, SSL_SESSION_set_cipher - set and retrieve the SSL cipher associated with a session</p>"},{"location":"man3/SSL_SESSION_get0_cipher/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst SSL_CIPHER *SSL_SESSION_get0_cipher(const SSL_SESSION *s);\nint SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher);\n</code></pre>"},{"location":"man3/SSL_SESSION_get0_cipher/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_get0_cipher() retrieves the cipher that was used by the connection when the session was created, or NULL if it cannot be determined.</p> <p>The value returned is a pointer to an object maintained within s and should not be released.</p> <p>SSL_SESSION_set_cipher() can be used to set the ciphersuite associated with the SSL_SESSION s to cipher. For example, this could be used to set up a session based PSK (see SSL_CTX_set_psk_use_session_callback(3)).</p>"},{"location":"man3/SSL_SESSION_get0_cipher/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get0_cipher() returns the SSL_CIPHER associated with the SSL_SESSION or NULL if it cannot be determined.</p> <p>SSL_SESSION_set_cipher() returns 1 on success or 0 on failure.</p>"},{"location":"man3/SSL_SESSION_get0_cipher/#see-also","title":"SEE ALSO","text":"<p>ssl(7), d2i_SSL_SESSION(3), SSL_SESSION_get_time(3), SSL_SESSION_get0_hostname(3), SSL_SESSION_free(3), SSL_CTX_set_psk_use_session_callback(3)</p>"},{"location":"man3/SSL_SESSION_get0_cipher/#history","title":"HISTORY","text":"<p>The SSL_SESSION_get0_cipher() function was added in OpenSSL 1.1.0. The SSL_SESSION_set_cipher() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_SESSION_get0_cipher/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get0_hostname/","title":"SSL_SESSION_get0_hostname","text":""},{"location":"man3/SSL_SESSION_get0_hostname/#name","title":"NAME","text":"<p>SSL_SESSION_get0_hostname, SSL_SESSION_set1_hostname, SSL_SESSION_get0_alpn_selected, SSL_SESSION_set1_alpn_selected - get and set SNI and ALPN data associated with a session</p>"},{"location":"man3/SSL_SESSION_get0_hostname/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst char *SSL_SESSION_get0_hostname(const SSL_SESSION *s);\nint SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname);\n\nvoid SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,\n                                    const unsigned char **alpn,\n                                    size_t *len);\nint SSL_SESSION_set1_alpn_selected(SSL_SESSION *s, const unsigned char *alpn,\n                                   size_t len);\n</code></pre>"},{"location":"man3/SSL_SESSION_get0_hostname/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_get0_hostname() retrieves the SNI value that was sent by the client when the session was created if it was accepted by the server and TLSv1.2 or below was negotiated. Otherwise NULL is returned. Note that in TLSv1.3 the SNI hostname is negotiated with each handshake including resumption handshakes and is therefore never associated with the session.</p> <p>The value returned is a pointer to memory maintained within s and should not be free'd.</p> <p>SSL_SESSION_set1_hostname() sets the SNI value for the hostname to a copy of the string provided in hostname.</p> <p>SSL_SESSION_get0_alpn_selected() retrieves the selected ALPN protocol for this session and its associated length in bytes. The returned value of *alpn is a pointer to memory maintained within s and should not be free'd.</p> <p>SSL_SESSION_set1_alpn_selected() sets the ALPN protocol for this session to the value in alpn which should be of length len bytes. A copy of the input value is made, and the caller retains ownership of the memory pointed to by alpn.</p>"},{"location":"man3/SSL_SESSION_get0_hostname/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get0_hostname() returns either a string or NULL based on if there is the SNI value sent by client.</p> <p>SSL_SESSION_set1_hostname() returns 1 on success or 0 on error.</p> <p>SSL_SESSION_set1_alpn_selected() returns 1 on success or 0 on error.</p>"},{"location":"man3/SSL_SESSION_get0_hostname/#see-also","title":"SEE ALSO","text":"<p>ssl(7), d2i_SSL_SESSION(3), SSL_SESSION_get_time(3), SSL_SESSION_free(3)</p>"},{"location":"man3/SSL_SESSION_get0_hostname/#history","title":"HISTORY","text":"<p>The SSL_SESSION_set1_hostname(), SSL_SESSION_get0_alpn_selected() and SSL_SESSION_set1_alpn_selected() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_SESSION_get0_hostname/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get0_id_context/","title":"SSL_SESSION_get0_id_context","text":""},{"location":"man3/SSL_SESSION_get0_id_context/#name","title":"NAME","text":"<p>SSL_SESSION_get0_id_context, SSL_SESSION_set1_id_context - get and set the SSL ID context associated with a session</p>"},{"location":"man3/SSL_SESSION_get0_id_context/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst unsigned char *SSL_SESSION_get0_id_context(const SSL_SESSION *s,\n                                                 unsigned int *len)\nint SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,\n                               unsigned int sid_ctx_len);\n</code></pre>"},{"location":"man3/SSL_SESSION_get0_id_context/#description","title":"DESCRIPTION","text":"<p>See SSL_CTX_set_session_id_context(3) for further details on session ID contexts.</p> <p>SSL_SESSION_get0_id_context() returns the ID context associated with the SSL/TLS session s. The length of the ID context is written to *len if len is not NULL.</p> <p>The value returned is a pointer to an object maintained within s and should not be released.</p> <p>SSL_SESSION_set1_id_context() takes a copy of the provided ID context given in sid_ctx and associates it with the session s. The length of the ID context is given by sid_ctx_len which must not exceed SSL_MAX_SID_CTX_LENGTH bytes.</p>"},{"location":"man3/SSL_SESSION_get0_id_context/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_set1_id_context() returns 1 on success or 0 on error.</p>"},{"location":"man3/SSL_SESSION_get0_id_context/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_set_session_id_context(3)</p>"},{"location":"man3/SSL_SESSION_get0_id_context/#history","title":"HISTORY","text":"<p>The SSL_SESSION_get0_id_context() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_SESSION_get0_id_context/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get0_peer/","title":"SSL_SESSION_get0_peer","text":""},{"location":"man3/SSL_SESSION_get0_peer/#name","title":"NAME","text":"<p>SSL_SESSION_get0_peer - get details about peer's certificate for a session</p>"},{"location":"man3/SSL_SESSION_get0_peer/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nX509 *SSL_SESSION_get0_peer(SSL_SESSION *s);\n</code></pre>"},{"location":"man3/SSL_SESSION_get0_peer/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_get0_peer() returns the peer certificate associated with the session s or NULL if no peer certificate is available. The caller should not free the returned value (unless X509_up_ref(3) has also been called).</p>"},{"location":"man3/SSL_SESSION_get0_peer/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get0_peer() returns a pointer to the peer certificate or NULL if no peer certificate is available.</p>"},{"location":"man3/SSL_SESSION_get0_peer/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_SESSION_get0_peer/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get_compress_id/","title":"SSL_SESSION_get_compress_id","text":""},{"location":"man3/SSL_SESSION_get_compress_id/#name","title":"NAME","text":"<p>SSL_SESSION_get_compress_id - get details about the compression associated with a session</p>"},{"location":"man3/SSL_SESSION_get_compress_id/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nunsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s);\n</code></pre>"},{"location":"man3/SSL_SESSION_get_compress_id/#description","title":"DESCRIPTION","text":"<p>If compression has been negotiated for an ssl session then SSL_SESSION_get_compress_id() will return the id for the compression method or 0 otherwise. The only built-in supported compression method is zlib which has an id of 1.</p>"},{"location":"man3/SSL_SESSION_get_compress_id/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get_compress_id() returns the id of the compression method or 0 if none.</p>"},{"location":"man3/SSL_SESSION_get_compress_id/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_SESSION_get_compress_id/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get_ex_data/","title":"SSL_SESSION_get_ex_data","text":""},{"location":"man3/SSL_SESSION_get_ex_data/#name","title":"NAME","text":"<p>SSL_SESSION_set_ex_data, SSL_SESSION_get_ex_data - get and set application specific data on a session</p>"},{"location":"man3/SSL_SESSION_get_ex_data/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);\nvoid *SSL_SESSION_get_ex_data(const SSL_SESSION *s, int idx);\n</code></pre>"},{"location":"man3/SSL_SESSION_get_ex_data/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_set_ex_data() enables an application to store arbitrary application specific data data in an SSL_SESSION structure ss. The index idx should be a value previously returned from a call to CRYPTO_get_ex_new_index(3).</p> <p>SSL_SESSION_get_ex_data() retrieves application specific data previously stored in an SSL_SESSION structure s. The idx value should be the same as that used when originally storing the data.</p>"},{"location":"man3/SSL_SESSION_get_ex_data/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_set_ex_data() returns 1 for success or 0 for failure.</p> <p>SSL_SESSION_get_ex_data() returns the previously stored value or NULL on failure. NULL may also be a valid value.</p>"},{"location":"man3/SSL_SESSION_get_ex_data/#see-also","title":"SEE ALSO","text":"<p>ssl(7), CRYPTO_get_ex_new_index(3)</p>"},{"location":"man3/SSL_SESSION_get_ex_data/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get_protocol_version/","title":"SSL_SESSION_get_protocol_version","text":""},{"location":"man3/SSL_SESSION_get_protocol_version/#name","title":"NAME","text":"<p>SSL_SESSION_get_protocol_version, SSL_SESSION_set_protocol_version - get and set the session protocol version</p>"},{"location":"man3/SSL_SESSION_get_protocol_version/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_SESSION_get_protocol_version(const SSL_SESSION *s);\nint SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version);\n</code></pre>"},{"location":"man3/SSL_SESSION_get_protocol_version/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_get_protocol_version() returns the protocol version number used by session s.</p> <p>SSL_SESSION_set_protocol_version() sets the protocol version associated with the SSL_SESSION object s to the value version. This value should be a version constant such as TLS1_3_VERSION etc. For example, this could be used to set up a session based PSK (see SSL_CTX_set_psk_use_session_callback(3)).</p>"},{"location":"man3/SSL_SESSION_get_protocol_version/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get_protocol_version() returns a number indicating the protocol version used for the session; this number matches the constants e.g. TLS1_VERSION, TLS1_2_VERSION or TLS1_3_VERSION.</p> <p>Note that the SSL_SESSION_get_protocol_version() function does not perform a null check on the provided session s pointer.</p> <p>SSL_SESSION_set_protocol_version() returns 1 on success or 0 on failure.</p>"},{"location":"man3/SSL_SESSION_get_protocol_version/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_psk_use_session_callback(3)</p>"},{"location":"man3/SSL_SESSION_get_protocol_version/#history","title":"HISTORY","text":"<p>The SSL_SESSION_get_protocol_version() function was added in OpenSSL 1.1.0. The SSL_SESSION_set_protocol_version() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_SESSION_get_protocol_version/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_get_time/","title":"SSL_SESSION_get_time","text":""},{"location":"man3/SSL_SESSION_get_time/#name","title":"NAME","text":"<p>SSL_SESSION_get_time, SSL_SESSION_set_time, SSL_SESSION_get_timeout, SSL_SESSION_set_timeout, SSL_get_time, SSL_set_time, SSL_get_timeout, SSL_set_timeout - retrieve and manipulate session time and timeout settings</p>"},{"location":"man3/SSL_SESSION_get_time/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_SESSION_get_time(const SSL_SESSION *s);\nlong SSL_SESSION_set_time(SSL_SESSION *s, long tm);\nlong SSL_SESSION_get_timeout(const SSL_SESSION *s);\nlong SSL_SESSION_set_timeout(SSL_SESSION *s, long tm);\n\nlong SSL_get_time(const SSL_SESSION *s);\nlong SSL_set_time(SSL_SESSION *s, long tm);\nlong SSL_get_timeout(const SSL_SESSION *s);\nlong SSL_set_timeout(SSL_SESSION *s, long tm);\n</code></pre>"},{"location":"man3/SSL_SESSION_get_time/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_get_time() returns the time at which the session s was established. The time is given in seconds since the Epoch and therefore compatible to the time delivered by the time() call.</p> <p>SSL_SESSION_set_time() replaces the creation time of the session s with the chosen value tm.</p> <p>SSL_SESSION_get_timeout() returns the timeout value set for session s in seconds.</p> <p>SSL_SESSION_set_timeout() sets the timeout value for session s in seconds to tm.</p> <p>The SSL_get_time(), SSL_set_time(), SSL_get_timeout(), and SSL_set_timeout() functions are synonyms for the SSL_SESSION_*() counterparts.</p>"},{"location":"man3/SSL_SESSION_get_time/#notes","title":"NOTES","text":"<p>Sessions are expired by examining the creation time and the timeout value. Both are set at creation time of the session to the actual time and the default timeout value at creation, respectively, as set by SSL_CTX_set_timeout(3). Using these functions it is possible to extend or shorten the lifetime of the session.</p>"},{"location":"man3/SSL_SESSION_get_time/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get_time() and SSL_SESSION_get_timeout() return the currently valid values.</p> <p>SSL_SESSION_set_time() and SSL_SESSION_set_timeout() return 1 on success.</p> <p>If any of the function is passed the NULL pointer for the session s, 0 is returned.</p>"},{"location":"man3/SSL_SESSION_get_time/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_timeout(3), SSL_get_default_timeout(3)</p>"},{"location":"man3/SSL_SESSION_get_time/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_has_ticket/","title":"SSL_SESSION_has_ticket","text":""},{"location":"man3/SSL_SESSION_has_ticket/#name","title":"NAME","text":"<p>SSL_SESSION_get0_ticket, SSL_SESSION_has_ticket, SSL_SESSION_get_ticket_lifetime_hint - get details about the ticket associated with a session</p>"},{"location":"man3/SSL_SESSION_has_ticket/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_SESSION_has_ticket(const SSL_SESSION *s);\nunsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s);\nvoid SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,\n                             size_t *len);\n</code></pre>"},{"location":"man3/SSL_SESSION_has_ticket/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_has_ticket() returns 1 if there is a Session Ticket associated with this session, and 0 otherwise.</p> <p>SSL_SESSION_get_ticket_lifetime_hint returns the lifetime hint in seconds associated with the session ticket.</p> <p>SSL_SESSION_get0_ticket obtains a pointer to the ticket associated with a session. The length of the ticket is written to *len. If tick is non NULL then a pointer to the ticket is written to *tick. The pointer is only valid while the connection is in use. The session (and hence the ticket pointer) may also become invalid as a result of a call to SSL_CTX_flush_sessions().</p>"},{"location":"man3/SSL_SESSION_has_ticket/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_has_ticket() returns 1 if session ticket exists or 0 otherwise.</p> <p>SSL_SESSION_get_ticket_lifetime_hint() returns the number of seconds.</p>"},{"location":"man3/SSL_SESSION_has_ticket/#see-also","title":"SEE ALSO","text":"<p>ssl(7), d2i_SSL_SESSION(3), SSL_SESSION_get_time(3), SSL_SESSION_free(3)</p>"},{"location":"man3/SSL_SESSION_has_ticket/#history","title":"HISTORY","text":"<p>The SSL_SESSION_has_ticket(), SSL_SESSION_get_ticket_lifetime_hint() and SSL_SESSION_get0_ticket() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_SESSION_has_ticket/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_is_resumable/","title":"SSL_SESSION_is_resumable","text":""},{"location":"man3/SSL_SESSION_is_resumable/#name","title":"NAME","text":"<p>SSL_SESSION_is_resumable - determine whether an SSL_SESSION object can be used for resumption</p>"},{"location":"man3/SSL_SESSION_is_resumable/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_SESSION_is_resumable(const SSL_SESSION *s);\n</code></pre>"},{"location":"man3/SSL_SESSION_is_resumable/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_is_resumable() determines whether an SSL_SESSION object can be used to resume a session or not. Returns 1 if it can or 0 if not. Note that attempting to resume with a non-resumable session will result in a full handshake.</p>"},{"location":"man3/SSL_SESSION_is_resumable/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_is_resumable() returns 1 if the session is resumable or 0 otherwise.</p>"},{"location":"man3/SSL_SESSION_is_resumable/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_session(3), SSL_CTX_sess_set_new_cb(3)</p>"},{"location":"man3/SSL_SESSION_is_resumable/#history","title":"HISTORY","text":"<p>The SSL_SESSION_is_resumable() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_SESSION_is_resumable/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_print/","title":"SSL_SESSION_print","text":""},{"location":"man3/SSL_SESSION_print/#name","title":"NAME","text":"<p>SSL_SESSION_print, SSL_SESSION_print_fp, SSL_SESSION_print_keylog - printf information about a session</p>"},{"location":"man3/SSL_SESSION_print/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);\nint SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);\nint SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);\n</code></pre>"},{"location":"man3/SSL_SESSION_print/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_print() prints summary information about the session provided in ses to the BIO fp.</p> <p>SSL_SESSION_print_fp() does the same as SSL_SESSION_print() except it prints it to the FILE fp.</p> <p>SSL_SESSION_print_keylog() prints session information to the provided BIO &lt;bp&gt; in NSS keylog format.</p>"},{"location":"man3/SSL_SESSION_print/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_print(), SSL_SESSION_print_fp() and SSL_SESSION_print_keylog return 1 on success or 0 on error.</p>"},{"location":"man3/SSL_SESSION_print/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_SESSION_print/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_SESSION_set1_id/","title":"SSL_SESSION_set1_id","text":""},{"location":"man3/SSL_SESSION_set1_id/#name","title":"NAME","text":"<p>SSL_SESSION_get_id, SSL_SESSION_set1_id - get and set the SSL session ID</p>"},{"location":"man3/SSL_SESSION_set1_id/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,\n                                        unsigned int *len)\nint SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,\n                        unsigned int sid_len);\n</code></pre>"},{"location":"man3/SSL_SESSION_set1_id/#description","title":"DESCRIPTION","text":"<p>SSL_SESSION_get_id() returns a pointer to the internal session id value for the session s. The length of the id in bytes is stored in *len. The length may be 0. The caller should not free the returned pointer directly.</p> <p>SSL_SESSION_set1_id() sets the session ID for the ssl SSL/TLS session to sid of length sid_len.</p>"},{"location":"man3/SSL_SESSION_set1_id/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_get_id() returns a pointer to the session id value. SSL_SESSION_set1_id() returns 1 for success and 0 for failure, for example if the supplied session ID length exceeds SSL_MAX_SSL_SESSION_ID_LENGTH.</p>"},{"location":"man3/SSL_SESSION_set1_id/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_SESSION_set1_id/#history","title":"HISTORY","text":"<p>The SSL_SESSION_set1_id() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_SESSION_set1_id/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_accept/","title":"SSL_accept","text":""},{"location":"man3/SSL_accept/#name","title":"NAME","text":"<p>SSL_accept - wait for a TLS/SSL client to initiate a TLS/SSL handshake</p>"},{"location":"man3/SSL_accept/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_accept(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_accept/#description","title":"DESCRIPTION","text":"<p>SSL_accept() waits for a TLS/SSL client to initiate the TLS/SSL handshake. The communication channel must already have been set and assigned to the ssl by setting an underlying BIO.</p>"},{"location":"man3/SSL_accept/#notes","title":"NOTES","text":"<p>The behaviour of SSL_accept() depends on the underlying BIO.</p> <p>If the underlying BIO is blocking, SSL_accept() will only return once the handshake has been finished or an error occurred.</p> <p>If the underlying BIO is nonblocking, SSL_accept() will also return when the underlying BIO could not satisfy the needs of SSL_accept() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_accept() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_accept(). The action depends on the underlying BIO. When using a nonblocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue.</p>"},{"location":"man3/SSL_accept/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the return value ret to find out the reason.</p> </li> <li> <p>1</p> <p>The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been established.</p> </li> <li> <p>&lt;0</p> <p>The TLS/SSL handshake was not successful because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. It can also occur if action is needed to continue the operation for nonblocking BIOs. Call SSL_get_error() with the return value ret to find out the reason.</p> </li> </ul>"},{"location":"man3/SSL_accept/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_connect(3), SSL_shutdown(3), ssl(7), bio(7), SSL_set_connect_state(3), SSL_do_handshake(3), SSL_CTX_new(3)</p>"},{"location":"man3/SSL_accept/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_alert_type_string/","title":"SSL_alert_type_string","text":""},{"location":"man3/SSL_alert_type_string/#name","title":"NAME","text":"<p>SSL_alert_type_string, SSL_alert_type_string_long, SSL_alert_desc_string, SSL_alert_desc_string_long - get textual description of alert information</p>"},{"location":"man3/SSL_alert_type_string/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst char *SSL_alert_type_string(int value);\nconst char *SSL_alert_type_string_long(int value);\n\nconst char *SSL_alert_desc_string(int value);\nconst char *SSL_alert_desc_string_long(int value);\n</code></pre>"},{"location":"man3/SSL_alert_type_string/#description","title":"DESCRIPTION","text":"<p>SSL_alert_type_string() returns a one letter string indicating the type of the alert specified by value.</p> <p>SSL_alert_type_string_long() returns a string indicating the type of the alert specified by value.</p> <p>SSL_alert_desc_string() returns a two letter string as a short form describing the reason of the alert specified by value.</p> <p>SSL_alert_desc_string_long() returns a string describing the reason of the alert specified by value.</p>"},{"location":"man3/SSL_alert_type_string/#notes","title":"NOTES","text":"<p>When one side of an SSL/TLS communication wants to inform the peer about a special situation, it sends an alert. The alert is sent as a special message and does not influence the normal data stream (unless its contents results in the communication being canceled).</p> <p>A warning alert is sent, when a non-fatal error condition occurs. The \"close notify\" alert is sent as a warning alert. Other examples for non-fatal errors are certificate errors (\"certificate expired\", \"unsupported certificate\"), for which a warning alert may be sent. (The sending party may however decide to send a fatal error.) The receiving side may cancel the connection on reception of a warning alert on it discretion.</p> <p>Several alert messages must be sent as fatal alert messages as specified by the TLS RFC. A fatal alert always leads to a connection abort.</p>"},{"location":"man3/SSL_alert_type_string/#return-values","title":"RETURN VALUES","text":"<p>The following strings can occur for SSL_alert_type_string() or SSL_alert_type_string_long():</p> <ul> <li>\"W\"/\"warning\"</li> <li>\"F\"/\"fatal\"</li> <li> <p>\"U\"/\"unknown\"</p> <p>This indicates that no support is available for this alert type. Probably value does not contain a correct alert message.</p> </li> </ul> <p>The following strings can occur for SSL_alert_desc_string() or SSL_alert_desc_string_long():</p> <ul> <li> <p>\"CN\"/\"close notify\"</p> <p>The connection shall be closed. This is a warning alert.</p> </li> <li> <p>\"UM\"/\"unexpected message\"</p> <p>An inappropriate message was received. This alert is always fatal and should never be observed in communication between proper implementations.</p> </li> <li> <p>\"BM\"/\"bad record mac\"</p> <p>This alert is returned if a record is received with an incorrect MAC. This message is always fatal.</p> </li> <li> <p>\"DF\"/\"decompression failure\"</p> <p>The decompression function received improper input (e.g. data that would expand to excessive length). This message is always fatal.</p> </li> <li> <p>\"HF\"/\"handshake failure\"</p> <p>Reception of a handshake_failure alert message indicates that the sender was unable to negotiate an acceptable set of security parameters given the options available. This is a fatal error.</p> </li> <li> <p>\"NC\"/\"no certificate\"</p> <p>A client, that was asked to send a certificate, does not send a certificate (SSLv3 only).</p> </li> <li> <p>\"BC\"/\"bad certificate\"</p> <p>A certificate was corrupt, contained signatures that did not verify correctly, etc</p> </li> <li> <p>\"UC\"/\"unsupported certificate\"</p> <p>A certificate was of an unsupported type.</p> </li> <li> <p>\"CR\"/\"certificate revoked\"</p> <p>A certificate was revoked by its signer.</p> </li> <li> <p>\"CE\"/\"certificate expired\"</p> <p>A certificate has expired or is not currently valid.</p> </li> <li> <p>\"CU\"/\"certificate unknown\"</p> <p>Some other (unspecified) issue arose in processing the certificate, rendering it unacceptable.</p> </li> <li> <p>\"IP\"/\"illegal parameter\"</p> <p>A field in the handshake was out of range or inconsistent with other fields. This is always fatal.</p> </li> <li> <p>\"DC\"/\"decryption failed\"</p> <p>A TLSCiphertext decrypted in an invalid way: either it wasn't an even multiple of the block length or its padding values, when checked, weren't correct. This message is always fatal.</p> </li> <li> <p>\"RO\"/\"record overflow\"</p> <p>A TLSCiphertext record was received which had a length more than 2^14+2048 bytes, or a record decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always fatal.</p> </li> <li> <p>\"CA\"/\"unknown CA\"</p> <p>A valid certificate chain or partial chain was received, but the certificate was not accepted because the CA certificate could not be located or couldn't be matched with a known, trusted CA.  This message is always fatal.</p> </li> <li> <p>\"AD\"/\"access denied\"</p> <p>A valid certificate was received, but when access control was applied, the sender decided not to proceed with negotiation. This message is always fatal.</p> </li> <li> <p>\"DE\"/\"decode error\"</p> <p>A message could not be decoded because some field was out of the specified range or the length of the message was incorrect. This message is always fatal.</p> </li> <li> <p>\"CY\"/\"decrypt error\"</p> <p>A handshake cryptographic operation failed, including being unable to correctly verify a signature, decrypt a key exchange, or validate a finished message.</p> </li> <li> <p>\"ER\"/\"export restriction\"</p> <p>A negotiation not in compliance with export restrictions was detected; for example, attempting to transfer a 1024 bit ephemeral RSA key for the RSA_EXPORT handshake method. This message is always fatal.</p> </li> <li> <p>\"PV\"/\"protocol version\"</p> <p>The protocol version the client has attempted to negotiate is recognized, but not supported. (For example, old protocol versions might be avoided for security reasons). This message is always fatal.</p> </li> <li> <p>\"IS\"/\"insufficient security\"</p> <p>Returned instead of handshake_failure when a negotiation has failed specifically because the server requires ciphers more secure than those supported by the client. This message is always fatal.</p> </li> <li> <p>\"IE\"/\"internal error\"</p> <p>An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue (such as a memory allocation failure). This message is always fatal.</p> </li> <li> <p>\"US\"/\"user canceled\"</p> <p>This handshake is being canceled for some reason unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning.</p> </li> <li> <p>\"NR\"/\"no renegotiation\"</p> <p>Sent by the client in response to a hello request or by the server in response to a client hello after initial handshaking. Either of these would normally lead to renegotiation; when that is not appropriate, the recipient should respond with this alert; at that point, the original requester can decide whether to proceed with the connection. One case where this would be appropriate would be where a server has spawned a process to satisfy a request; the process might receive security parameters (key length, authentication, etc.) at startup and it might be difficult to communicate changes to these parameters after that point. This message is always a warning.</p> </li> <li> <p>\"UP\"/\"unknown PSK identity\"</p> <p>Sent by the server to indicate that it does not recognize a PSK identity or an SRP identity.</p> </li> <li> <p>\"UK\"/\"unknown\"</p> <p>This indicates that no description is available for this alert type. Probably value does not contain a correct alert message.</p> </li> </ul>"},{"location":"man3/SSL_alert_type_string/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_info_callback(3)</p>"},{"location":"man3/SSL_alert_type_string/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_alloc_buffers/","title":"SSL_alloc_buffers","text":""},{"location":"man3/SSL_alloc_buffers/#name","title":"NAME","text":"<p>SSL_free_buffers, SSL_alloc_buffers - manage SSL structure buffers</p>"},{"location":"man3/SSL_alloc_buffers/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_free_buffers(SSL *ssl);\nint SSL_alloc_buffers(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_alloc_buffers/#description","title":"DESCRIPTION","text":"<p>SSL_free_buffers() frees the read and write buffers of the given ssl. SSL_alloc_buffers() allocates the read and write buffers of the given ssl.</p> <p>The SSL_MODE_RELEASE_BUFFERS mode releases read or write buffers whenever the buffers have been drained. These functions allow applications to manually control when buffers are freed and allocated.</p> <p>After freeing the buffers, the buffers are automatically reallocated upon a new read or write. The SSL_alloc_buffers() does not need to be called, but can be used to make sure the buffers are preallocated. This can be used to avoid allocation during data processing or with CRYPTO_set_mem_functions() to control where and how buffers are allocated.</p>"},{"location":"man3/SSL_alloc_buffers/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0 (Failure)</p> <p>The SSL_free_buffers() function returns 0 when there is pending data to be read or written. The SSL_alloc_buffers() function returns 0 when there is an allocation failure.</p> </li> <li> <p>1 (Success)</p> <p>The SSL_free_buffers() function returns 1 if the buffers have been freed. This value is also returned if the buffers had been freed before calling SSL_free_buffers(). The SSL_alloc_buffers() function returns 1 if the buffers have been allocated. This value is also returned if the buffers had been allocated before calling SSL_alloc_buffers().</p> </li> </ul>"},{"location":"man3/SSL_alloc_buffers/#see-also","title":"SEE ALSO","text":"<p>SSL_free(3), SSL_clear(3), SSL_new(3), SSL_CTX_set_mode(3), CRYPTO_set_mem_functions</p>"},{"location":"man3/SSL_alloc_buffers/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_check_chain/","title":"SSL_check_chain","text":""},{"location":"man3/SSL_check_chain/#name","title":"NAME","text":"<p>SSL_check_chain - check certificate chain suitability</p>"},{"location":"man3/SSL_check_chain/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain);\n</code></pre>"},{"location":"man3/SSL_check_chain/#description","title":"DESCRIPTION","text":"<p>SSL_check_chain() checks whether certificate x, private key pk and certificate chain chain is suitable for use with the current session s.</p>"},{"location":"man3/SSL_check_chain/#return-values","title":"RETURN VALUES","text":"<p>SSL_check_chain() returns a bitmap of flags indicating the validity of the chain.</p> <p>CERT_PKEY_VALID: the chain can be used with the current session. If this flag is not set then the certificate will never be used even if the application tries to set it because it is inconsistent with the peer preferences.</p> <p>CERT_PKEY_SIGN: the EE key can be used for signing.</p> <p>CERT_PKEY_EE_SIGNATURE: the signature algorithm of the EE certificate is acceptable.</p> <p>CERT_PKEY_CA_SIGNATURE: the signature algorithms of all CA certificates are acceptable.</p> <p>CERT_PKEY_EE_PARAM: the parameters of the end entity certificate are acceptable (e.g. it is a supported curve).</p> <p>CERT_PKEY_CA_PARAM: the parameters of all CA certificates are acceptable.</p> <p>CERT_PKEY_EXPLICIT_SIGN: the end entity certificate algorithm can be used explicitly for signing (i.e. it is mentioned in the signature algorithms extension).</p> <p>CERT_PKEY_ISSUER_NAME: the issuer name is acceptable. This is only meaningful for client authentication.</p> <p>CERT_PKEY_CERT_TYPE: the certificate type is acceptable. Only meaningful for client authentication.</p> <p>CERT_PKEY_SUITEB: chain is suitable for Suite B use.</p>"},{"location":"man3/SSL_check_chain/#notes","title":"NOTES","text":"<p>SSL_check_chain() must be called in servers after a client hello message or in clients after a certificate request message. It will typically be called in the certificate callback.</p> <p>An application wishing to support multiple certificate chains may call this function on each chain in turn: starting with the one it considers the most secure. It could then use the chain of the first set which returns suitable flags.</p> <p>As a minimum the flag CERT_PKEY_VALID must be set for a chain to be usable. An application supporting multiple chains with different CA signature algorithms may also wish to check CERT_PKEY_CA_SIGNATURE too. If no chain is suitable a server should fall back to the most secure chain which sets CERT_PKEY_VALID.</p> <p>The validity of a chain is determined by checking if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names.</p> <p>Since the supported signature algorithms extension is only used in TLS 1.2, TLS 1.3 and DTLS 1.2 the results for earlier versions of TLS and DTLS may not be very useful. Applications may wish to specify a different \"legacy\" chain for earlier versions of TLS or DTLS.</p>"},{"location":"man3/SSL_check_chain/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_cert_cb(3), ssl(7)</p>"},{"location":"man3/SSL_check_chain/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_clear/","title":"SSL_clear","text":""},{"location":"man3/SSL_clear/#name","title":"NAME","text":"<p>SSL_clear - reset SSL object to allow another connection</p>"},{"location":"man3/SSL_clear/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_clear(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_clear/#description","title":"DESCRIPTION","text":"<p>Reset ssl to allow another connection. All settings (method, ciphers, BIOs) are kept.</p>"},{"location":"man3/SSL_clear/#notes","title":"NOTES","text":"<p>SSL_clear is used to prepare an SSL object for a new connection. While all settings are kept, a side effect is the handling of the current SSL session. If a session is still open, it is considered bad and will be removed from the session cache, as required by RFC2246. A session is considered open, if SSL_shutdown(3) was not called for the connection or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state.</p> <p>If a session was closed cleanly, the session object will be kept and all settings corresponding. This explicitly means, that e.g. the special method used during the session will be kept for the next handshake. So if the session was a TLSv1 session, a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method, even if TLS_*_methods were chosen on startup. This will might lead to connection failures (see SSL_new(3)) for a description of the method's properties.</p>"},{"location":"man3/SSL_clear/#warnings","title":"WARNINGS","text":"<p>SSL_clear() resets the SSL object to allow for another connection. The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake). It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections. Use the sequence SSL_get_session(3); SSL_new(3); SSL_set_session(3); SSL_free(3) instead to avoid such failures (or simply SSL_free(3); SSL_new(3) if session reuse is not desired).</p>"},{"location":"man3/SSL_clear/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The SSL_clear() operation could not be performed. Check the error stack to find out the reason.</p> </li> <li> <p>1</p> <p>The SSL_clear() operation was successful.</p> </li> </ul> <p>SSL_new(3), SSL_free(3), SSL_shutdown(3), SSL_set_shutdown(3), SSL_CTX_set_options(3), ssl(7), SSL_CTX_set_client_cert_cb(3)</p>"},{"location":"man3/SSL_clear/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_connect/","title":"SSL_connect","text":""},{"location":"man3/SSL_connect/#name","title":"NAME","text":"<p>SSL_connect - initiate the TLS/SSL handshake with an TLS/SSL server</p>"},{"location":"man3/SSL_connect/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_connect(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_connect/#description","title":"DESCRIPTION","text":"<p>SSL_connect() initiates the TLS/SSL handshake with a server. The communication channel must already have been set and assigned to the ssl by setting an underlying BIO.</p>"},{"location":"man3/SSL_connect/#notes","title":"NOTES","text":"<p>The behaviour of SSL_connect() depends on the underlying BIO.</p> <p>If the underlying BIO is blocking, SSL_connect() will only return once the handshake has been finished or an error occurred.</p> <p>If the underlying BIO is nonblocking, SSL_connect() will also return when the underlying BIO could not satisfy the needs of SSL_connect() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_connect() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_connect(). The action depends on the underlying BIO. When using a nonblocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue.</p> <p>Many systems implement Nagle's algorithm by default which means that it will buffer outgoing TCP data if a TCP packet has already been sent for which no corresponding ACK has been received yet from the peer. This can have performance impacts after a successful TLSv1.3 handshake or a successful TLSv1.2 (or below) resumption handshake, because the last peer to communicate in the handshake is the client. If the client is also the first to send application data (as is typical for many protocols) then this data could be buffered until an ACK has been received for the final handshake message.</p> <p>The TCP_NODELAY socket option is often available to disable Nagle's algorithm. If an application opts to disable Nagle's algorithm consideration should be given to turning it back on again later if appropriate. The helper function BIO_set_tcp_ndelay() can be used to turn on or off the TCP_NODELAY option.</p>"},{"location":"man3/SSL_connect/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the return value ret to find out the reason.</p> </li> <li> <p>1</p> <p>The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been established.</p> </li> <li> <p>&lt;0</p> <p>The TLS/SSL handshake was not successful, because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. It can also occur if action is needed to continue the operation for nonblocking BIOs. Call SSL_get_error() with the return value ret to find out the reason.</p> </li> </ul>"},{"location":"man3/SSL_connect/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_accept(3), SSL_shutdown(3), ssl(7), bio(7), SSL_set_connect_state(3), SSL_do_handshake(3), SSL_CTX_new(3)</p>"},{"location":"man3/SSL_connect/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_do_handshake/","title":"SSL_do_handshake","text":""},{"location":"man3/SSL_do_handshake/#name","title":"NAME","text":"<p>SSL_do_handshake - perform a TLS/SSL handshake</p>"},{"location":"man3/SSL_do_handshake/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_do_handshake(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_do_handshake/#description","title":"DESCRIPTION","text":"<p>SSL_do_handshake() will wait for a SSL/TLS handshake to take place. If the connection is in client mode, the handshake will be started. The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state(3) or SSL_set_accept_state(3).</p>"},{"location":"man3/SSL_do_handshake/#notes","title":"NOTES","text":"<p>The behaviour of SSL_do_handshake() depends on the underlying BIO.</p> <p>If the underlying BIO is blocking, SSL_do_handshake() will only return once the handshake has been finished or an error occurred.</p> <p>If the underlying BIO is nonblocking, SSL_do_handshake() will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_do_handshake() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_do_handshake(). The action depends on the underlying BIO. When using a nonblocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue.</p>"},{"location":"man3/SSL_do_handshake/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the return value ret to find out the reason.</p> </li> <li> <p>1</p> <p>The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been established.</p> </li> <li> <p>&lt;0</p> <p>The TLS/SSL handshake was not successful because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. It can also occur if action is needed to continue the operation for nonblocking BIOs. Call SSL_get_error() with the return value ret to find out the reason.</p> </li> </ul>"},{"location":"man3/SSL_do_handshake/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_connect(3), SSL_accept(3), ssl(7), bio(7), SSL_set_connect_state(3)</p>"},{"location":"man3/SSL_do_handshake/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_export_keying_material/","title":"SSL_export_keying_material","text":""},{"location":"man3/SSL_export_keying_material/#name","title":"NAME","text":"<p>SSL_export_keying_material, SSL_export_keying_material_early - obtain keying material for application use</p>"},{"location":"man3/SSL_export_keying_material/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,\n                               const char *label, size_t llen,\n                               const unsigned char *context,\n                               size_t contextlen, int use_context);\n\nint SSL_export_keying_material_early(SSL *s, unsigned char *out, size_t olen,\n                                     const char *label, size_t llen,\n                                     const unsigned char *context,\n                                     size_t contextlen);\n</code></pre>"},{"location":"man3/SSL_export_keying_material/#description","title":"DESCRIPTION","text":"<p>During the creation of a TLS or DTLS connection shared keying material is established between the two endpoints. The functions SSL_export_keying_material() and SSL_export_keying_material_early() enable an application to use some of this keying material for its own purposes in accordance with RFC5705 (for TLSv1.2 and below) or RFC8446 (for TLSv1.3).</p> <p>SSL_export_keying_material() derives keying material using the <code>exporter_master_secret</code> established in the handshake.</p> <p>SSL_export_keying_material_early() is only usable with TLSv1.3, and derives keying material using the <code>early_exporter_master_secret</code> (as defined in the TLS 1.3 RFC). For the client, the <code>early_exporter_master_secret</code> is only available when the client attempts to send 0-RTT data. For the server, it is only available when the server accepts 0-RTT data.</p> <p>An application may need to securely establish the context within which this keying material will be used. For example this may include identifiers for the application session, application algorithms or parameters, or the lifetime of the context. The context value is left to the application but must be the same on both sides of the communication.</p> <p>For a given SSL connection s, olen bytes of data will be written to out. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0 then the values of context and contextlen are ignored. Note that in TLSv1.2 and below a zero length context is treated differently from no context at all, and will result in different keying material being returned. In TLSv1.3 a zero length context is that same as no context at all and will result in the same keying material being returned.</p> <p>An application specific label should be provided in the location pointed to by label and should be llen bytes long. Typically this will be a value from the IANA Exporter Label Registry (https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels). Alternatively labels beginning with \"EXPERIMENTAL\" are permitted by the standard to be used without registration. TLSv1.3 imposes a maximum label length of 249 bytes.</p> <p>Note that this function is only defined for TLSv1.0 and above, and DTLSv1.0 and above. Attempting to use it in SSLv3 will result in an error.</p>"},{"location":"man3/SSL_export_keying_material/#return-values","title":"RETURN VALUES","text":"<p>SSL_export_keying_material() returns 0 or -1 on failure or 1 on success.</p> <p>SSL_export_keying_material_early() returns 0 on failure or 1 on success.</p>"},{"location":"man3/SSL_export_keying_material/#history","title":"HISTORY","text":"<p>The SSL_export_keying_material_early() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_export_keying_material/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_extension_supported/","title":"SSL_extension_supported","text":""},{"location":"man3/SSL_extension_supported/#name","title":"NAME","text":"<p>SSL_extension_supported, SSL_CTX_add_custom_ext, SSL_CTX_add_client_custom_ext, SSL_CTX_add_server_custom_ext, custom_ext_add_cb, custom_ext_free_cb, custom_ext_parse_cb - custom TLS extension handling</p>"},{"location":"man3/SSL_extension_supported/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\ntypedef int (*SSL_custom_ext_add_cb_ex) (SSL *s, unsigned int ext_type,\n                                         unsigned int context,\n                                         const unsigned char **out,\n                                         size_t *outlen, X509 *x,\n                                         size_t chainidx, int *al,\n                                         void *add_arg);\n\ntypedef void (*SSL_custom_ext_free_cb_ex) (SSL *s, unsigned int ext_type,\n                                           unsigned int context,\n                                           const unsigned char *out,\n                                           void *add_arg);\n\ntypedef int (*SSL_custom_ext_parse_cb_ex) (SSL *s, unsigned int ext_type,\n                                           unsigned int context,\n                                           const unsigned char *in,\n                                           size_t inlen, X509 *x,\n                                           size_t chainidx, int *al,\n                                           void *parse_arg);\n\nint SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,\n                           unsigned int context,\n                           SSL_custom_ext_add_cb_ex add_cb,\n                           SSL_custom_ext_free_cb_ex free_cb,\n                           void *add_arg,\n                           SSL_custom_ext_parse_cb_ex parse_cb,\n                           void *parse_arg);\n\ntypedef int (*custom_ext_add_cb)(SSL *s, unsigned int ext_type,\n                                 const unsigned char **out,\n                                 size_t *outlen, int *al,\n                                 void *add_arg);\n\ntypedef void (*custom_ext_free_cb)(SSL *s, unsigned int ext_type,\n                                   const unsigned char *out,\n                                   void *add_arg);\n\ntypedef int (*custom_ext_parse_cb)(SSL *s, unsigned int ext_type,\n                                   const unsigned char *in,\n                                   size_t inlen, int *al,\n                                   void *parse_arg);\n\nint SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,\n                                  custom_ext_add_cb add_cb,\n                                  custom_ext_free_cb free_cb, void *add_arg,\n                                  custom_ext_parse_cb parse_cb,\n                                  void *parse_arg);\n\nint SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned int ext_type,\n                                  custom_ext_add_cb add_cb,\n                                  custom_ext_free_cb free_cb, void *add_arg,\n                                  custom_ext_parse_cb parse_cb,\n                                  void *parse_arg);\n\nint SSL_extension_supported(unsigned int ext_type);\n</code></pre>"},{"location":"man3/SSL_extension_supported/#description","title":"DESCRIPTION","text":"<p>SSL_CTX_add_custom_ext() adds a custom extension for a TLS/DTLS client or server for all supported protocol versions with extension type ext_type and callbacks add_cb, free_cb and parse_cb (see the \"EXTENSION CALLBACKS\" section below). The context value determines which messages and under what conditions the extension will be added/parsed (see the \"EXTENSION CONTEXTS\" section below).</p> <p>SSL_CTX_add_client_custom_ext() adds a custom extension for a TLS/DTLS client with extension type ext_type and callbacks add_cb, free_cb and parse_cb. This function is similar to SSL_CTX_add_custom_ext() except it only applies to clients, uses the older style of callbacks, and implicitly sets the context value to:</p> <pre><code>SSL_EXT_TLS1_2_AND_BELOW_ONLY | SSL_EXT_CLIENT_HELLO\n| SSL_EXT_TLS1_2_SERVER_HELLO | SSL_EXT_IGNORE_ON_RESUMPTION\n</code></pre> <p>SSL_CTX_add_server_custom_ext() adds a custom extension for a TLS/DTLS server with extension type ext_type and callbacks add_cb, free_cb and parse_cb. This function is similar to SSL_CTX_add_custom_ext() except it only applies to servers, uses the older style of callbacks, and implicitly sets the context value to the same as for SSL_CTX_add_client_custom_ext() above.</p> <p>The ext_type parameter corresponds to the extension_type field of RFC5246 et al. It is not a NID. In all cases the extension type must not be handled by OpenSSL internally or an error occurs.</p> <p>SSL_extension_supported() returns 1 if the extension ext_type is handled internally by OpenSSL and 0 otherwise.</p>"},{"location":"man3/SSL_extension_supported/#extension-callbacks","title":"EXTENSION CALLBACKS","text":"<p>The callback add_cb is called to send custom extension data to be included in various TLS messages. The ext_type parameter is set to the extension type which will be added and add_arg to the value set when the extension handler was added. When using the new style callbacks the context parameter will indicate which message is currently being constructed e.g. for the ClientHello it will be set to SSL_EXT_CLIENT_HELLO.</p> <p>If the application wishes to include the extension ext_type it should set *out to the extension data, set *outlen to the length of the extension data and return 1.</p> <p>If the add_cb does not wish to include the extension it must return 0.</p> <p>If add_cb returns -1 a fatal handshake error occurs using the TLS alert value specified in *al.</p> <p>When constructing the ClientHello, if add_cb is set to NULL a zero length extension is added for ext_type. For all other messages if add_cb is set to NULL then no extension is added.</p> <p>When constructing a Certificate message the callback will be called for each certificate in the message. The x parameter will indicate the current certificate and the chainidx parameter will indicate the position of the certificate in the message. The first certificate is always the end entity certificate and has a chainidx value of 0. The certificates are in the order that they were received in the Certificate message.</p> <p>For all messages except the ServerHello and EncryptedExtensions every registered add_cb is always called to see if the application wishes to add an extension (as long as all requirements of the specified context are met).</p> <p>For the ServerHello and EncryptedExtension messages every registered add_cb is called once if and only if the requirements of the specified context are met and the corresponding extension was received in the ClientHello. That is, if no corresponding extension was received in the ClientHello then add_cb will not be called.</p> <p>If an extension is added (that is add_cb returns 1) free_cb is called (if it is set) with the value of out set by the add callback. It can be used to free up any dynamic extension data set by add_cb. Since out is constant (to permit use of constant data in add_cb) applications may need to cast away const to free the data.</p> <p>The callback parse_cb receives data for TLS extensions. The callback is only called if the extension is present and relevant for the context (see \"EXTENSION CONTEXTS\" below).</p> <p>The extension data consists of inlen bytes in the buffer in for the extension ext_type.</p> <p>If the message being parsed is a TLSv1.3 compatible Certificate message then parse_cb will be called for each certificate contained within the message. The x parameter will indicate the current certificate and the chainidx parameter will indicate the position of the certificate in the message. The first certificate is always the end entity certificate and has a chainidx value of 0.</p> <p>If the parse_cb considers the extension data acceptable it must return 1. If it returns 0 or a negative value a fatal handshake error occurs using the TLS alert value specified in *al.</p> <p>The buffer in is a temporary internal buffer which will not be valid after the callback returns.</p>"},{"location":"man3/SSL_extension_supported/#extension-contexts","title":"EXTENSION CONTEXTS","text":"<p>An extension context defines which messages and under which conditions an extension should be added or expected. The context is built up by performing a bitwise OR of multiple pre-defined values together. The valid context values are:</p> <ul> <li> <p>SSL_EXT_TLS_ONLY</p> <p>The extension is only allowed in TLS</p> </li> <li> <p>SSL_EXT_DTLS_ONLY</p> <p>The extension is only allowed in DTLS</p> </li> <li> <p>SSL_EXT_TLS_IMPLEMENTATION_ONLY</p> <p>The extension is allowed in DTLS, but there is only a TLS implementation available (so it is ignored in DTLS).</p> </li> <li> <p>SSL_EXT_SSL3_ALLOWED</p> <p>Extensions are not typically defined for SSLv3. Setting this value will allow the extension in SSLv3. Applications will not typically need to use this.</p> </li> <li> <p>SSL_EXT_TLS1_2_AND_BELOW_ONLY</p> <p>The extension is only defined for TLSv1.2/DTLSv1.2 and below. Servers will ignore this extension if it is present in the ClientHello and TLSv1.3 is negotiated.</p> </li> <li> <p>SSL_EXT_TLS1_3_ONLY</p> <p>The extension is only defined for TLS1.3 and above. Servers will ignore this extension if it is present in the ClientHello and TLSv1.2 or below is negotiated.</p> </li> <li> <p>SSL_EXT_IGNORE_ON_RESUMPTION</p> <p>The extension will be ignored during parsing if a previous session is being successfully resumed.</p> </li> <li> <p>SSL_EXT_CLIENT_HELLO</p> <p>The extension may be present in the ClientHello message.</p> </li> <li> <p>SSL_EXT_TLS1_2_SERVER_HELLO</p> <p>The extension may be present in a TLSv1.2 or below compatible ServerHello message.</p> </li> <li> <p>SSL_EXT_TLS1_3_SERVER_HELLO</p> <p>The extension may be present in a TLSv1.3 compatible ServerHello message.</p> </li> <li> <p>SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS</p> <p>The extension may be present in an EncryptedExtensions message.</p> </li> <li> <p>SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST</p> <p>The extension may be present in a HelloRetryRequest message.</p> </li> <li> <p>SSL_EXT_TLS1_3_CERTIFICATE</p> <p>The extension may be present in a TLSv1.3 compatible Certificate message.</p> </li> <li> <p>SSL_EXT_TLS1_3_NEW_SESSION_TICKET</p> <p>The extension may be present in a TLSv1.3 compatible NewSessionTicket message.</p> </li> <li> <p>SSL_EXT_TLS1_3_CERTIFICATE_REQUEST</p> <p>The extension may be present in a TLSv1.3 compatible CertificateRequest message.</p> </li> </ul> <p>The context must include at least one message value (otherwise the extension will never be used).</p>"},{"location":"man3/SSL_extension_supported/#notes","title":"NOTES","text":"<p>The add_arg and parse_arg parameters can be set to arbitrary values which will be passed to the corresponding callbacks. They can, for example, be used to store the extension data received in a convenient structure or pass the extension data to be added or freed when adding extensions.</p> <p>If the same custom extension type is received multiple times a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in a ServerHello/EncryptedExtensions message which was not sent in the ClientHello a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello/EncryptedExtensions add_cb callback is only called if the corresponding extension was received in the ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions.</p>"},{"location":"man3/SSL_extension_supported/#return-values","title":"RETURN VALUES","text":"<p>SSL_CTX_add_custom_ext(), SSL_CTX_add_client_custom_ext() and SSL_CTX_add_server_custom_ext() return 1 for success and 0 for failure. A failure can occur if an attempt is made to add the same ext_type more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure).</p> <p>SSL_extension_supported() returns 1 if the extension ext_type is handled internally by OpenSSL and 0 otherwise.</p>"},{"location":"man3/SSL_extension_supported/#history","title":"HISTORY","text":"<p>The SSL_CTX_add_custom_ext() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_extension_supported/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2014-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_free/","title":"SSL_free","text":""},{"location":"man3/SSL_free/#name","title":"NAME","text":"<p>SSL_free - free an allocated SSL structure</p>"},{"location":"man3/SSL_free/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_free(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_free/#description","title":"DESCRIPTION","text":"<p>SSL_free() decrements the reference count of ssl, and removes the SSL structure pointed to by ssl and frees up the allocated memory if the reference count has reached 0. If ssl is NULL nothing is done.</p>"},{"location":"man3/SSL_free/#notes","title":"NOTES","text":"<p>SSL_free() also calls the free()ing procedures for indirectly affected items, if applicable: the buffering BIO, the read and write BIOs, cipher lists specially created for this ssl, the SSL_SESSION. Do not explicitly free these indirectly freed up items before or after calling SSL_free(), as trying to free things twice may lead to program failure.</p> <p>The ssl session has reference counts from two users: the SSL object, for which the reference count is removed by SSL_free() and the internal session cache. If the session is considered bad, because SSL_shutdown(3) was not called for the connection and SSL_set_shutdown(3) was not used to set the SSL_SENT_SHUTDOWN state, the session will also be removed from the session cache as required by RFC2246.</p>"},{"location":"man3/SSL_free/#return-values","title":"RETURN VALUES","text":"<p>SSL_free() does not provide diagnostic information.</p> <p>SSL_new(3), SSL_clear(3), SSL_shutdown(3), SSL_set_shutdown(3), ssl(7)</p>"},{"location":"man3/SSL_free/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get0_peer_scts/","title":"SSL_get0_peer_scts","text":""},{"location":"man3/SSL_get0_peer_scts/#name","title":"NAME","text":"<p>SSL_get0_peer_scts - get SCTs received</p>"},{"location":"man3/SSL_get0_peer_scts/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s);\n</code></pre>"},{"location":"man3/SSL_get0_peer_scts/#description","title":"DESCRIPTION","text":"<p>SSL_get0_peer_scts() returns the signed certificate timestamps (SCTs) that have been received. If this is the first time that this function has been called for a given SSL instance, it will examine the TLS extensions, OCSP response and the peer's certificate for SCTs. Future calls will return the same SCTs.</p>"},{"location":"man3/SSL_get0_peer_scts/#restrictions","title":"RESTRICTIONS","text":"<p>If no Certificate Transparency validation callback has been set (using SSL_CTX_set_ct_validation_callback or SSL_set_ct_validation_callback), this function is not guaranteed to return all of the SCTs that the peer is capable of sending.</p>"},{"location":"man3/SSL_get0_peer_scts/#return-values","title":"RETURN VALUES","text":"<p>SSL_get0_peer_scts() returns a list of SCTs found, or NULL if an error occurs.</p>"},{"location":"man3/SSL_get0_peer_scts/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_ct_validation_callback(3)</p>"},{"location":"man3/SSL_get0_peer_scts/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_SSL_CTX/","title":"SSL_get_SSL_CTX","text":""},{"location":"man3/SSL_get_SSL_CTX/#name","title":"NAME","text":"<p>SSL_get_SSL_CTX - get the SSL_CTX from which an SSL is created</p>"},{"location":"man3/SSL_get_SSL_CTX/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_SSL_CTX/#description","title":"DESCRIPTION","text":"<p>SSL_get_SSL_CTX() returns a pointer to the SSL_CTX object, from which ssl was created with SSL_new(3).</p>"},{"location":"man3/SSL_get_SSL_CTX/#return-values","title":"RETURN VALUES","text":"<p>The pointer to the SSL_CTX object is returned.</p>"},{"location":"man3/SSL_get_SSL_CTX/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3)</p>"},{"location":"man3/SSL_get_SSL_CTX/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_all_async_fds/","title":"SSL_get_all_async_fds","text":""},{"location":"man3/SSL_get_all_async_fds/#name","title":"NAME","text":"<p>SSL_waiting_for_async, SSL_get_all_async_fds, SSL_get_changed_async_fds - manage asynchronous operations</p>"},{"location":"man3/SSL_get_all_async_fds/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/async.h&gt;\n#include &lt;openssl/ssl.h&gt;\n\nint SSL_waiting_for_async(SSL *s);\nint SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fd, size_t *numfds);\nint SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd, size_t *numaddfds,\n                              OSSL_ASYNC_FD *delfd, size_t *numdelfds);\n</code></pre>"},{"location":"man3/SSL_get_all_async_fds/#description","title":"DESCRIPTION","text":"<p>SSL_waiting_for_async() determines whether an SSL connection is currently waiting for asynchronous operations to complete (see the SSL_MODE_ASYNC mode in SSL_CTX_set_mode(3)).</p> <p>SSL_get_all_async_fds() returns a list of file descriptor which can be used in a call to select() or poll() to determine whether the current asynchronous operation has completed or not. A completed operation will result in data appearing as \"read ready\" on the file descriptor (no actual data should be read from the file descriptor). This function should only be called if the SSL object is currently waiting for asynchronous work to complete (i.e. SSL_ERROR_WANT_ASYNC has been received - see SSL_get_error(3)). Typically the list will only contain one file descriptor. However, if multiple asynchronous capable engines are in use then more than one is possible. The number of file descriptors returned is stored in *numfds and the file descriptors themselves are in *fds. The fds parameter may be NULL in which case no file descriptors are returned but *numfds is still populated. It is the callers responsibility to ensure sufficient memory is allocated at *fds so typically this function is called twice (once with a NULL fds parameter and once without).</p> <p>SSL_get_changed_async_fds() returns a list of the asynchronous file descriptors that have been added and a list that have been deleted since the last SSL_ERROR_WANT_ASYNC was received (or since the SSL object was created if no SSL_ERROR_WANT_ASYNC has been received). Similar to SSL_get_all_async_fds() it is the callers responsibility to ensure that *addfd and *delfd have sufficient memory allocated, although they may be NULL. The number of added fds and the number of deleted fds are stored in *numaddfds and *numdelfds respectively.</p>"},{"location":"man3/SSL_get_all_async_fds/#return-values","title":"RETURN VALUES","text":"<p>SSL_waiting_for_async() will return 1 if the current SSL operation is waiting for an async operation to complete and 0 otherwise.</p> <p>SSL_get_all_async_fds() and SSL_get_changed_async_fds() return 1 on success or 0 on error.</p>"},{"location":"man3/SSL_get_all_async_fds/#notes","title":"NOTES","text":"<p>On Windows platforms the openssl/async.h header is dependent on some of the types customarily made available by including windows.h. The application developer is likely to require control over when the latter is included, commonly as one of the first included headers. Therefore, it is defined as an application developer's responsibility to include windows.h prior to async.h.</p>"},{"location":"man3/SSL_get_all_async_fds/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_CTX_set_mode(3)</p>"},{"location":"man3/SSL_get_all_async_fds/#history","title":"HISTORY","text":"<p>The SSL_waiting_for_async(), SSL_get_all_async_fds() and SSL_get_changed_async_fds() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_get_all_async_fds/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_ciphers/","title":"SSL_get_ciphers","text":""},{"location":"man3/SSL_get_ciphers/#name","title":"NAME","text":"<p>SSL_get1_supported_ciphers, SSL_get_client_ciphers, SSL_get_ciphers, SSL_CTX_get_ciphers, SSL_bytes_to_cipher_list, SSL_get_cipher_list, SSL_get_shared_ciphers - get list of available SSL_CIPHERs</p>"},{"location":"man3/SSL_get_ciphers/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSTACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *ssl);\nSTACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);\nSTACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s);\nSTACK_OF(SSL_CIPHER) *SSL_get_client_ciphers(const SSL *ssl);\nint SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,\n                             int isv2format, STACK_OF(SSL_CIPHER) **sk,\n                             STACK_OF(SSL_CIPHER) **scsvs);\nconst char *SSL_get_cipher_list(const SSL *ssl, int priority);\nchar *SSL_get_shared_ciphers(const SSL *s, char *buf, int size);\n</code></pre>"},{"location":"man3/SSL_get_ciphers/#description","title":"DESCRIPTION","text":"<p>SSL_get_ciphers() returns the stack of available SSL_CIPHERs for ssl, sorted by preference. If ssl is NULL or no ciphers are available, NULL is returned.</p> <p>SSL_CTX_get_ciphers() returns the stack of available SSL_CIPHERs for ctx.</p> <p>SSL_get1_supported_ciphers() returns the stack of enabled SSL_CIPHERs for ssl as would be sent in a ClientHello (that is, sorted by preference). The list depends on settings like the cipher list, the supported protocol versions, the security level, and the enabled signature algorithms. SRP and PSK ciphers are only enabled if the appropriate callbacks or settings have been applied. The list of ciphers that would be sent in a ClientHello can differ from the list of ciphers that would be acceptable when acting as a server. For example, additional ciphers may be usable by a server if there is a gap in the list of supported protocols, and some ciphers may not be usable by a server if there is not a suitable certificate configured. If ssl is NULL or no ciphers are available, NULL is returned.</p> <p>SSL_get_client_ciphers() returns the stack of available SSL_CIPHERs matching the list received from the client on ssl. If ssl is NULL, no ciphers are available, or ssl is not operating in server mode, NULL is returned.</p> <p>SSL_bytes_to_cipher_list() treats the supplied len octets in bytes as a wire-protocol cipher suite specification (in the three-octet-per-cipher SSLv2 wire format if isv2format is nonzero; otherwise the two-octet SSLv3/TLS wire format), and parses the cipher suites supported by the library into the returned stacks of SSL_CIPHER objects sk and Signalling Cipher-Suite Values scsvs.  Unsupported cipher suites are ignored.  Returns 1 on success and 0 on failure.</p> <p>SSL_get_cipher_list() returns a pointer to the name of the SSL_CIPHER listed for ssl with priority. If ssl is NULL, no ciphers are available, or there are less ciphers than priority available, NULL is returned.</p> <p>SSL_get_shared_ciphers() creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. buf is the buffer that should be populated with the list of names and size is the size of that buffer. A pointer to buf is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (i.e. it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (see the description of SSL_get1_supported_ciphers() above). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.</p>"},{"location":"man3/SSL_get_ciphers/#notes","title":"NOTES","text":"<p>The details of the ciphers obtained by SSL_get_ciphers(), SSL_CTX_get_ciphers() SSL_get1_supported_ciphers() and SSL_get_client_ciphers() can be obtained using the SSL_CIPHER_get_name(3) family of functions.</p> <p>Call SSL_get_cipher_list() with priority starting from 0 to obtain the sorted list of available ciphers, until NULL is returned.</p> <p>Note: SSL_get_ciphers(), SSL_CTX_get_ciphers() and SSL_get_client_ciphers() return a pointer to an internal cipher stack, which will be freed later on when the SSL or SSL_SESSION object is freed.  Therefore, the calling code MUST NOT free the return value itself.</p> <p>The stack returned by SSL_get1_supported_ciphers() should be freed using sk_SSL_CIPHER_free().</p> <p>The stacks returned by SSL_bytes_to_cipher_list() should be freed using sk_SSL_CIPHER_free().</p>"},{"location":"man3/SSL_get_ciphers/#return-values","title":"RETURN VALUES","text":"<p>See DESCRIPTION</p>"},{"location":"man3/SSL_get_ciphers/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_cipher_list(3), SSL_CIPHER_get_name(3)</p>"},{"location":"man3/SSL_get_ciphers/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_client_random/","title":"SSL_get_client_random","text":""},{"location":"man3/SSL_get_client_random/#name","title":"NAME","text":"<p>SSL_get_client_random, SSL_get_server_random, SSL_SESSION_get_master_key, SSL_SESSION_set1_master_key - get internal TLS/SSL random values and get/set master key</p>"},{"location":"man3/SSL_get_client_random/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nsize_t SSL_get_client_random(const SSL *ssl, unsigned char *out, size_t outlen);\nsize_t SSL_get_server_random(const SSL *ssl, unsigned char *out, size_t outlen);\nsize_t SSL_SESSION_get_master_key(const SSL_SESSION *session,\n                                  unsigned char *out, size_t outlen);\nint SSL_SESSION_set1_master_key(SSL_SESSION *sess, const unsigned char *in,\n                                size_t len);\n</code></pre>"},{"location":"man3/SSL_get_client_random/#description","title":"DESCRIPTION","text":"<p>SSL_get_client_random() extracts the random value sent from the client to the server during the initial SSL/TLS handshake.  It copies as many bytes as it can of this value into the buffer provided in out, which must have at least outlen bytes available. It returns the total number of bytes that were actually copied.  If outlen is zero, SSL_get_client_random() copies nothing, and returns the total size of the client_random value.</p> <p>SSL_get_server_random() behaves the same, but extracts the random value sent from the server to the client during the initial SSL/TLS handshake.</p> <p>SSL_SESSION_get_master_key() behaves the same, but extracts the master secret used to guarantee the security of the SSL/TLS session.  This one can be dangerous if misused; see NOTES below.</p> <p>SSL_SESSION_set1_master_key() sets the master key value associated with the SSL_SESSION sess. For example, this could be used to set up a session based PSK (see SSL_CTX_set_psk_use_session_callback(3)). The master key of length len should be provided at in. The supplied master key is copied by the function, so the caller is responsible for freeing and cleaning any memory associated with in. The caller must ensure that the length of the key is suitable for the ciphersuite associated with the SSL_SESSION.</p>"},{"location":"man3/SSL_get_client_random/#notes","title":"NOTES","text":"<p>You probably shouldn't use these functions.</p> <p>These functions expose internal values from the TLS handshake, for use in low-level protocols.  You probably should not use them, unless you are implementing something that needs access to the internal protocol details.</p> <p>Despite the names of SSL_get_client_random() and SSL_get_server_random(), they ARE NOT random number generators.  Instead, they return the mostly-random values that were already generated and used in the TLS protocol.  Using them in place of RAND_bytes() would be grossly foolish.</p> <p>The security of your TLS session depends on keeping the master key secret: do not expose it, or any information about it, to anybody. If you need to calculate another secret value that depends on the master secret, you should probably use SSL_export_keying_material() instead, and forget that you ever saw these functions.</p> <p>In current versions of the TLS protocols, the length of client_random (and also server_random) is always SSL3_RANDOM_SIZE bytes. Support for other outlen arguments to the SSL_get_*_random() functions is provided in case of the unlikely event that a future version or variant of TLS uses some other length there.</p> <p>Finally, though the \"client_random\" and \"server_random\" values are called \"random\", many TLS implementations will generate four bytes of those values based on their view of the current time.</p>"},{"location":"man3/SSL_get_client_random/#return-values","title":"RETURN VALUES","text":"<p>SSL_SESSION_set1_master_key() returns 1 on success or 0 on failure.</p> <p>For the other functions, if outlen is greater than 0 then these functions return the number of bytes actually copied, which will be less than or equal to outlen. If outlen is 0 then these functions return the maximum number of bytes they would copy -- that is, the length of the underlying field.</p>"},{"location":"man3/SSL_get_client_random/#see-also","title":"SEE ALSO","text":"<p>ssl(7), RAND_bytes(3), SSL_export_keying_material(3), SSL_CTX_set_psk_use_session_callback(3)</p>"},{"location":"man3/SSL_get_client_random/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_current_cipher/","title":"SSL_get_current_cipher","text":""},{"location":"man3/SSL_get_current_cipher/#name","title":"NAME","text":"<p>SSL_get_current_cipher, SSL_get_cipher_name, SSL_get_cipher, SSL_get_cipher_bits, SSL_get_cipher_version, SSL_get_pending_cipher - get SSL_CIPHER of a connection</p>"},{"location":"man3/SSL_get_current_cipher/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst SSL_CIPHER *SSL_get_current_cipher(const SSL *ssl);\nconst SSL_CIPHER *SSL_get_pending_cipher(const SSL *ssl);\n\nconst char *SSL_get_cipher_name(const SSL *s);\nconst char *SSL_get_cipher(const SSL *s);\nint SSL_get_cipher_bits(const SSL *s, int *np);\nconst char *SSL_get_cipher_version(const SSL *s);\n</code></pre>"},{"location":"man3/SSL_get_current_cipher/#description","title":"DESCRIPTION","text":"<p>SSL_get_current_cipher() returns a pointer to an SSL_CIPHER object containing the description of the actually used cipher of a connection established with the ssl object. See SSL_CIPHER_get_name(3) for more details.</p> <p>SSL_get_cipher_name() obtains the name of the currently used cipher. SSL_get_cipher() is identical to SSL_get_cipher_name(). SSL_get_cipher_bits() is a macro to obtain the number of secret/algorithm bits used and SSL_get_cipher_version() returns the protocol name.</p> <p>SSL_get_pending_cipher() returns a pointer to an SSL_CIPHER object containing the description of the cipher (if any) that has been negotiated for future use on the connection established with the ssl object, but is not yet in use. This may be the case during handshake processing, when control flow can be returned to the application via any of several callback methods.  The internal sequencing of handshake processing and callback invocation is not guaranteed to be stable from release to release, and at present only the callback set by SSL_CTX_set_alpn_select_cb() is guaranteed to have a non-NULL return value. Other callbacks may be added to this list over time.</p>"},{"location":"man3/SSL_get_current_cipher/#return-values","title":"RETURN VALUES","text":"<p>SSL_get_current_cipher() returns the cipher actually used, or NULL if no session has been established.</p> <p>SSL_get_pending_cipher() returns the cipher to be used at the next change of cipher suite, or NULL if no such cipher is known.</p>"},{"location":"man3/SSL_get_current_cipher/#notes","title":"NOTES","text":"<p>SSL_get_cipher, SSL_get_cipher_bits, SSL_get_cipher_version, and SSL_get_cipher_name are implemented as macros.</p>"},{"location":"man3/SSL_get_current_cipher/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CIPHER_get_name(3)</p>"},{"location":"man3/SSL_get_current_cipher/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_default_timeout/","title":"SSL_get_default_timeout","text":""},{"location":"man3/SSL_get_default_timeout/#name","title":"NAME","text":"<p>SSL_get_default_timeout - get default session timeout value</p>"},{"location":"man3/SSL_get_default_timeout/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_get_default_timeout(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_default_timeout/#description","title":"DESCRIPTION","text":"<p>SSL_get_default_timeout() returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for ssl.</p>"},{"location":"man3/SSL_get_default_timeout/#notes","title":"NOTES","text":"<p>Whenever a new session is negotiated, it is assigned a timeout value, after which it will not be accepted for session reuse. If the timeout value was not explicitly set using SSL_CTX_set_timeout(3), the hardcoded default timeout for the protocol will be used.</p> <p>SSL_get_default_timeout() return this hardcoded value, which is 300 seconds for all currently supported protocols.</p>"},{"location":"man3/SSL_get_default_timeout/#return-values","title":"RETURN VALUES","text":"<p>See description.</p>"},{"location":"man3/SSL_get_default_timeout/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_session_cache_mode(3), SSL_SESSION_get_time(3), SSL_CTX_flush_sessions(3), SSL_get_default_timeout(3)</p>"},{"location":"man3/SSL_get_default_timeout/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_error/","title":"SSL_get_error","text":""},{"location":"man3/SSL_get_error/#name","title":"NAME","text":"<p>SSL_get_error - obtain result code for TLS/SSL I/O operation</p>"},{"location":"man3/SSL_get_error/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_get_error(const SSL *ssl, int ret);\n</code></pre>"},{"location":"man3/SSL_get_error/#description","title":"DESCRIPTION","text":"<p>SSL_get_error() returns a result code (suitable for the C \"switch\" statement) for a preceding call to SSL_connect(), SSL_accept(), SSL_do_handshake(), SSL_read_ex(), SSL_read(), SSL_peek_ex(), SSL_peek(), SSL_shutdown(), SSL_write_ex() or SSL_write() on ssl.  The value returned by that TLS/SSL I/O function must be passed to SSL_get_error() in parameter ret.</p> <p>In addition to ssl and ret, SSL_get_error() inspects the current thread's OpenSSL error queue.  Thus, SSL_get_error() must be used in the same thread that performed the TLS/SSL I/O operation, and no other OpenSSL function calls should appear in between.  The current thread's error queue must be empty before the TLS/SSL I/O operation is attempted, or SSL_get_error() will not work reliably.</p>"},{"location":"man3/SSL_get_error/#return-values","title":"RETURN VALUES","text":"<p>The following return values can currently occur:</p> <ul> <li> <p>SSL_ERROR_NONE</p> <p>The TLS/SSL I/O operation completed.  This result code is returned if and only if ret &gt; 0.</p> </li> <li> <p>SSL_ERROR_ZERO_RETURN</p> <p>The TLS/SSL peer has closed the connection for writing by sending the close_notify alert. No more data can be read. Note that SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed.</p> </li> <li> <p>SSL_ERROR_WANT_READ, SSL_ERROR_WANT_WRITE</p> <p>The operation did not complete and can be retried later.</p> <p>SSL_ERROR_WANT_READ is returned when the last operation was a read operation from a nonblocking BIO. It means that not enough data was available at this time to complete the operation. If at a later time the underlying BIO has data available for reading the same function can be called again.</p> <p>SSL_read() and SSL_read_ex() can also set SSL_ERROR_WANT_READ when there is still unprocessed data available at either the SSL or the BIO layer, even for a blocking BIO. See SSL_read(3) for more information.</p> <p>SSL_ERROR_WANT_WRITE is returned when the last operation was a write to a nonblocking BIO and it was unable to sent all data to the BIO. When the BIO is writable again, the same function can be called again.</p> <p>Note that the retry may again lead to an SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition. There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level.</p> <p>It is safe to call SSL_read() or SSL_read_ex() when more data is available even when the call that set this error was an SSL_write() or SSL_write_ex(). However, if the call was an SSL_write() or SSL_write_ex(), it should be called again to continue sending the application data.</p> <p>For socket BIOs (e.g. when SSL_set_fd() was used), select() or poll() on the underlying socket can be used to find out when the TLS/SSL I/O function should be retried.</p> <p>Caveat: Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE. In particular, SSL_read_ex(), SSL_read(), SSL_peek_ex(), or SSL_peek() may want to write data and SSL_write() or SSL_write_ex() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read_ex(), SSL_read(), SSL_peek_ex(), SSL_peek(), SSL_write_ex(), and SSL_write() will handle any pending handshakes.</p> </li> <li> <p>SSL_ERROR_WANT_CONNECT, SSL_ERROR_WANT_ACCEPT</p> <p>The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect()/accept(). The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms select() or poll() for writing on the socket file descriptor can be used.</p> </li> <li> <p>SSL_ERROR_WANT_X509_LOOKUP</p> <p>The operation did not complete because an application callback set by SSL_CTX_set_client_cert_cb() has asked to be called again. The TLS/SSL I/O function should be called again later. Details depend on the application.</p> </li> <li> <p>SSL_ERROR_WANT_ASYNC</p> <p>The operation did not complete because an asynchronous engine is still processing data. This will only occur if the mode has been set to SSL_MODE_ASYNC using SSL_CTX_set_mode(3) or SSL_set_mode(3) and an asynchronous capable engine is being used. An application can determine whether the engine has completed its processing using select() or poll() on the asynchronous wait file descriptor. This file descriptor is available by calling SSL_get_all_async_fds(3) or SSL_get_changed_async_fds(3). The TLS/SSL I/O function should be called again later. The function must be called from the same thread that the original call was made from.</p> </li> <li> <p>SSL_ERROR_WANT_ASYNC_JOB</p> <p>The asynchronous job could not be started because there were no async jobs available in the pool (see ASYNC_init_thread(3)). This will only occur if the mode has been set to SSL_MODE_ASYNC using SSL_CTX_set_mode(3) or SSL_set_mode(3) and a maximum limit has been set on the async job pool through a call to ASYNC_init_thread(3). The application should retry the operation after a currently executing asynchronous operation for the current thread has completed.</p> </li> <li> <p>SSL_ERROR_WANT_CLIENT_HELLO_CB</p> <p>The operation did not complete because an application callback set by SSL_CTX_set_client_hello_cb() has asked to be called again. The TLS/SSL I/O function should be called again later. Details depend on the application.</p> </li> <li> <p>SSL_ERROR_SYSCALL</p> <p>Some non-recoverable, fatal I/O error occurred. The OpenSSL error queue may contain more information on the error. For socket I/O on Unix systems, consult errno for details. If this error occurs then no further I/O operations should be performed on the connection and SSL_shutdown() must not be called.</p> <p>This value can also be returned for other errors, check the error queue for details.</p> </li> <li> <p>SSL_ERROR_SSL</p> <p>A non-recoverable, fatal error in the SSL library occurred, usually a protocol error.  The OpenSSL error queue contains more information on the error. If this error occurs then no further I/O operations should be performed on the connection and SSL_shutdown() must not be called.</p> </li> </ul>"},{"location":"man3/SSL_get_error/#bugs","title":"BUGS","text":"<p>The SSL_ERROR_SYSCALL with errno value of 0 indicates unexpected EOF from the peer. This will be properly reported as SSL_ERROR_SSL with reason code SSL_R_UNEXPECTED_EOF_WHILE_READING in the OpenSSL 3.0 release because it is truly a TLS protocol error to terminate the connection without a SSL_shutdown().</p> <p>The issue is kept unfixed in OpenSSL 1.1.1 releases because many applications which choose to ignore this protocol error depend on the existing way of reporting the error.</p>"},{"location":"man3/SSL_get_error/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_get_error/#history","title":"HISTORY","text":"<p>The SSL_ERROR_WANT_ASYNC error code was added in OpenSSL 1.1.0. The SSL_ERROR_WANT_CLIENT_HELLO_CB error code was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_get_error/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_extms_support/","title":"SSL_get_extms_support","text":""},{"location":"man3/SSL_get_extms_support/#name","title":"NAME","text":"<p>SSL_get_extms_support - extended master secret support</p>"},{"location":"man3/SSL_get_extms_support/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_get_extms_support(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_extms_support/#description","title":"DESCRIPTION","text":"<p>SSL_get_extms_support() indicates whether the current session used extended master secret.</p> <p>This function is implemented as a macro.</p>"},{"location":"man3/SSL_get_extms_support/#return-values","title":"RETURN VALUES","text":"<p>SSL_get_extms_support() returns 1 if the current session used extended master secret, 0 if it did not and -1 if a handshake is currently in progress i.e. it is not possible to determine if extended master secret was used.</p>"},{"location":"man3/SSL_get_extms_support/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_get_extms_support/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_fd/","title":"SSL_get_fd","text":""},{"location":"man3/SSL_get_fd/#name","title":"NAME","text":"<p>SSL_get_fd, SSL_get_rfd, SSL_get_wfd - get file descriptor linked to an SSL object</p>"},{"location":"man3/SSL_get_fd/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_get_fd(const SSL *ssl);\nint SSL_get_rfd(const SSL *ssl);\nint SSL_get_wfd(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_fd/#description","title":"DESCRIPTION","text":"<p>SSL_get_fd() returns the file descriptor which is linked to ssl. SSL_get_rfd() and SSL_get_wfd() return the file descriptors for the read or the write channel, which can be different. If the read and the write channel are different, SSL_get_fd() will return the file descriptor of the read channel.</p>"},{"location":"man3/SSL_get_fd/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>-1</p> <p>The operation failed, because the underlying BIO is not of the correct type (suitable for file descriptors).</p> </li> <li> <p>&gt;=0</p> <p>The file descriptor linked to ssl.</p> </li> </ul>"},{"location":"man3/SSL_get_fd/#see-also","title":"SEE ALSO","text":"<p>SSL_set_fd(3), ssl(7) , bio(7)</p>"},{"location":"man3/SSL_get_fd/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_peer_cert_chain/","title":"SSL_get_peer_cert_chain","text":""},{"location":"man3/SSL_get_peer_cert_chain/#name","title":"NAME","text":"<p>SSL_get_peer_cert_chain, SSL_get0_verified_chain - get the X509 certificate chain of the peer</p>"},{"location":"man3/SSL_get_peer_cert_chain/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSTACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *ssl);\nSTACK_OF(X509) *SSL_get0_verified_chain(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_peer_cert_chain/#description","title":"DESCRIPTION","text":"<p>SSL_get_peer_cert_chain() returns a pointer to STACK_OF(X509) certificates forming the certificate chain sent by the peer. If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate(3). If the peer did not present a certificate, NULL is returned.</p> <p>NB: SSL_get_peer_cert_chain() returns the peer chain as sent by the peer: it only consists of certificates the peer has sent (in the order the peer has sent them) it is not a verified chain.</p> <p>SSL_get0_verified_chain() returns the verified certificate chain of the peer including the peer's end entity certificate. It must be called after a session has been successfully established. If peer verification was not successful (as indicated by SSL_get_verify_result() not returning X509_V_OK) the chain may be incomplete or invalid.</p>"},{"location":"man3/SSL_get_peer_cert_chain/#notes","title":"NOTES","text":"<p>If the session is resumed peers do not send certificates so a NULL pointer is returned by these functions. Applications can call SSL_session_reused() to determine whether a session is resumed.</p> <p>The reference count of each certificate in the returned STACK_OF(X509) object is not incremented and the returned stack may be invalidated by renegotiation. If applications wish to use any certificates in the returned chain indefinitely they must increase the reference counts using X509_up_ref() or obtain a copy of the whole chain with X509_chain_up_ref().</p>"},{"location":"man3/SSL_get_peer_cert_chain/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>No certificate was presented by the peer or no connection was established or the certificate chain is no longer available when a session is reused.</p> </li> <li> <p>Pointer to a STACK_OF(X509)</p> <p>The return value points to the certificate chain presented by the peer.</p> </li> </ul>"},{"location":"man3/SSL_get_peer_cert_chain/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_peer_certificate(3), X509_up_ref(3), X509_chain_up_ref(3)</p>"},{"location":"man3/SSL_get_peer_cert_chain/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_peer_certificate/","title":"SSL_get_peer_certificate","text":""},{"location":"man3/SSL_get_peer_certificate/#name","title":"NAME","text":"<p>SSL_get_peer_certificate - get the X509 certificate of the peer</p>"},{"location":"man3/SSL_get_peer_certificate/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nX509 *SSL_get_peer_certificate(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_peer_certificate/#description","title":"DESCRIPTION","text":"<p>SSL_get_peer_certificate() returns a pointer to the X509 certificate the peer presented. If the peer did not present a certificate, NULL is returned.</p>"},{"location":"man3/SSL_get_peer_certificate/#notes","title":"NOTES","text":"<p>Due to the protocol definition, a TLS/SSL server will always send a certificate, if present. A client will only send a certificate when explicitly requested to do so by the server (see SSL_CTX_set_verify(3)). If an anonymous cipher is used, no certificates are sent.</p> <p>That a certificate is returned does not indicate information about the verification state, use SSL_get_verify_result(3) to check the verification state.</p> <p>The reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed. The X509 object must be explicitly freed using X509_free().</p>"},{"location":"man3/SSL_get_peer_certificate/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>No certificate was presented by the peer or no connection was established.</p> </li> <li> <p>Pointer to an X509 certificate</p> <p>The return value points to the certificate presented by the peer.</p> </li> </ul>"},{"location":"man3/SSL_get_peer_certificate/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_verify_result(3), SSL_CTX_set_verify(3)</p>"},{"location":"man3/SSL_get_peer_certificate/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_peer_signature_nid/","title":"SSL_get_peer_signature_nid","text":""},{"location":"man3/SSL_get_peer_signature_nid/#name","title":"NAME","text":"<p>SSL_get_peer_signature_nid, SSL_get_peer_signature_type_nid, SSL_get_signature_nid, SSL_get_signature_type_nid - get TLS message signing types</p>"},{"location":"man3/SSL_get_peer_signature_nid/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_get_peer_signature_nid(SSL *ssl, int *psig_nid);\nint SSL_get_peer_signature_type_nid(const SSL *ssl, int *psigtype_nid);\nint SSL_get_signature_nid(SSL *ssl, int *psig_nid);\nint SSL_get_signature_type_nid(const SSL *ssl, int *psigtype_nid);\n</code></pre>"},{"location":"man3/SSL_get_peer_signature_nid/#description","title":"DESCRIPTION","text":"<p>SSL_get_peer_signature_nid() sets *psig_nid to the NID of the digest used by the peer to sign TLS messages. It is implemented as a macro.</p> <p>SSL_get_peer_signature_type_nid() sets *psigtype_nid to the signature type used by the peer to sign TLS messages. Currently the signature type is the NID of the public key type used for signing except for PSS signing where it is EVP_PKEY_RSA_PSS. To differentiate between rsa_pss_rsae_* and rsa_pss_pss_* signatures, it's necessary to check the type of public key in the peer's certificate.</p> <p>SSL_get_signature_nid() and SSL_get_signature_type_nid() return the equivalent information for the local end of the connection.</p>"},{"location":"man3/SSL_get_peer_signature_nid/#return-values","title":"RETURN VALUES","text":"<p>These functions return 1 for success and 0 for failure. There are several possible reasons for failure: the cipher suite has no signature (e.g. it uses RSA key exchange or is anonymous), the TLS version is below 1.2 or the functions were called too early, e.g. before the peer signed a message.</p>"},{"location":"man3/SSL_get_peer_signature_nid/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_peer_certificate(3),</p>"},{"location":"man3/SSL_get_peer_signature_nid/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_peer_tmp_key/","title":"SSL_get_peer_tmp_key","text":""},{"location":"man3/SSL_get_peer_tmp_key/#name","title":"NAME","text":"<p>SSL_get_peer_tmp_key, SSL_get_server_tmp_key, SSL_get_tmp_key - get information about temporary keys used during a handshake</p>"},{"location":"man3/SSL_get_peer_tmp_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_get_peer_tmp_key(SSL *ssl, EVP_PKEY **key);\nlong SSL_get_server_tmp_key(SSL *ssl, EVP_PKEY **key);\nlong SSL_get_tmp_key(SSL *ssl, EVP_PKEY **key);\n</code></pre>"},{"location":"man3/SSL_get_peer_tmp_key/#description","title":"DESCRIPTION","text":"<p>SSL_get_peer_tmp_key() returns the temporary key provided by the peer and used during key exchange. For example, if ECDHE is in use, then this represents the peer's public ECDHE key. On success a pointer to the key is stored in *key. It is the caller's responsibility to free this key after use using EVP_PKEY_free(3).</p> <p>SSL_get_server_tmp_key() is a backwards compatibility alias for SSL_get_peer_tmp_key(). Under that name it worked just on the client side of the connection, its behaviour on the server end is release-dependent.</p> <p>SSL_get_tmp_key() returns the equivalent information for the local end of the connection.</p>"},{"location":"man3/SSL_get_peer_tmp_key/#return-values","title":"RETURN VALUES","text":"<p>All these functions return 1 on success and 0 otherwise.</p>"},{"location":"man3/SSL_get_peer_tmp_key/#notes","title":"NOTES","text":"<p>This function is implemented as a macro.</p>"},{"location":"man3/SSL_get_peer_tmp_key/#see-also","title":"SEE ALSO","text":"<p>ssl(7), EVP_PKEY_free(3)</p>"},{"location":"man3/SSL_get_peer_tmp_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_psk_identity/","title":"SSL_get_psk_identity","text":""},{"location":"man3/SSL_get_psk_identity/#name","title":"NAME","text":"<p>SSL_get_psk_identity, SSL_get_psk_identity_hint - get PSK client identity and hint</p>"},{"location":"man3/SSL_get_psk_identity/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst char *SSL_get_psk_identity_hint(const SSL *ssl);\nconst char *SSL_get_psk_identity(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_psk_identity/#description","title":"DESCRIPTION","text":"<p>SSL_get_psk_identity_hint() is used to retrieve the PSK identity hint used during the connection setup related to SSL object ssl. Similarly, SSL_get_psk_identity() is used to retrieve the PSK identity used during the connection setup.</p>"},{"location":"man3/SSL_get_psk_identity/#return-values","title":"RETURN VALUES","text":"<p>If non-NULL, SSL_get_psk_identity_hint() returns the PSK identity hint and SSL_get_psk_identity() returns the PSK identity. Both are NULL-terminated. SSL_get_psk_identity_hint() may return NULL if no PSK identity hint was used during the connection setup.</p> <p>Note that the return value is valid only during the lifetime of the SSL object ssl.</p>"},{"location":"man3/SSL_get_psk_identity/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_rbio/","title":"SSL_get_rbio","text":""},{"location":"man3/SSL_get_rbio/#name","title":"NAME","text":"<p>SSL_get_rbio, SSL_get_wbio - get BIO linked to an SSL object</p>"},{"location":"man3/SSL_get_rbio/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nBIO *SSL_get_rbio(SSL *ssl);\nBIO *SSL_get_wbio(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_rbio/#description","title":"DESCRIPTION","text":"<p>SSL_get_rbio() and SSL_get_wbio() return pointers to the BIOs for the read or the write channel, which can be different. The reference count of the BIO is not incremented.</p>"},{"location":"man3/SSL_get_rbio/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>No BIO was connected to the SSL object</p> </li> <li> <p>Any other pointer</p> <p>The BIO linked to ssl.</p> </li> </ul>"},{"location":"man3/SSL_get_rbio/#see-also","title":"SEE ALSO","text":"<p>SSL_set_bio(3), ssl(7) , bio(7)</p>"},{"location":"man3/SSL_get_rbio/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_session/","title":"SSL_get_session","text":""},{"location":"man3/SSL_get_session/#name","title":"NAME","text":"<p>SSL_get_session, SSL_get0_session, SSL_get1_session - retrieve TLS/SSL session data</p>"},{"location":"man3/SSL_get_session/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL_SESSION *SSL_get_session(const SSL *ssl);\nSSL_SESSION *SSL_get0_session(const SSL *ssl);\nSSL_SESSION *SSL_get1_session(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_session/#description","title":"DESCRIPTION","text":"<p>SSL_get_session() returns a pointer to the SSL_SESSION actually used in ssl. The reference count of the SSL_SESSION is not incremented, so that the pointer can become invalid by other operations.</p> <p>SSL_get0_session() is the same as SSL_get_session().</p> <p>SSL_get1_session() is the same as SSL_get_session(), but the reference count of the SSL_SESSION is incremented by one.</p>"},{"location":"man3/SSL_get_session/#notes","title":"NOTES","text":"<p>The ssl session contains all information required to re-establish the connection without a full handshake for SSL versions up to and including TLSv1.2. In TLSv1.3 the same is true, but sessions are established after the main handshake has occurred. The server will send the session information to the client at a time of its choosing, which may be some while after the initial connection is established (or never). Calling these functions on the client side in TLSv1.3 before the session has been established will still return an SSL_SESSION object but that object cannot be used for resuming the session. See SSL_SESSION_is_resumable(3) for information on how to determine whether an SSL_SESSION object can be used for resumption or not.</p> <p>Additionally, in TLSv1.3, a server can send multiple messages that establish a session for a single connection. In that case, on the client side, the above functions will only return information on the last session that was received. On the server side they will only return information on the last session that was sent, or if no session tickets were sent then the session for the current connection.</p> <p>The preferred way for applications to obtain a resumable SSL_SESSION object is to use a new session callback as described in SSL_CTX_sess_set_new_cb(3). The new session callback is only invoked when a session is actually established, so this avoids the problem described above where an application obtains an SSL_SESSION object that cannot be used for resumption in TLSv1.3. It also enables applications to obtain information about all sessions sent by the server.</p> <p>A session will be automatically removed from the session cache and marked as non-resumable if the connection is not closed down cleanly, e.g. if a fatal error occurs on the connection or SSL_shutdown(3) is not called prior to SSL_free(3).</p> <p>In TLSv1.3 it is recommended that each SSL_SESSION object is only used for resumption once.</p> <p>SSL_get0_session() returns a pointer to the actual session. As the reference counter is not incremented, the pointer is only valid while the connection is in use. If SSL_clear(3) or SSL_free(3) is called, the session may be removed completely (if considered bad), and the pointer obtained will become invalid. Even if the session is valid, it can be removed at any time due to timeout during SSL_CTX_flush_sessions(3).</p> <p>If the data is to be kept, SSL_get1_session() will increment the reference count, so that the session will not be implicitly removed by other operations but stays in memory. In order to remove the session SSL_SESSION_free(3) must be explicitly called once to decrement the reference count again.</p> <p>SSL_SESSION objects keep internal link information about the session cache list, when being inserted into one SSL_CTX object's session cache. One SSL_SESSION object, regardless of its reference count, must therefore only be used with one SSL_CTX object (and the SSL objects created from this SSL_CTX object).</p>"},{"location":"man3/SSL_get_session/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>There is no session available in ssl.</p> </li> <li> <p>Pointer to an SSL_SESSION</p> <p>The return value points to the data of an SSL session.</p> </li> </ul>"},{"location":"man3/SSL_get_session/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_free(3), SSL_clear(3), SSL_SESSION_free(3)</p>"},{"location":"man3/SSL_get_session/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_shared_sigalgs/","title":"SSL_get_shared_sigalgs","text":""},{"location":"man3/SSL_get_shared_sigalgs/#name","title":"NAME","text":"<p>SSL_get_shared_sigalgs, SSL_get_sigalgs - get supported signature algorithms</p>"},{"location":"man3/SSL_get_shared_sigalgs/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_get_shared_sigalgs(SSL *s, int idx,\n                           int *psign, int *phash, int *psignhash,\n                           unsigned char *rsig, unsigned char *rhash);\n\nint SSL_get_sigalgs(SSL *s, int idx,\n                    int *psign, int *phash, int *psignhash,\n                    unsigned char *rsig, unsigned char *rhash);\n</code></pre>"},{"location":"man3/SSL_get_shared_sigalgs/#description","title":"DESCRIPTION","text":"<p>SSL_get_shared_sigalgs() returns information about the shared signature algorithms supported by peer s. The parameter idx indicates the index of the shared signature algorithm to return starting from zero. The signature algorithm NID is written to *psign, the hash NID to *phash and the sign and hash NID to *psignhash. The raw signature and hash values are written to *rsig and *rhash.</p> <p>SSL_get_sigalgs() is similar to SSL_get_shared_sigalgs() except it returns information about all signature algorithms supported by s in the order they were sent by the peer.</p>"},{"location":"man3/SSL_get_shared_sigalgs/#return-values","title":"RETURN VALUES","text":"<p>SSL_get_shared_sigalgs() and SSL_get_sigalgs() return the number of signature algorithms or 0 if the idx parameter is out of range.</p>"},{"location":"man3/SSL_get_shared_sigalgs/#notes","title":"NOTES","text":"<p>These functions are typically called for debugging purposes (to report the peer's preferences) or where an application wants finer control over certificate selection. Most applications will rely on internal handling and will not need to call them.</p> <p>If an application is only interested in the highest preference shared signature algorithm it can just set idx to zero.</p> <p>Any or all of the parameters psign, phash, psignhash, rsig or rhash can be set to NULL if the value is not required. By setting them all to NULL and setting idx to zero the total number of signature algorithms can be determined: which can be zero.</p> <p>These functions must be called after the peer has sent a list of supported signature algorithms: after a client hello (for servers) or a certificate request (for clients). They can (for example) be called in the certificate callback.</p> <p>Only TLS 1.2, TLS 1.3 and DTLS 1.2 currently support signature algorithms. If these functions are called on an earlier version of TLS or DTLS zero is returned.</p> <p>The shared signature algorithms returned by SSL_get_shared_sigalgs() are ordered according to configuration and peer preferences.</p> <p>The raw values correspond to the on the wire form as defined by RFC5246 et al. The NIDs are OpenSSL equivalents. For example if the peer sent sha256(4) and rsa(1) then *rhash would be 4, *rsign 1, *phash NID_sha256, *psig NID_rsaEncryption and *psighash NID_sha256WithRSAEncryption.</p> <p>If a signature algorithm is not recognised the corresponding NIDs will be set to NID_undef. This may be because the value is not supported, is not an appropriate combination (for example MD5 and DSA) or the signature algorithm does not use a hash (for example Ed25519).</p>"},{"location":"man3/SSL_get_shared_sigalgs/#see-also","title":"SEE ALSO","text":"<p>SSL_CTX_set_cert_cb(3), ssl(7)</p>"},{"location":"man3/SSL_get_shared_sigalgs/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_verify_result/","title":"SSL_get_verify_result","text":""},{"location":"man3/SSL_get_verify_result/#name","title":"NAME","text":"<p>SSL_get_verify_result - get result of peer certificate verification</p>"},{"location":"man3/SSL_get_verify_result/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nlong SSL_get_verify_result(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_get_verify_result/#description","title":"DESCRIPTION","text":"<p>SSL_get_verify_result() returns the result of the verification of the X509 certificate presented by the peer, if any.</p>"},{"location":"man3/SSL_get_verify_result/#notes","title":"NOTES","text":"<p>SSL_get_verify_result() can only return one error code while the verification of a certificate can fail because of many reasons at the same time. Only the last verification error that occurred during the processing is available from SSL_get_verify_result().</p> <p>The verification result is part of the established session and is restored when a session is reused.</p>"},{"location":"man3/SSL_get_verify_result/#bugs","title":"BUGS","text":"<p>If no peer certificate was presented, the returned result code is X509_V_OK. This is because no verification error occurred, it does however not indicate success. SSL_get_verify_result() is only useful in connection with SSL_get_peer_certificate(3).</p>"},{"location":"man3/SSL_get_verify_result/#return-values","title":"RETURN VALUES","text":"<p>The following return values can currently occur:</p> <ul> <li> <p>X509_V_OK</p> <p>The verification succeeded or no peer certificate was presented.</p> </li> <li> <p>Any other value</p> <p>Documented in verify(1).</p> </li> </ul>"},{"location":"man3/SSL_get_verify_result/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_set_verify_result(3), SSL_get_peer_certificate(3), verify(1)</p>"},{"location":"man3/SSL_get_verify_result/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_get_version/","title":"SSL_get_version","text":""},{"location":"man3/SSL_get_version/#name","title":"NAME","text":"<p>SSL_client_version, SSL_get_version, SSL_is_dtls, SSL_version - get the protocol information of a connection</p>"},{"location":"man3/SSL_get_version/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_client_version(const SSL *s);\n\nconst char *SSL_get_version(const SSL *ssl);\n\nint SSL_is_dtls(const SSL *ssl);\n\nint SSL_version(const SSL *s);\n</code></pre>"},{"location":"man3/SSL_get_version/#description","title":"DESCRIPTION","text":"<p>SSL_client_version() returns the numeric protocol version advertised by the client in the legacy_version field of the ClientHello when initiating the connection. Note that, for TLS, this value will never indicate a version greater than TLSv1.2 even if TLSv1.3 is subsequently negotiated. SSL_get_version() returns the name of the protocol used for the connection. SSL_version() returns the numeric protocol version used for the connection. They should only be called after the initial handshake has been completed. Prior to that the results returned from these functions may be unreliable.</p> <p>SSL_is_dtls() returns one if the connection is using DTLS, zero if not.</p>"},{"location":"man3/SSL_get_version/#return-values","title":"RETURN VALUES","text":"<p>SSL_get_version() returns one of the following strings:</p> <ul> <li> <p>SSLv3</p> <p>The connection uses the SSLv3 protocol.</p> </li> <li> <p>TLSv1</p> <p>The connection uses the TLSv1.0 protocol.</p> </li> <li> <p>TLSv1.1</p> <p>The connection uses the TLSv1.1 protocol.</p> </li> <li> <p>TLSv1.2</p> <p>The connection uses the TLSv1.2 protocol.</p> </li> <li> <p>TLSv1.3</p> <p>The connection uses the TLSv1.3 protocol.</p> </li> <li> <p>unknown</p> <p>This indicates an unknown protocol version.</p> </li> </ul> <p>SSL_version() and SSL_client_version() return an integer which could include any of the following:</p> <ul> <li> <p>SSL3_VERSION</p> <p>The connection uses the SSLv3 protocol.</p> </li> <li> <p>TLS1_VERSION</p> <p>The connection uses the TLSv1.0 protocol.</p> </li> <li> <p>TLS1_1_VERSION</p> <p>The connection uses the TLSv1.1 protocol.</p> </li> <li> <p>TLS1_2_VERSION</p> <p>The connection uses the TLSv1.2 protocol.</p> </li> <li> <p>TLS1_3_VERSION</p> <p>The connection uses the TLSv1.3 protocol (never returned for SSL_client_version()).</p> </li> </ul>"},{"location":"man3/SSL_get_version/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_get_version/#history","title":"HISTORY","text":"<p>The SSL_is_dtls() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_get_version/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_in_init/","title":"SSL_in_init","text":""},{"location":"man3/SSL_in_init/#name","title":"NAME","text":"<p>SSL_in_before, SSL_in_init, SSL_is_init_finished, SSL_in_connect_init, SSL_in_accept_init, SSL_get_state - retrieve information about the handshake state machine</p>"},{"location":"man3/SSL_in_init/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_in_init(const SSL *s);\nint SSL_in_before(const SSL *s);\nint SSL_is_init_finished(const SSL *s);\n\nint SSL_in_connect_init(SSL *s);\nint SSL_in_accept_init(SSL *s);\n\nOSSL_HANDSHAKE_STATE SSL_get_state(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_in_init/#description","title":"DESCRIPTION","text":"<p>SSL_in_init() returns 1 if the SSL/TLS state machine is currently processing or awaiting handshake messages, or 0 otherwise.</p> <p>SSL_in_before() returns 1 if no SSL/TLS handshake has yet been initiated, or 0 otherwise.</p> <p>SSL_is_init_finished() returns 1 if the SSL/TLS connection is in a state where fully protected application data can be transferred or 0 otherwise.</p> <p>Note that in some circumstances (such as when early data is being transferred) SSL_in_init(), SSL_in_before() and SSL_is_init_finished() can all return 0.</p> <p>SSL_in_connect_init() returns 1 if s is acting as a client and SSL_in_init() would return 1, or 0 otherwise.</p> <p>SSL_in_accept_init() returns 1 if s is acting as a server and SSL_in_init() would return 1, or 0 otherwise.</p> <p>SSL_in_connect_init() and SSL_in_accept_init() are implemented as macros.</p> <p>SSL_get_state() returns a value indicating the current state of the handshake state machine. OSSL_HANDSHAKE_STATE is an enumerated type where each value indicates a discrete state machine state. Note that future versions of OpenSSL may define more states so applications should expect to receive unrecognised state values. The naming format is made up of a number of elements as follows:</p> <p>protocol_ST_role_message</p> <p>protocol is one of TLS or DTLS. DTLS is used where a state is specific to the DTLS protocol. Otherwise TLS is used.</p> <p>role is one of CR, CW, SR or SW to indicate \"client reading\", \"client writing\", \"server reading\" or \"server writing\" respectively.</p> <p>message is the name of a handshake message that is being or has been sent, or is being or has been processed.</p> <p>Additionally there are some special states that do not conform to the above format. These are:</p> <ul> <li> <p>TLS_ST_BEFORE</p> <p>No handshake messages have yet been been sent or received.</p> </li> <li> <p>TLS_ST_OK</p> <p>Handshake message sending/processing has completed.</p> </li> <li> <p>TLS_ST_EARLY_DATA</p> <p>Early data is being processed</p> </li> <li> <p>TLS_ST_PENDING_EARLY_DATA_END</p> <p>Awaiting the end of early data processing</p> </li> </ul>"},{"location":"man3/SSL_in_init/#return-values","title":"RETURN VALUES","text":"<p>SSL_in_init(), SSL_in_before(), SSL_is_init_finished(), SSL_in_connect_init() and SSL_in_accept_init() return values as indicated above.</p> <p>SSL_get_state() returns the current handshake state.</p>"},{"location":"man3/SSL_in_init/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_read_early_data(3)</p>"},{"location":"man3/SSL_in_init/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_key_update/","title":"SSL_key_update","text":""},{"location":"man3/SSL_key_update/#name","title":"NAME","text":"<p>SSL_key_update, SSL_get_key_update_type, SSL_renegotiate, SSL_renegotiate_abbreviated, SSL_renegotiate_pending - initiate and obtain information about updating connection keys</p>"},{"location":"man3/SSL_key_update/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_key_update(SSL *s, int updatetype);\nint SSL_get_key_update_type(const SSL *s);\n\nint SSL_renegotiate(SSL *s);\nint SSL_renegotiate_abbreviated(SSL *s);\nint SSL_renegotiate_pending(const SSL *s);\n</code></pre>"},{"location":"man3/SSL_key_update/#description","title":"DESCRIPTION","text":"<p>SSL_key_update() schedules an update of the keys for the current TLS connection. If the updatetype parameter is set to SSL_KEY_UPDATE_NOT_REQUESTED then the sending keys for this connection will be updated and the peer will be informed of the change. If the updatetype parameter is set to SSL_KEY_UPDATE_REQUESTED then the sending keys for this connection will be updated and the peer will be informed of the change along with a request for the peer to additionally update its sending keys. It is an error if updatetype is set to SSL_KEY_UPDATE_NONE.</p> <p>SSL_key_update() must only be called after the initial handshake has been completed and TLSv1.3 has been negotiated. The key update will not take place until the next time an IO operation such as SSL_read_ex() or SSL_write_ex() takes place on the connection. Alternatively SSL_do_handshake() can be called to force the update to take place immediately.</p> <p>SSL_get_key_update_type() can be used to determine whether a key update operation has been scheduled but not yet performed. The type of the pending key update operation will be returned if there is one, or SSL_KEY_UPDATE_NONE otherwise.</p> <p>SSL_renegotiate() and SSL_renegotiate_abbreviated() should only be called for connections that have negotiated TLSv1.2 or less. Calling them on any other connection will result in an error.</p> <p>When called from the client side, SSL_renegotiate() schedules a completely new handshake over an existing SSL/TLS connection. The next time an IO operation such as SSL_read_ex() or SSL_write_ex() takes place on the connection a check will be performed to confirm that it is a suitable time to start a renegotiation. If so, then it will be initiated immediately. OpenSSL will not attempt to resume any session associated with the connection in the new handshake.</p> <p>When called from the client side, SSL_renegotiate_abbreviated() works in the same was as SSL_renegotiate() except that OpenSSL will attempt to resume the session associated with the current connection in the new handshake.</p> <p>When called from the server side, SSL_renegotiate() and SSL_renegotiate_abbreviated() behave identically. They both schedule a request for a new handshake to be sent to the client. The next time an IO operation is performed then the same checks as on the client side are performed and then, if appropriate, the request is sent. The client may or may not respond with a new handshake and it may or may not attempt to resume an existing session. If a new handshake is started then this will be handled transparently by calling any OpenSSL IO function.</p> <p>If an OpenSSL client receives a renegotiation request from a server then again this will be handled transparently through calling any OpenSSL IO function. For a TLS connection the client will attempt to resume the current session in the new handshake. For historical reasons, DTLS clients will not attempt to resume the session in the new handshake.</p> <p>The SSL_renegotiate_pending() function returns 1 if a renegotiation or renegotiation request has been scheduled but not yet acted on, or 0 otherwise.</p>"},{"location":"man3/SSL_key_update/#return-values","title":"RETURN VALUES","text":"<p>SSL_key_update(), SSL_renegotiate() and SSL_renegotiate_abbreviated() return 1 on success or 0 on error.</p> <p>SSL_get_key_update_type() returns the update type of the pending key update operation or SSL_KEY_UPDATE_NONE if there is none.</p> <p>SSL_renegotiate_pending() returns 1 if a renegotiation or renegotiation request has been scheduled but not yet acted on, or 0 otherwise.</p>"},{"location":"man3/SSL_key_update/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_read_ex(3), SSL_write_ex(3), SSL_do_handshake(3)</p>"},{"location":"man3/SSL_key_update/#history","title":"HISTORY","text":"<p>The SSL_key_update() and SSL_get_key_update_type() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_key_update/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_library_init/","title":"SSL_library_init","text":""},{"location":"man3/SSL_library_init/#name","title":"NAME","text":"<p>SSL_library_init, OpenSSL_add_ssl_algorithms - initialize SSL library by registering algorithms</p>"},{"location":"man3/SSL_library_init/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_library_init(void);\n\nint OpenSSL_add_ssl_algorithms(void);\n</code></pre>"},{"location":"man3/SSL_library_init/#description","title":"DESCRIPTION","text":"<p>SSL_library_init() registers the available SSL/TLS ciphers and digests.</p> <p>OpenSSL_add_ssl_algorithms() is a synonym for SSL_library_init() and is implemented as a macro.</p>"},{"location":"man3/SSL_library_init/#notes","title":"NOTES","text":"<p>SSL_library_init() must be called before any other action takes place. SSL_library_init() is not reentrant.</p>"},{"location":"man3/SSL_library_init/#warnings","title":"WARNINGS","text":"<p>SSL_library_init() adds ciphers and digests used directly and indirectly by SSL/TLS.</p>"},{"location":"man3/SSL_library_init/#return-values","title":"RETURN VALUES","text":"<p>SSL_library_init() always returns \"1\", so it is safe to discard the return value.</p>"},{"location":"man3/SSL_library_init/#see-also","title":"SEE ALSO","text":"<p>ssl(7), RAND_add(3)</p>"},{"location":"man3/SSL_library_init/#history","title":"HISTORY","text":"<p>The SSL_library_init() and OpenSSL_add_ssl_algorithms() functions were deprecated in OpenSSL 1.1.0 by OPENSSL_init_ssl().</p>"},{"location":"man3/SSL_library_init/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_load_client_CA_file/","title":"SSL_load_client_CA_file","text":""},{"location":"man3/SSL_load_client_CA_file/#name","title":"NAME","text":"<p>SSL_load_client_CA_file, SSL_add_file_cert_subjects_to_stack, SSL_add_dir_cert_subjects_to_stack - load certificate names</p>"},{"location":"man3/SSL_load_client_CA_file/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSTACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file);\n\nint SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,\n                                        const char *file)\nint SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,\n                                       const char *dir)\n</code></pre>"},{"location":"man3/SSL_load_client_CA_file/#description","title":"DESCRIPTION","text":"<p>SSL_load_client_CA_file() reads certificates from file and returns a STACK_OF(X509_NAME) with the subject names found.</p> <p>SSL_add_file_cert_subjects_to_stack() reads certificates from file, and adds their subject name to the already existing stack.</p> <p>SSL_add_dir_cert_subjects_to_stack() reads certificates from every file in the directory dir, and adds their subject name to the already existing stack.</p>"},{"location":"man3/SSL_load_client_CA_file/#notes","title":"NOTES","text":"<p>SSL_load_client_CA_file() reads a file of PEM formatted certificates and extracts the X509_NAMES of the certificates found. While the name suggests the specific usage as support function for SSL_CTX_set_client_CA_list(3), it is not limited to CA certificates.</p>"},{"location":"man3/SSL_load_client_CA_file/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>The operation failed, check out the error stack for the reason.</p> </li> <li> <p>Pointer to STACK_OF(X509_NAME)</p> <p>Pointer to the subject names of the successfully read certificates.</p> </li> </ul>"},{"location":"man3/SSL_load_client_CA_file/#examples","title":"EXAMPLES","text":"<p>Load names of CAs from file and use it as a client CA list:</p> <pre><code>SSL_CTX *ctx;\nSTACK_OF(X509_NAME) *cert_names;\n\n...\ncert_names = SSL_load_client_CA_file(\"/path/to/CAfile.pem\");\nif (cert_names != NULL)\n    SSL_CTX_set_client_CA_list(ctx, cert_names);\nelse\n    /* error */\n...\n</code></pre>"},{"location":"man3/SSL_load_client_CA_file/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_client_CA_list(3)</p>"},{"location":"man3/SSL_load_client_CA_file/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_new/","title":"SSL_new","text":""},{"location":"man3/SSL_new/#name","title":"NAME","text":"<p>SSL_dup, SSL_new, SSL_up_ref - create an SSL structure for a connection</p>"},{"location":"man3/SSL_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL *SSL_dup(SSL *s);\nSSL *SSL_new(SSL_CTX *ctx);\nint SSL_up_ref(SSL *s);\n</code></pre>"},{"location":"man3/SSL_new/#description","title":"DESCRIPTION","text":"<p>SSL_new() creates a new SSL structure which is needed to hold the data for a TLS/SSL connection. The new structure inherits the settings of the underlying context ctx: connection method, options, verification settings, timeout settings. An SSL structure is reference counted. Creating an SSL structure for the first time increments the reference count. Freeing it (using SSL_free) decrements it. When the reference count drops to zero, any memory or resources allocated to the SSL structure are freed.</p> <p>SSL_up_ref() increments the reference count for an existing SSL structure.</p> <p>The function SSL_dup() creates and returns a new SSL structure from the same SSL_CTX that was used to create s. It additionally duplicates a subset of the settings in s into the new SSL object.</p> <p>For SSL_dup() to work, the connection MUST be in its initial state and MUST NOT have yet started the SSL handshake.  For connections that are not in their initial state SSL_dup() just increments an internal reference count and returns the same handle.  It may be possible to use SSL_clear(3) to recycle an SSL handle that is not in its initial state for re-use, but this is best avoided.  Instead, save and restore the session, if desired, and construct a fresh handle for each connection.</p> <p>The subset of settings in s that are duplicated are:</p> <ul> <li>any session data if configured (including the session_id_context)</li> <li>any tmp_dh settings set via SSL_set_tmp_dh(3), SSL_set_tmp_dh_callback(3), or SSL_set_dh_auto(3)</li> <li>any configured certificates, private keys or certificate chains</li> <li>any configured signature algorithms, or client signature algorithms</li> <li>any DANE settings</li> <li>any Options set via SSL_set_options(3)</li> <li>any Mode set via SSL_set_mode(3)</li> <li>any minimum or maximum protocol settings set via SSL_set_min_proto_version(3) or SSL_set_max_proto_version(3) (Note: Only from OpenSSL 1.1.1h and above)</li> <li>any Verify mode, callback or depth set via SSL_set_verify(3) or SSL_set_verify_depth(3) or any configured X509 verification parameters</li> <li>any msg callback or info callback set via SSL_set_msg_callback(3) or SSL_set_info_callback(3)</li> <li>any default password callback set via SSL_set_default_passwd_cb(3)</li> <li>any session id generation callback set via SSL_set_generate_session_id(3)</li> <li>any configured Cipher List</li> <li>initial accept (server) or connect (client) state</li> <li>the max cert list value set via SSL_set_max_cert_list(3)</li> <li>the read_ahead value set via SSL_set_read_ahead(3)</li> <li>application specific data set via SSL_set_ex_data(3)</li> <li>any CA list or client CA list set via SSL_set0_CA_list(3), SSL_set0_client_CA_list() or similar functions</li> <li>any security level settings or callbacks</li> <li>any configured serverinfo data</li> <li>any configured PSK identity hint</li> <li>any configured custom extensions</li> <li>any client certificate types configured via SSL_set1_client_certificate_types</li> </ul>"},{"location":"man3/SSL_new/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>NULL</p> <p>The creation of a new SSL structure failed. Check the error stack to find out the reason.</p> </li> <li> <p>Pointer to an SSL structure</p> <p>The return value points to an allocated SSL structure.</p> <p>SSL_up_ref() returns 1 for success and 0 for failure.</p> </li> </ul>"},{"location":"man3/SSL_new/#see-also","title":"SEE ALSO","text":"<p>SSL_free(3), SSL_clear(3), SSL_CTX_set_options(3), SSL_get_SSL_CTX(3), ssl(7)</p>"},{"location":"man3/SSL_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_pending/","title":"SSL_pending","text":""},{"location":"man3/SSL_pending/#name","title":"NAME","text":"<p>SSL_pending, SSL_has_pending - check for readable bytes buffered in an SSL object</p>"},{"location":"man3/SSL_pending/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_pending(const SSL *ssl);\nint SSL_has_pending(const SSL *s);\n</code></pre>"},{"location":"man3/SSL_pending/#description","title":"DESCRIPTION","text":"<p>Data is received in whole blocks known as records from the peer. A whole record is processed (e.g. decrypted) in one go and is buffered by OpenSSL until it is read by the application via a call to SSL_read_ex(3) or SSL_read(3).</p> <p>SSL_pending() returns the number of bytes which have been processed, buffered and are available inside ssl for immediate read.</p> <p>If the SSL object's read_ahead flag is set (see SSL_CTX_set_read_ahead(3)), additional protocol bytes (beyond the current record) may have been read containing more TLS/SSL records. This also applies to DTLS and pipelining (see SSL_CTX_set_split_send_fragment(3)). These additional bytes will be buffered by OpenSSL but will remain unprocessed until they are needed. As these bytes are still in an unprocessed state SSL_pending() will ignore them. Therefore, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).</p> <p>SSL_has_pending() returns 1 if s has buffered data (whether processed or unprocessed) and 0 otherwise. Note that it is possible for SSL_has_pending() to return 1, and then a subsequent call to SSL_read_ex() or SSL_read() to return no data because the unprocessed buffered data when processed yielded no application data (for example this can happen during renegotiation). It is also possible in this scenario for SSL_has_pending() to continue to return 1 even after an SSL_read_ex() or SSL_read() call because the buffered and unprocessed data is not yet processable (e.g. because OpenSSL has only received a partial record so far).</p>"},{"location":"man3/SSL_pending/#return-values","title":"RETURN VALUES","text":"<p>SSL_pending() returns the number of buffered and processed application data bytes that are pending and are available for immediate read. SSL_has_pending() returns 1 if there is buffered record data in the SSL object and 0 otherwise.</p>"},{"location":"man3/SSL_pending/#see-also","title":"SEE ALSO","text":"<p>SSL_read_ex(3), SSL_read(3), SSL_CTX_set_read_ahead(3), SSL_CTX_set_split_send_fragment(3), ssl(7)</p>"},{"location":"man3/SSL_pending/#history","title":"HISTORY","text":"<p>The SSL_has_pending() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_pending/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_read/","title":"SSL_read","text":""},{"location":"man3/SSL_read/#name","title":"NAME","text":"<p>SSL_read_ex, SSL_read, SSL_peek_ex, SSL_peek - read bytes from a TLS/SSL connection</p>"},{"location":"man3/SSL_read/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_read_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);\nint SSL_read(SSL *ssl, void *buf, int num);\n\nint SSL_peek_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);\nint SSL_peek(SSL *ssl, void *buf, int num);\n</code></pre>"},{"location":"man3/SSL_read/#description","title":"DESCRIPTION","text":"<p>SSL_read_ex() and SSL_read() try to read num bytes from the specified ssl into the buffer buf. On success SSL_read_ex() will store the number of bytes actually read in *readbytes.</p> <p>SSL_peek_ex() and SSL_peek() are identical to SSL_read_ex() and SSL_read() respectively except no bytes are actually removed from the underlying BIO during the read, so that a subsequent call to SSL_read_ex() or SSL_read() will yield at least the same bytes.</p>"},{"location":"man3/SSL_read/#notes","title":"NOTES","text":"<p>In the paragraphs below a \"read function\" is defined as one of SSL_read_ex(), SSL_read(), SSL_peek_ex() or SSL_peek().</p> <p>If necessary, a read function will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect(3) or SSL_accept(3). If the peer requests a re-negotiation, it will be performed transparently during the read function operation. The behaviour of the read functions depends on the underlying BIO.</p> <p>For the transparent negotiation to succeed, the ssl must have been initialized to client or server mode. This is being done by calling SSL_set_connect_state(3) or SSL_set_accept_state() before the first invocation of a read function.</p> <p>The read functions work based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB). Only when a record has been completely received, can it be processed (decryption and check of integrity). Therefore, data that was not retrieved at the last read call can still be buffered inside the SSL layer and will be retrieved on the next read call. If num is higher than the number of bytes buffered then the read functions will return with the bytes buffered. If no more bytes are in the buffer, the read functions will trigger the processing of the next record. Only when the record has been received and processed completely will the read functions return reporting success. At most the contents of one record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (e.g. TCP), it may be necessary to read several packets from the transport layer before the record is complete and the read call can succeed.</p> <p>If SSL_MODE_AUTO_RETRY has been switched off and a non-application data record has been processed, the read function can return and set the error to SSL_ERROR_WANT_READ. In this case there might still be unprocessed data available in the BIO. If read ahead was set using SSL_CTX_set_read_ahead(3), there might also still be unprocessed data available in the SSL. This behaviour can be controlled using the SSL_CTX_set_mode(3) call.</p> <p>If the underlying BIO is blocking, a read function will only return once the read operation has been finished or an error occurred, except when a non-application data record has been processed and SSL_MODE_AUTO_RETRY is not set. Note that if SSL_MODE_AUTO_RETRY is set and only non-application data is available the call will hang.</p> <p>If the underlying BIO is nonblocking, a read function will also return when the underlying BIO could not satisfy the needs of the function to continue the operation. In this case a call to SSL_get_error(3) with the return value of the read function will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time it's possible that non-application data needs to be sent, a read function can also cause write operations. The calling process then must repeat the call after taking appropriate action to satisfy the needs of the read function. The action depends on the underlying BIO. When using a nonblocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue.</p> <p>SSL_pending(3) can be used to find out whether there are buffered bytes available for immediate retrieval. In this case the read function can be called without blocking or actually receiving new data from the underlying socket.</p>"},{"location":"man3/SSL_read/#return-values","title":"RETURN VALUES","text":"<p>SSL_read_ex() and SSL_peek_ex() will return 1 for success or 0 for failure. Success means that 1 or more application data bytes have been read from the SSL connection. Failure means that no bytes could be read from the SSL connection. Failures can be retryable (e.g. we are waiting for more bytes to be delivered by the network) or non-retryable (e.g. a fatal network error). In the event of a failure call SSL_get_error(3) to find out the reason which indicates whether the call is retryable or not.</p> <p>For SSL_read() and SSL_peek() the following return values can occur:</p> <ul> <li> <p>&gt; 0</p> <p>The read operation was successful. The return value is the number of bytes actually read from the TLS/SSL connection.</p> </li> <li> <p>&lt;= 0</p> <p>The read operation was not successful, because either the connection was closed, an error occurred or action must be taken by the calling process. Call SSL_get_error(3) with the return value ret to find out the reason.</p> <p>Old documentation indicated a difference between 0 and -1, and that -1 was retryable. You should instead call SSL_get_error() to find out if it's retryable.</p> </li> </ul>"},{"location":"man3/SSL_read/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_write_ex(3), SSL_CTX_set_mode(3), SSL_CTX_new(3), SSL_connect(3), SSL_accept(3) SSL_set_connect_state(3), SSL_pending(3), SSL_shutdown(3), SSL_set_shutdown(3), ssl(7), bio(7)</p>"},{"location":"man3/SSL_read/#history","title":"HISTORY","text":"<p>The SSL_read_ex() and SSL_peek_ex() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_read/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_read_early_data/","title":"SSL_read_early_data","text":""},{"location":"man3/SSL_read_early_data/#name","title":"NAME","text":"<p>SSL_set_max_early_data, SSL_CTX_set_max_early_data, SSL_get_max_early_data, SSL_CTX_get_max_early_data, SSL_set_recv_max_early_data, SSL_CTX_set_recv_max_early_data, SSL_get_recv_max_early_data, SSL_CTX_get_recv_max_early_data, SSL_SESSION_get_max_early_data, SSL_SESSION_set_max_early_data, SSL_write_early_data, SSL_read_early_data, SSL_get_early_data_status, SSL_allow_early_data_cb_fn, SSL_CTX_set_allow_early_data_cb, SSL_set_allow_early_data_cb - functions for sending and receiving early data</p>"},{"location":"man3/SSL_read_early_data/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data);\nuint32_t SSL_CTX_get_max_early_data(const SSL_CTX *ctx);\nint SSL_set_max_early_data(SSL *s, uint32_t max_early_data);\nuint32_t SSL_get_max_early_data(const SSL *s);\n\nint SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data);\nuint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx);\nint SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data);\nuint32_t SSL_get_recv_max_early_data(const SSL *s);\n\nuint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION *s);\nint SSL_SESSION_set_max_early_data(SSL_SESSION *s, uint32_t max_early_data);\n\nint SSL_write_early_data(SSL *s, const void *buf, size_t num, size_t *written);\n\nint SSL_read_early_data(SSL *s, void *buf, size_t num, size_t *readbytes);\n\nint SSL_get_early_data_status(const SSL *s);\n\n\ntypedef int (*SSL_allow_early_data_cb_fn)(SSL *s, void *arg);\n\nvoid SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,\n                                     SSL_allow_early_data_cb_fn cb,\n                                     void *arg);\nvoid SSL_set_allow_early_data_cb(SSL *s,\n                                 SSL_allow_early_data_cb_fn cb,\n                                 void *arg);\n</code></pre>"},{"location":"man3/SSL_read_early_data/#description","title":"DESCRIPTION","text":"<p>These functions are used to send and receive early data where TLSv1.3 has been negotiated. Early data can be sent by the client immediately after its initial ClientHello without having to wait for the server to complete the handshake. Early data can be sent if a session has previously been established with the server or when establishing a new session using an out-of-band PSK, and only when the server is known to support it. Additionally these functions can be used to send data from the server to the client when the client has not yet completed the authentication stage of the handshake.</p> <p>Early data has weaker security properties than other data sent over an SSL/TLS connection. In particular the data does not have forward secrecy. There are also additional considerations around replay attacks (see \"REPLAY PROTECTION\" below). For these reasons extreme care should be exercised when using early data. For specific details, consult the TLS 1.3 specification.</p> <p>When a server receives early data it may opt to immediately respond by sending application data back to the client. Data sent by the server at this stage is done before the full handshake has been completed. Specifically the client's authentication messages have not yet been received, i.e. the client is unauthenticated at this point and care should be taken when using this capability.</p> <p>A server or client can determine whether the full handshake has been completed or not by calling SSL_is_init_finished(3).</p> <p>On the client side, the function SSL_SESSION_get_max_early_data() can be used to determine if a session established with a server can be used to send early data. If the session cannot be used then this function will return 0. Otherwise it will return the maximum number of early data bytes that can be sent.</p> <p>The function SSL_SESSION_set_max_early_data() sets the maximum number of early data bytes that can be sent for a session. This would typically be used when creating a PSK session file (see SSL_CTX_set_psk_use_session_callback(3)). If using a ticket based PSK then this is set automatically to the value provided by the server.</p> <p>A client uses the function SSL_write_early_data() to send early data. This function is similar to the SSL_write_ex(3) function, but with the following differences. See SSL_write_ex(3) for information on how to write bytes to the underlying connection, and how to handle any errors that may arise. This page describes the differences between SSL_write_early_data() and SSL_write_ex(3).</p> <p>When called by a client, SSL_write_early_data() must be the first IO function called on a new connection, i.e. it must occur before any calls to SSL_write_ex(3), SSL_read_ex(3), SSL_connect(3), SSL_do_handshake(3) or other similar functions. It may be called multiple times to stream data to the server, but the total number of bytes written must not exceed the value returned from SSL_SESSION_get_max_early_data(). Once the initial SSL_write_early_data() call has completed successfully the client may interleave calls to SSL_read_ex(3) and SSL_read(3) with calls to SSL_write_early_data() as required.</p> <p>If SSL_write_early_data() fails you should call SSL_get_error(3) to determine the correct course of action, as for SSL_write_ex(3).</p> <p>When the client no longer wishes to send any more early data then it should complete the handshake by calling a function such as SSL_connect(3) or SSL_do_handshake(3). Alternatively you can call a standard write function such as SSL_write_ex(3), which will transparently complete the connection and write the requested data.</p> <p>A server may choose to ignore early data that has been sent to it. Once the connection has been completed you can determine whether the server accepted or rejected the early data by calling SSL_get_early_data_status(). This will return SSL_EARLY_DATA_ACCEPTED if the data was accepted, SSL_EARLY_DATA_REJECTED if it was rejected or SSL_EARLY_DATA_NOT_SENT if no early data was sent. This function may be called by either the client or the server.</p> <p>A server uses the SSL_read_early_data() function to receive early data on a connection for which early data has been enabled using SSL_CTX_set_max_early_data() or SSL_set_max_early_data(). As for SSL_write_early_data(), this must be the first IO function called on a connection, i.e. it must occur before any calls to SSL_write_ex(3), SSL_read_ex(3), SSL_accept(3), SSL_do_handshake(3), or other similar functions.</p> <p>SSL_read_early_data() is similar to SSL_read_ex(3) with the following differences. Refer to SSL_read_ex(3) for full details.</p> <p>SSL_read_early_data() may return 3 possible values:</p> <ul> <li> <p>SSL_READ_EARLY_DATA_ERROR</p> <p>This indicates an IO or some other error occurred. This should be treated in the same way as a 0 return value from SSL_read_ex(3).</p> </li> <li> <p>SSL_READ_EARLY_DATA_SUCCESS</p> <p>This indicates that early data was successfully read. This should be treated in the same way as a 1 return value from SSL_read_ex(3). You should continue to call SSL_read_early_data() to read more data.</p> </li> <li> <p>SSL_READ_EARLY_DATA_FINISH</p> <p>This indicates that no more early data can be read. It may be returned on the first call to SSL_read_early_data() if the client has not sent any early data, or if the early data was rejected.</p> </li> </ul> <p>Once the initial SSL_read_early_data() call has completed successfully (i.e. it has returned SSL_READ_EARLY_DATA_SUCCESS or SSL_READ_EARLY_DATA_FINISH) then the server may choose to write data immediately to the unauthenticated client using SSL_write_early_data(). If SSL_read_early_data() returned SSL_READ_EARLY_DATA_FINISH then in some situations (e.g. if the client only supports TLSv1.2) the handshake may have already been completed and calls to SSL_write_early_data() are not allowed. Call SSL_is_init_finished(3) to determine whether the handshake has completed or not. If the handshake is still in progress then the server may interleave calls to SSL_write_early_data() with calls to SSL_read_early_data() as required.</p> <p>Servers must not call SSL_read_ex(3), SSL_read(3), SSL_write_ex(3) or SSL_write(3)  until SSL_read_early_data() has returned with SSL_READ_EARLY_DATA_FINISH. Once it has done so the connection to the client still needs to be completed. Complete the connection by calling a function such as SSL_accept(3) or SSL_do_handshake(3). Alternatively you can call a standard read function such as SSL_read_ex(3), which will transparently complete the connection and read the requested data. Note that it is an error to attempt to complete the connection before SSL_read_early_data() has returned SSL_READ_EARLY_DATA_FINISH.</p> <p>Only servers may call SSL_read_early_data().</p> <p>Calls to SSL_read_early_data() may, in certain circumstances, complete the connection immediately without further need to call a function such as SSL_accept(3). This can happen if the client is using a protocol version less than TLSv1.3. Applications can test for this by calling SSL_is_init_finished(3). Alternatively, applications may choose to call SSL_accept(3) anyway. Such a call will successfully return immediately with no further action taken.</p> <p>When a session is created between a server and a client the server will specify the maximum amount of any early data that it will accept on any future connection attempt. By default the server does not accept early data; a server may indicate support for early data by calling SSL_CTX_set_max_early_data() or SSL_set_max_early_data() to set it for the whole SSL_CTX or an individual SSL object respectively. The max_early_data parameter specifies the maximum amount of early data in bytes that is permitted to be sent on a single connection. Similarly the SSL_CTX_get_max_early_data() and SSL_get_max_early_data() functions can be used to obtain the current maximum early data settings for the SSL_CTX and SSL objects respectively. Generally a server application will either use both of SSL_read_early_data() and SSL_CTX_set_max_early_data() (or SSL_set_max_early_data()), or neither of them, since there is no practical benefit from using only one of them. If the maximum early data setting for a server is nonzero then replay protection is automatically enabled (see \"REPLAY PROTECTION\" below).</p> <p>If the server rejects the early data sent by a client then it will skip over the data that is sent. The maximum amount of received early data that is skipped is controlled by the recv_max_early_data setting. If a client sends more than this then the connection will abort. This value can be set by calling SSL_CTX_set_recv_max_early_data() or SSL_set_recv_max_early_data(). The current value for this setting can be obtained by calling SSL_CTX_get_recv_max_early_data() or SSL_get_recv_max_early_data(). The default value for this setting is 16,384 bytes.</p> <p>The recv_max_early_data value also has an impact on early data that is accepted. The amount of data that is accepted will always be the lower of the max_early_data for the session and the recv_max_early_data setting for the server. If a client sends more data than this then the connection will abort.</p> <p>The configured value for max_early_data on a server may change over time as required. However, clients may have tickets containing the previously configured max_early_data value. The recv_max_early_data should always be equal to or higher than any recently configured max_early_data value in order to avoid aborted connections. The recv_max_early_data should never be set to less than the current configured max_early_data value.</p> <p>Some server applications may wish to have more control over whether early data is accepted or not, for example to mitigate replay risks (see \"REPLAY PROTECTION\" below) or to decline early_data when the server is heavily loaded. The functions SSL_CTX_set_allow_early_data_cb() and SSL_set_allow_early_data_cb() set a callback which is called at a point in the handshake immediately before a decision is made to accept or reject early data. The callback is provided with a pointer to the user data argument that was provided when the callback was first set. Returning 1 from the callback will allow early data and returning 0 will reject it. Note that the OpenSSL library may reject early data for other reasons in which case this callback will not get called. Notably, the built-in replay protection feature will still be used even if a callback is present unless it has been explicitly disabled using the SSL_OP_NO_ANTI_REPLAY option. See \"REPLAY PROTECTION\" below.</p>"},{"location":"man3/SSL_read_early_data/#notes","title":"NOTES","text":"<p>The whole purpose of early data is to enable a client to start sending data to the server before a full round trip of network traffic has occurred. Application developers should ensure they consider optimisation of the underlying TCP socket to obtain a performant solution. For example Nagle's algorithm is commonly used by operating systems in an attempt to avoid lots of small TCP packets. In many scenarios this is beneficial for performance, but it does not work well with the early data solution as implemented in OpenSSL. In Nagle's algorithm the OS will buffer outgoing TCP data if a TCP packet has already been sent which we have not yet received an ACK for from the peer. The buffered data will only be transmitted if enough data to fill an entire TCP packet is accumulated, or if the ACK is received from the peer. The initial ClientHello will be sent in the first TCP packet along with any data from the first call to SSL_write_early_data(). If the amount of data written will exceed the size of a single TCP packet, or if there are more calls to SSL_write_early_data() then that additional data will be sent in subsequent TCP packets which will be buffered by the OS and not sent until an ACK is received for the first packet containing the ClientHello. This means the early data is not actually sent until a complete round trip with the server has occurred which defeats the objective of early data.</p> <p>In many operating systems the TCP_NODELAY socket option is available to disable Nagle's algorithm. If an application opts to disable Nagle's algorithm consideration should be given to turning it back on again after the handshake is complete if appropriate.</p> <p>In rare circumstances, it may be possible for a client to have a session that reports a max early data value greater than 0, but where the server does not support this. For example, this can occur if a server has had its configuration changed to accept a lower max early data value such as by calling SSL_CTX_set_recv_max_early_data(). Another example is if a server used to support TLSv1.3 but was later downgraded to TLSv1.2. Sending early data to such a server will cause the connection to abort. Clients that encounter an aborted connection while sending early data may want to retry the connection without sending early data as this does not happen automatically. A client will have to establish a new transport layer connection to the server and attempt the SSL/TLS connection again but without sending early data. Note that it is inadvisable to retry with a lower maximum protocol version.</p>"},{"location":"man3/SSL_read_early_data/#replay-protection","title":"REPLAY PROTECTION","text":"<p>When early data is in use the TLS protocol provides no security guarantees that the same early data was not replayed across multiple connections. As a mitigation for this issue OpenSSL automatically enables replay protection if the server is configured with a nonzero max early data value. With replay protection enabled sessions are forced to be single use only. If a client attempts to reuse a session ticket more than once, then the second and subsequent attempts will fall back to a full handshake (and any early data that was submitted will be ignored). Note that single use tickets are enforced even if a client does not send any early data.</p> <p>The replay protection mechanism relies on the internal OpenSSL server session cache (see SSL_CTX_set_session_cache_mode(3)). When replay protection is being used the server will operate as if the SSL_OP_NO_TICKET option had been selected (see SSL_CTX_set_options(3)). Sessions will be added to the cache whenever a session ticket is issued. When a client attempts to resume the session, OpenSSL will check for its presence in the internal cache. If it exists then the resumption is allowed and the session is removed from the cache. If it does not exist then the resumption is not allowed and a full handshake will occur.</p> <p>Note that some applications may maintain an external cache of sessions (see SSL_CTX_sess_set_new_cb(3) and similar functions). It is the application's responsibility to ensure that any sessions in the external cache are also populated in the internal cache and that once removed from the internal cache they are similarly removed from the external cache. Failing to do this could result in an application becoming vulnerable to replay attacks. Note that OpenSSL will lock the internal cache while a session is removed but that lock is not held when the remove session callback (see SSL_CTX_sess_set_remove_cb(3)) is called. This could result in a small amount of time where the session has been removed from the internal cache but is still available in the external cache. Applications should be designed with this in mind in order to minimise the possibility of replay attacks.</p> <p>The OpenSSL replay protection does not apply to external Pre Shared Keys (PSKs) (e.g. see SSL_CTX_set_psk_find_session_callback(3)). Therefore, extreme caution should be applied when combining external PSKs with early data.</p> <p>Some applications may mitigate the replay risks in other ways. For those applications it is possible to turn off the built-in replay protection feature using the SSL_OP_NO_ANTI_REPLAY option. See SSL_CTX_set_options(3) for details. Applications can also set a callback to make decisions about accepting early data or not. See SSL_CTX_set_allow_early_data_cb() above for details.</p>"},{"location":"man3/SSL_read_early_data/#return-values","title":"RETURN VALUES","text":"<p>SSL_write_early_data() returns 1 for success or 0 for failure. In the event of a failure call SSL_get_error(3) to determine the correct course of action.</p> <p>SSL_read_early_data() returns SSL_READ_EARLY_DATA_ERROR for failure, SSL_READ_EARLY_DATA_SUCCESS for success with more data to read and SSL_READ_EARLY_DATA_FINISH for success with no more to data be read. In the event of a failure call SSL_get_error(3) to determine the correct course of action.</p> <p>SSL_get_max_early_data(), SSL_CTX_get_max_early_data() and SSL_SESSION_get_max_early_data() return the maximum number of early data bytes that may be sent.</p> <p>SSL_set_max_early_data(), SSL_CTX_set_max_early_data() and SSL_SESSION_set_max_early_data() return 1 for success or 0 for failure.</p> <p>SSL_get_early_data_status() returns SSL_EARLY_DATA_ACCEPTED if early data was accepted by the server, SSL_EARLY_DATA_REJECTED if early data was rejected by the server, or SSL_EARLY_DATA_NOT_SENT if no early data was sent.</p>"},{"location":"man3/SSL_read_early_data/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_write_ex(3), SSL_read_ex(3), SSL_connect(3), SSL_accept(3), SSL_do_handshake(3), SSL_CTX_set_psk_use_session_callback(3), ssl(7)</p>"},{"location":"man3/SSL_read_early_data/#history","title":"HISTORY","text":"<p>All of the functions described above were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_read_early_data/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_rstate_string/","title":"SSL_rstate_string","text":""},{"location":"man3/SSL_rstate_string/#name","title":"NAME","text":"<p>SSL_rstate_string, SSL_rstate_string_long - get textual description of state of an SSL object during read operation</p>"},{"location":"man3/SSL_rstate_string/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst char *SSL_rstate_string(SSL *ssl);\nconst char *SSL_rstate_string_long(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_rstate_string/#description","title":"DESCRIPTION","text":"<p>SSL_rstate_string() returns a 2 letter string indicating the current read state of the SSL object ssl.</p> <p>SSL_rstate_string_long() returns a string indicating the current read state of the SSL object ssl.</p>"},{"location":"man3/SSL_rstate_string/#notes","title":"NOTES","text":"<p>When performing a read operation, the SSL/TLS engine must parse the record, consisting of header and body. When working in a blocking environment, SSL_rstate_string[_long]() should always return \"RD\"/\"read done\".</p> <p>This function should only seldom be needed in applications.</p>"},{"location":"man3/SSL_rstate_string/#return-values","title":"RETURN VALUES","text":"<p>SSL_rstate_string() and SSL_rstate_string_long() can return the following values:</p> <ul> <li> <p>\"RH\"/\"read header\"</p> <p>The header of the record is being evaluated.</p> </li> <li> <p>\"RB\"/\"read body\"</p> <p>The body of the record is being evaluated.</p> </li> <li> <p>\"RD\"/\"read done\"</p> <p>The record has been completely processed.</p> </li> <li> <p>\"unknown\"/\"unknown\"</p> <p>The read state is unknown. This should never happen.</p> </li> </ul>"},{"location":"man3/SSL_rstate_string/#see-also","title":"SEE ALSO","text":"<p>ssl(7)</p>"},{"location":"man3/SSL_rstate_string/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_session_reused/","title":"SSL_session_reused","text":""},{"location":"man3/SSL_session_reused/#name","title":"NAME","text":"<p>SSL_session_reused - query whether a reused session was negotiated during handshake</p>"},{"location":"man3/SSL_session_reused/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_session_reused(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_session_reused/#description","title":"DESCRIPTION","text":"<p>Query, whether a reused session was negotiated during the handshake.</p>"},{"location":"man3/SSL_session_reused/#notes","title":"NOTES","text":"<p>During the negotiation, a client can propose to reuse a session. The server then looks up the session in its cache. If both client and server agree on the session, it will be reused and a flag is being set that can be queried by the application.</p>"},{"location":"man3/SSL_session_reused/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>A new session was negotiated.</p> </li> <li> <p>1</p> <p>A session was reused.</p> </li> </ul>"},{"location":"man3/SSL_session_reused/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_set_session(3), SSL_CTX_set_session_cache_mode(3)</p>"},{"location":"man3/SSL_session_reused/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set1_host/","title":"SSL_set1_host","text":""},{"location":"man3/SSL_set1_host/#name","title":"NAME","text":"<p>SSL_set1_host, SSL_add1_host, SSL_set_hostflags, SSL_get0_peername - SSL server verification parameters</p>"},{"location":"man3/SSL_set1_host/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_set1_host(SSL *s, const char *hostname);\nint SSL_add1_host(SSL *s, const char *hostname);\nvoid SSL_set_hostflags(SSL *s, unsigned int flags);\nconst char *SSL_get0_peername(SSL *s);\n</code></pre>"},{"location":"man3/SSL_set1_host/#description","title":"DESCRIPTION","text":"<p>These functions configure server hostname checks in the SSL client.</p> <p>SSL_set1_host() sets the expected DNS hostname to name clearing any previously specified hostname or names.  If name is NULL, or the empty string the list of hostnames is cleared, and name checks are not performed on the peer certificate.  When a nonempty name is specified, certificate verification automatically checks the peer hostname via X509_check_host(3) with flags as specified via SSL_set_hostflags().  Clients that enable DANE TLSA authentication via SSL_dane_enable(3) should leave it to that function to set the primary reference identifier of the peer, and should not call SSL_set1_host().</p> <p>SSL_add1_host() adds name as an additional reference identifier that can match the peer's certificate.  Any previous names set via SSL_set1_host() or SSL_add1_host() are retained, no change is made if name is NULL or empty.  When multiple names are configured, the peer is considered verified when any name matches.  This function is required for DANE TLSA in the presence of service name indirection via CNAME, MX or SRV records as specified in RFC7671, RFC7672 or RFC7673.</p> <p>SSL_set_hostflags() sets the flags that will be passed to X509_check_host(3) when name checks are applicable, by default the flags value is 0.  See X509_check_host(3) for the list of available flags and their meaning.</p> <p>SSL_get0_peername() returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers.  When wildcard matching is not disabled, the name matched in the peer certificate may be a wildcard name.  When one of the reference identifiers configured via SSL_set1_host() or SSL_add1_host() starts with \".\", which indicates a parent domain prefix rather than a fixed name, the matched peer name may be a sub-domain of the reference identifier.  The returned string is allocated by the library and is no longer valid once the associated ssl handle is cleared or freed, or a renegotiation takes place.  Applications must not free the return value.</p> <p>SSL clients are advised to use these functions in preference to explicitly calling X509_check_host(3).  Hostname checks may be out of scope with the RFC7671 DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE is enabled.</p>"},{"location":"man3/SSL_set1_host/#return-values","title":"RETURN VALUES","text":"<p>SSL_set1_host() and SSL_add1_host() return 1 for success and 0 for failure.</p> <p>SSL_get0_peername() returns NULL if peername verification is not applicable (as with RFC7671 DANE-EE(3)), or no trusted peername was matched.  Otherwise, it returns the matched peername.  To determine whether verification succeeded call SSL_get_verify_result(3).</p>"},{"location":"man3/SSL_set1_host/#examples","title":"EXAMPLES","text":"<p>Suppose \"smtp.example.com\" is the MX host of the domain \"example.com\". The calls below will arrange to match either the MX hostname or the destination domain name in the SMTP server certificate.  Wildcards are supported, but must match the entire label.  The actual name matched in the certificate (which might be a wildcard) is retrieved, and must be copied by the application if it is to be retained beyond the lifetime of the SSL connection.</p> <pre><code>SSL_set_hostflags(ssl, X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);\nif (!SSL_set1_host(ssl, \"smtp.example.com\"))\n    /* error */\nif (!SSL_add1_host(ssl, \"example.com\"))\n    /* error */\n\n/* XXX: Perform SSL_connect() handshake and handle errors here */\n\nif (SSL_get_verify_result(ssl) == X509_V_OK) {\n    const char *peername = SSL_get0_peername(ssl);\n\n    if (peername != NULL)\n        /* Name checks were in scope and matched the peername */\n}\n</code></pre>"},{"location":"man3/SSL_set1_host/#see-also","title":"SEE ALSO","text":"<p>X509_check_host(3), SSL_get_verify_result(3). SSL_dane_enable(3).</p>"},{"location":"man3/SSL_set1_host/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_set1_host/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set_bio/","title":"SSL_set_bio","text":""},{"location":"man3/SSL_set_bio/#name","title":"NAME","text":"<p>SSL_set_bio, SSL_set0_rbio, SSL_set0_wbio - connect the SSL object with a BIO</p>"},{"location":"man3/SSL_set_bio/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_set_bio(SSL *ssl, BIO *rbio, BIO *wbio);\nvoid SSL_set0_rbio(SSL *s, BIO *rbio);\nvoid SSL_set0_wbio(SSL *s, BIO *wbio);\n</code></pre>"},{"location":"man3/SSL_set_bio/#description","title":"DESCRIPTION","text":"<p>SSL_set0_rbio() connects the BIO rbio for the read operations of the ssl object. The SSL engine inherits the behaviour of rbio. If the BIO is nonblocking then the ssl object will also have nonblocking behaviour. This function transfers ownership of rbio to ssl. It will be automatically freed using BIO_free_all(3) when the ssl is freed. On calling this function, any existing rbio that was previously set will also be freed via a call to BIO_free_all(3) (this includes the case where the rbio is set to the same value as previously).</p> <p>SSL_set0_wbio() works in the same as SSL_set0_rbio() except that it connects the BIO wbio for the write operations of the ssl object. Note that if the rbio and wbio are the same then SSL_set0_rbio() and SSL_set0_wbio() each take ownership of one reference. Therefore, it may be necessary to increment the number of references available using BIO_up_ref(3) before calling the set0 functions.</p> <p>SSL_set_bio() is similar to SSL_set0_rbio() and SSL_set0_wbio() except that it connects both the rbio and the wbio at the same time, and transfers the ownership of rbio and wbio to ssl according to the following set of rules:</p> <ul> <li>If neither the rbio or wbio have changed from their previous values then nothing is done.</li> <li>If the rbio and wbio parameters are different and both are different to their previously set values then one reference is consumed for the rbio and one reference is consumed for the wbio.</li> <li>If the rbio and wbio parameters are the same and the rbio is not the same as the previously set value then one reference is consumed.</li> <li>If the rbio and wbio parameters are the same and the rbio is the same as the previously set value, then no additional references are consumed.</li> <li>If the rbio and wbio parameters are different and the rbio is the same as the previously set value then one reference is consumed for the wbio and no references are consumed for the rbio.</li> <li>If the rbio and wbio parameters are different and the wbio is the same as the previously set value and the old rbio and wbio values were the same as each other then one reference is consumed for the rbio and no references are consumed for the wbio.</li> <li>If the rbio and wbio parameters are different and the wbio is the same as the previously set value and the old rbio and wbio values were different to each other then one reference is consumed for the rbio and one reference is consumed for the wbio.</li> </ul> <p>Because of this complexity, this function should be avoided; use SSL_set0_rbio() and SSL_set0_wbio() instead.</p>"},{"location":"man3/SSL_set_bio/#return-values","title":"RETURN VALUES","text":"<p>SSL_set_bio(), SSL_set0_rbio() and SSL_set0_wbio() cannot fail.</p>"},{"location":"man3/SSL_set_bio/#see-also","title":"SEE ALSO","text":"<p>SSL_get_rbio(3), SSL_connect(3), SSL_accept(3), SSL_shutdown(3), ssl(7), bio(7)</p>"},{"location":"man3/SSL_set_bio/#history","title":"HISTORY","text":"<p>SSL_set0_rbio() and SSL_set0_wbio() were added in OpenSSL 1.1.0.</p>"},{"location":"man3/SSL_set_bio/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set_connect_state/","title":"SSL_set_connect_state","text":""},{"location":"man3/SSL_set_connect_state/#name","title":"NAME","text":"<p>SSL_set_connect_state, SSL_set_accept_state, SSL_is_server - functions for manipulating and examining the client or server mode of an SSL object</p>"},{"location":"man3/SSL_set_connect_state/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_set_connect_state(SSL *ssl);\n\nvoid SSL_set_accept_state(SSL *ssl);\n\nint SSL_is_server(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_set_connect_state/#description","title":"DESCRIPTION","text":"<p>SSL_set_connect_state() sets ssl to work in client mode.</p> <p>SSL_set_accept_state() sets ssl to work in server mode.</p> <p>SSL_is_server() checks if ssl is working in server mode.</p>"},{"location":"man3/SSL_set_connect_state/#notes","title":"NOTES","text":"<p>When the SSL_CTX object was created with SSL_CTX_new(3), it was either assigned a dedicated client method, a dedicated server method, or a generic method, that can be used for both client and server connections. (The method might have been changed with SSL_CTX_set_ssl_version(3) or SSL_set_ssl_method(3).)</p> <p>When beginning a new handshake, the SSL engine must know whether it must call the connect (client) or accept (server) routines. Even though it may be clear from the method chosen, whether client or server mode was requested, the handshake routines must be explicitly set.</p> <p>When using the SSL_connect(3) or SSL_accept(3) routines, the correct handshake routines are automatically set. When performing a transparent negotiation using SSL_write_ex(3), SSL_write(3), SSL_read_ex(3), or SSL_read(3), the handshake routines must be explicitly set in advance using either SSL_set_connect_state() or SSL_set_accept_state().</p> <p>If SSL_is_server() is called before SSL_set_connect_state() or SSL_set_accept_state() is called (either automatically or explicitly), the result depends on what method was used when SSL_CTX was created with SSL_CTX_new(3). If a generic method or a dedicated server method was passed to SSL_CTX_new(3), SSL_is_server() returns 1; otherwise, it returns 0.</p>"},{"location":"man3/SSL_set_connect_state/#return-values","title":"RETURN VALUES","text":"<p>SSL_set_connect_state() and SSL_set_accept_state() do not return diagnostic information.</p> <p>SSL_is_server() returns 1 if ssl is working in server mode or 0 for client mode.</p>"},{"location":"man3/SSL_set_connect_state/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_new(3), SSL_CTX_new(3), SSL_connect(3), SSL_accept(3), SSL_write_ex(3), SSL_write(3), SSL_read_ex(3), SSL_read(3), SSL_do_handshake(3), SSL_CTX_set_ssl_version(3)</p>"},{"location":"man3/SSL_set_connect_state/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set_fd/","title":"SSL_set_fd","text":""},{"location":"man3/SSL_set_fd/#name","title":"NAME","text":"<p>SSL_set_fd, SSL_set_rfd, SSL_set_wfd - connect the SSL object with a file descriptor</p>"},{"location":"man3/SSL_set_fd/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_set_fd(SSL *ssl, int fd);\nint SSL_set_rfd(SSL *ssl, int fd);\nint SSL_set_wfd(SSL *ssl, int fd);\n</code></pre>"},{"location":"man3/SSL_set_fd/#description","title":"DESCRIPTION","text":"<p>SSL_set_fd() sets the file descriptor fd as the input/output facility for the TLS/SSL (encrypted) side of ssl. fd will typically be the socket file descriptor of a network connection.</p> <p>When performing the operation, a socket BIO is automatically created to interface between the ssl and fd. The BIO and hence the SSL engine inherit the behaviour of fd. If fd is nonblocking, the ssl will also have nonblocking behaviour.</p> <p>If there was already a BIO connected to ssl, BIO_free() will be called (for both the reading and writing side, if different).</p> <p>SSL_set_rfd() and SSL_set_wfd() perform the respective action, but only for the read channel or the write channel, which can be set independently.</p>"},{"location":"man3/SSL_set_fd/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The operation failed. Check the error stack to find out why.</p> </li> <li> <p>1</p> <p>The operation succeeded.</p> </li> </ul>"},{"location":"man3/SSL_set_fd/#notes","title":"NOTES","text":"<p>On Windows, a socket handle is a 64-bit data type (UINT_PTR), which leads to a compiler warning (conversion from 'SOCKET' to 'int', possible loss of data) when passing the socket handle to SSL_set_*fd(). For the time being, this warning can safely be ignored, because although the Microsoft documentation claims that the upper limit is INVALID_SOCKET-1 (2^64 - 2), in practice the current socket() implementation returns an index into the kernel handle table, the size of which is limited to 2^24.</p>"},{"location":"man3/SSL_set_fd/#see-also","title":"SEE ALSO","text":"<p>SSL_get_fd(3), SSL_set_bio(3), SSL_connect(3), SSL_accept(3), SSL_shutdown(3), ssl(7) , bio(7)</p>"},{"location":"man3/SSL_set_fd/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set_session/","title":"SSL_set_session","text":""},{"location":"man3/SSL_set_session/#name","title":"NAME","text":"<p>SSL_set_session - set a TLS/SSL session to be used during TLS/SSL connect</p>"},{"location":"man3/SSL_set_session/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_set_session(SSL *ssl, SSL_SESSION *session);\n</code></pre>"},{"location":"man3/SSL_set_session/#description","title":"DESCRIPTION","text":"<p>SSL_set_session() sets session to be used when the TLS/SSL connection is to be established. SSL_set_session() is only useful for TLS/SSL clients. When the session is set, the reference count of session is incremented by 1. If the session is not reused, the reference count is decremented again during SSL_connect(). Whether the session was reused can be queried with the SSL_session_reused(3) call.</p> <p>If there is already a session set inside ssl (because it was set with SSL_set_session() before or because the same ssl was already used for a connection), SSL_SESSION_free() will be called for that session. If that old session is still open, it is considered bad and will be removed from the session cache (if used). A session is considered open, if SSL_shutdown(3) was not called for the connection (or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state).</p>"},{"location":"man3/SSL_set_session/#notes","title":"NOTES","text":"<p>SSL_SESSION objects keep internal link information about the session cache list, when being inserted into one SSL_CTX object's session cache. One SSL_SESSION object, regardless of its reference count, must therefore only be used with one SSL_CTX object (and the SSL objects created from this SSL_CTX object).</p>"},{"location":"man3/SSL_set_session/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The operation failed; check the error stack to find out the reason.</p> </li> <li> <p>1</p> <p>The operation succeeded.</p> </li> </ul>"},{"location":"man3/SSL_set_session/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_SESSION_free(3), SSL_get_session(3), SSL_session_reused(3), SSL_CTX_set_session_cache_mode(3)</p>"},{"location":"man3/SSL_set_session/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set_shutdown/","title":"SSL_set_shutdown","text":""},{"location":"man3/SSL_set_shutdown/#name","title":"NAME","text":"<p>SSL_set_shutdown, SSL_get_shutdown - manipulate shutdown state of an SSL connection</p>"},{"location":"man3/SSL_set_shutdown/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_set_shutdown(SSL *ssl, int mode);\n\nint SSL_get_shutdown(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_set_shutdown/#description","title":"DESCRIPTION","text":"<p>SSL_set_shutdown() sets the shutdown state of ssl to mode.</p> <p>SSL_get_shutdown() returns the shutdown mode of ssl.</p>"},{"location":"man3/SSL_set_shutdown/#notes","title":"NOTES","text":"<p>The shutdown state of an ssl connection is a bit mask of:</p> <ul> <li> <p>0</p> <p>No shutdown setting, yet.</p> </li> <li> <p>SSL_SENT_SHUTDOWN</p> <p>A close_notify shutdown alert was sent to the peer, the connection is being considered closed and the session is closed and correct.</p> </li> <li> <p>SSL_RECEIVED_SHUTDOWN</p> <p>A shutdown alert was received form the peer, either a normal close_notify or a fatal error.</p> </li> </ul> <p>SSL_SENT_SHUTDOWN and SSL_RECEIVED_SHUTDOWN can be set at the same time.</p> <p>The shutdown state of the connection is used to determine the state of the ssl session. If the session is still open, when SSL_clear(3) or SSL_free(3) is called, it is considered bad and removed according to RFC2246. The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN (according to the TLS RFC, it is acceptable to only send the close_notify alert but to not wait for the peer's answer, when the underlying connection is closed). SSL_set_shutdown() can be used to set this state without sending a close alert to the peer (see SSL_shutdown(3)).</p> <p>If a close_notify was received, SSL_RECEIVED_SHUTDOWN will be set, for setting SSL_SENT_SHUTDOWN the application must however still call SSL_shutdown(3) or SSL_set_shutdown() itself.</p>"},{"location":"man3/SSL_set_shutdown/#return-values","title":"RETURN VALUES","text":"<p>SSL_set_shutdown() does not return diagnostic information.</p> <p>SSL_get_shutdown() returns the current setting.</p>"},{"location":"man3/SSL_set_shutdown/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_shutdown(3), SSL_CTX_set_quiet_shutdown(3), SSL_clear(3), SSL_free(3)</p>"},{"location":"man3/SSL_set_shutdown/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_set_verify_result/","title":"SSL_set_verify_result","text":""},{"location":"man3/SSL_set_verify_result/#name","title":"NAME","text":"<p>SSL_set_verify_result - override result of peer certificate verification</p>"},{"location":"man3/SSL_set_verify_result/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nvoid SSL_set_verify_result(SSL *ssl, long verify_result);\n</code></pre>"},{"location":"man3/SSL_set_verify_result/#description","title":"DESCRIPTION","text":"<p>SSL_set_verify_result() sets verify_result of the object ssl to be the result of the verification of the X509 certificate presented by the peer, if any.</p>"},{"location":"man3/SSL_set_verify_result/#notes","title":"NOTES","text":"<p>SSL_set_verify_result() overrides the verification result. It only changes the verification result of the ssl object. It does not become part of the established session, so if the session is to be reused later, the original value will reappear.</p> <p>The valid codes for verify_result are documented in verify(1).</p>"},{"location":"man3/SSL_set_verify_result/#return-values","title":"RETURN VALUES","text":"<p>SSL_set_verify_result() does not provide a return value.</p>"},{"location":"man3/SSL_set_verify_result/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_verify_result(3), SSL_get_peer_certificate(3), verify(1)</p>"},{"location":"man3/SSL_set_verify_result/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_shutdown/","title":"SSL_shutdown","text":""},{"location":"man3/SSL_shutdown/#name","title":"NAME","text":"<p>SSL_shutdown - shut down a TLS/SSL connection</p>"},{"location":"man3/SSL_shutdown/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_shutdown(SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_shutdown/#description","title":"DESCRIPTION","text":"<p>SSL_shutdown() shuts down an active TLS/SSL connection. It sends the close_notify shutdown alert to the peer.</p>"},{"location":"man3/SSL_shutdown/#notes","title":"NOTES","text":"<p>SSL_shutdown() tries to send the close_notify shutdown alert to the peer. Whether the operation succeeds or not, the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse.</p> <p>Note that SSL_shutdown() must not be called if a previous fatal error has occurred on a connection i.e. if SSL_get_error() has returned SSL_ERROR_SYSCALL or SSL_ERROR_SSL.</p> <p>The shutdown procedure consists of two steps: sending of the close_notify shutdown alert, and reception of the peer's close_notify shutdown alert. The order of those two steps depends on the application.</p> <p>It is acceptable for an application to only send its shutdown alert and then close the underlying connection without waiting for the peer's response. This way resources can be saved, as the process can already terminate or serve another connection. This should only be done when it is known that the other side will not send more data, otherwise there is a risk of a truncation attack.</p> <p>When a client only writes and never reads from the connection, and the server has sent a session ticket to establish a session, the client might not be able to resume the session because it did not received and process the session ticket from the server. In case the application wants to be able to resume the session, it is recommended to do a complete shutdown procedure (bidirectional close_notify alerts).</p> <p>When the underlying connection shall be used for more communications, the complete shutdown procedure must be performed, so that the peers stay synchronized.</p> <p>SSL_shutdown() only closes the write direction. It is not possible to call SSL_write() after calling SSL_shutdown(). The read direction is closed by the peer.</p>"},{"location":"man3/SSL_shutdown/#first-to-close-the-connection","title":"First to close the connection","text":"<p>When the application is the first party to send the close_notify alert, SSL_shutdown() will only send the alert and then set the SSL_SENT_SHUTDOWN flag (so that the session is considered good and will be kept in the cache). If successful, SSL_shutdown() will return 0.</p> <p>If a unidirectional shutdown is enough (the underlying connection shall be closed anyway), this first successful call to SSL_shutdown() is sufficient.</p> <p>In order to complete the bidirectional shutdown handshake, the peer needs to send back a close_notify alert. The SSL_RECEIVED_SHUTDOWN flag will be set after receiving and processing it.</p> <p>The peer is still allowed to send data after receiving the close_notify event. When it is done sending data, it will send the close_notify alert. SSL_read() should be called until all data is received. SSL_read() will indicate the end of the peer data by returning &lt;= 0 and SSL_get_error() returning SSL_ERROR_ZERO_RETURN.</p>"},{"location":"man3/SSL_shutdown/#peer-closes-the-connection","title":"Peer closes the connection","text":"<p>If the peer already sent the close_notify alert and it was already processed implicitly inside another function (SSL_read(3)), the SSL_RECEIVED_SHUTDOWN flag is set. SSL_read() will return &lt;= 0 in that case, and SSL_get_error() will return SSL_ERROR_ZERO_RETURN. SSL_shutdown() will send the close_notify alert, set the SSL_SENT_SHUTDOWN flag. If successful, SSL_shutdown() will return 1.</p> <p>Whether SSL_RECEIVED_SHUTDOWN is already set can be checked using the SSL_get_shutdown() (see also SSL_set_shutdown(3) call.</p>"},{"location":"man3/SSL_shutdown/#notes_1","title":"NOTES","text":"<p>The behaviour of SSL_shutdown() additionally depends on the underlying BIO. If the underlying BIO is blocking, SSL_shutdown() will only return once the handshake step has been finished or an error occurred.</p> <p>If the underlying BIO is nonblocking, SSL_shutdown() will also return when the underlying BIO could not satisfy the needs of SSL_shutdown() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_shutdown() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_shutdown(). The action depends on the underlying BIO. When using a nonblocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue.</p> <p>After SSL_shutdown() returned 0, it is possible to call SSL_shutdown() again to wait for the peer's close_notify alert. SSL_shutdown() will return 1 in that case. However, it is recommended to wait for it using SSL_read() instead.</p> <p>SSL_shutdown() can be modified to only set the connection to \"shutdown\" state but not actually send the close_notify alert messages, see SSL_CTX_set_quiet_shutdown(3). When \"quiet shutdown\" is enabled, SSL_shutdown() will always succeed and return 1. Note that this is not standard compliant behaviour. It should only be done when the peer has a way to make sure all data has been received and doesn't wait for the close_notify alert message, otherwise an unexpected EOF will be reported.</p> <p>There are implementations that do not send the required close_notify alert. If there is a need to communicate with such an implementation, and it's clear that all data has been received, do not wait for the peer's close_notify alert. Waiting for the close_notify alert when the peer just closes the connection will result in an error being generated.</p>"},{"location":"man3/SSL_shutdown/#return-values","title":"RETURN VALUES","text":"<p>The following return values can occur:</p> <ul> <li> <p>0</p> <p>The shutdown is not yet finished: the close_notify was sent but the peer did not send it back yet. Call SSL_read() to do a bidirectional shutdown.</p> <p>Unlike most other function, returning 0 does not indicate an error. SSL_get_error(3) should not get called, it may misleadingly indicate an error even though no error occurred.</p> </li> <li> <p>1</p> <p>The shutdown was successfully completed. The close_notify alert was sent and the peer's close_notify alert was received.</p> </li> <li> <p>&lt;0</p> <p>The shutdown was not successful. Call SSL_get_error(3) with the return value ret to find out the reason. It can occur if an action is needed to continue the operation for nonblocking BIOs.</p> <p>It can also occur when not all data was read using SSL_read().</p> </li> </ul>"},{"location":"man3/SSL_shutdown/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_connect(3), SSL_accept(3), SSL_set_shutdown(3), SSL_CTX_set_quiet_shutdown(3), SSL_clear(3), SSL_free(3), ssl(7), bio(7)</p>"},{"location":"man3/SSL_shutdown/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_state_string/","title":"SSL_state_string","text":""},{"location":"man3/SSL_state_string/#name","title":"NAME","text":"<p>SSL_state_string, SSL_state_string_long - get textual description of state of an SSL object</p>"},{"location":"man3/SSL_state_string/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nconst char *SSL_state_string(const SSL *ssl);\nconst char *SSL_state_string_long(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_state_string/#description","title":"DESCRIPTION","text":"<p>SSL_state_string() returns a 6 letter string indicating the current state of the SSL object ssl.</p> <p>SSL_state_string_long() returns a string indicating the current state of the SSL object ssl.</p>"},{"location":"man3/SSL_state_string/#notes","title":"NOTES","text":"<p>During its use, an SSL objects passes several states. The state is internally maintained. Querying the state information is not very informative before or when a connection has been established. It however can be of significant interest during the handshake.</p> <p>When using nonblocking sockets, the function call performing the handshake may return with SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition, so that SSL_state_string[_long]() may be called.</p> <p>For both blocking or nonblocking sockets, the details state information can be used within the info_callback function set with the SSL_set_info_callback() call.</p>"},{"location":"man3/SSL_state_string/#return-values","title":"RETURN VALUES","text":"<p>Detailed description of possible states to be included later.</p>"},{"location":"man3/SSL_state_string/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_CTX_set_info_callback(3)</p>"},{"location":"man3/SSL_state_string/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_want/","title":"SSL_want","text":""},{"location":"man3/SSL_want/#name","title":"NAME","text":"<p>SSL_want, SSL_want_nothing, SSL_want_read, SSL_want_write, SSL_want_x509_lookup, SSL_want_async, SSL_want_async_job, SSL_want_client_hello_cb - obtain state information TLS/SSL I/O operation</p>"},{"location":"man3/SSL_want/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_want(const SSL *ssl);\nint SSL_want_nothing(const SSL *ssl);\nint SSL_want_read(const SSL *ssl);\nint SSL_want_write(const SSL *ssl);\nint SSL_want_x509_lookup(const SSL *ssl);\nint SSL_want_async(const SSL *ssl);\nint SSL_want_async_job(const SSL *ssl);\nint SSL_want_client_hello_cb(const SSL *ssl);\n</code></pre>"},{"location":"man3/SSL_want/#description","title":"DESCRIPTION","text":"<p>SSL_want() returns state information for the SSL object ssl.</p> <p>The other SSL_want_*() calls are shortcuts for the possible states returned by SSL_want().</p>"},{"location":"man3/SSL_want/#notes","title":"NOTES","text":"<p>SSL_want() examines the internal state information of the SSL object. Its return values are similar to that of SSL_get_error(3). Unlike SSL_get_error(3), which also evaluates the error queue, the results are obtained by examining an internal state flag only. The information must therefore only be used for normal operation under nonblocking I/O. Error conditions are not handled and must be treated using SSL_get_error(3).</p> <p>The result returned by SSL_want() should always be consistent with the result of SSL_get_error(3).</p>"},{"location":"man3/SSL_want/#return-values","title":"RETURN VALUES","text":"<p>The following return values can currently occur for SSL_want():</p> <ul> <li> <p>SSL_NOTHING</p> <p>There is no data to be written or to be read.</p> </li> <li> <p>SSL_WRITING</p> <p>There are data in the SSL buffer that must be written to the underlying BIO layer in order to complete the actual SSL_*() operation. A call to SSL_get_error(3) should return SSL_ERROR_WANT_WRITE.</p> </li> <li> <p>SSL_READING</p> <p>More data must be read from the underlying BIO layer in order to complete the actual SSL_*() operation. A call to SSL_get_error(3) should return SSL_ERROR_WANT_READ.</p> </li> <li> <p>SSL_X509_LOOKUP</p> <p>The operation did not complete because an application callback set by SSL_CTX_set_client_cert_cb() has asked to be called again. A call to SSL_get_error(3) should return SSL_ERROR_WANT_X509_LOOKUP.</p> </li> <li> <p>SSL_ASYNC_PAUSED</p> <p>An asynchronous operation partially completed and was then paused. See SSL_get_all_async_fds(3). A call to SSL_get_error(3) should return SSL_ERROR_WANT_ASYNC.</p> </li> <li> <p>SSL_ASYNC_NO_JOBS</p> <p>The asynchronous job could not be started because there were no async jobs available in the pool (see ASYNC_init_thread(3)). A call to SSL_get_error(3) should return SSL_ERROR_WANT_ASYNC_JOB.</p> </li> <li> <p>SSL_CLIENT_HELLO_CB</p> <p>The operation did not complete because an application callback set by SSL_CTX_set_client_hello_cb() has asked to be called again. A call to SSL_get_error(3) should return SSL_ERROR_WANT_CLIENT_HELLO_CB.</p> </li> </ul> <p>SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1, when the corresponding condition is true or 0 otherwise.</p>"},{"location":"man3/SSL_want/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_get_error(3)</p>"},{"location":"man3/SSL_want/#history","title":"HISTORY","text":"<p>The SSL_want_client_hello_cb() function and the SSL_CLIENT_HELLO_CB return value were added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_want/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/SSL_write/","title":"SSL_write","text":""},{"location":"man3/SSL_write/#name","title":"NAME","text":"<p>SSL_write_ex, SSL_write - write bytes to a TLS/SSL connection</p>"},{"location":"man3/SSL_write/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nint SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written);\nint SSL_write(SSL *ssl, const void *buf, int num);\n</code></pre>"},{"location":"man3/SSL_write/#description","title":"DESCRIPTION","text":"<p>SSL_write_ex() and SSL_write() write num bytes from the buffer buf into the specified ssl connection. On success SSL_write_ex() will store the number of bytes written in *written.</p>"},{"location":"man3/SSL_write/#notes","title":"NOTES","text":"<p>In the paragraphs below a \"write function\" is defined as one of either SSL_write_ex(), or SSL_write().</p> <p>If necessary, a write function will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect(3) or SSL_accept(3). If the peer requests a re-negotiation, it will be performed transparently during the write function operation. The behaviour of the write functions depends on the underlying BIO.</p> <p>For the transparent negotiation to succeed, the ssl must have been initialized to client or server mode. This is being done by calling SSL_set_connect_state(3) or SSL_set_accept_state() before the first call to a write function.</p> <p>If the underlying BIO is blocking, the write functions will only return, once the write operation has been finished or an error occurred.</p> <p>If the underlying BIO is nonblocking the write functions will also return when the underlying BIO could not satisfy the needs of the function to continue the operation. In this case a call to SSL_get_error(3) with the return value of the write function will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to a write function can also cause read operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of the write function. The action depends on the underlying BIO. When using a nonblocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue.</p> <p>The write functions will only return with success when the complete contents of buf of length num has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode(3). When this flag is set the write functions will also return with success when a partial write has been successfully completed. In this case the write function operation is considered completed. The bytes are sent and a new write call with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB.</p>"},{"location":"man3/SSL_write/#warnings","title":"WARNINGS","text":"<p>When a write function call has to be repeated because SSL_get_error(3) returned SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE, it must be repeated with the same arguments. The data that was passed might have been partially processed. When SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER was set using SSL_CTX_set_mode(3) the pointer can be different, but the data and length should still be the same.</p> <p>You should not call SSL_write() with num=0, it will return an error. SSL_write_ex() can be called with num=0, but will not send application data to the peer.</p>"},{"location":"man3/SSL_write/#return-values","title":"RETURN VALUES","text":"<p>SSL_write_ex() will return 1 for success or 0 for failure. Success means that all requested application data bytes have been written to the SSL connection or, if SSL_MODE_ENABLE_PARTIAL_WRITE is in use, at least 1 application data byte has been written to the SSL connection. Failure means that not all the requested bytes have been written yet (if SSL_MODE_ENABLE_PARTIAL_WRITE is not in use) or no bytes could be written to the SSL connection (if SSL_MODE_ENABLE_PARTIAL_WRITE is in use). Failures can be retryable (e.g. the network write buffer has temporarily filled up) or non-retryable (e.g. a fatal network error). In the event of a failure call SSL_get_error(3) to find out the reason which indicates whether the call is retryable or not.</p> <p>For SSL_write() the following return values can occur:</p> <ul> <li> <p>&gt; 0</p> <p>The write operation was successful, the return value is the number of bytes actually written to the TLS/SSL connection.</p> </li> <li> <p>&lt;= 0</p> <p>The write operation was not successful, because either the connection was closed, an error occurred or action must be taken by the calling process. Call SSL_get_error() with the return value ret to find out the reason.</p> <p>Old documentation indicated a difference between 0 and -1, and that -1 was retryable. You should instead call SSL_get_error() to find out if it's retryable.</p> </li> </ul>"},{"location":"man3/SSL_write/#see-also","title":"SEE ALSO","text":"<p>SSL_get_error(3), SSL_read_ex(3), SSL_read(3) SSL_CTX_set_mode(3), SSL_CTX_new(3), SSL_connect(3), SSL_accept(3) SSL_set_connect_state(3), ssl(7), bio(7)</p>"},{"location":"man3/SSL_write/#history","title":"HISTORY","text":"<p>The SSL_write_ex() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/SSL_write/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/UI_STRING/","title":"UI_STRING","text":""},{"location":"man3/UI_STRING/#name","title":"NAME","text":"<p>UI_STRING, UI_string_types, UI_get_string_type, UI_get_input_flags, UI_get0_output_string, UI_get0_action_string, UI_get0_result_string, UI_get_result_string_length, UI_get0_test_string, UI_get_result_minsize, UI_get_result_maxsize, UI_set_result, UI_set_result_ex - User interface string parsing</p>"},{"location":"man3/UI_STRING/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ui.h&gt;\n\ntypedef struct ui_string_st UI_STRING;\n\nenum UI_string_types {\n    UIT_NONE = 0,\n    UIT_PROMPT,                 /* Prompt for a string */\n    UIT_VERIFY,                 /* Prompt for a string and verify */\n    UIT_BOOLEAN,                /* Prompt for a yes/no response */\n    UIT_INFO,                   /* Send info to the user */\n    UIT_ERROR                   /* Send an error message to the user */\n};\n\nenum UI_string_types UI_get_string_type(UI_STRING *uis);\nint UI_get_input_flags(UI_STRING *uis);\nconst char *UI_get0_output_string(UI_STRING *uis);\nconst char *UI_get0_action_string(UI_STRING *uis);\nconst char *UI_get0_result_string(UI_STRING *uis);\nint UI_get_result_string_length(UI_STRING *uis);\nconst char *UI_get0_test_string(UI_STRING *uis);\nint UI_get_result_minsize(UI_STRING *uis);\nint UI_get_result_maxsize(UI_STRING *uis);\nint UI_set_result(UI *ui, UI_STRING *uis, const char *result);\nint UI_set_result_ex(UI *ui, UI_STRING *uis, const char *result, int len);\n</code></pre>"},{"location":"man3/UI_STRING/#description","title":"DESCRIPTION","text":"<p>The UI_STRING gets created internally and added to a UI whenever one of the functions UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() or UI_dup_error_string() is called. For a UI_METHOD user, there's no need to know more. For a UI_METHOD creator, it is of interest to fetch text from these UI_STRING objects as well as adding results to some of them.</p> <p>UI_get_string_type() is used to retrieve the type of the given UI_STRING.</p> <p>UI_get_input_flags() is used to retrieve the flags associated with the given UI_STRING.</p> <p>UI_get0_output_string() is used to retrieve the actual string to output (prompt, info, error, ...).</p> <p>UI_get0_action_string() is used to retrieve the action description associated with a UIT_BOOLEAN type UI_STRING. For all other UI_STRING types, NULL is returned. See UI_add_input_boolean(3).</p> <p>UI_get0_result_string() and UI_get_result_string_length() are used to retrieve the result of a prompt and its length. This is only useful for UIT_PROMPT and UIT_VERIFY type strings. For all other UI_STRING types, UI_get0_result_string() returns NULL and UI_get_result_string_length() returns -1.</p> <p>UI_get0_test_string() is used to retrieve the string to compare the prompt result with. This is only useful for UIT_VERIFY type strings. For all other UI_STRING types, NULL is returned.</p> <p>UI_get_result_minsize() and UI_get_result_maxsize() are used to retrieve the minimum and maximum required size of the result. This is only useful for UIT_PROMPT and UIT_VERIFY type strings. For all other UI_STRING types, -1 is returned.</p> <p>UI_set_result_ex() is used to set the result value of a prompt and its length. For UIT_PROMPT and UIT_VERIFY type UI strings, this sets the result retrievable with UI_get0_result_string() by copying the contents of result if its length fits the minimum and maximum size requirements. For UIT_BOOLEAN type UI strings, this sets the first character of the result retrievable with UI_get0_result_string() to the first ok_char given with UI_add_input_boolean() or UI_dup_input_boolean() if the result matched any of them, or the first of the cancel_chars if the result matched any of them, otherwise it's set to the NUL char <code>\\0</code>. See UI_add_input_boolean(3) for more information on ok_chars and cancel_chars.</p> <p>UI_set_result() does the same thing as UI_set_result_ex(), but calculates its length internally. It expects the string to be terminated with a NUL byte, and is therefore only useful with normal C strings.</p>"},{"location":"man3/UI_STRING/#return-values","title":"RETURN VALUES","text":"<p>UI_get_string_type() returns the UI string type.</p> <p>UI_get_input_flags() returns the UI string flags.</p> <p>UI_get0_output_string() returns the UI string output string.</p> <p>UI_get0_action_string() returns the UI string action description string for UIT_BOOLEAN type UI strings, NULL for any other type.</p> <p>UI_get0_result_string() returns the UI string result buffer for UIT_PROMPT and UIT_VERIFY type UI strings, NULL for any other type.</p> <p>UI_get_result_string_length() returns the UI string result buffer's content length for UIT_PROMPT and UIT_VERIFY type UI strings, -1 for any other type.</p> <p>UI_get0_test_string() returns the UI string action description string for UIT_VERIFY type UI strings, NULL for any other type.</p> <p>UI_get_result_minsize() returns the minimum allowed result size for the UI string for UIT_PROMPT and UIT_VERIFY type strings, -1 for any other type.</p> <p>UI_get_result_maxsize() returns the minimum allowed result size for the UI string for UIT_PROMPT and UIT_VERIFY type strings, -1 for any other type.</p> <p>UI_set_result() returns 0 on success or when the UI string is of any type other than UIT_PROMPT, UIT_VERIFY or UIT_BOOLEAN, -1 on error.</p>"},{"location":"man3/UI_STRING/#see-also","title":"SEE ALSO","text":"<p>UI(3)</p>"},{"location":"man3/UI_STRING/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/UI_UTIL_read_pw/","title":"UI_UTIL_read_pw","text":""},{"location":"man3/UI_UTIL_read_pw/#name","title":"NAME","text":"<p>UI_UTIL_read_pw_string, UI_UTIL_read_pw, UI_UTIL_wrap_read_pem_callback - user interface utilities</p>"},{"location":"man3/UI_UTIL_read_pw/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ui.h&gt;\n\nint UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,\n                           int verify);\nint UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,\n                    int verify);\nUI_METHOD *UI_UTIL_wrap_read_pem_callback(pem_password_cb *cb, int rwflag);\n</code></pre>"},{"location":"man3/UI_UTIL_read_pw/#description","title":"DESCRIPTION","text":"<p>UI_UTIL_read_pw_string() asks for a passphrase, using prompt as a prompt, and stores it in buf. The maximum allowed size is given with length, including the terminating NUL byte. If verify is nonzero, the password will be verified as well.</p> <p>UI_UTIL_read_pw() does the same as UI_UTIL_read_pw_string(), the difference is that you can give it an external buffer buff for the verification passphrase.</p> <p>UI_UTIL_wrap_read_pem_callback() can be used to create a temporary UI_METHOD that wraps a given PEM password callback cb. rwflag is used to specify if this method will be used for passphrase entry without (0) or with (1) verification. When not used any more, the returned method should be freed with UI_destroy_method().</p>"},{"location":"man3/UI_UTIL_read_pw/#notes","title":"NOTES","text":"<p>UI_UTIL_read_pw_string() and UI_UTIL_read_pw() use default UI_METHOD. See UI_get_default_method(3) and friends for more information.</p> <p>The result from the UI_METHOD created by UI_UTIL_wrap_read_pem_callback() will generate password strings in the encoding that the given password callback generates. The default password prompting functions (apart from UI_UTIL_read_pw_string() and UI_UTIL_read_pw(), there is PEM_def_callback(), EVP_read_pw_string() and EVP_read_pw_string_min()) all use the default UI_METHOD.</p>"},{"location":"man3/UI_UTIL_read_pw/#return-values","title":"RETURN VALUES","text":"<p>UI_UTIL_read_pw_string() and UI_UTIL_read_pw() return 0 on success or a negative value on error.</p> <p>UI_UTIL_wrap_read_pem_callback() returns a valid UI_METHOD structure or NULL if an error occurred.</p>"},{"location":"man3/UI_UTIL_read_pw/#see-also","title":"SEE ALSO","text":"<p>UI_get_default_method(3)</p>"},{"location":"man3/UI_UTIL_read_pw/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/UI_create_method/","title":"UI_create_method","text":""},{"location":"man3/UI_create_method/#name","title":"NAME","text":"<p>UI_METHOD, UI_create_method, UI_destroy_method, UI_method_set_opener, UI_method_set_writer, UI_method_set_flusher, UI_method_set_reader, UI_method_set_closer, UI_method_set_data_duplicator, UI_method_set_prompt_constructor, UI_method_set_ex_data, UI_method_get_opener, UI_method_get_writer, UI_method_get_flusher, UI_method_get_reader, UI_method_get_closer, UI_method_get_data_duplicator, UI_method_get_data_destructor, UI_method_get_prompt_constructor, UI_method_get_ex_data - user interface method creation and destruction</p>"},{"location":"man3/UI_create_method/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ui.h&gt;\n\ntypedef struct ui_method_st UI_METHOD;\n\nUI_METHOD *UI_create_method(const char *name);\nvoid UI_destroy_method(UI_METHOD *ui_method);\nint UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui));\nint UI_method_set_writer(UI_METHOD *method,\n                         int (*writer) (UI *ui, UI_STRING *uis));\nint UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui));\nint UI_method_set_reader(UI_METHOD *method,\n                         int (*reader) (UI *ui, UI_STRING *uis));\nint UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui));\nint UI_method_set_data_duplicator(UI_METHOD *method,\n                                  void *(*duplicator) (UI *ui, void *ui_data),\n                                  void (*destructor)(UI *ui, void *ui_data));\nint UI_method_set_prompt_constructor(UI_METHOD *method,\n                                     char *(*prompt_constructor) (UI *ui,\n                                                                  const char\n                                                                  *object_desc,\n                                                                  const char\n                                                                  *object_name));\nint UI_method_set_ex_data(UI_METHOD *method, int idx, void *data);\nint (*UI_method_get_opener(const UI_METHOD *method)) (UI *);\nint (*UI_method_get_writer(const UI_METHOD *method)) (UI *, UI_STRING *);\nint (*UI_method_get_flusher(const UI_METHOD *method)) (UI *);\nint (*UI_method_get_reader(const UI_METHOD *method)) (UI *, UI_STRING *);\nint (*UI_method_get_closer(const UI_METHOD *method)) (UI *);\nchar *(*UI_method_get_prompt_constructor(const UI_METHOD *method))\n    (UI *, const char *, const char *);\nvoid *(*UI_method_get_data_duplicator(const UI_METHOD *method)) (UI *, void *);\nvoid (*UI_method_get_data_destructor(const UI_METHOD *method)) (UI *, void *);\nconst void *UI_method_get_ex_data(const UI_METHOD *method, int idx);\n</code></pre>"},{"location":"man3/UI_create_method/#description","title":"DESCRIPTION","text":"<p>A method contains a few functions that implement the low-level of the User Interface. These functions are:</p> <ul> <li> <p>an opener</p> <p>This function takes a reference to a UI and starts a session, for example by opening a channel to a tty, or by creating a dialog box.</p> </li> <li> <p>a writer</p> <p>This function takes a reference to a UI and a UI String, and writes the string where appropriate, maybe to the tty, maybe added as a field label in a dialog box. Note that this gets fed all strings associated with a UI, one after the other, so care must be taken which ones it actually uses.</p> </li> <li> <p>a flusher</p> <p>This function takes a reference to a UI, and flushes everything that has been output so far. For example, if the method builds up a dialog box, this can be used to actually display it and accepting input ended with a pressed button.</p> </li> <li> <p>a reader</p> <p>This function takes a reference to a UI and a UI string and reads off the given prompt, maybe from the tty, maybe from a field in a dialog box. Note that this gets fed all strings associated with a UI, one after the other, so care must be taken which ones it actually uses.</p> </li> <li> <p>a closer</p> <p>This function takes a reference to a UI, and closes the session, maybe by closing the channel to the tty, maybe by destroying a dialog box.</p> </li> </ul> <p>All of these functions are expected to return 0 on error, 1 on success, or -1 on out-off-band events, for example if some prompting has been cancelled (by pressing Ctrl-C, for example). Only the flusher or the reader are expected to return -1. If returned by another of the functions, it's treated as if 0 was returned.</p> <p>Regarding the writer and the reader, don't assume the former should only write and don't assume the latter should only read. This depends on the needs of the method.</p> <p>For example, a typical tty reader wouldn't write the prompts in the write, but would rather do so in the reader, because of the sequential nature of prompting on a tty. This is how the UI_OpenSSL() method does it.</p> <p>In contrast, a method that builds up a dialog box would add all prompt text in the writer, have all input read in the flusher and store the results in some temporary buffer, and finally have the reader just fetch those results.</p> <p>The central function that uses these method functions is UI_process(), and it does it in five steps:</p> <ol> <li>Open the session using the opener function if that one's defined. If an error occurs, jump to 5.</li> <li>For every UI String associated with the UI, call the writer function if that one's defined. If an error occurs, jump to 5.</li> <li>Flush everything using the flusher function if that one's defined. If an error occurs, jump to 5.</li> <li>For every UI String associated with the UI, call the reader function if that one's defined. If an error occurs, jump to 5.</li> <li>Close the session using the closer function if that one's defined.</li> </ol> <p>UI_create_method() creates a new UI method with a given name.</p> <p>UI_destroy_method() destroys the given UI method ui_method.</p> <p>UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader() and UI_method_set_closer() set the five main method function to the given function pointer.</p> <p>UI_method_set_data_duplicator() sets the user data duplicator and destructor. See UI_dup_user_data(3).</p> <p>UI_method_set_prompt_constructor() sets the prompt constructor. See UI_construct_prompt(3).</p> <p>UI_method_set_ex_data() sets application specific data with a given EX_DATA index. See CRYPTO_get_ex_new_index(3) for general information on how to get that index.</p> <p>UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the different method functions.</p> <p>UI_method_get_ex_data() returns the application data previously stored with UI_method_set_ex_data().</p>"},{"location":"man3/UI_create_method/#return-values","title":"RETURN VALUES","text":"<p>UI_create_method() returns a UI_METHOD pointer on success, NULL on error.</p> <p>UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given method is NULL.</p> <p>UI_method_set_ex_data() returns 1 on success and 0 on error (because CRYPTO_set_ex_data() does so).</p> <p>UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.</p> <p>UI_method_get_ex_data() returns a pointer to the application specific data associated with the method.</p>"},{"location":"man3/UI_create_method/#see-also","title":"SEE ALSO","text":"<p>UI(3), CRYPTO_get_ex_data(3), UI_STRING(3)</p>"},{"location":"man3/UI_create_method/#history","title":"HISTORY","text":"<p>The UI_method_set_data_duplicator(), UI_method_get_data_duplicator() and UI_method_get_data_destructor() functions were added in OpenSSL 1.1.1.</p>"},{"location":"man3/UI_create_method/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/UI_new/","title":"UI_new","text":""},{"location":"man3/UI_new/#name","title":"NAME","text":"<p>UI, UI_new, UI_new_method, UI_free, UI_add_input_string, UI_dup_input_string, UI_add_verify_string, UI_dup_verify_string, UI_add_input_boolean, UI_dup_input_boolean, UI_add_info_string, UI_dup_info_string, UI_add_error_string, UI_dup_error_string, UI_construct_prompt, UI_add_user_data, UI_dup_user_data, UI_get0_user_data, UI_get0_result, UI_get_result_length, UI_process, UI_ctrl, UI_set_default_method, UI_get_default_method, UI_get_method, UI_set_method, UI_OpenSSL, UI_null - user interface</p>"},{"location":"man3/UI_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ui.h&gt;\n\ntypedef struct ui_st UI;\n\nUI *UI_new(void);\nUI *UI_new_method(const UI_METHOD *method);\nvoid UI_free(UI *ui);\n\nint UI_add_input_string(UI *ui, const char *prompt, int flags,\n                        char *result_buf, int minsize, int maxsize);\nint UI_dup_input_string(UI *ui, const char *prompt, int flags,\n                        char *result_buf, int minsize, int maxsize);\nint UI_add_verify_string(UI *ui, const char *prompt, int flags,\n                         char *result_buf, int minsize, int maxsize,\n                         const char *test_buf);\nint UI_dup_verify_string(UI *ui, const char *prompt, int flags,\n                         char *result_buf, int minsize, int maxsize,\n                         const char *test_buf);\nint UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,\n                         const char *ok_chars, const char *cancel_chars,\n                         int flags, char *result_buf);\nint UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,\n                         const char *ok_chars, const char *cancel_chars,\n                         int flags, char *result_buf);\nint UI_add_info_string(UI *ui, const char *text);\nint UI_dup_info_string(UI *ui, const char *text);\nint UI_add_error_string(UI *ui, const char *text);\nint UI_dup_error_string(UI *ui, const char *text);\n\nchar *UI_construct_prompt(UI *ui_method,\n       const char *object_desc, const char *object_name);\n\nvoid *UI_add_user_data(UI *ui, void *user_data);\nint UI_dup_user_data(UI *ui, void *user_data);\nvoid *UI_get0_user_data(UI *ui);\n\nconst char *UI_get0_result(UI *ui, int i);\nint UI_get_result_length(UI *ui, int i);\n\nint UI_process(UI *ui);\n\nint UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f)());\n\nvoid UI_set_default_method(const UI_METHOD *meth);\nconst UI_METHOD *UI_get_default_method(void);\nconst UI_METHOD *UI_get_method(UI *ui);\nconst UI_METHOD *UI_set_method(UI *ui, const UI_METHOD *meth);\n\nUI_METHOD *UI_OpenSSL(void);\nconst UI_METHOD *UI_null(void);\n</code></pre>"},{"location":"man3/UI_new/#description","title":"DESCRIPTION","text":"<p>UI stands for User Interface, and is general purpose set of routines to prompt the user for text-based information.  Through user-written methods (see UI_create_method(3)), prompting can be done in any way imaginable, be it plain text prompting, through dialog boxes or from a cell phone.</p> <p>All the functions work through a context of the type UI.  This context contains all the information needed to prompt correctly as well as a reference to a UI_METHOD, which is an ordered vector of functions that carry out the actual prompting.</p> <p>The first thing to do is to create a UI with UI_new() or UI_new_method(), then add information to it with the UI_add or UI_dup functions.  Also, user-defined random data can be passed down to the underlying method through calls to UI_add_user_data() or UI_dup_user_data().  The default UI method doesn't care about these data, but other methods might.  Finally, use UI_process() to actually perform the prompting and UI_get0_result() and UI_get_result_length() to find the result to the prompt and its length.</p> <p>A UI can contain more than one prompt, which are performed in the given sequence.  Each prompt gets an index number which is returned by the UI_add and UI_dup functions, and has to be used to get the corresponding result with UI_get0_result() and UI_get_result_length().</p> <p>UI_process() can be called more than once on the same UI, thereby allowing a UI to have a long lifetime, but can just as well have a short lifetime.</p> <p>The functions are as follows:</p> <p>UI_new() creates a new UI using the default UI method.  When done with this UI, it should be freed using UI_free().</p> <p>UI_new_method() creates a new UI using the given UI method.  When done with this UI, it should be freed using UI_free().</p> <p>UI_OpenSSL() returns the built-in UI method (note: not necessarily the default one, since the default can be changed.  See further on).  This method is the most machine/OS dependent part of OpenSSL and normally generates the most problems when porting.</p> <p>UI_null() returns a UI method that does nothing.  Its use is to avoid getting internal defaults for passed UI_METHOD pointers.</p> <p>UI_free() removes a UI from memory, along with all other pieces of memory that's connected to it, like duplicated input strings, results and others. If ui is NULL nothing is done.</p> <p>UI_add_input_string() and UI_add_verify_string() add a prompt to the UI, as well as flags and a result buffer and the desired minimum and maximum sizes of the result, not counting the final NUL character.  The given information is used to prompt for information, for example a password, and to verify a password (i.e. having the user enter it twice and check that the same string was entered twice).  UI_add_verify_string() takes and extra argument that should be a pointer to the result buffer of the input string that it's supposed to verify, or verification will fail.</p> <p>UI_add_input_boolean() adds a prompt to the UI that's supposed to be answered in a boolean way, with a single character for yes and a different character for no.  A set of characters that can be used to cancel the prompt is given as well.  The prompt itself is divided in two, one part being the descriptive text (given through the prompt argument) and one describing the possible answers (given through the action_desc argument).</p> <p>UI_add_info_string() and UI_add_error_string() add strings that are shown at the same time as the prompt for extra information or to show an error string. The difference between the two is only conceptual.  With the builtin method, there's no technical difference between them.  Other methods may make a difference between them, however.</p> <p>The flags currently supported are UI_INPUT_FLAG_ECHO, which is relevant for UI_add_input_string() and will have the users response be echoed (when prompting for a password, this flag should obviously not be used, and UI_INPUT_FLAG_DEFAULT_PWD, which means that a default password of some sort will be used (completely depending on the application and the UI method).</p> <p>UI_dup_input_string(), UI_dup_verify_string(), UI_dup_input_boolean(), UI_dup_info_string() and UI_dup_error_string() are basically the same as their UI_add counterparts, except that they make their own copies of all strings.</p> <p>UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name. The default constructor (if there is none provided by the method used) creates a string \"Enter description for name:\".  With the description \"pass phrase\" and the filename \"foo.key\", that becomes \"Enter pass phrase for foo.key:\".  Other methods may create whatever string and may include encodings that will be processed by the other method functions.</p> <p>UI_add_user_data() adds a user data pointer for the method to use at any time.  The builtin UI method doesn't care about this info.  Note that several calls to this function doesn't add data, it replaces the previous blob with the one given as argument.</p> <p>UI_dup_user_data() duplicates the user data and works as an alternative to UI_add_user_data() when the user data needs to be preserved for a longer duration, perhaps even the lifetime of the application.  The UI object takes ownership of this duplicate and will free it whenever it gets replaced or the UI is destroyed.  UI_dup_user_data() returns 0 on success, or -1 on memory allocation failure or if the method doesn't have a duplicator function.</p> <p>UI_get0_user_data() retrieves the data that has last been given to the UI with UI_add_user_data() or UI_dup_user_data.</p> <p>UI_get0_result() returns a pointer to the result buffer associated with the information indexed by i.</p> <p>UI_get_result_length() returns the length of the result buffer associated with the information indexed by i.</p> <p>UI_process() goes through the information given so far, does all the printing and prompting and returns the final status, which is -2 on out-of-band events (Interrupt, Cancel, ...), -1 on error and 0 on success.</p> <p>UI_ctrl() adds extra control for the application author.  For now, it understands two commands: UI_CTRL_PRINT_ERRORS, which makes UI_process() print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not.</p> <p>UI_set_default_method() changes the default UI method to the one given. This function is not thread-safe and should not be called at the same time as other OpenSSL functions.</p> <p>UI_get_default_method() returns a pointer to the current default UI method.</p> <p>UI_get_method() returns the UI method associated with a given UI.</p> <p>UI_set_method() changes the UI method associated with a given UI.</p>"},{"location":"man3/UI_new/#notes","title":"NOTES","text":"<p>The resulting strings that the built in method UI_OpenSSL() generate are assumed to be encoded according to the current locale or (for Windows) code page. For applications having different demands, these strings need to be converted appropriately by the caller. For Windows, if the OPENSSL_WIN32_UTF8 environment variable is set, the built-in method UI_OpenSSL() will produce UTF-8 encoded strings instead.</p>"},{"location":"man3/UI_new/#return-values","title":"RETURN VALUES","text":"<p>UI_new() and UI_new_method() return a valid UI structure or NULL if an error occurred.</p> <p>UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.</p> <p>UI_construct_prompt() returns a string or NULL if an error occurred.</p> <p>UI_dup_user_data() returns 0 on success or -1 on error.</p> <p>UI_get0_result() returns a string or NULL on error.</p> <p>UI_get_result_length() returns a positive integer or 0 on success; otherwise it returns -1 on error.</p> <p>UI_process() returns 0 on success or a negative value on error.</p> <p>UI_ctrl() returns a mask on success or -1 on error.</p> <p>UI_get_default_method(), UI_get_method(), UI_OpenSSL(), UI_null() and UI_set_method() return either a valid UI_METHOD structure or NULL respectively.</p>"},{"location":"man3/UI_new/#history","title":"HISTORY","text":"<p>The UI_dup_user_data() function was added in OpenSSL 1.1.1.</p>"},{"location":"man3/UI_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509V3_get_d2i/","title":"X509V3_get_d2i","text":""},{"location":"man3/X509V3_get_d2i/#name","title":"NAME","text":"<p>X509_get0_extensions, X509_CRL_get0_extensions, X509_REVOKED_get0_extensions, X509V3_get_d2i, X509V3_add1_i2d, X509V3_EXT_d2i, X509V3_EXT_i2d, X509_get_ext_d2i, X509_add1_ext_i2d, X509_CRL_get_ext_d2i, X509_CRL_add1_ext_i2d, X509_REVOKED_get_ext_d2i, X509_REVOKED_add1_ext_i2d - X509 extension decode and encode functions</p>"},{"location":"man3/X509V3_get_d2i/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509v3.h&gt;\n\nvoid *X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit,\n                     int *idx);\nint X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,\n                    int crit, unsigned long flags);\n\nvoid *X509V3_EXT_d2i(X509_EXTENSION *ext);\nX509_EXTENSION *X509V3_EXT_i2d(int ext_nid, int crit, void *ext);\n\nvoid *X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx);\nint X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,\n                      unsigned long flags);\n\nvoid *X509_CRL_get_ext_d2i(const X509_CRL *crl, int nid, int *crit, int *idx);\nint X509_CRL_add1_ext_i2d(X509_CRL *crl, int nid, void *value, int crit,\n                          unsigned long flags);\n\nvoid *X509_REVOKED_get_ext_d2i(const X509_REVOKED *r, int nid, int *crit, int *idx);\nint X509_REVOKED_add1_ext_i2d(X509_REVOKED *r, int nid, void *value, int crit,\n                              unsigned long flags);\n\nconst STACK_OF(X509_EXTENSION) *X509_get0_extensions(const X509 *x);\nconst STACK_OF(X509_EXTENSION) *X509_CRL_get0_extensions(const X509_CRL *crl);\nconst STACK_OF(X509_EXTENSION) *X509_REVOKED_get0_extensions(const X509_REVOKED *r);\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#description","title":"DESCRIPTION","text":"<p>X509V3_get_ext_d2i() looks for an extension with OID nid in the extensions x and, if found, decodes it. If idx is NULL then only one occurrence of an extension is permissible otherwise the first extension after index *idx is returned and *idx updated to the location of the extension. If crit is not NULL then *crit is set to a status value: -2 if the extension occurs multiple times (this is only returned if idx is NULL), -1 if the extension could not be found, 0 if the extension is found and is not critical and 1 if critical. A pointer to an extension specific structure or NULL is returned.</p> <p>X509V3_add1_i2d() adds extension value to STACK *x (allocating a new STACK if necessary) using OID nid and criticality crit according to flags.</p> <p>X509V3_EXT_d2i() attempts to decode the ASN.1 data contained in extension ext and returns a pointer to an extension specific structure or NULL if the extension could not be decoded (invalid syntax or not supported).</p> <p>X509V3_EXT_i2d() encodes the extension specific structure ext with OID ext_nid and criticality crit.</p> <p>X509_get_ext_d2i() and X509_add1_ext_i2d() operate on the extensions of certificate x, they are otherwise identical to X509V3_get_d2i() and X509V3_add_i2d().</p> <p>X509_CRL_get_ext_d2i() and X509_CRL_add1_ext_i2d() operate on the extensions of CRL crl, they are otherwise identical to X509V3_get_d2i() and X509V3_add_i2d().</p> <p>X509_REVOKED_get_ext_d2i() and X509_REVOKED_add1_ext_i2d() operate on the extensions of X509_REVOKED structure r (i.e for CRL entry extensions), they are otherwise identical to X509V3_get_d2i() and X509V3_add_i2d().</p> <p>X509_get0_extensions(), X509_CRL_get0_extensions() and X509_REVOKED_get0_extensions() return a stack of all the extensions of a certificate a CRL or a CRL entry respectively.</p>"},{"location":"man3/X509V3_get_d2i/#notes","title":"NOTES","text":"<p>In almost all cases an extension can occur at most once and multiple occurrences is an error. Therefore, the idx parameter is usually NULL.</p> <p>The flags parameter may be one of the following values.</p> <p>X509V3_ADD_DEFAULT appends a new extension only if the extension does not already exist. An error is returned if the extension does already exist.</p> <p>X509V3_ADD_APPEND appends a new extension, ignoring whether the extension already exists.</p> <p>X509V3_ADD_REPLACE replaces an extension if it exists otherwise appends a new extension.</p> <p>X509V3_ADD_REPLACE_EXISTING replaces an existing extension if it exists otherwise returns an error.</p> <p>X509V3_ADD_KEEP_EXISTING appends a new extension only if the extension does not already exist. An error is not returned if the extension does already exist.</p> <p>X509V3_ADD_DELETE extension nid is deleted: no new extension is added.</p> <p>If X509V3_ADD_SILENT is ored with flags: any error returned will not be added to the error queue.</p> <p>The function X509V3_get_d2i() will return NULL if the extension is not found, occurs multiple times or cannot be decoded. It is possible to determine the precise reason by checking the value of *crit.</p>"},{"location":"man3/X509V3_get_d2i/#supported-extensions","title":"SUPPORTED EXTENSIONS","text":"<p>The following sections contain a list of all supported extensions including their name and NID.</p>"},{"location":"man3/X509V3_get_d2i/#pkix-certificate-extensions","title":"PKIX Certificate Extensions","text":"<p>The following certificate extensions are defined in PKIX standards such as RFC5280.</p> <pre><code>Basic Constraints                  NID_basic_constraints\nKey Usage                          NID_key_usage\nExtended Key Usage                 NID_ext_key_usage\n\nSubject Key Identifier             NID_subject_key_identifier\nAuthority Key Identifier           NID_authority_key_identifier\n\nPrivate Key Usage Period           NID_private_key_usage_period\n\nSubject Alternative Name           NID_subject_alt_name\nIssuer Alternative Name            NID_issuer_alt_name\n\nAuthority Information Access       NID_info_access\nSubject Information Access         NID_sinfo_access\n\nName Constraints                   NID_name_constraints\n\nCertificate Policies               NID_certificate_policies\nPolicy Mappings                    NID_policy_mappings\nPolicy Constraints                 NID_policy_constraints\nInhibit Any Policy                 NID_inhibit_any_policy\n\nTLS Feature                        NID_tlsfeature\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#netscape-certificate-extensions","title":"Netscape Certificate Extensions","text":"<p>The following are (largely obsolete) Netscape certificate extensions.</p> <pre><code>Netscape Cert Type                 NID_netscape_cert_type\nNetscape Base Url                  NID_netscape_base_url\nNetscape Revocation Url            NID_netscape_revocation_url\nNetscape CA Revocation Url         NID_netscape_ca_revocation_url\nNetscape Renewal Url               NID_netscape_renewal_url\nNetscape CA Policy Url             NID_netscape_ca_policy_url\nNetscape SSL Server Name           NID_netscape_ssl_server_name\nNetscape Comment                   NID_netscape_comment\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#miscellaneous-certificate-extensions","title":"Miscellaneous Certificate Extensions","text":"<pre><code>Strong Extranet ID                 NID_sxnet\nProxy Certificate Information      NID_proxyCertInfo\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#pkix-crl-extensions","title":"PKIX CRL Extensions","text":"<p>The following are CRL extensions from PKIX standards such as RFC5280.</p> <pre><code>CRL Number                         NID_crl_number\nCRL Distribution Points            NID_crl_distribution_points\nDelta CRL Indicator                NID_delta_crl\nFreshest CRL                       NID_freshest_crl\nInvalidity Date                    NID_invalidity_date\nIssuing Distribution Point         NID_issuing_distribution_point\n</code></pre> <p>The following are CRL entry extensions from PKIX standards such as RFC5280.</p> <pre><code>CRL Reason Code                    NID_crl_reason\nCertificate Issuer                 NID_certificate_issuer\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#ocsp-extensions","title":"OCSP Extensions","text":"<pre><code>OCSP Nonce                         NID_id_pkix_OCSP_Nonce\nOCSP CRL ID                        NID_id_pkix_OCSP_CrlID\nAcceptable OCSP Responses          NID_id_pkix_OCSP_acceptableResponses\nOCSP No Check                      NID_id_pkix_OCSP_noCheck\nOCSP Archive Cutoff                NID_id_pkix_OCSP_archiveCutoff\nOCSP Service Locator               NID_id_pkix_OCSP_serviceLocator\nHold Instruction Code              NID_hold_instruction_code\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#certificate-transparency-extensions","title":"Certificate Transparency Extensions","text":"<p>The following extensions are used by certificate transparency, RFC6962</p> <pre><code>CT Precertificate SCTs             NID_ct_precert_scts\nCT Certificate SCTs                NID_ct_cert_scts\n</code></pre>"},{"location":"man3/X509V3_get_d2i/#return-values","title":"RETURN VALUES","text":"<p>X509V3_EXT_d2i() and *X509V3_get_d2i() return a pointer to an extension specific structure of NULL if an error occurs.</p> <p>X509V3_EXT_i2d() returns a pointer to an X509_EXTENSION structure or NULL if an error occurs.</p> <p>X509V3_add1_i2d() returns 1 if the operation is successful and 0 if it fails due to a non-fatal error (extension not found, already exists, cannot be encoded) or -1 due to a fatal error such as a memory allocation failure.</p> <p>X509_get0_extensions(), X509_CRL_get0_extensions() and X509_REVOKED_get0_extensions() return a stack of extensions. They return NULL if no extensions are present.</p>"},{"location":"man3/X509V3_get_d2i/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509_verify_cert(3)</p>"},{"location":"man3/X509V3_get_d2i/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_ALGOR_dup/","title":"X509_ALGOR_dup","text":""},{"location":"man3/X509_ALGOR_dup/#name","title":"NAME","text":"<p>X509_ALGOR_dup, X509_ALGOR_set0, X509_ALGOR_get0, X509_ALGOR_set_md, X509_ALGOR_cmp, X509_ALGOR_copy - AlgorithmIdentifier functions</p>"},{"location":"man3/X509_ALGOR_dup/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nX509_ALGOR *X509_ALGOR_dup(X509_ALGOR *alg);\nint X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval);\nvoid X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,\n                     const void **ppval, const X509_ALGOR *alg);\nvoid X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md);\nint X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b);\nint X509_ALGOR_copy(X509_ALGOR *dest, const X509_ALGOR *src);\n</code></pre>"},{"location":"man3/X509_ALGOR_dup/#description","title":"DESCRIPTION","text":"<p>X509_ALGOR_dup() returns a copy of alg.</p> <p>X509_ALGOR_set0() sets the algorithm OID of alg to aobj and the associated parameter type to ptype with value pval. If ptype is V_ASN1_UNDEF the parameter is omitted, otherwise ptype and pval have the same meaning as the type and value parameters to ASN1_TYPE_set(). All the supplied parameters are used internally so must NOT be freed after this call.</p> <p>X509_ALGOR_get0() is the inverse of X509_ALGOR_set0(): it returns the algorithm OID in *paobj and the associated parameter in *pptype and *ppval from the AlgorithmIdentifier alg.</p> <p>X509_ALGOR_set_md() sets the AlgorithmIdentifier alg to appropriate values for the message digest md.</p> <p>X509_ALGOR_cmp() compares a and b and returns 0 if they have identical encodings and nonzero otherwise.</p> <p>X509_ALGOR_copy() copies the source values into the dest structs; making a duplicate of each (and free any thing pointed to from within *dest).</p>"},{"location":"man3/X509_ALGOR_dup/#return-values","title":"RETURN VALUES","text":"<p>X509_ALGOR_dup() returns a valid X509_ALGOR structure or NULL if an error occurred.</p> <p>X509_ALGOR_set0() and X509_ALGOR_copy() return 1 on success or 0 on error.</p> <p>X509_ALGOR_get0() and X509_ALGOR_set_md() return no values.</p> <p>X509_ALGOR_cmp() returns 0 if the two parameters have identical encodings and nonzero otherwise.</p>"},{"location":"man3/X509_ALGOR_dup/#history","title":"HISTORY","text":"<p>The X509_ALGOR_copy() was added in 1.1.1e.</p>"},{"location":"man3/X509_ALGOR_dup/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_CRL_get0_by_serial/","title":"X509_CRL_get0_by_serial","text":""},{"location":"man3/X509_CRL_get0_by_serial/#name","title":"NAME","text":"<p>X509_CRL_get0_by_serial, X509_CRL_get0_by_cert, X509_CRL_get_REVOKED, X509_REVOKED_get0_serialNumber, X509_REVOKED_get0_revocationDate, X509_REVOKED_set_serialNumber, X509_REVOKED_set_revocationDate, X509_CRL_add0_revoked, X509_CRL_sort - CRL revoked entry utility functions</p>"},{"location":"man3/X509_CRL_get0_by_serial/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_CRL_get0_by_serial(X509_CRL *crl,\n                            X509_REVOKED **ret, ASN1_INTEGER *serial);\nint X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x);\n\nSTACK_OF(X509_REVOKED) *X509_CRL_get_REVOKED(X509_CRL *crl);\n\nconst ASN1_INTEGER *X509_REVOKED_get0_serialNumber(const X509_REVOKED *r);\nconst ASN1_TIME *X509_REVOKED_get0_revocationDate(const X509_REVOKED *r);\n\nint X509_REVOKED_set_serialNumber(X509_REVOKED *r, ASN1_INTEGER *serial);\nint X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);\n\nint X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);\n\nint X509_CRL_sort(X509_CRL *crl);\n</code></pre>"},{"location":"man3/X509_CRL_get0_by_serial/#description","title":"DESCRIPTION","text":"<p>X509_CRL_get0_by_serial() attempts to find a revoked entry in crl for serial number serial. If it is successful it sets *ret to the internal pointer of the matching entry, as a result *ret must not be freed up after the call.</p> <p>X509_CRL_get0_by_cert() is similar to X509_get0_by_serial() except it looks for a revoked entry using the serial number of certificate x.</p> <p>X509_CRL_get_REVOKED() returns an internal pointer to a stack of all revoked entries for crl.</p> <p>X509_REVOKED_get0_serialNumber() returns an internal pointer to the serial number of r.</p> <p>X509_REVOKED_get0_revocationDate() returns an internal pointer to the revocation date of r.</p> <p>X509_REVOKED_set_serialNumber() sets the serial number of r to serial. The supplied serial pointer is not used internally so it should be freed up after use.</p> <p>X509_REVOKED_set_revocationDate() sets the revocation date of r to tm. The supplied tm pointer is not used internally so it should be freed up after use.</p> <p>X509_CRL_add0_revoked() appends revoked entry rev to CRL crl. The pointer rev is used internally so it must not be freed up after the call: it is freed when the parent CRL is freed.</p> <p>X509_CRL_sort() sorts the revoked entries of crl into ascending serial number order.</p>"},{"location":"man3/X509_CRL_get0_by_serial/#notes","title":"NOTES","text":"<p>Applications can determine the number of revoked entries returned by X509_CRL_get_revoked() using sk_X509_REVOKED_num() and examine each one in turn using sk_X509_REVOKED_value().</p>"},{"location":"man3/X509_CRL_get0_by_serial/#return-values","title":"RETURN VALUES","text":"<p>X509_CRL_get0_by_serial() and X509_CRL_get0_by_cert() return 0 for failure, 1 on success except if the revoked entry has the reason <code>removeFromCRL</code> (8), in which case 2 is returned.</p> <p>X509_REVOKED_set_serialNumber(), X509_REVOKED_set_revocationDate(), X509_CRL_add0_revoked() and X509_CRL_sort() return 1 for success and 0 for failure.</p> <p>X509_REVOKED_get0_serialNumber() returns an ASN1_INTEGER pointer.</p> <p>X509_REVOKED_get0_revocationDate() returns an ASN1_TIME value.</p> <p>X509_CRL_get_REVOKED() returns a STACK of revoked entries.</p>"},{"location":"man3/X509_CRL_get0_by_serial/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_CRL_get0_by_serial/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_EXTENSION_set_object/","title":"X509_EXTENSION_set_object","text":""},{"location":"man3/X509_EXTENSION_set_object/#name","title":"NAME","text":"<p>X509_EXTENSION_set_object, X509_EXTENSION_set_critical, X509_EXTENSION_set_data, X509_EXTENSION_create_by_NID, X509_EXTENSION_create_by_OBJ, X509_EXTENSION_get_object, X509_EXTENSION_get_critical, X509_EXTENSION_get_data - extension utility functions</p>"},{"location":"man3/X509_EXTENSION_set_object/#synopsis","title":"SYNOPSIS","text":"<pre><code>int X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj);\nint X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);\nint X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);\n\nX509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,\n                                             int nid, int crit,\n                                             ASN1_OCTET_STRING *data);\nX509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,\n                                             const ASN1_OBJECT *obj, int crit,\n                                             ASN1_OCTET_STRING *data);\n\nASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex);\nint X509_EXTENSION_get_critical(const X509_EXTENSION *ex);\nASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ne);\n</code></pre>"},{"location":"man3/X509_EXTENSION_set_object/#description","title":"DESCRIPTION","text":"<p>X509_EXTENSION_set_object() sets the extension type of ex to obj. The obj pointer is duplicated internally so obj should be freed up after use.</p> <p>X509_EXTENSION_set_critical() sets the criticality of ex to crit. If crit is zero the extension in non-critical otherwise it is critical.</p> <p>X509_EXTENSION_set_data() sets the data in extension ex to data. The data pointer is duplicated internally.</p> <p>X509_EXTENSION_create_by_NID() creates an extension of type nid, criticality crit using data data. The created extension is returned and written to *ex reusing or allocating a new extension if necessary so *ex should either be NULL or a valid X509_EXTENSION structure it must not be an uninitialised pointer.</p> <p>X509_EXTENSION_create_by_OBJ() is identical to X509_EXTENSION_create_by_NID() except it creates and extension using obj instead of a NID.</p> <p>X509_EXTENSION_get_object() returns the extension type of ex as an ASN1_OBJECT pointer. The returned pointer is an internal value which must not be freed up.</p> <p>X509_EXTENSION_get_critical() returns the criticality of extension ex it returns 1 for critical and 0 for non-critical.</p> <p>X509_EXTENSION_get_data() returns the data of extension ex. The returned pointer is an internal value which must not be freed up.</p>"},{"location":"man3/X509_EXTENSION_set_object/#notes","title":"NOTES","text":"<p>These functions manipulate the contents of an extension directly. Most applications will want to parse or encode and add an extension: they should use the extension encode and decode functions instead such as X509_add1_ext_i2d() and X509_get_ext_d2i().</p> <p>The data associated with an extension is the extension encoding in an ASN1_OCTET_STRING structure.</p>"},{"location":"man3/X509_EXTENSION_set_object/#return-values","title":"RETURN VALUES","text":"<p>X509_EXTENSION_set_object() X509_EXTENSION_set_critical() and X509_EXTENSION_set_data() return 1 for success and 0 for failure.</p> <p>X509_EXTENSION_create_by_NID() and X509_EXTENSION_create_by_OBJ() return an X509_EXTENSION pointer or NULL if an error occurs.</p> <p>X509_EXTENSION_get_object() returns an ASN1_OBJECT pointer.</p> <p>X509_EXTENSION_get_critical() returns 0 for non-critical and 1 for critical.</p> <p>X509_EXTENSION_get_data() returns an ASN1_OCTET_STRING pointer.</p>"},{"location":"man3/X509_EXTENSION_set_object/#see-also","title":"SEE ALSO","text":"<p>X509V3_get_d2i(3)</p>"},{"location":"man3/X509_EXTENSION_set_object/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_LOOKUP/","title":"X509_LOOKUP","text":""},{"location":"man3/X509_LOOKUP/#name","title":"NAME","text":"<p>X509_LOOKUP, X509_LOOKUP_TYPE, X509_LOOKUP_new, X509_LOOKUP_free, X509_LOOKUP_init, X509_LOOKUP_shutdown, X509_LOOKUP_set_method_data, X509_LOOKUP_get_method_data, X509_LOOKUP_ctrl, X509_LOOKUP_load_file, X509_LOOKUP_add_dir, X509_LOOKUP_get_store, X509_LOOKUP_by_subject, X509_LOOKUP_by_issuer_serial, X509_LOOKUP_by_fingerprint, X509_LOOKUP_by_alias - OpenSSL certificate lookup mechanisms</p>"},{"location":"man3/X509_LOOKUP/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\ntypedef x509_lookup_st X509_LOOKUP;\n\ntypedef enum X509_LOOKUP_TYPE;\n\nX509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method);\nint X509_LOOKUP_init(X509_LOOKUP *ctx);\nint X509_LOOKUP_shutdown(X509_LOOKUP *ctx);\nvoid X509_LOOKUP_free(X509_LOOKUP *ctx);\n\nint X509_LOOKUP_set_method_data(X509_LOOKUP *ctx, void *data);\nvoid *X509_LOOKUP_get_method_data(const X509_LOOKUP *ctx);\n\nint X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,\n                     long argl, char **ret);\nint X509_LOOKUP_load_file(X509_LOOKUP *ctx, char *name, long type);\nint X509_LOOKUP_add_dir(X509_LOOKUP *ctx, char *name, long type);\n\nX509_STORE *X509_LOOKUP_get_store(const X509_LOOKUP *ctx);\n\nint X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,\n                           X509_NAME *name, X509_OBJECT *ret);\nint X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,\n                                 X509_NAME *name, ASN1_INTEGER *serial,\n                                 X509_OBJECT *ret);\nint X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,\n                               const unsigned char *bytes, int len,\n                               X509_OBJECT *ret);\nint X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,\n                         const char *str, int len, X509_OBJECT *ret);\n</code></pre>"},{"location":"man3/X509_LOOKUP/#description","title":"DESCRIPTION","text":"<p>The X509_LOOKUP structure holds the information needed to look up certificates and CRLs according to an associated X509_LOOKUP_METHOD(3). Multiple X509_LOOKUP instances can be added to an X509_STORE(3) to enable lookup in that store.</p> <p>X509_LOOKUP_new() creates a new X509_LOOKUP using the given lookup method. It can also be created by calling X509_STORE_add_lookup(3), which will associate an X509_STORE with the lookup mechanism.</p> <p>X509_LOOKUP_init() initializes the internal state and resources as needed by the given X509_LOOKUP to do its work.</p> <p>X509_LOOKUP_shutdown() tears down the internal state and resources of the given X509_LOOKUP.</p> <p>X509_LOOKUP_free() destructs the given X509_LOOKUP.</p> <p>X509_LOOKUP_set_method_data() associates a pointer to application data to the given X509_LOOKUP.</p> <p>X509_LOOKUP_get_method_data() retrieves a pointer to application data from the given X509_LOOKUP.</p> <p>X509_LOOKUP_ctrl() is used to set or get additional data to or from an X509_LOOKUP structure or its associated X509_LOOKUP_METHOD(3). The arguments of the control command are passed via argc and argl, its return value via *ret. The meaning of the arguments depends on the cmd number of the control command. In general, this function is not called directly, but wrapped by a macro call, see below. The control _cmd_s known to OpenSSL are discussed in more depth in \"Control Commands\".</p> <p>X509_LOOKUP_load_file() passes a filename to be loaded immediately into the associated X509_STORE. type indicates what type of object is expected. This can only be used with a lookup using the implementation X509_LOOKUP_file(3).</p> <p>X509_LOOKUP_add_dir() passes a directory specification from which certificates and CRLs are loaded on demand into the associated X509_STORE. type indicates what type of object is expected. This can only be used with a lookup using the implementation X509_LOOKUP_hash_dir(3).</p> <p>X509_LOOKUP_load_file(), X509_LOOKUP_add_dir(), X509_LOOKUP_add_store(), and X509_LOOKUP_load_store() are implemented as macros that use X509_LOOKUP_ctrl().</p> <p>X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() look up certificates and CRLs in the X509_STORE(3) associated with the X509_LOOKUP using different criteria, where the looked up object is stored in ret. Some of the underlying X509_LOOKUP_METHODs will also cache objects matching the criteria in the associated X509_STORE, which makes it possible to handle cases where the criteria have more than one hit.</p>"},{"location":"man3/X509_LOOKUP/#file-types","title":"File Types","text":"<p>X509_LOOKUP_load_file() and X509_LOOKUP_add_dir() take a type, which can be one of the following:</p> <ul> <li> <p>X509_FILETYPE_PEM</p> <p>The file or files that are loaded are expected to be in PEM format.</p> </li> <li> <p>X509_FILETYPE_ASN1</p> <p>The file or files that are loaded are expected to be in raw DER format.</p> </li> <li> <p>X509_FILETYPE_DEFAULT</p> <p>The default certificate file or directory is used.  In this case, name is ignored.</p> </li> </ul>"},{"location":"man3/X509_LOOKUP/#control-commands","title":"Control Commands","text":"<p>The X509_LOOKUP_METHODs built into OpenSSL recognise the following X509_LOOKUP_ctrl() _cmd_s:</p> <ul> <li> <p>X509_L_FILE_LOAD</p> <p>This is the command that X509_LOOKUP_load_file() uses. The filename is passed in argc, and the type in argl.</p> </li> <li> <p>X509_L_ADD_DIR</p> <p>This is the command that X509_LOOKUP_add_dir() uses. The directory specification is passed in argc, and the type in argl.</p> </li> <li> <p>X509_L_ADD_STORE</p> <p>This is the command that X509_LOOKUP_add_store() uses. The URI is passed in argc.</p> </li> <li> <p>X509_L_LOAD_STORE</p> <p>This is the command that X509_LOOKUP_load_store() uses. The URI is passed in argc.</p> </li> </ul>"},{"location":"man3/X509_LOOKUP/#return-values","title":"RETURN VALUES","text":"<p>X509_LOOKUP_new() returns an X509_LOOKUP pointer when successful, or NULL on error.</p> <p>X509_LOOKUP_init() and X509_LOOKUP_shutdown() return 1 on success, or 0 on error.</p> <p>X509_LOOKUP_ctrl() returns -1 if the X509_LOOKUP doesn't have an associated X509_LOOKUP_METHOD, or 1 if the  doesn't have a control function. Otherwise, it returns what the control function in the X509_LOOKUP_METHOD returns, which is usually 1 on success and 0 in error.</p> <p>X509_LOOKUP_get_store() returns an X509_STORE pointer if there is one, otherwise NULL.</p> <p>X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() all return 0 if there is no X509_LOOKUP_METHOD or that method doesn't implement the corresponding function. Otherwise, it returns what the corresponding function in the X509_LOOKUP_METHOD returns, which is usually 1 on success and 0 in error.</p>"},{"location":"man3/X509_LOOKUP/#see-also","title":"SEE ALSO","text":"<p>X509_LOOKUP_METHOD(3), X509_STORE(3)</p>"},{"location":"man3/X509_LOOKUP/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the Apache License 2.0 (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_LOOKUP_hash_dir/","title":"X509_LOOKUP_hash_dir","text":""},{"location":"man3/X509_LOOKUP_hash_dir/#name","title":"NAME","text":"<p>X509_LOOKUP_hash_dir, X509_LOOKUP_file, X509_load_cert_file, X509_load_crl_file, X509_load_cert_crl_file - Default OpenSSL certificate lookup methods</p>"},{"location":"man3/X509_LOOKUP_hash_dir/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\nX509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);\nX509_LOOKUP_METHOD *X509_LOOKUP_file(void);\n\nint X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);\nint X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);\nint X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);\n</code></pre>"},{"location":"man3/X509_LOOKUP_hash_dir/#description","title":"DESCRIPTION","text":"<p>X509_LOOKUP_hash_dir and X509_LOOKUP_file are two certificate lookup methods to use with X509_STORE, provided by OpenSSL library.</p> <p>Users of the library typically do not need to create instances of these methods manually, they would be created automatically by X509_STORE_load_locations(3) or SSL_CTX_load_verify_locations(3) functions.</p> <p>Internally loading of certificates and CRLs is implemented via functions X509_load_cert_crl_file, X509_load_cert_file and X509_load_crl_file. These functions support parameter type, which can be one of constants FILETYPE_PEM, FILETYPE_ASN1 and FILETYPE_DEFAULT. They load certificates and/or CRLs from specified file into memory cache of X509_STORE objects which given ctx parameter is associated with.</p> <p>Functions X509_load_cert_file and X509_load_crl_file can load both PEM and DER formats depending of type value. Because DER format cannot contain more than one certificate or CRL object (while PEM can contain several concatenated PEM objects) X509_load_cert_crl_file with FILETYPE_ASN1 is equivalent to X509_load_cert_file.</p> <p>Constant FILETYPE_DEFAULT with NULL filename causes these functions to load default certificate store file (see X509_STORE_set_default_paths(3).</p> <p>Functions return number of objects loaded from file or 0 in case of error.</p> <p>Both methods support adding several certificate locations into one X509_STORE.</p> <p>This page documents certificate store formats used by these methods and caching policy.</p>"},{"location":"man3/X509_LOOKUP_hash_dir/#file-method","title":"File Method","text":"<p>The X509_LOOKUP_file method loads all the certificates or CRLs present in a file into memory at the time the file is added as a lookup source.</p> <p>File format is ASCII text which contains concatenated PEM certificates and CRLs.</p> <p>This method should be used by applications which work with a small set of CAs.</p>"},{"location":"man3/X509_LOOKUP_hash_dir/#hashed-directory-method","title":"Hashed Directory Method","text":"<p>X509_LOOKUP_hash_dir is a more advanced method, which loads certificates and CRLs on demand, and caches them in memory once they are loaded. As of OpenSSL 1.0.0, it also checks for newer CRLs upon each lookup, so that newer CRLs are as soon as they appear in the directory.</p> <p>The directory should contain one certificate or CRL per file in PEM format, with a filename of the form hash.N for a certificate, or hash.rN for a CRL. The hash is the value returned by the X509_NAME_hash(3) function applied to the subject name for certificates or issuer name for CRLs. The hash can also be obtained via the -hash option of the x509(1) or crl(1) commands.</p> <p>The .N or .rN suffix is a sequence number that starts at zero, and is incremented consecutively for each certificate or CRL with the same hash value. Gaps in the sequence numbers are not supported, it is assumed that there are no more objects with the same hash beyond the first missing number in the sequence.</p> <p>Sequence numbers make it possible for the directory to contain multiple certificates with same subject name hash value. For example, it is possible to have in the store several certificates with same subject or several CRLs with same issuer (and, for example, different validity period).</p> <p>When checking for new CRLs once one CRL for given hash value is loaded, hash_dir lookup method checks only for certificates with sequence number greater than that of the already cached CRL.</p> <p>Note that the hash algorithm used for subject name hashing changed in OpenSSL 1.0.0, and all certificate stores have to be rehashed when moving from OpenSSL 0.9.8 to 1.0.0.</p> <p>OpenSSL includes a rehash(1) utility which creates symlinks with correct hashed names for all files with .pem suffix in a given directory.</p>"},{"location":"man3/X509_LOOKUP_hash_dir/#return-values","title":"RETURN VALUES","text":"<p>X509_LOOKUP_hash_dir() and X509_LOOKUP_file() always return a valid X509_LOOKUP_METHOD structure.</p> <p>X509_load_cert_file(), X509_load_crl_file() and X509_load_cert_crl_file() return the number of loaded objects or 0 on error.</p>"},{"location":"man3/X509_LOOKUP_hash_dir/#see-also","title":"SEE ALSO","text":"<p>PEM_read_PrivateKey(3), X509_STORE_load_locations(3), X509_store_add_lookup(3), SSL_CTX_load_verify_locations(3), X509_LOOKUP_meth_new(3),</p>"},{"location":"man3/X509_LOOKUP_hash_dir/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_LOOKUP_meth_new/","title":"X509_LOOKUP_meth_new","text":""},{"location":"man3/X509_LOOKUP_meth_new/#name","title":"NAME","text":"<p>X509_LOOKUP_METHOD, X509_LOOKUP_meth_new, X509_LOOKUP_meth_free, X509_LOOKUP_meth_set_new_item, X509_LOOKUP_meth_get_new_item, X509_LOOKUP_meth_set_free, X509_LOOKUP_meth_get_free, X509_LOOKUP_meth_set_init, X509_LOOKUP_meth_get_init, X509_LOOKUP_meth_set_shutdown, X509_LOOKUP_meth_get_shutdown, X509_LOOKUP_ctrl_fn, X509_LOOKUP_meth_set_ctrl, X509_LOOKUP_meth_get_ctrl, X509_LOOKUP_get_by_subject_fn, X509_LOOKUP_meth_set_get_by_subject, X509_LOOKUP_meth_get_get_by_subject, X509_LOOKUP_get_by_issuer_serial_fn, X509_LOOKUP_meth_set_get_by_issuer_serial, X509_LOOKUP_meth_get_get_by_issuer_serial, X509_LOOKUP_get_by_fingerprint_fn, X509_LOOKUP_meth_set_get_by_fingerprint, X509_LOOKUP_meth_get_get_by_fingerprint, X509_LOOKUP_get_by_alias_fn, X509_LOOKUP_meth_set_get_by_alias, X509_LOOKUP_meth_get_get_by_alias, X509_OBJECT_set1_X509, X509_OBJECT_set1_X509_CRL - Routines to build up X509_LOOKUP methods</p>"},{"location":"man3/X509_LOOKUP_meth_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\ntypedef x509_lookup_method_st X509_LOOKUP_METHOD;\n\nX509_LOOKUP_METHOD *X509_LOOKUP_meth_new(const char *name);\nvoid X509_LOOKUP_meth_free(X509_LOOKUP_METHOD *method);\n\nint X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD *method,\n                                  int (*new_item) (X509_LOOKUP *ctx));\nint (*X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method))\n    (X509_LOOKUP *ctx);\n\nint X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD *method,\n                              void (*free) (X509_LOOKUP *ctx));\nvoid (*X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method))\n    (X509_LOOKUP *ctx);\n\nint X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD *method,\n                              int (*init) (X509_LOOKUP *ctx));\nint (*X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method))\n    (X509_LOOKUP *ctx);\n\nint X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD *method,\n                                  int (*shutdown) (X509_LOOKUP *ctx));\nint (*X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method))\n    (X509_LOOKUP *ctx);\n\ntypedef int (*X509_LOOKUP_ctrl_fn)(X509_LOOKUP *ctx, int cmd, const char *argc,\n                                   long argl, char **ret);\nint X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD *method,\n    X509_LOOKUP_ctrl_fn ctrl_fn);\nX509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD *method);\n\ntypedef int (*X509_LOOKUP_get_by_subject_fn)(X509_LOOKUP *ctx,\n                                             X509_LOOKUP_TYPE type,\n                                             X509_NAME *name,\n                                             X509_OBJECT *ret);\nint X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD *method,\n    X509_LOOKUP_get_by_subject_fn fn);\nX509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(\n    const X509_LOOKUP_METHOD *method);\n\ntypedef int (*X509_LOOKUP_get_by_issuer_serial_fn)(X509_LOOKUP *ctx,\n                                                   X509_LOOKUP_TYPE type,\n                                                   X509_NAME *name,\n                                                   ASN1_INTEGER *serial,\n                                                   X509_OBJECT *ret);\nint X509_LOOKUP_meth_set_get_by_issuer_serial(\n    X509_LOOKUP_METHOD *method, X509_LOOKUP_get_by_issuer_serial_fn fn);\nX509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(\n    const X509_LOOKUP_METHOD *method);\n\ntypedef int (*X509_LOOKUP_get_by_fingerprint_fn)(X509_LOOKUP *ctx,\n                                                 X509_LOOKUP_TYPE type,\n                                                 const unsigned char* bytes,\n                                                 int len,\n                                                 X509_OBJECT *ret);\nint X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD *method,\n    X509_LOOKUP_get_by_fingerprint_fn fn);\nX509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(\n    const X509_LOOKUP_METHOD *method);\n\ntypedef int (*X509_LOOKUP_get_by_alias_fn)(X509_LOOKUP *ctx,\n                                           X509_LOOKUP_TYPE type,\n                                           const char *str,\n                                           int len,\n                                           X509_OBJECT *ret);\nint X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD *method,\n    X509_LOOKUP_get_by_alias_fn fn);\nX509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(\n    const X509_LOOKUP_METHOD *method);\n\nint X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj);\nint X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj);\n</code></pre>"},{"location":"man3/X509_LOOKUP_meth_new/#description","title":"DESCRIPTION","text":"<p>The X509_LOOKUP_METHOD type is a structure used for the implementation of new X509_LOOKUP types. It provides a set of functions used by OpenSSL for the implementation of various X509 and X509_CRL lookup capabilities. One instance of an X509_LOOKUP_METHOD can be associated to many instantiations of an X509_LOOKUP structure.</p> <p>X509_LOOKUP_meth_new() creates a new X509_LOOKUP_METHOD structure. It should be given a human-readable string containing a brief description of the lookup method.</p> <p>X509_LOOKUP_meth_free() destroys a X509_LOOKUP_METHOD structure.</p> <p>X509_LOOKUP_get_new_item() and X509_LOOKUP_set_new_item() get and set the function that is called when an X509_LOOKUP object is created with X509_LOOKUP_new(). If an X509_LOOKUP_METHOD requires any per-X509_LOOKUP specific data, the supplied new_item function should allocate this data and invoke X509_LOOKUP_set_method_data(3).</p> <p>X509_LOOKUP_get_free() and X509_LOOKUP_set_free() get and set the function that is used to free any method data that was allocated and set from within new_item function.</p> <p>X509_LOOKUP_meth_get_init() and X509_LOOKUP_meth_set_init() get and set the function that is used to initialize the method data that was set with X509_LOOKUP_set_method_data(3) as part of the new_item routine.</p> <p>X509_LOOKUP_meth_get_shutdown() and X509_LOOKUP_meth_set_shutdown() get and set the function that is used to shut down the method data whose state was previously initialized in the init function.</p> <p>X509_LOOKUP_meth_get_ctrl() and X509_LOOKUP_meth_set_ctrl() get and set a function to be used to handle arbitrary control commands issued by X509_LOOKUP_ctrl(). The control function is given the X509_LOOKUP ctx, along with the arguments passed by X509_LOOKUP_ctrl. cmd is an arbitrary integer that defines some operation. argc is a pointer to an array of characters. argl is an integer. ret, if set, points to a location where any return data should be written to. How argc and argl are used depends entirely on the control function.</p> <p>X509_LOOKUP_set_get_by_subject(), X509_LOOKUP_set_get_by_issuer_serial(), X509_LOOKUP_set_get_by_fingerprint(), X509_LOOKUP_set_get_by_alias() set the functions used to retrieve an X509 or X509_CRL object by the object's subject, issuer, fingerprint, and alias respectively. These functions are given the X509_LOOKUP context, the type of the X509_OBJECT being requested, parameters related to the lookup, and an X509_OBJECT that will receive the requested object.</p> <p>Implementations must add objects they find to the X509_STORE object using X509_STORE_add_cert() or X509_STORE_add_crl().  This increments its reference count.  However, the X509_STORE_CTX_get_by_subject() function also increases the reference count which leads to one too many references being held.  Therefore, applications should additionally call X509_free() or X509_CRL_free() to decrement the reference count again.</p> <p>Implementations should also use either X509_OBJECT_set1_X509() or X509_OBJECT_set1_X509_CRL() to set the result.  Note that this also increments the result's reference count.</p> <p>Any method data that was created as a result of the new_item function set by X509_LOOKUP_meth_set_new_item() can be accessed with X509_LOOKUP_get_method_data(3). The X509_STORE object that owns the X509_LOOKUP may be accessed with X509_LOOKUP_get_store(3). Successful lookups should return 1, and unsuccessful lookups should return 0.</p> <p>X509_LOOKUP_get_get_by_subject(), X509_LOOKUP_get_get_by_issuer_serial(), X509_LOOKUP_get_get_by_fingerprint(), X509_LOOKUP_get_get_by_alias() retrieve the function set by the corresponding setter.</p>"},{"location":"man3/X509_LOOKUP_meth_new/#return-values","title":"RETURN VALUES","text":"<p>The X509_LOOKUP_meth_set functions return 1 on success or 0 on error.</p> <p>The X509_LOOKUP_meth_get functions return the corresponding function pointers.</p>"},{"location":"man3/X509_LOOKUP_meth_new/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_new(3), SSL_CTX_set_cert_store(3)</p>"},{"location":"man3/X509_LOOKUP_meth_new/#history","title":"HISTORY","text":"<p>The functions described here were added in OpenSSL 1.1.0i.</p>"},{"location":"man3/X509_LOOKUP_meth_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_NAME_ENTRY_get_object/","title":"X509_NAME_ENTRY_get_object","text":""},{"location":"man3/X509_NAME_ENTRY_get_object/#name","title":"NAME","text":"<p>X509_NAME_ENTRY_get_object, X509_NAME_ENTRY_get_data, X509_NAME_ENTRY_set_object, X509_NAME_ENTRY_set_data, X509_NAME_ENTRY_create_by_txt, X509_NAME_ENTRY_create_by_NID, X509_NAME_ENTRY_create_by_OBJ - X509_NAME_ENTRY utility functions</p>"},{"location":"man3/X509_NAME_ENTRY_get_object/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nASN1_OBJECT *X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne);\nASN1_STRING *X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne);\n\nint X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj);\nint X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,\n                             const unsigned char *bytes, int len);\n\nX509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne, const char *field,\n                                               int type, const unsigned char *bytes,\n                                               int len);\nX509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,\n                                               int type, const unsigned char *bytes,\n                                               int len);\nX509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,\n                                               const ASN1_OBJECT *obj, int type,\n                                               const unsigned char *bytes, int len);\n</code></pre>"},{"location":"man3/X509_NAME_ENTRY_get_object/#description","title":"DESCRIPTION","text":"<p>X509_NAME_ENTRY_get_object() retrieves the field name of ne in and ASN1_OBJECT structure.</p> <p>X509_NAME_ENTRY_get_data() retrieves the field value of ne in and ASN1_STRING structure.</p> <p>X509_NAME_ENTRY_set_object() sets the field name of ne to obj.</p> <p>X509_NAME_ENTRY_set_data() sets the field value of ne to string type type and value determined by bytes and len.</p> <p>X509_NAME_ENTRY_create_by_txt(), X509_NAME_ENTRY_create_by_NID() and X509_NAME_ENTRY_create_by_OBJ() create and return an X509_NAME_ENTRY structure.</p>"},{"location":"man3/X509_NAME_ENTRY_get_object/#notes","title":"NOTES","text":"<p>X509_NAME_ENTRY_get_object() and X509_NAME_ENTRY_get_data() can be used to examine an X509_NAME_ENTRY function as returned by X509_NAME_get_entry() for example.</p> <p>X509_NAME_ENTRY_create_by_txt(), X509_NAME_ENTRY_create_by_OBJ(), X509_NAME_ENTRY_create_by_NID() and X509_NAME_ENTRY_set_data() are seldom used in practice because X509_NAME_ENTRY structures are almost always part of X509_NAME structures and the corresponding X509_NAME functions are typically used to create and add new entries in a single operation.</p> <p>The arguments of these functions support similar options to the similarly named ones of the corresponding X509_NAME functions such as X509_NAME_add_entry_by_txt(). So for example type can be set to MBSTRING_ASC but in the case of X509_set_data() the field name must be set first so the relevant field information can be looked up internally.</p>"},{"location":"man3/X509_NAME_ENTRY_get_object/#return-values","title":"RETURN VALUES","text":"<p>X509_NAME_ENTRY_get_object() returns a valid ASN1_OBJECT structure if it is set or NULL if an error occurred.</p> <p>X509_NAME_ENTRY_get_data() returns a valid ASN1_STRING structure if it is set or NULL if an error occurred.</p> <p>X509_NAME_ENTRY_set_object() and X509_NAME_ENTRY_set_data() return 1 on success or 0 on error.</p> <p>X509_NAME_ENTRY_create_by_txt(), X509_NAME_ENTRY_create_by_NID() and X509_NAME_ENTRY_create_by_OBJ() return a valid X509_NAME_ENTRY on success or NULL if an error occurred.</p>"},{"location":"man3/X509_NAME_ENTRY_get_object/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), d2i_X509_NAME(3), OBJ_nid2obj(3)</p>"},{"location":"man3/X509_NAME_ENTRY_get_object/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/","title":"X509_NAME_add_entry_by_txt","text":""},{"location":"man3/X509_NAME_add_entry_by_txt/#name","title":"NAME","text":"<p>X509_NAME_add_entry_by_txt, X509_NAME_add_entry_by_OBJ, X509_NAME_add_entry_by_NID, X509_NAME_add_entry, X509_NAME_delete_entry - X509_NAME modification functions</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,\n                               const unsigned char *bytes, int len, int loc, int set);\n\nint X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type,\n                               const unsigned char *bytes, int len, int loc, int set);\n\nint X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,\n                               const unsigned char *bytes, int len, int loc, int set);\n\nint X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne, int loc, int set);\n\nX509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc);\n</code></pre>"},{"location":"man3/X509_NAME_add_entry_by_txt/#description","title":"DESCRIPTION","text":"<p>X509_NAME_add_entry_by_txt(), X509_NAME_add_entry_by_OBJ() and X509_NAME_add_entry_by_NID() add a field whose name is defined by a string field, an object obj or a NID nid respectively. The field value to be added is in bytes of length len. If len is -1 then the field length is calculated internally using strlen(bytes).</p> <p>The type of field is determined by type which can either be a definition of the type of bytes (such as MBSTRING_ASC) or a standard ASN1 type (such as V_ASN1_IA5STRING). The new entry is added to a position determined by loc and set.</p> <p>X509_NAME_add_entry() adds a copy of X509_NAME_ENTRY structure ne to name. The new entry is added to a position determined by loc and set. Since a copy of ne is added ne must be freed up after the call.</p> <p>X509_NAME_delete_entry() deletes an entry from name at position loc. The deleted entry is returned and must be freed up.</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/#notes","title":"NOTES","text":"<p>The use of string types such as MBSTRING_ASC or MBSTRING_UTF8 is strongly recommended for the type parameter. This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards. This is done using ASN1_STRING_set_by_NID().</p> <p>If instead an ASN1 type is used no checks are performed and the supplied data in bytes is used directly.</p> <p>In X509_NAME_add_entry_by_txt() the field string represents the field name using OBJ_txt2obj(field, 0).</p> <p>The loc and set parameters determine where a new entry should be added. For almost all applications loc can be set to -1 and set to 0. This adds a new entry to the end of name as a single valued RelativeDistinguishedName (RDN).</p> <p>loc actually determines the index where the new entry is inserted: if it is -1 it is appended.</p> <p>set determines how the new type is added. If it is zero a new RDN is created.</p> <p>If set is -1 or 1 it is added to the previous or next RDN structure respectively. This will then be a multivalued RDN: since multivalues RDNs are very seldom used set is almost always set to zero.</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/#return-values","title":"RETURN VALUES","text":"<p>X509_NAME_add_entry_by_txt(), X509_NAME_add_entry_by_OBJ(), X509_NAME_add_entry_by_NID() and X509_NAME_add_entry() return 1 for success of 0 if an error occurred.</p> <p>X509_NAME_delete_entry() returns either the deleted X509_NAME_ENTRY structure of NULL if an error occurred.</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/#examples","title":"EXAMPLES","text":"<p>Create an X509_NAME structure:</p> <p>\"C=UK, O=Disorganized Organization, CN=Joe Bloggs\"</p> <pre><code>X509_NAME *nm;\n\nnm = X509_NAME_new();\nif (nm == NULL)\n    /* Some error */\nif (!X509_NAME_add_entry_by_txt(nm, \"C\", MBSTRING_ASC,\n                                \"UK\", -1, -1, 0))\n    /* Error */\nif (!X509_NAME_add_entry_by_txt(nm, \"O\", MBSTRING_ASC,\n                                \"Disorganized Organization\", -1, -1, 0))\n    /* Error */\nif (!X509_NAME_add_entry_by_txt(nm, \"CN\", MBSTRING_ASC,\n                                \"Joe Bloggs\", -1, -1, 0))\n    /* Error */\n</code></pre>"},{"location":"man3/X509_NAME_add_entry_by_txt/#bugs","title":"BUGS","text":"<p>type can still be set to V_ASN1_APP_CHOOSE to use a different algorithm to determine field types. Since this form does not understand multicharacter types, performs no length checks and can result in invalid field types its use is strongly discouraged.</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), d2i_X509_NAME(3)</p>"},{"location":"man3/X509_NAME_add_entry_by_txt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_NAME_get0_der/","title":"X509_NAME_get0_der","text":""},{"location":"man3/X509_NAME_get0_der/#name","title":"NAME","text":"<p>X509_NAME_get0_der - get X509_NAME DER encoding</p>"},{"location":"man3/X509_NAME_get0_der/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_NAME_get0_der(X509_NAME *nm, const unsigned char **pder,\n                       size_t *pderlen)\n</code></pre>"},{"location":"man3/X509_NAME_get0_der/#description","title":"DESCRIPTION","text":"<p>The function X509_NAME_get0_der() returns an internal pointer to the encoding of an X509_NAME structure in *pder and consisting of *pderlen bytes. It is useful for applications that wish to examine the encoding of an X509_NAME structure without copying it.</p>"},{"location":"man3/X509_NAME_get0_der/#return-values","title":"RETURN VALUES","text":"<p>The function X509_NAME_get0_der() returns 1 for success and 0 if an error occurred.</p>"},{"location":"man3/X509_NAME_get0_der/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3)</p>"},{"location":"man3/X509_NAME_get0_der/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_NAME_get_index_by_NID/","title":"X509_NAME_get_index_by_NID","text":""},{"location":"man3/X509_NAME_get_index_by_NID/#name","title":"NAME","text":"<p>X509_NAME_get_index_by_NID, X509_NAME_get_index_by_OBJ, X509_NAME_get_entry, X509_NAME_entry_count, X509_NAME_get_text_by_NID, X509_NAME_get_text_by_OBJ - X509_NAME lookup and enumeration functions</p>"},{"location":"man3/X509_NAME_get_index_by_NID/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos);\nint X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int lastpos);\n\nint X509_NAME_entry_count(const X509_NAME *name);\nX509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name, int loc);\n\nint X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len);\nint X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, char *buf, int len);\n</code></pre>"},{"location":"man3/X509_NAME_get_index_by_NID/#description","title":"DESCRIPTION","text":"<p>These functions allow an X509_NAME structure to be examined. The X509_NAME structure is the same as the Name type defined in RFC2459 (and elsewhere) and used for example in certificate subject and issuer names.</p> <p>X509_NAME_get_index_by_NID() and X509_NAME_get_index_by_OBJ() retrieve the next index matching nid or obj after lastpos. lastpos should initially be set to -1. If there are no more entries -1 is returned. If nid is invalid (doesn't correspond to a valid OID) then -2 is returned.</p> <p>X509_NAME_entry_count() returns the total number of entries in name.</p> <p>X509_NAME_get_entry() retrieves the X509_NAME_ENTRY from name corresponding to index loc. Acceptable values for loc run from 0 to (X509_NAME_entry_count(name) - 1). The value returned is an internal pointer which must not be freed.</p> <p>X509_NAME_get_text_by_NID(), X509_NAME_get_text_by_OBJ() retrieve the \"text\" from the first entry in name which matches nid or obj, if no such entry exists -1 is returned. At most len bytes will be written and the text written to buf will be null terminated. The length of the output string written is returned excluding the terminating null. If buf is &lt;NULL&gt; then the amount of space needed in buf (excluding the final null) is returned.</p>"},{"location":"man3/X509_NAME_get_index_by_NID/#notes","title":"NOTES","text":"<p>X509_NAME_get_text_by_NID() and X509_NAME_get_text_by_OBJ() should be considered deprecated because they have various limitations which make them of minimal use in practice. They can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a multicharacter string type like a BMPString or a UTF8String.</p> <p>For a more general solution X509_NAME_get_index_by_NID() or X509_NAME_get_index_by_OBJ() should be used followed by X509_NAME_get_entry() on any matching indices and then the various X509_NAME_ENTRY utility functions on the result.</p> <p>The list of all relevant NID_* and OBJ_* codes can be found in the source code header files &lt;openssl/obj_mac.h&gt; and/or &lt;openssl/objects.h&gt;.</p> <p>Applications which could pass invalid NIDs to X509_NAME_get_index_by_NID() should check for the return value of -2. Alternatively the NID validity can be determined first by checking OBJ_nid2obj(nid) is not NULL.</p>"},{"location":"man3/X509_NAME_get_index_by_NID/#return-values","title":"RETURN VALUES","text":"<p>X509_NAME_get_index_by_NID() and X509_NAME_get_index_by_OBJ() return the index of the next matching entry or -1 if not found. X509_NAME_get_index_by_NID() can also return -2 if the supplied NID is invalid.</p> <p>X509_NAME_entry_count() returns the total number of entries.</p> <p>X509_NAME_get_entry() returns an X509_NAME pointer to the requested entry or NULL if the index is invalid.</p>"},{"location":"man3/X509_NAME_get_index_by_NID/#examples","title":"EXAMPLES","text":"<p>Process all entries:</p> <pre><code>int i;\nX509_NAME_ENTRY *e;\n\nfor (i = 0; i &lt; X509_NAME_entry_count(nm); i++) {\n    e = X509_NAME_get_entry(nm, i);\n    /* Do something with e */\n}\n</code></pre> <p>Process all commonName entries:</p> <pre><code>int lastpos = -1;\nX509_NAME_ENTRY *e;\n\nfor (;;) {\n    lastpos = X509_NAME_get_index_by_NID(nm, NID_commonName, lastpos);\n    if (lastpos == -1)\n        break;\n    e = X509_NAME_get_entry(nm, lastpos);\n    /* Do something with e */\n}\n</code></pre>"},{"location":"man3/X509_NAME_get_index_by_NID/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), d2i_X509_NAME(3)</p>"},{"location":"man3/X509_NAME_get_index_by_NID/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_NAME_print_ex/","title":"X509_NAME_print_ex","text":""},{"location":"man3/X509_NAME_print_ex/#name","title":"NAME","text":"<p>X509_NAME_print_ex, X509_NAME_print_ex_fp, X509_NAME_print, X509_NAME_oneline - X509_NAME printing routines</p>"},{"location":"man3/X509_NAME_print_ex/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent, unsigned long flags);\nint X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent, unsigned long flags);\nchar *X509_NAME_oneline(const X509_NAME *a, char *buf, int size);\nint X509_NAME_print(BIO *bp, const X509_NAME *name, int obase);\n</code></pre>"},{"location":"man3/X509_NAME_print_ex/#description","title":"DESCRIPTION","text":"<p>X509_NAME_print_ex() prints a human readable version of nm to BIO out. Each line (for multiline formats) is indented by indent spaces. The output format can be extensively customised by use of the flags parameter.</p> <p>X509_NAME_print_ex_fp() is identical to X509_NAME_print_ex() except the output is written to FILE pointer fp.</p> <p>X509_NAME_oneline() prints an ASCII version of a to buf. If buf is NULL then a buffer is dynamically allocated and returned, and size is ignored. Otherwise, at most size bytes will be written, including the ending '\\0', and buf is returned.</p> <p>X509_NAME_print() prints out name to bp indenting each line by obase characters. Multiple lines are used if the output (including indent) exceeds 80 characters.</p>"},{"location":"man3/X509_NAME_print_ex/#notes","title":"NOTES","text":"<p>The functions X509_NAME_oneline() and X509_NAME_print() produce a non standard output form, they don't handle multi character fields and have various quirks and inconsistencies. Their use is strongly discouraged in new applications and they could be deprecated in a future release.</p> <p>Although there are a large number of possible flags for most purposes XN_FLAG_ONELINE, XN_FLAG_MULTILINE or XN_FLAG_RFC2253 will suffice. As noted on the ASN1_STRING_print_ex(3) manual page for UTF8 terminals the ASN1_STRFLGS_ESC_MSB should be unset: so for example XN_FLAG_ONELINE &amp; ~ASN1_STRFLGS_ESC_MSB would be used.</p> <p>The complete set of the flags supported by X509_NAME_print_ex() is listed below.</p> <p>Several options can be ored together.</p> <p>The options XN_FLAG_SEP_COMMA_PLUS, XN_FLAG_SEP_CPLUS_SPC, XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use. Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN. Multi-valued RDNs are currently very rare so the second separator will hardly ever be used.</p> <p>XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators. XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus. XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus. XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively.</p> <p>If XN_FLAG_DN_REV is set the whole DN is printed in reversed order.</p> <p>The fields XN_FLAG_FN_SN, XN_FLAG_FN_LN, XN_FLAG_FN_OID, XN_FLAG_FN_NONE determine how a field name is displayed. It will use the short name (e.g. CN) the long name (e.g. commonName) always use OID numerical form (normally OIDs are only used if the field name is not recognised) and no field name respectively.</p> <p>If XN_FLAG_SPC_EQ is set then spaces will be placed around the '=' character separating field names and values.</p> <p>If XN_FLAG_DUMP_UNKNOWN_FIELDS is set then the encoding of unknown fields is printed instead of the values.</p> <p>If XN_FLAG_FN_ALIGN is set then field names are padded to 20 characters: this is only of use for multiline format.</p> <p>Additionally all the options supported by ASN1_STRING_print_ex() can be used to control how each field value is displayed.</p> <p>In addition a number options can be set for commonly used formats.</p> <p>XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to:  ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS</p> <p>XN_FLAG_ONELINE is a more readable one line format which is the same as:  ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN</p> <p>XN_FLAG_MULTILINE is a multiline format which is the same as:  ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN</p> <p>XN_FLAG_COMPAT uses a format identical to X509_NAME_print(): in fact it calls X509_NAME_print() internally.</p>"},{"location":"man3/X509_NAME_print_ex/#return-values","title":"RETURN VALUES","text":"<p>X509_NAME_oneline() returns a valid string on success or NULL on error.</p> <p>X509_NAME_print() returns 1 on success or 0 on error.</p> <p>X509_NAME_print_ex() and X509_NAME_print_ex_fp() return 1 on success or 0 on error if the XN_FLAG_COMPAT is set, which is the same as X509_NAME_print(). Otherwise, it returns -1 on error or other values on success.</p>"},{"location":"man3/X509_NAME_print_ex/#see-also","title":"SEE ALSO","text":"<p>ASN1_STRING_print_ex(3)</p>"},{"location":"man3/X509_NAME_print_ex/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_PUBKEY_new/","title":"X509_PUBKEY_new","text":""},{"location":"man3/X509_PUBKEY_new/#name","title":"NAME","text":"<p>X509_PUBKEY_new, X509_PUBKEY_free, X509_PUBKEY_set, X509_PUBKEY_get0, X509_PUBKEY_get, d2i_PUBKEY, i2d_PUBKEY, d2i_PUBKEY_bio, d2i_PUBKEY_fp, i2d_PUBKEY_fp, i2d_PUBKEY_bio, X509_PUBKEY_set0_param, X509_PUBKEY_get0_param - SubjectPublicKeyInfo public key functions</p>"},{"location":"man3/X509_PUBKEY_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nX509_PUBKEY *X509_PUBKEY_new(void);\nvoid X509_PUBKEY_free(X509_PUBKEY *a);\n\nint X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey);\nEVP_PKEY *X509_PUBKEY_get0(X509_PUBKEY *key);\nEVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);\n\nEVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length);\nint i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);\n\nEVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);\nEVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);\n\nint i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);\nint i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);\n\nint X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,\n                           int ptype, void *pval,\n                           unsigned char *penc, int penclen);\nint X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,\n                           const unsigned char **pk, int *ppklen,\n                           X509_ALGOR **pa, X509_PUBKEY *pub);\n</code></pre>"},{"location":"man3/X509_PUBKEY_new/#description","title":"DESCRIPTION","text":"<p>The X509_PUBKEY structure represents the ASN.1 SubjectPublicKeyInfo structure defined in RFC5280 and used in certificates and certificate requests.</p> <p>X509_PUBKEY_new() allocates and initializes an X509_PUBKEY structure.</p> <p>X509_PUBKEY_free() frees up X509_PUBKEY structure a. If a is NULL nothing is done.</p> <p>X509_PUBKEY_set() sets the public key in *x to the public key contained in the EVP_PKEY structure pkey. If *x is not NULL any existing public key structure will be freed.</p> <p>X509_PUBKEY_get0() returns the public key contained in key. The returned value is an internal pointer which MUST NOT be freed after use.</p> <p>X509_PUBKEY_get() is similar to X509_PUBKEY_get0() except the reference count on the returned key is incremented so it MUST be freed using EVP_PKEY_free() after use.</p> <p>d2i_PUBKEY() and i2d_PUBKEY() decode and encode an EVP_PKEY structure using SubjectPublicKeyInfo format. They otherwise follow the conventions of other ASN.1 functions such as d2i_X509().</p> <p>d2i_PUBKEY_bio(), d2i_PUBKEY_fp(), i2d_PUBKEY_bio() and i2d_PUBKEY_fp() are similar to d2i_PUBKEY() and i2d_PUBKEY() except they decode or encode using a BIO or FILE pointer.</p> <p>X509_PUBKEY_set0_param() sets the public key parameters of pub. The OID associated with the algorithm is set to aobj. The type of the algorithm parameters is set to type using the structure pval. The encoding of the public key itself is set to the penclen bytes contained in buffer penc. On success ownership of all the supplied parameters is passed to pub so they must not be freed after the call.</p> <p>X509_PUBKEY_get0_param() retrieves the public key parameters from pub, *ppkalg is set to the associated OID and the encoding consists of *ppklen bytes at *pk, *pa is set to the associated AlgorithmIdentifier for the public key. If the value of any of these parameters is not required it can be set to NULL. All of the retrieved pointers are internal and must not be freed after the call.</p>"},{"location":"man3/X509_PUBKEY_new/#notes","title":"NOTES","text":"<p>The X509_PUBKEY functions can be used to encode and decode public keys in a standard format.</p> <p>In many cases applications will not call the X509_PUBKEY functions directly: they will instead call wrapper functions such as X509_get0_pubkey().</p>"},{"location":"man3/X509_PUBKEY_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, X509_PUBKEY_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3).</p> <p>Otherwise it returns a pointer to the newly allocated structure.</p> <p>X509_PUBKEY_free() does not return a value.</p> <p>X509_PUBKEY_get0() and X509_PUBKEY_get() return a pointer to an EVP_PKEY structure or NULL if an error occurs.</p> <p>X509_PUBKEY_set(), X509_PUBKEY_set0_param() and X509_PUBKEY_get0_param() return 1 for success and 0 if an error occurred.</p>"},{"location":"man3/X509_PUBKEY_new/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_get_pubkey(3),</p>"},{"location":"man3/X509_PUBKEY_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_SIG_get0/","title":"X509_SIG_get0","text":""},{"location":"man3/X509_SIG_get0/#name","title":"NAME","text":"<p>X509_SIG_get0, X509_SIG_getm - DigestInfo functions</p>"},{"location":"man3/X509_SIG_get0/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nvoid X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,\n                   const ASN1_OCTET_STRING **pdigest);\nvoid X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg,\n                   ASN1_OCTET_STRING **pdigest,\n</code></pre>"},{"location":"man3/X509_SIG_get0/#description","title":"DESCRIPTION","text":"<p>X509_SIG_get0() returns pointers to the algorithm identifier and digest value in sig. X509_SIG_getm() is identical to X509_SIG_get0() except the pointers returned are not constant and can be modified: for example to initialise them.</p>"},{"location":"man3/X509_SIG_get0/#return-values","title":"RETURN VALUES","text":"<p>X509_SIG_get0() and X509_SIG_getm() return no values.</p>"},{"location":"man3/X509_SIG_get0/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3)</p>"},{"location":"man3/X509_SIG_get0/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_CTX_get_error/","title":"X509_STORE_CTX_get_error","text":""},{"location":"man3/X509_STORE_CTX_get_error/#name","title":"NAME","text":"<p>X509_STORE_CTX_get_error, X509_STORE_CTX_set_error, X509_STORE_CTX_get_error_depth, X509_STORE_CTX_set_error_depth, X509_STORE_CTX_get_current_cert, X509_STORE_CTX_set_current_cert, X509_STORE_CTX_get0_cert, X509_STORE_CTX_get1_chain, X509_verify_cert_error_string - get or set certificate verification status information</p>"},{"location":"man3/X509_STORE_CTX_get_error/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint   X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);\nvoid  X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);\nint   X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);\nvoid  X509_STORE_CTX_set_error_depth(X509_STORE_CTX *ctx, int depth);\nX509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);\nvoid  X509_STORE_CTX_set_current_cert(X509_STORE_CTX *ctx, X509 *x);\nX509 *X509_STORE_CTX_get0_cert(X509_STORE_CTX *ctx);\n\nSTACK_OF(X509) *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);\n\nconst char *X509_verify_cert_error_string(long n);\n</code></pre>"},{"location":"man3/X509_STORE_CTX_get_error/#description","title":"DESCRIPTION","text":"<p>These functions are typically called after X509_verify_cert() has indicated an error or in a verification callback to determine the nature of an error.</p> <p>X509_STORE_CTX_get_error() returns the error code of ctx, see the ERROR CODES section for a full description of all error codes.</p> <p>X509_STORE_CTX_set_error() sets the error code of ctx to s. For example it might be used in a verification callback to set an error based on additional checks.</p> <p>X509_STORE_CTX_get_error_depth() returns the depth of the error. This is a nonnegative integer representing where in the certificate chain the error occurred. If it is zero it occurred in the end entity certificate, one if it is the certificate which signed the end entity certificate and so on.</p> <p>X509_STORE_CTX_set_error_depth() sets the error depth. This can be used in combination with X509_STORE_CTX_set_error() to set the depth at which an error condition was detected.</p> <p>X509_STORE_CTX_get_current_cert() returns the certificate in ctx which caused the error or NULL if no certificate is relevant.</p> <p>X509_STORE_CTX_set_current_cert() sets the certificate x in ctx which caused the error. This value is not intended to remain valid for very long, and remains owned by the caller. It may be examined by a verification callback invoked to handle each error encountered during chain verification and is no longer required after such a callback. If a callback wishes the save the certificate for use after it returns, it needs to increment its reference count via X509_up_ref(3). Once such a saved certificate is no longer needed it can be freed with X509_free(3).</p> <p>X509_STORE_CTX_get0_cert() retrieves an internal pointer to the certificate being verified by the ctx.</p> <p>X509_STORE_CTX_get1_chain() returns a complete validate chain if a previous call to X509_verify_cert() is successful. If the call to X509_verify_cert() is not successful the returned chain may be incomplete or invalid. The returned chain persists after the ctx structure is freed, when it is no longer needed it should be free up using:</p> <pre><code>sk_X509_pop_free(chain, X509_free);\n</code></pre> <p>X509_verify_cert_error_string() returns a human readable error string for verification error n.</p>"},{"location":"man3/X509_STORE_CTX_get_error/#return-values","title":"RETURN VALUES","text":"<p>X509_STORE_CTX_get_error() returns X509_V_OK or an error code.</p> <p>X509_STORE_CTX_get_error_depth() returns a nonnegative error depth.</p> <p>X509_STORE_CTX_get_current_cert() returns the certificate which caused the error or NULL if no certificate is relevant to the error.</p> <p>X509_verify_cert_error_string() returns a human readable error string for verification error n.</p>"},{"location":"man3/X509_STORE_CTX_get_error/#error-codes","title":"ERROR CODES","text":"<p>A list of error codes and messages is shown below.  Some of the error codes are defined but currently never returned: these are described as \"unused\".</p> <ul> <li> <p>X509_V_OK: ok</p> <p>the operation was successful.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate</p> <p>the issuer certificate of a locally looked up certificate could not be found. This normally means the list of trusted certificates is not complete.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL</p> <p>the CRL of a certificate could not be found.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate's signature</p> <p>the certificate signature could not be decrypted. This means that the actual signature value could not be determined rather than it not matching the expected value, this is only meaningful for RSA keys.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's signature</p> <p>the CRL signature could not be decrypted: this means that the actual signature value could not be determined rather than it not matching the expected value. Unused.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key</p> <p>the public key in the certificate SubjectPublicKeyInfo could not be read.</p> </li> <li> <p>X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure</p> <p>the signature of the certificate is invalid.</p> </li> <li> <p>X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure</p> <p>the signature of the certificate is invalid.</p> </li> <li> <p>X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid</p> <p>the certificate is not yet valid: the notBefore date is after the current time.</p> </li> <li> <p>X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired</p> <p>the certificate has expired: that is the notAfter date is before the current time.</p> </li> <li> <p>X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid</p> <p>the CRL is not yet valid.</p> </li> <li> <p>X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired</p> <p>the CRL has expired.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate's notBefore field</p> <p>the certificate notBefore field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate's notAfter field</p> <p>the certificate notAfter field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's lastUpdate field</p> <p>the CRL lastUpdate field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's nextUpdate field</p> <p>the CRL nextUpdate field contains an invalid time.</p> </li> <li> <p>X509_V_ERR_OUT_OF_MEM: out of memory</p> <p>an error occurred trying to allocate memory. This should never happen.</p> </li> <li> <p>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate</p> <p>the passed certificate is self signed and the same certificate cannot be found in the list of trusted certificates.</p> </li> <li> <p>X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain</p> <p>the certificate chain could be built up using the untrusted certificates but the root could not be found locally.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate</p> <p>the issuer certificate could not be found: this occurs if the issuer certificate of an untrusted certificate cannot be found.</p> </li> <li> <p>X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate</p> <p>no signatures could be verified because the chain contains only one certificate and it is not self signed.</p> </li> <li> <p>X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long</p> <p>the certificate chain length is greater than the supplied maximum depth. Unused.</p> </li> <li> <p>X509_V_ERR_CERT_REVOKED: certificate revoked</p> <p>the certificate has been revoked.</p> </li> <li> <p>X509_V_ERR_INVALID_CA: invalid CA certificate</p> <p>a CA certificate is invalid. Either it is not a CA or its extensions are not consistent with the supplied purpose.</p> </li> <li> <p>X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded</p> <p>the basicConstraints path-length parameter has been exceeded.</p> </li> <li> <p>X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose</p> <p>the supplied certificate cannot be used for the specified purpose.</p> </li> <li> <p>X509_V_ERR_CERT_UNTRUSTED: certificate not trusted</p> <p>the root CA is not marked as trusted for the specified purpose.</p> </li> <li> <p>X509_V_ERR_CERT_REJECTED: certificate rejected</p> <p>the root CA is marked to reject the specified purpose.</p> </li> <li> <p>X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch</p> <p>the current candidate issuer certificate was rejected because its subject name did not match the issuer name of the current certificate. This is only set if issuer check debugging is enabled it is used for status notification and is not in itself an error.</p> </li> <li> <p>X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch</p> <p>the current candidate issuer certificate was rejected because its subject key identifier was present and did not match the authority key identifier current certificate. This is only set if issuer check debugging is enabled it is used for status notification and is not in itself an error.</p> </li> <li> <p>X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch</p> <p>the current candidate issuer certificate was rejected because its issuer name and serial number was present and did not match the authority key identifier of the current certificate. This is only set if issuer check debugging is enabled it is used for status notification and is not in itself an error.</p> </li> <li> <p>X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing</p> <p>the current candidate issuer certificate was rejected because its keyUsage extension does not permit certificate signing. This is only set if issuer check debugging is enabled it is used for status notification and is not in itself an error.</p> </li> <li> <p>X509_V_ERR_INVALID_EXTENSION: invalid or inconsistent certificate extension</p> <p>A certificate extension had an invalid value (for example an incorrect encoding) or some value inconsistent with other extensions.</p> </li> <li> <p>X509_V_ERR_INVALID_POLICY_EXTENSION: invalid or inconsistent certificate policy extension</p> <p>A certificate policies extension had an invalid value (for example an incorrect encoding) or some value inconsistent with other extensions. This error only occurs if policy processing is enabled.</p> </li> <li> <p>X509_V_ERR_NO_EXPLICIT_POLICY: no explicit policy</p> <p>The verification flags were set to require and explicit policy but none was present.</p> </li> <li> <p>X509_V_ERR_DIFFERENT_CRL_SCOPE: Different CRL scope</p> <p>The only CRLs that could be found did not match the scope of the certificate.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: Unsupported extension feature</p> <p>Some feature of a certificate extension is not supported. Unused.</p> </li> <li> <p>X509_V_ERR_PERMITTED_VIOLATION: permitted subtree violation</p> <p>A name constraint violation occurred in the permitted subtrees.</p> </li> <li> <p>X509_V_ERR_EXCLUDED_VIOLATION: excluded subtree violation</p> <p>A name constraint violation occurred in the excluded subtrees.</p> </li> <li> <p>X509_V_ERR_SUBTREE_MINMAX: name constraints minimum and maximum not supported</p> <p>A certificate name constraints extension included a minimum or maximum field: this is not supported.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: unsupported name constraint type</p> <p>An unsupported name constraint type was encountered. OpenSSL currently only supports directory name, DNS name, email and URI types.</p> </li> <li> <p>X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: unsupported or invalid name constraint syntax</p> <p>The format of the name constraint is not recognised: for example an email address format of a form not mentioned in RFC3280. This could be caused by a garbage extension or some new feature not currently supported.</p> </li> <li> <p>X509_V_ERR_CRL_PATH_VALIDATION_ERROR: CRL path validation error</p> <p>An error occurred when attempting to verify the CRL path. This error can only happen if extended CRL checking is enabled.</p> </li> <li> <p>X509_V_ERR_APPLICATION_VERIFICATION: application verification failure</p> <p>an application specific error. This will never be returned unless explicitly set by an application.</p> </li> </ul>"},{"location":"man3/X509_STORE_CTX_get_error/#notes","title":"NOTES","text":"<p>The above functions should be used instead of directly referencing the fields in the X509_VERIFY_CTX structure.</p> <p>In versions of OpenSSL before 1.0 the current certificate returned by X509_STORE_CTX_get_current_cert() was never NULL. Applications should check the return value before printing out any debugging information relating to the current certificate.</p> <p>If an unrecognised error code is passed to X509_verify_cert_error_string() the numerical value of the unknown code is returned in a static buffer. This is not thread safe but will never happen unless an invalid code is passed.</p>"},{"location":"man3/X509_STORE_CTX_get_error/#see-also","title":"SEE ALSO","text":"<p>X509_verify_cert(3), X509_up_ref(3), X509_free(3).</p>"},{"location":"man3/X509_STORE_CTX_get_error/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2009-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_CTX_new/","title":"X509_STORE_CTX_new","text":""},{"location":"man3/X509_STORE_CTX_new/#name","title":"NAME","text":"<p>X509_STORE_CTX_new, X509_STORE_CTX_cleanup, X509_STORE_CTX_free, X509_STORE_CTX_init, X509_STORE_CTX_set0_trusted_stack, X509_STORE_CTX_set_cert, X509_STORE_CTX_set0_crls, X509_STORE_CTX_get0_chain, X509_STORE_CTX_set0_verified_chain, X509_STORE_CTX_get0_param, X509_STORE_CTX_set0_param, X509_STORE_CTX_get0_untrusted, X509_STORE_CTX_set0_untrusted, X509_STORE_CTX_get_num_untrusted, X509_STORE_CTX_set_default, X509_STORE_CTX_set_verify, X509_STORE_CTX_verify_fn, X509_STORE_CTX_set_purpose, X509_STORE_CTX_set_trust, X509_STORE_CTX_purpose_inherit - X509_STORE_CTX initialisation</p>"},{"location":"man3/X509_STORE_CTX_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\nX509_STORE_CTX *X509_STORE_CTX_new(void);\nvoid X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);\nvoid X509_STORE_CTX_free(X509_STORE_CTX *ctx);\n\nint X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,\n                        X509 *x509, STACK_OF(X509) *chain);\n\nvoid X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);\n\nvoid X509_STORE_CTX_set_cert(X509_STORE_CTX *ctx, X509 *x);\nSTACK_OF(X509) *X509_STORE_CTX_get0_chain(X509_STORE_CTX *ctx);\nvoid X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX *ctx, STACK_OF(X509) *chain);\nvoid X509_STORE_CTX_set0_crls(X509_STORE_CTX *ctx, STACK_OF(X509_CRL) *sk);\n\nX509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);\nvoid X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);\nint X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name);\n\nSTACK_OF(X509)* X509_STORE_CTX_get0_untrusted(X509_STORE_CTX *ctx);\nvoid X509_STORE_CTX_set0_untrusted(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);\n\nint X509_STORE_CTX_get_num_untrusted(X509_STORE_CTX *ctx);\n\ntypedef int (*X509_STORE_CTX_verify_fn)(X509_STORE_CTX *);\nvoid X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx, X509_STORE_CTX_verify_fn verify);\n\nint X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);\nint X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);\nint X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,\n                                   int purpose, int trust);\n</code></pre>"},{"location":"man3/X509_STORE_CTX_new/#description","title":"DESCRIPTION","text":"<p>These functions initialise an X509_STORE_CTX structure for subsequent use by X509_verify_cert().</p> <p>X509_STORE_CTX_new() returns a newly initialised X509_STORE_CTX structure.</p> <p>X509_STORE_CTX_cleanup() internally cleans up an X509_STORE_CTX structure. The context can then be reused with a new call to X509_STORE_CTX_init().</p> <p>X509_STORE_CTX_free() completely frees up ctx. After this call ctx is no longer valid. If ctx is NULL nothing is done.</p> <p>X509_STORE_CTX_init() sets up ctx for a subsequent verification operation. It must be called before each call to X509_verify_cert(), i.e. a ctx is only good for one call to X509_verify_cert(); if you want to verify a second certificate with the same ctx then you must call X509_STORE_CTX_cleanup() and then X509_STORE_CTX_init() again before the second call to X509_verify_cert(). The trusted certificate store is set to store, the end entity certificate to be verified is set to x509 and a set of additional certificates (which will be untrusted but may be used to build the chain) in chain. Any or all of the store, x509 and chain parameters can be NULL.</p> <p>X509_STORE_CTX_set0_trusted_stack() sets the set of trusted certificates of ctx to sk. This is an alternative way of specifying trusted certificates instead of using an X509_STORE.</p> <p>X509_STORE_CTX_set_cert() sets the certificate to be verified in ctx to x.</p> <p>X509_STORE_CTX_set0_verified_chain() sets the validated chain used by ctx to be chain. Ownership of the chain is transferred to ctx and should not be free'd by the caller. X509_STORE_CTX_get0_chain() returns the internal pointer used by the ctx that contains the validated chain.</p> <p>X509_STORE_CTX_set0_crls() sets a set of CRLs to use to aid certificate verification to sk. These CRLs will only be used if CRL verification is enabled in the associated X509_VERIFY_PARAM structure. This might be used where additional \"useful\" CRLs are supplied as part of a protocol, for example in a PKCS#7 structure.</p> <p>X509_STORE_CTX_get0_param() retrieves an internal pointer to the verification parameters associated with ctx.</p> <p>X509_STORE_CTX_get0_untrusted() retrieves an internal pointer to the stack of untrusted certificates associated with ctx.</p> <p>X509_STORE_CTX_set0_untrusted() sets the internal point to the stack of untrusted certificates associated with ctx to sk.</p> <p>X509_STORE_CTX_set0_param() sets the internal verification parameter pointer to param. After this call param should not be used.</p> <p>X509_STORE_CTX_set_default() looks up and sets the default verification method to name. This uses the function X509_VERIFY_PARAM_lookup() to find an appropriate set of parameters from name.</p> <p>X509_STORE_CTX_get_num_untrusted() returns the number of untrusted certificates that were used in building the chain following a call to X509_verify_cert().</p> <p>X509_STORE_CTX_set_verify() provides the capability for overriding the default verify function. This function is responsible for verifying chain signatures and expiration times.</p> <p>A verify function is defined as an X509_STORE_CTX_verify type which has the following signature:</p> <pre><code>int (*verify)(X509_STORE_CTX *);\n</code></pre> <p>This function should receive the current X509_STORE_CTX as a parameter and return 1 on success or 0 on failure.</p> <p>X509 certificates may contain information about what purposes keys contained within them can be used for. For example \"TLS WWW Server Authentication\" or \"Email Protection\". This \"key usage\" information is held internally to the certificate itself. In addition the trust store containing trusted certificates can declare what purposes we trust different certificates for. This \"trust\" information is not held within the certificate itself but is \"meta\" information held alongside it. This \"meta\" information is associated with the certificate after it is issued and could be determined by a system administrator. For example a certificate might declare that it is suitable for use for both \"TLS WWW Server Authentication\" and \"TLS Client Authentication\", but a system administrator might only trust it for the former. An X.509 certificate extension exists that can record extended key usage information to supplement the purpose information described above. This extended mechanism is arbitrarily extensible and not well suited for a generic library API; applications that need to validate extended key usage information in certifiates will need to define a custom \"purpose\" (see below) or supply a nondefault verification callback (X509_STORE_set_verify_cb_func(3)).</p> <p>X509_STORE_CTX_set_purpose() sets the purpose for the target certificate being verified in the ctx. Built-in available values for the purpose argument are X509_PURPOSE_SSL_CLIENT, X509_PURPOSE_SSL_SERVER, X509_PURPOSE_NS_SSL_SERVER, X509_PURPOSE_SMIME_SIGN, X509_PURPOSE_SMIME_ENCRYPT, X509_PURPOSE_CRL_SIGN, X509_PURPOSE_ANY, X509_PURPOSE_OCSP_HELPER and X509_PURPOSE_TIMESTAMP_SIGN. It is also possible to create a custom purpose value. Setting a purpose will ensure that the key usage declared within certificates in the chain being verified is consistent with that purpose as well as, potentially, other checks. Every purpose also has an associated default trust value which will also be set at the same time. During verification this trust setting will be verified to check it is consistent with the trust set by the system administrator for certificates in the chain.</p> <p>X509_STORE_CTX_set_trust() sets the trust value for the target certificate being verified in the ctx. Built-in available values for the trust argument are X509_TRUST_COMPAT, X509_TRUST_SSL_CLIENT, X509_TRUST_SSL_SERVER, X509_TRUST_EMAIL, X509_TRUST_OBJECT_SIGN, X509_TRUST_OCSP_SIGN, X509_TRUST_OCSP_REQUEST and X509_TRUST_TSA. It is also possible to create a custom trust value. Since X509_STORE_CTX_set_purpose() also sets the trust value it is normally sufficient to only call that function. If both are called then X509_STORE_CTX_set_trust() should be called after X509_STORE_CTX_set_purpose() since the trust setting of the last call will be used.</p> <p>It should not normally be necessary for end user applications to call X509_STORE_CTX_purpose_inherit() directly. Typically applications should call X509_STORE_CTX_set_purpose() or X509_STORE_CTX_set_trust() instead. Using this function it is possible to set the purpose and trust values for the ctx at the same time. Both ctx and its internal verification parameter pointer must not be NULL. The def_purpose and purpose arguments can have the same purpose values as described for X509_STORE_CTX_set_purpose() above. The trust argument can have the same trust values as described in X509_STORE_CTX_set_trust() above. Any of the def_purpose, purpose or trust values may also have the value 0 to indicate that the supplied parameter should be ignored. After calling this function the purpose to be used for verification is set from the purpose argument unless the purpose was already set in ctx before, and the trust is set from the trust argument unless the trust was already set in ctx before. If trust is 0 then the trust value will be set from the default trust value for purpose. If the default trust value for the purpose is X509_TRUST_DEFAULT and trust is 0 then the default trust value associated with the def_purpose value is used for the trust setting instead.</p>"},{"location":"man3/X509_STORE_CTX_new/#notes","title":"NOTES","text":"<p>The certificates and CRLs in a store are used internally and should not be freed up until after the associated X509_STORE_CTX is freed.</p>"},{"location":"man3/X509_STORE_CTX_new/#bugs","title":"BUGS","text":"<p>The certificates and CRLs in a context are used internally and should not be freed up until after the associated X509_STORE_CTX is freed. Copies should be made or reference counts increased instead.</p>"},{"location":"man3/X509_STORE_CTX_new/#return-values","title":"RETURN VALUES","text":"<p>X509_STORE_CTX_new() returns a newly allocated context or NULL if an error occurred.</p> <p>X509_STORE_CTX_init() returns 1 for success or 0 if an error occurred.</p> <p>X509_STORE_CTX_get0_param() returns a pointer to an X509_VERIFY_PARAM structure or NULL if an error occurred.</p> <p>X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.</p> <p>X509_STORE_CTX_set_default() returns 1 for success or 0 if an error occurred.</p> <p>X509_STORE_CTX_get_num_untrusted() returns the number of untrusted certificates used.</p>"},{"location":"man3/X509_STORE_CTX_new/#see-also","title":"SEE ALSO","text":"<p>X509_verify_cert(3) X509_VERIFY_PARAM_set_flags(3)</p>"},{"location":"man3/X509_STORE_CTX_new/#history","title":"HISTORY","text":"<p>The X509_STORE_CTX_set0_crls() function was added in OpenSSL 1.0.0. The X509_STORE_CTX_get_num_untrusted() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_STORE_CTX_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2009-2022 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/","title":"X509_STORE_CTX_set_verify_cb","text":""},{"location":"man3/X509_STORE_CTX_set_verify_cb/#name","title":"NAME","text":"<p>X509_STORE_CTX_get_cleanup, X509_STORE_CTX_get_lookup_crls, X509_STORE_CTX_get_lookup_certs, X509_STORE_CTX_get_check_policy, X509_STORE_CTX_get_cert_crl, X509_STORE_CTX_get_check_crl, X509_STORE_CTX_get_get_crl, X509_STORE_CTX_get_check_revocation, X509_STORE_CTX_get_check_issued, X509_STORE_CTX_get_get_issuer, X509_STORE_CTX_get_verify_cb, X509_STORE_CTX_set_verify_cb, X509_STORE_CTX_verify_cb - get and set verification callback</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\ntypedef int (*X509_STORE_CTX_verify_cb)(int, X509_STORE_CTX *);\n\nX509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,\n                                  X509_STORE_CTX_verify_cb verify_cb);\n\nX509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(X509_STORE_CTX *ctx);\nX509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(X509_STORE_CTX *ctx);\nX509_STORE_CTX_check_revocation_fn X509_STORE_CTX_get_check_revocation(X509_STORE_CTX *ctx);\nX509_STORE_CTX_get_crl_fn X509_STORE_CTX_get_get_crl(X509_STORE_CTX *ctx);\nX509_STORE_CTX_check_crl_fn X509_STORE_CTX_get_check_crl(X509_STORE_CTX *ctx);\nX509_STORE_CTX_cert_crl_fn X509_STORE_CTX_get_cert_crl(X509_STORE_CTX *ctx);\nX509_STORE_CTX_check_policy_fn X509_STORE_CTX_get_check_policy(X509_STORE_CTX *ctx);\nX509_STORE_CTX_lookup_certs_fn X509_STORE_CTX_get_lookup_certs(X509_STORE_CTX *ctx);\nX509_STORE_CTX_lookup_crls_fn X509_STORE_CTX_get_lookup_crls(X509_STORE_CTX *ctx);\nX509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(X509_STORE_CTX *ctx);\n</code></pre>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#description","title":"DESCRIPTION","text":"<p>X509_STORE_CTX_set_verify_cb() sets the verification callback of ctx to verify_cb overwriting any existing callback.</p> <p>The verification callback can be used to customise the operation of certificate verification, either by overriding error conditions or logging errors for debugging purposes.</p> <p>However, a verification callback is not essential and the default operation is often sufficient.</p> <p>The ok parameter to the callback indicates the value the callback should return to retain the default behaviour. If it is zero then an error condition is indicated. If it is 1 then no error occurred. If the flag X509_V_FLAG_NOTIFY_POLICY is set then ok is set to 2 to indicate the policy checking is complete.</p> <p>The ctx parameter to the callback is the X509_STORE_CTX structure that is performing the verification operation. A callback can examine this structure and receive additional information about the error, for example by calling X509_STORE_CTX_get_current_cert(). Additional application data can be passed to the callback via the ex_data mechanism.</p> <p>X509_STORE_CTX_get_verify_cb() returns the value of the current callback for the specific ctx.</p> <p>X509_STORE_CTX_get_get_issuer(), X509_STORE_CTX_get_check_issued(), X509_STORE_CTX_get_check_revocation(), X509_STORE_CTX_get_get_crl(), X509_STORE_CTX_get_check_crl(), X509_STORE_CTX_get_cert_crl(), X509_STORE_CTX_get_check_policy(), X509_STORE_CTX_get_lookup_certs(), X509_STORE_CTX_get_lookup_crls() and X509_STORE_CTX_get_cleanup() return the function pointers cached from the corresponding X509_STORE, please see X509_STORE_set_verify(3) for more information.</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#warnings","title":"WARNINGS","text":"<p>In general a verification callback should NOT unconditionally return 1 in all circumstances because this will allow verification to succeed no matter what the error. This effectively removes all security from the application because any certificate (including untrusted generated ones) will be accepted.</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#notes","title":"NOTES","text":"<p>The verification callback can be set and inherited from the parent structure performing the operation. In some cases (such as S/MIME verification) the X509_STORE_CTX structure is created and destroyed internally and the only way to set a custom verification callback is by inheriting it from the associated X509_STORE.</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#return-values","title":"RETURN VALUES","text":"<p>X509_STORE_CTX_set_verify_cb() does not return a value.</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#examples","title":"EXAMPLES","text":"<p>Default callback operation:</p> <pre><code>int verify_callback(int ok, X509_STORE_CTX *ctx) {\n    return ok;\n}\n</code></pre> <p>Simple example, suppose a certificate in the chain is expired and we wish to continue after this error:</p> <pre><code>int verify_callback(int ok, X509_STORE_CTX *ctx) {\n    /* Tolerate certificate expiration */\n    if (X509_STORE_CTX_get_error(ctx) == X509_V_ERR_CERT_HAS_EXPIRED)\n        return 1;\n    /* Otherwise don't override */\n    return ok;\n}\n</code></pre> <p>More complex example, we don't wish to continue after any certificate has expired just one specific case:</p> <pre><code>int verify_callback(int ok, X509_STORE_CTX *ctx)\n{\n    int err = X509_STORE_CTX_get_error(ctx);\n    X509 *err_cert = X509_STORE_CTX_get_current_cert(ctx);\n\n    if (err == X509_V_ERR_CERT_HAS_EXPIRED) {\n        if (check_is_acceptable_expired_cert(err_cert)\n            return 1;\n    }\n    return ok;\n}\n</code></pre> <p>Full featured logging callback. In this case the bio_err is assumed to be a global logging BIO, an alternative would to store a BIO in ctx using ex_data.</p> <pre><code>int verify_callback(int ok, X509_STORE_CTX *ctx)\n{\n    X509 *err_cert;\n    int err, depth;\n\n    err_cert = X509_STORE_CTX_get_current_cert(ctx);\n    err = X509_STORE_CTX_get_error(ctx);\n    depth = X509_STORE_CTX_get_error_depth(ctx);\n\n    BIO_printf(bio_err, \"depth=%d \", depth);\n    if (err_cert) {\n        X509_NAME_print_ex(bio_err, X509_get_subject_name(err_cert),\n                           0, XN_FLAG_ONELINE);\n        BIO_puts(bio_err, \"\\n\");\n    }\n    else\n        BIO_puts(bio_err, \"&lt;no cert&gt;\\n\");\n    if (!ok)\n        BIO_printf(bio_err, \"verify error:num=%d:%s\\n\", err,\n                   X509_verify_cert_error_string(err));\n    switch (err) {\n    case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:\n        BIO_puts(bio_err, \"issuer= \");\n        X509_NAME_print_ex(bio_err, X509_get_issuer_name(err_cert),\n                           0, XN_FLAG_ONELINE);\n        BIO_puts(bio_err, \"\\n\");\n        break;\n    case X509_V_ERR_CERT_NOT_YET_VALID:\n    case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:\n        BIO_printf(bio_err, \"notBefore=\");\n        ASN1_TIME_print(bio_err, X509_get_notBefore(err_cert));\n        BIO_printf(bio_err, \"\\n\");\n        break;\n    case X509_V_ERR_CERT_HAS_EXPIRED:\n    case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:\n        BIO_printf(bio_err, \"notAfter=\");\n        ASN1_TIME_print(bio_err, X509_get_notAfter(err_cert));\n        BIO_printf(bio_err, \"\\n\");\n        break;\n    case X509_V_ERR_NO_EXPLICIT_POLICY:\n        policies_print(bio_err, ctx);\n        break;\n    }\n    if (err == X509_V_OK &amp;&amp; ok == 2)\n        /* print out policies */\n\n    BIO_printf(bio_err, \"verify return:%d\\n\", ok);\n    return(ok);\n}\n</code></pre>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_CTX_get_error(3) X509_STORE_set_verify_cb_func(3) X509_STORE_CTX_get_ex_new_index(3)</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#history","title":"HISTORY","text":"<p>The X509_STORE_CTX_get_get_issuer(), X509_STORE_CTX_get_check_issued(), X509_STORE_CTX_get_check_revocation(), X509_STORE_CTX_get_get_crl(), X509_STORE_CTX_get_check_crl(), X509_STORE_CTX_get_cert_crl(), X509_STORE_CTX_get_check_policy(), X509_STORE_CTX_get_lookup_certs(), X509_STORE_CTX_get_lookup_crls() and X509_STORE_CTX_get_cleanup() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_STORE_CTX_set_verify_cb/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2009-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_add_cert/","title":"X509_STORE_add_cert","text":""},{"location":"man3/X509_STORE_add_cert/#name","title":"NAME","text":"<p>X509_STORE, X509_STORE_add_cert, X509_STORE_add_crl, X509_STORE_set_depth, X509_STORE_set_flags, X509_STORE_set_purpose, X509_STORE_set_trust, X509_STORE_add_lookup, X509_STORE_load_locations, X509_STORE_set_default_paths - X509_STORE manipulation</p>"},{"location":"man3/X509_STORE_add_cert/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\ntypedef x509_store_st X509_STORE;\n\nint X509_STORE_add_cert(X509_STORE *ctx, X509 *x);\nint X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);\nint X509_STORE_set_depth(X509_STORE *store, int depth);\nint X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);\nint X509_STORE_set_purpose(X509_STORE *ctx, int purpose);\nint X509_STORE_set_trust(X509_STORE *ctx, int trust);\n\nX509_LOOKUP *X509_STORE_add_lookup(X509_STORE *store,\n                                   X509_LOOKUP_METHOD *meth);\n\nint X509_STORE_load_locations(X509_STORE *ctx,\n                              const char *file, const char *dir);\nint X509_STORE_set_default_paths(X509_STORE *ctx);\n</code></pre>"},{"location":"man3/X509_STORE_add_cert/#description","title":"DESCRIPTION","text":"<p>The X509_STORE structure is intended to be a consolidated mechanism for holding information about X.509 certificates and CRLs, and constructing and validating chains of certificates terminating in trusted roots. It admits multiple lookup mechanisms and efficient scaling performance with large numbers of certificates, and a great deal of flexibility in how validation and policy checks are performed.</p> <p>X509_STORE_new(3) creates an empty X509_STORE structure, which contains no information about trusted certificates or where such certificates are located on disk, and is generally not usable.  Normally, trusted certificates will be added to the X509_STORE to prepare it for use, via mechanisms such as X509_STORE_add_lookup() and X509_LOOKUP_file(), or PEM_read_bio_X509_AUX() and X509_STORE_add_cert().  CRLs can also be added, and many behaviors configured as desired.</p> <p>Once the X509_STORE is suitably configured, X509_STORE_CTX_new() is used to instantiate a single-use X509_STORE_CTX for each chain-building and verification operation.  That process includes providing the end-entity certificate to be verified and an additional set of untrusted certificates that may be used in chain-building.  As such, it is expected that the certificates included in the X509_STORE are certificates that represent trusted entities such as root certificate authorities (CAs). OpenSSL represents these trusted certificates internally as X509 objects with an associated X509_CERT_AUX, as are produced by PEM_read_bio_X509_AUX() and similar routines that refer to X509_AUX. The public interfaces that operate on such trusted certificates still operate on pointers to X509 objects, though.</p> <p>X509_STORE_add_cert() and X509_STORE_add_crl() add the respective object to the X509_STORE's local storage.  Untrusted objects should not be added in this way.  The added object's reference count is incremented by one, hence the caller retains ownership of the object and needs to free it when it is no longer needed.</p> <p>X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), and X509_STORE_set1_param() set the default values for the corresponding values used in certificate chain validation.  Their behavior is documented in the corresponding X509_VERIFY_PARAM manual pages, e.g., X509_VERIFY_PARAM_set_depth(3).</p> <p>X509_STORE_add_lookup() finds or creates a X509_LOOKUP(3) with the X509_LOOKUP_METHOD(3) meth and adds it to the X509_STORE store.  This also associates the X509_STORE with the lookup, so X509_LOOKUP functions can look up objects in that store.</p> <p>X509_STORE_load_locations() loads trusted certificate(s) into an X509_STORE from a given file and/or directory path.  It is permitted to specify just a file, just a directory, or both paths.  The certificates in the directory must be in hashed form, as documented in X509_LOOKUP_hash_dir(3).</p> <p>X509_STORE_set_default_paths() is somewhat misnamed, in that it does not set what default paths should be used for loading certificates.  Instead, it loads certificates into the X509_STORE from the hardcoded default paths.</p>"},{"location":"man3/X509_STORE_add_cert/#return-values","title":"RETURN VALUES","text":"<p>X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_locations(), and X509_STORE_set_default_paths() return 1 on success or 0 on failure.</p> <p>X509_STORE_add_lookup() returns the found or created X509_LOOKUP(3), or NULL on error.</p>"},{"location":"man3/X509_STORE_add_cert/#see-also","title":"SEE ALSO","text":"<p>X509_LOOKUP_hash_dir(3). X509_VERIFY_PARAM_set_depth(3). X509_STORE_new(3), X509_STORE_get0_param(3)</p>"},{"location":"man3/X509_STORE_add_cert/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_get0_param/","title":"X509_STORE_get0_param","text":""},{"location":"man3/X509_STORE_get0_param/#name","title":"NAME","text":"<p>X509_STORE_get0_param, X509_STORE_set1_param, X509_STORE_get0_objects - X509_STORE setter and getter functions</p>"},{"location":"man3/X509_STORE_get0_param/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\nX509_VERIFY_PARAM *X509_STORE_get0_param(X509_STORE *ctx);\nint X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);\nSTACK_OF(X509_OBJECT) *X509_STORE_get0_objects(X509_STORE *ctx);\n</code></pre>"},{"location":"man3/X509_STORE_get0_param/#description","title":"DESCRIPTION","text":"<p>X509_STORE_set1_param() sets the verification parameters to pm for ctx.</p> <p>X509_STORE_get0_param() retrieves an internal pointer to the verification parameters for ctx. The returned pointer must not be freed by the calling application</p> <p>X509_STORE_get0_objects() retrieve an internal pointer to the store's X509 object cache. The cache contains X509 and X509_CRL objects. The returned pointer must not be freed by the calling application.</p>"},{"location":"man3/X509_STORE_get0_param/#return-values","title":"RETURN VALUES","text":"<p>X509_STORE_get0_param() returns a pointer to an X509_VERIFY_PARAM structure.</p> <p>X509_STORE_set1_param() returns 1 for success and 0 for failure.</p> <p>X509_STORE_get0_objects() returns a pointer to a stack of X509_OBJECT.</p>"},{"location":"man3/X509_STORE_get0_param/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_new(3)</p>"},{"location":"man3/X509_STORE_get0_param/#history","title":"HISTORY","text":"<p>X509_STORE_get0_param and X509_STORE_get0_objects were added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_STORE_get0_param/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_new/","title":"X509_STORE_new","text":""},{"location":"man3/X509_STORE_new/#name","title":"NAME","text":"<p>X509_STORE_new, X509_STORE_up_ref, X509_STORE_free, X509_STORE_lock, X509_STORE_unlock - X509_STORE allocation, freeing and locking functions</p>"},{"location":"man3/X509_STORE_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\nX509_STORE *X509_STORE_new(void);\nvoid X509_STORE_free(X509_STORE *v);\nint X509_STORE_lock(X509_STORE *v);\nint X509_STORE_unlock(X509_STORE *v);\nint X509_STORE_up_ref(X509_STORE *v);\n</code></pre>"},{"location":"man3/X509_STORE_new/#description","title":"DESCRIPTION","text":"<p>The X509_STORE_new() function returns a new X509_STORE.</p> <p>X509_STORE_up_ref() increments the reference count associated with the X509_STORE object.</p> <p>X509_STORE_lock() locks the store from modification by other threads, X509_STORE_unlock() unlocks it.</p> <p>X509_STORE_free() frees up a single X509_STORE object.</p>"},{"location":"man3/X509_STORE_new/#return-values","title":"RETURN VALUES","text":"<p>X509_STORE_new() returns a newly created X509_STORE or NULL if the call fails.</p> <p>X509_STORE_up_ref(), X509_STORE_lock() and X509_STORE_unlock() return 1 for success and 0 for failure.</p> <p>X509_STORE_free() does not return values.</p>"},{"location":"man3/X509_STORE_new/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_set_verify_cb_func(3) X509_STORE_get0_param(3)</p>"},{"location":"man3/X509_STORE_new/#history","title":"HISTORY","text":"<p>The X509_STORE_up_ref(), X509_STORE_lock() and X509_STORE_unlock() functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_STORE_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/","title":"X509_STORE_set_verify_cb_func","text":""},{"location":"man3/X509_STORE_set_verify_cb_func/#name","title":"NAME","text":"<p>X509_STORE_set_lookup_crls_cb, X509_STORE_set_verify_func, X509_STORE_get_cleanup, X509_STORE_set_cleanup, X509_STORE_get_lookup_crls, X509_STORE_set_lookup_crls, X509_STORE_get_lookup_certs, X509_STORE_set_lookup_certs, X509_STORE_get_check_policy, X509_STORE_set_check_policy, X509_STORE_get_cert_crl, X509_STORE_set_cert_crl, X509_STORE_get_check_crl, X509_STORE_set_check_crl, X509_STORE_get_get_crl, X509_STORE_set_get_crl, X509_STORE_get_check_revocation, X509_STORE_set_check_revocation, X509_STORE_get_check_issued, X509_STORE_set_check_issued, X509_STORE_get_get_issuer, X509_STORE_set_get_issuer, X509_STORE_CTX_get_verify, X509_STORE_set_verify, X509_STORE_get_verify_cb, X509_STORE_set_verify_cb_func, X509_STORE_set_verify_cb, X509_STORE_CTX_cert_crl_fn, X509_STORE_CTX_check_crl_fn, X509_STORE_CTX_check_issued_fn, X509_STORE_CTX_check_policy_fn, X509_STORE_CTX_check_revocation_fn, X509_STORE_CTX_cleanup_fn, X509_STORE_CTX_get_crl_fn, X509_STORE_CTX_get_issuer_fn, X509_STORE_CTX_lookup_certs_fn, X509_STORE_CTX_lookup_crls_fn - set verification callback</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\ntypedef int (*X509_STORE_CTX_get_issuer_fn)(X509 **issuer,\n                                            X509_STORE_CTX *ctx, X509 *x);\ntypedef int (*X509_STORE_CTX_check_issued_fn)(X509_STORE_CTX *ctx,\n                                              X509 *x, X509 *issuer);\ntypedef int (*X509_STORE_CTX_check_revocation_fn)(X509_STORE_CTX *ctx);\ntypedef int (*X509_STORE_CTX_get_crl_fn)(X509_STORE_CTX *ctx,\n                                         X509_CRL **crl, X509 *x);\ntypedef int (*X509_STORE_CTX_check_crl_fn)(X509_STORE_CTX *ctx, X509_CRL *crl);\ntypedef int (*X509_STORE_CTX_cert_crl_fn)(X509_STORE_CTX *ctx,\n                                          X509_CRL *crl, X509 *x);\ntypedef int (*X509_STORE_CTX_check_policy_fn)(X509_STORE_CTX *ctx);\ntypedef STACK_OF(X509) *(*X509_STORE_CTX_lookup_certs_fn)(X509_STORE_CTX *ctx,\n                                                          X509_NAME *nm);\ntypedef STACK_OF(X509_CRL) *(*X509_STORE_CTX_lookup_crls_fn)(X509_STORE_CTX *ctx,\n                                                             X509_NAME *nm);\ntypedef int (*X509_STORE_CTX_cleanup_fn)(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_verify_cb(X509_STORE *ctx,\n                              X509_STORE_CTX_verify_cb verify_cb);\nX509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify);\nX509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_get_issuer(X509_STORE *ctx,\n                               X509_STORE_CTX_get_issuer_fn get_issuer);\nX509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_check_issued(X509_STORE *ctx,\n                                 X509_STORE_CTX_check_issued_fn check_issued);\nX509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_check_revocation(X509_STORE *ctx,\n                                     X509_STORE_CTX_check_revocation_fn check_revocation);\nX509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_get_crl(X509_STORE *ctx,\n                            X509_STORE_CTX_get_crl_fn get_crl);\nX509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_check_crl(X509_STORE *ctx,\n                              X509_STORE_CTX_check_crl_fn check_crl);\nX509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_cert_crl(X509_STORE *ctx,\n                             X509_STORE_CTX_cert_crl_fn cert_crl);\nX509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_check_policy(X509_STORE *ctx,\n                                 X509_STORE_CTX_check_policy_fn check_policy);\nX509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_lookup_certs(X509_STORE *ctx,\n                                 X509_STORE_CTX_lookup_certs_fn lookup_certs);\nX509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_lookup_crls(X509_STORE *ctx,\n                                X509_STORE_CTX_lookup_crls_fn lookup_crls);\nX509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(X509_STORE_CTX *ctx);\n\nvoid X509_STORE_set_cleanup(X509_STORE *ctx,\n                            X509_STORE_CTX_cleanup_fn cleanup);\nX509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(X509_STORE_CTX *ctx);\n\n/* Aliases */\nvoid X509_STORE_set_verify_cb_func(X509_STORE *st,\n                                   X509_STORE_CTX_verify_cb verify_cb);\nvoid X509_STORE_set_verify_func(X509_STORE *ctx,\n                                X509_STORE_CTX_verify_fn verify);\nvoid X509_STORE_set_lookup_crls_cb(X509_STORE *ctx,\n                                   X509_STORE_CTX_lookup_crls_fn lookup_crls);\n</code></pre>"},{"location":"man3/X509_STORE_set_verify_cb_func/#description","title":"DESCRIPTION","text":"<p>X509_STORE_set_verify_cb() sets the verification callback of ctx to verify_cb overwriting the previous callback. The callback assigned with this function becomes a default for the one that can be assigned directly to the corresponding X509_STORE_CTX, please see X509_STORE_CTX_set_verify_cb(3) for further information.</p> <p>X509_STORE_set_verify() sets the final chain verification function for ctx to verify. Its purpose is to go through the chain of certificates and check that all signatures are valid and that the current time is within the limits of each certificate's first and last validity time. The final chain verification functions must return 0 on failure and 1 on success. If no chain verification function is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_get_issuer() sets the function to get the issuer certificate that verifies the given certificate x. When found, the issuer certificate must be assigned to *issuer. This function must return 0 on failure and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_check_issued() sets the function to check that a given certificate x is issued by the issuer certificate issuer. This function must return 0 on failure (among others if x hasn't been issued with issuer) and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_check_revocation() sets the revocation checking function. Its purpose is to look through the final chain and check the revocation status for each certificate. It must return 0 on failure and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_get_crl() sets the function to get the crl for a given certificate x. When found, the crl must be assigned to *crl. This function must return 0 on failure and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_check_crl() sets the function to check the validity of the given crl. This function must return 0 on failure and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_cert_crl() sets the function to check the revocation status of the given certificate x against the given crl. This function must return 0 on failure and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_check_policy() sets the function to check the policies of all the certificates in the final chain.. This function must return 0 on failure and 1 on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_lookup_certs() and X509_STORE_set_lookup_crls() set the functions to look up all the certs or all the CRLs that match the given name nm. These functions return NULL on failure and a pointer to a stack of certificates (X509) or to a stack of CRLs (X509_CRL) on success. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_set_cleanup() sets the final cleanup function, which is called when the context (X509_STORE_CTX) is being torn down. This function doesn't return any value. If no function to get the issuer is provided, the internal default function will be used instead.</p> <p>X509_STORE_get_verify_cb(), X509_STORE_CTX_get_verify(), X509_STORE_get_get_issuer(), X509_STORE_get_check_issued(), X509_STORE_get_check_revocation(), X509_STORE_get_get_crl(), X509_STORE_get_check_crl(), X509_STORE_set_verify(), X509_STORE_set_get_issuer(), X509_STORE_get_cert_crl(), X509_STORE_get_check_policy(), X509_STORE_get_lookup_certs(), X509_STORE_get_lookup_crls() and X509_STORE_get_cleanup() all return the function pointer assigned with X509_STORE_set_check_issued(), X509_STORE_set_check_revocation(), X509_STORE_set_get_crl(), X509_STORE_set_check_crl(), X509_STORE_set_cert_crl(), X509_STORE_set_check_policy(), X509_STORE_set_lookup_certs(), X509_STORE_set_lookup_crls() and X509_STORE_set_cleanup(), or NULL if no assignment has been made.</p> <p>X509_STORE_set_verify_cb_func(), X509_STORE_set_verify_func() and X509_STORE_set_lookup_crls_cb() are aliases for X509_STORE_set_verify_cb(), X509_STORE_set_verify() and X509_STORE_set_lookup_crls, available as macros for backward compatibility.</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#notes","title":"NOTES","text":"<p>All the callbacks from a X509_STORE are inherited by the corresponding X509_STORE_CTX structure when it is initialized. See X509_STORE_CTX_set_verify_cb(3) for further details.</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#bugs","title":"BUGS","text":"<p>The macro version of this function was the only one available before OpenSSL 1.0.0.</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#return-values","title":"RETURN VALUES","text":"<p>The X509_STORE_set_*() functions do not return a value.</p> <p>The X509_STORE_get_*() functions return a pointer of the appropriate function type.</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_CTX_set_verify_cb(3), X509_STORE_CTX_get0_chain(3), X509_STORE_CTX_verify_cb(3), X509_STORE_CTX_verify_fn(3), CMS_verify(3)</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#history","title":"HISTORY","text":"<p>The X509_STORE_set_verify_cb() function was added in OpenSSL 1.0.0.</p> <p>The functions X509_STORE_set_verify_cb(), X509_STORE_get_verify_cb(), X509_STORE_set_verify(), X509_STORE_CTX_get_verify(), X509_STORE_set_get_issuer(), X509_STORE_get_get_issuer(), X509_STORE_set_check_issued(), X509_STORE_get_check_issued(), X509_STORE_set_check_revocation(), X509_STORE_get_check_revocation(), X509_STORE_set_get_crl(), X509_STORE_get_get_crl(), X509_STORE_set_check_crl(), X509_STORE_get_check_crl(), X509_STORE_set_cert_crl(), X509_STORE_get_cert_crl(), X509_STORE_set_check_policy(), X509_STORE_get_check_policy(), X509_STORE_set_lookup_certs(), X509_STORE_get_lookup_certs(), X509_STORE_set_lookup_crls(), X509_STORE_get_lookup_crls(), X509_STORE_set_cleanup() and X509_STORE_get_cleanup() were added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_STORE_set_verify_cb_func/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2009-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/","title":"X509_VERIFY_PARAM_set_flags","text":""},{"location":"man3/X509_VERIFY_PARAM_set_flags/#name","title":"NAME","text":"<p>X509_VERIFY_PARAM_set_flags, X509_VERIFY_PARAM_clear_flags, X509_VERIFY_PARAM_get_flags, X509_VERIFY_PARAM_set_purpose, X509_VERIFY_PARAM_get_inh_flags, X509_VERIFY_PARAM_set_inh_flags, X509_VERIFY_PARAM_set_trust, X509_VERIFY_PARAM_set_depth, X509_VERIFY_PARAM_get_depth, X509_VERIFY_PARAM_set_auth_level, X509_VERIFY_PARAM_get_auth_level, X509_VERIFY_PARAM_set_time, X509_VERIFY_PARAM_get_time, X509_VERIFY_PARAM_add0_policy, X509_VERIFY_PARAM_set1_policies, X509_VERIFY_PARAM_set1_host, X509_VERIFY_PARAM_add1_host, X509_VERIFY_PARAM_set_hostflags, X509_VERIFY_PARAM_get_hostflags, X509_VERIFY_PARAM_get0_peername, X509_VERIFY_PARAM_set1_email, X509_VERIFY_PARAM_set1_ip, X509_VERIFY_PARAM_set1_ip_asc - X509 verification parameters</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509_vfy.h&gt;\n\nint X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param,\n                                unsigned long flags);\nint X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,\n                                  unsigned long flags);\nunsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);\n\nint X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param,\n                                    uint32_t flags);\nuint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param);\n\nint X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);\nint X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);\n\nvoid X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);\ntime_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param);\n\nint X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,\n                                  ASN1_OBJECT *policy);\nint X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,\n                                    STACK_OF(ASN1_OBJECT) *policies);\n\nvoid X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);\nint X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param);\n\nvoid X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param,\n                                      int auth_level);\nint X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM *param);\n\nint X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,\n                                const char *name, size_t namelen);\nint X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,\n                                const char *name, size_t namelen);\nvoid X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param,\n                                     unsigned int flags);\nunsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM *param);\nchar *X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *param);\nint X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param,\n                                 const char *email, size_t emaillen);\nint X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,\n                              const unsigned char *ip, size_t iplen);\nint X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param, const char *ipasc);\n</code></pre>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#description","title":"DESCRIPTION","text":"<p>These functions manipulate the X509_VERIFY_PARAM structure associated with a certificate verification operation.</p> <p>The X509_VERIFY_PARAM_set_flags() function sets the flags in param by oring it with flags. See the VERIFICATION FLAGS section for a complete description of values the flags parameter can take.</p> <p>X509_VERIFY_PARAM_get_flags() returns the flags in param.</p> <p>X509_VERIFY_PARAM_get_inh_flags() returns the inheritance flags in param which specifies how verification flags are copied from one structure to another. X509_VERIFY_PARAM_set_inh_flags() sets the inheritance flags. See the INHERITANCE FLAGS section for a description of these bits.</p> <p>X509_VERIFY_PARAM_clear_flags() clears the flags flags in param.</p> <p>X509_VERIFY_PARAM_set_purpose() sets the verification purpose in param to purpose. This determines the acceptable purpose of the certificate chain, for example SSL client or SSL server.</p> <p>X509_VERIFY_PARAM_set_trust() sets the trust setting in param to trust.</p> <p>X509_VERIFY_PARAM_set_time() sets the verification time in param to t. Normally the current time is used.</p> <p>X509_VERIFY_PARAM_add0_policy() adds policy to the acceptable policy set. Contrary to preexisting documentation of this function it does not enable policy checking.</p> <p>X509_VERIFY_PARAM_set1_policies() enables policy checking (it is disabled by default) and sets the acceptable policy set to policies. Any existing policy set is cleared. The policies parameter can be NULL to clear an existing policy set.</p> <p>X509_VERIFY_PARAM_set_depth() sets the maximum verification depth to depth. That is the maximum number of intermediate CA certificates that can appear in a chain. A maximal depth chain contains 2 more certificates than the limit, since neither the end-entity certificate nor the trust-anchor count against this limit. Thus a depth limit of 0 only allows the end-entity certificate to be signed directly by the trust-anchor, while with a depth limit of 1 there can be one intermediate CA certificate between the trust-anchor and the end-entity certificate.</p> <p>X509_VERIFY_PARAM_set_auth_level() sets the authentication security level to auth_level. The authentication security level determines the acceptable signature and public key strength when verifying certificate chains. For a certificate chain to validate, the public keys of all the certificates must meet the specified security level. The signature algorithm security level is not enforced for the chain's trust anchor certificate, which is either directly trusted or validated by means other than its signature. See SSL_CTX_set_security_level(3) for the definitions of the available levels. The default security level is -1, or \"not set\". At security level 0 or lower all algorithms are acceptable. Security level 1 requires at least 80-bit-equivalent security and is broadly interoperable, though it will, for example, reject MD5 signatures or RSA keys shorter than 1024 bits.</p> <p>X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified hostname or names.  If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate.  If name is NUL-terminated, namelen may be zero, otherwise namelen must be set to the length of name.</p> <p>When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the flags argument given to X509_VERIFY_PARAM_set_hostflags() (default zero).  Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3), hostname checks may be out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE verification is enabled.</p> <p>When the subject CommonName will not be ignored, whether as a result of the X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT host flag, or because no DNS subject alternative names are present in the certificate, any DNS name constraints in issuer certificates apply to the subject CommonName as well as the subject alternative name extension.</p> <p>When the subject CommonName will be ignored, whether as a result of the X509_CHECK_FLAG_NEVER_CHECK_SUBJECT host flag, or because some DNS subject alternative names are present in the certificate, DNS name constraints in issuer certificates will not be applied to the subject DN. As described in X509_check_host(3) the X509_CHECK_FLAG_NEVER_CHECK_SUBJECT flag takes precedence over the X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT flag.</p> <p>X509_VERIFY_PARAM_get_hostflags() returns any host flags previously set via a call to X509_VERIFY_PARAM_set_hostflags().</p> <p>X509_VERIFY_PARAM_add1_host() adds name as an additional reference identifier that can match the peer's certificate.  Any previous names set via X509_VERIFY_PARAM_set1_host() or X509_VERIFY_PARAM_add1_host() are retained, no change is made if name is NULL or empty.  When multiple names are configured, the peer is considered verified when any name matches.</p> <p>X509_VERIFY_PARAM_get0_peername() returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers.  When wildcard matching is not disabled, or when a reference identifier specifies a parent domain (starts with \".\") rather than a hostname, the peer name may be a wildcard name or a sub-domain of the reference identifier respectively.  The return string is allocated by the library and is no longer valid once the associated param argument is freed.  Applications must not free the return value.</p> <p>X509_VERIFY_PARAM_set1_email() sets the expected RFC822 email address to email.  If email is NUL-terminated, emaillen may be zero, otherwise emaillen must be set to the length of email.  When an email address is specified, certificate verification automatically invokes X509_check_email(3).</p> <p>X509_VERIFY_PARAM_set1_ip() sets the expected IP address to ip. The ip argument is in binary format, in network byte-order and iplen must be set to 4 for IPv4 and 16 for IPv6.  When an IP address is specified, certificate verification automatically invokes X509_check_ip(3).</p> <p>X509_VERIFY_PARAM_set1_ip_asc() sets the expected IP address to ipasc.  The ipasc argument is a NUL-terminal ASCII string: dotted decimal quad for IPv4 and colon-separated hexadecimal for IPv6.  The condensed \"::\" notation is supported for IPv6 addresses.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#return-values","title":"RETURN VALUES","text":"<p>X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.</p> <p>X509_VERIFY_PARAM_get_flags() returns the current verification flags.</p> <p>X509_VERIFY_PARAM_get_hostflags() returns any current host flags.</p> <p>X509_VERIFY_PARAM_get_inh_flags() returns the current inheritance flags.</p> <p>X509_VERIFY_PARAM_set_time() and X509_VERIFY_PARAM_set_depth() do not return values.</p> <p>X509_VERIFY_PARAM_get_depth() returns the current verification depth.</p> <p>X509_VERIFY_PARAM_get_auth_level() returns the current authentication security level.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#verification-flags","title":"VERIFICATION FLAGS","text":"<p>The verification flags consists of zero or more of the following flags ored together.</p> <p>X509_V_FLAG_CRL_CHECK enables CRL checking for the certificate chain leaf certificate. An error occurs if a suitable CRL cannot be found.</p> <p>X509_V_FLAG_CRL_CHECK_ALL enables CRL checking for the entire certificate chain.</p> <p>X509_V_FLAG_IGNORE_CRITICAL disabled critical extension checking. By default any unhandled critical extensions in certificates or (if checked) CRLs results in a fatal error. If this flag is set unhandled critical extensions are ignored. WARNING setting this option for anything other than debugging purposes can be a security risk. Finer control over which extensions are supported can be performed in the verification callback.</p> <p>The X509_V_FLAG_X509_STRICT flag disables workarounds for some broken certificates and makes the verification strictly apply X509 rules.</p> <p>X509_V_FLAG_ALLOW_PROXY_CERTS enables proxy certificate verification.</p> <p>X509_V_FLAG_POLICY_CHECK enables certificate policy checking, by default no policy checking is performed. Additional information is sent to the verification callback relating to policy checking.</p> <p>X509_V_FLAG_EXPLICIT_POLICY, X509_V_FLAG_INHIBIT_ANY and X509_V_FLAG_INHIBIT_MAP set the require explicit policy, inhibit any policy and inhibit policy mapping flags respectively as defined in RFC3280. Policy checking is automatically enabled if any of these flags are set.</p> <p>If X509_V_FLAG_NOTIFY_POLICY is set and the policy checking is successful a special status code is set to the verification callback. This permits it to examine the valid policy tree and perform additional checks or simply log it for debugging purposes.</p> <p>By default some additional features such as indirect CRLs and CRLs signed by different keys are disabled. If X509_V_FLAG_EXTENDED_CRL_SUPPORT is set they are enabled.</p> <p>If X509_V_FLAG_USE_DELTAS is set delta CRLs (if present) are used to determine certificate status. If not set deltas are ignored.</p> <p>X509_V_FLAG_CHECK_SS_SIGNATURE requests checking the signature of the last certificate in a chain if the certificate is supposedly self-signed. This is prohibited and will result in an error if it is a non-conforming CA certificate with key usage restrictions not including the keyCertSign bit. By default this check is disabled because it doesn't add any additional security but in some cases applications might want to check the signature anyway. A side effect of not checking the self-signature of such a certificate is that disabled or unsupported message digests used for the signature are not treated as fatal errors.</p> <p>When X509_V_FLAG_TRUSTED_FIRST is set, construction of the certificate chain in X509_verify_cert(3) will search the trust store for issuer certificates before searching the provided untrusted certificates. Local issuer certificates are often more likely to satisfy local security requirements and lead to a locally trusted root. This is especially important when some certificates in the trust store have explicit trust settings (see \"TRUST SETTINGS\" in x509(1)). As of OpenSSL 1.1.0 this option is on by default.</p> <p>The X509_V_FLAG_NO_ALT_CHAINS flag suppresses checking for alternative chains. By default, unless X509_V_FLAG_TRUSTED_FIRST is set, when building a certificate chain, if the first certificate chain found is not trusted, then OpenSSL will attempt to replace untrusted certificates supplied by the peer with certificates from the trust store to see if an alternative chain can be found that is trusted. As of OpenSSL 1.1.0, with X509_V_FLAG_TRUSTED_FIRST always set, this option has no effect.</p> <p>The X509_V_FLAG_PARTIAL_CHAIN flag causes intermediate certificates in the trust store to be treated as trust-anchors, in the same way as the self-signed root CA certificates. This makes it possible to trust certificates issued by an intermediate CA without having to trust its ancestor root CA. With OpenSSL 1.1.0 and later and &lt;X509_V_FLAG_PARTIAL_CHAIN&gt; set, chain construction stops as soon as the first certificate from the trust store is added to the chain, whether that certificate is a self-signed \"root\" certificate or a not self-signed intermediate certificate. Thus, when an intermediate certificate is found in the trust store, the verified chain passed to callbacks may be shorter than it otherwise would be without the X509_V_FLAG_PARTIAL_CHAIN flag.</p> <p>The X509_V_FLAG_NO_CHECK_TIME flag suppresses checking the validity period of certificates and CRLs against the current time. If X509_VERIFY_PARAM_set_time() is used to specify a verification time, the check is not suppressed.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#inheritance-flags","title":"INHERITANCE FLAGS","text":"<p>These flags specify how parameters are \"inherited\" from one structure to another.</p> <p>If X509_VP_FLAG_ONCE is set then the current setting is zeroed after the next call.</p> <p>If X509_VP_FLAG_LOCKED is set then no values are copied.  This overrides all of the following flags.</p> <p>If X509_VP_FLAG_DEFAULT is set then anything set in the source is copied to the destination. Effectively the values in \"to\" become default values which will be used only if nothing new is set in \"from\".  This is the default.</p> <p>If X509_VP_FLAG_OVERWRITE is set then all value are copied across whether they are set or not. Flags is still Ored though.</p> <p>If X509_VP_FLAG_RESET_FLAGS is set then the flags value is copied instead of ORed.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#notes","title":"NOTES","text":"<p>The above functions should be used to manipulate verification parameters instead of functions which work in specific structures such as X509_STORE_CTX_set_flags() which are likely to be deprecated in a future release.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#bugs","title":"BUGS","text":"<p>Delta CRL checking is currently primitive. Only a single delta can be used and (partly due to limitations of X509_STORE) constructed CRLs are not maintained.</p> <p>If CRLs checking is enable CRLs are expected to be available in the corresponding X509_STORE structure. No attempt is made to download CRLs from the CRL distribution points extension.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#examples","title":"EXAMPLES","text":"<p>Enable CRL checking when performing certificate verification during SSL connections associated with an SSL_CTX structure ctx:</p> <pre><code>X509_VERIFY_PARAM *param;\n\nparam = X509_VERIFY_PARAM_new();\nX509_VERIFY_PARAM_set_flags(param, X509_V_FLAG_CRL_CHECK);\nSSL_CTX_set1_param(ctx, param);\nX509_VERIFY_PARAM_free(param);\n</code></pre>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#see-also","title":"SEE ALSO","text":"<p>X509_verify_cert(3), X509_check_host(3), X509_check_email(3), X509_check_ip(3), x509(1)</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#history","title":"HISTORY","text":"<p>The X509_V_FLAG_NO_ALT_CHAINS flag was added in OpenSSL 1.1.0. The flag X509_V_FLAG_CB_ISSUER_CHECK was deprecated in OpenSSL 1.1.0 and has no effect.</p> <p>The X509_VERIFY_PARAM_get_hostflags() function was added in OpenSSL 1.1.0i.</p> <p>The function X509_VERIFY_PARAM_add0_policy() was historically documented as enabling policy checking however the implementation has never done this. The documentation was changed to align with the implementation.</p>"},{"location":"man3/X509_VERIFY_PARAM_set_flags/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2009-2023 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_check_ca/","title":"X509_check_ca","text":""},{"location":"man3/X509_check_ca/#name","title":"NAME","text":"<p>X509_check_ca - check if given certificate is CA certificate</p>"},{"location":"man3/X509_check_ca/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509v3.h&gt;\n\nint X509_check_ca(X509 *cert);\n</code></pre>"},{"location":"man3/X509_check_ca/#description","title":"DESCRIPTION","text":"<p>This function checks if given certificate is CA certificate (can be used to sign other certificates).</p>"},{"location":"man3/X509_check_ca/#return-values","title":"RETURN VALUES","text":"<p>Function return 0, if it is not CA certificate, 1 if it is proper X509v3 CA certificate with basicConstraints extension CA:TRUE, 3, if it is self-signed X509 v1 certificate, 4, if it is certificate with keyUsage extension with bit keyCertSign set, but without basicConstraints, and 5 if it has outdated Netscape Certificate Type extension telling that it is CA certificate.</p> <p>Actually, any nonzero value means that this certificate could have been used to sign other certificates.</p>"},{"location":"man3/X509_check_ca/#see-also","title":"SEE ALSO","text":"<p>X509_verify_cert(3), X509_check_issued(3), X509_check_purpose(3)</p>"},{"location":"man3/X509_check_ca/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_check_host/","title":"X509_check_host","text":""},{"location":"man3/X509_check_host/#name","title":"NAME","text":"<p>X509_check_host, X509_check_email, X509_check_ip, X509_check_ip_asc - X.509 certificate matching</p>"},{"location":"man3/X509_check_host/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509v3.h&gt;\n\nint X509_check_host(X509 *, const char *name, size_t namelen,\n                    unsigned int flags, char **peername);\nint X509_check_email(X509 *, const char *address, size_t addresslen,\n                     unsigned int flags);\nint X509_check_ip(X509 *, const unsigned char *address, size_t addresslen,\n                  unsigned int flags);\nint X509_check_ip_asc(X509 *, const char *address, unsigned int flags);\n</code></pre>"},{"location":"man3/X509_check_host/#description","title":"DESCRIPTION","text":"<p>The certificate matching functions are used to check whether a certificate matches a given hostname, email address, or IP address. The validity of the certificate and its trust level has to be checked by other means.</p> <p>X509_check_host() checks if the certificate Subject Alternative Name (SAN) or Subject CommonName (CN) matches the specified hostname,  which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034.  By default, wildcards are supported and they match  only in the left-most label; but they may match part of that label with an explicit prefix or suffix.  For example, by default, the host name \"www.example.com\" would match a certificate with a SAN or CN value of \"*.example.com\", \"w*.example.com\" or \"*w.example.com\".</p> <p>Per section 6.4.2 of RFC 6125, name values representing international domain names must be given in A-label form.  The namelen argument must be the number of characters in the name string or zero in which case the length is calculated with strlen(name).  When name starts with a dot (e.g. \".example.com\"), it will be matched by a certificate valid for any sub-domain of name, (see also X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS below).</p> <p>When the certificate is matched, and peername is not NULL, a pointer to a copy of the matching SAN or CN from the peer certificate is stored at the address passed in peername.  The application is responsible for freeing the peername via OPENSSL_free() when it is no longer needed.</p> <p>X509_check_email() checks if the certificate matches the specified email address.  Only the mailbox syntax of RFC 822 is supported, comments are not allowed, and no attempt is made to normalize quoted characters.  The addresslen argument must be the number of characters in the address string or zero in which case the length is calculated with strlen(address).</p> <p>X509_check_ip() checks if the certificate matches a specified IPv4 or IPv6 address.  The address array is in binary format, in network byte order.  The length is either 4 (IPv4) or 16 (IPv6).  Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored.</p> <p>X509_check_ip_asc() is similar, except that the NUL-terminated string address is first converted to the internal representation.</p> <p>The flags argument is usually 0.  It can be the bitwise OR of the flags:</p> <ul> <li>X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT,</li> <li>X509_CHECK_FLAG_NEVER_CHECK_SUBJECT,</li> <li>X509_CHECK_FLAG_NO_WILDCARDS,</li> <li>X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS,</li> <li>X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS.</li> <li>X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS.</li> </ul> <p>The X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT flag causes the function to consider the subject DN even if the certificate contains at least one subject alternative name of the right type (DNS name or email address as appropriate); the default is to ignore the subject DN when at least one corresponding subject alternative names is present.</p> <p>The X509_CHECK_FLAG_NEVER_CHECK_SUBJECT flag causes the function to never consider the subject DN even if the certificate contains no subject alternative names of the right type (DNS name or email address as appropriate); the default is to use the subject DN when no corresponding subject alternative names are present. If both X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT and X509_CHECK_FLAG_NEVER_CHECK_SUBJECT are specified, the latter takes precedence and the subject DN is not checked for matching names.</p> <p>If set, X509_CHECK_FLAG_NO_WILDCARDS disables wildcard expansion; this only applies to X509_check_host.</p> <p>If set, X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS suppresses support for \"*\" as wildcard pattern in labels that have a prefix or suffix, such as: \"www*\" or \"*www\"; this only applies to X509_check_host.</p> <p>If set, X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS allows a \"*\" that constitutes the complete label of a DNS name (e.g. \"*.example.com\") to match more than one label in name; this flag only applies to X509_check_host.</p> <p>If set, X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS restricts name values which start with \".\", that would otherwise match any sub-domain in the peer certificate, to only match direct child sub-domains. Thus, for instance, with this flag set a name of \".example.com\" would match a peer certificate with a DNS name of \"www.example.com\", but would not match a peer certificate with a DNS name of \"www.sub.example.com\"; this flag only applies to X509_check_host.</p>"},{"location":"man3/X509_check_host/#return-values","title":"RETURN VALUES","text":"<p>The functions return 1 for a successful match, 0 for a failed match and -1 for an internal error: typically a memory allocation failure or an ASN.1 decoding error.</p> <p>All functions can also return -2 if the input is malformed. For example, X509_check_host() returns -2 if the provided name contains embedded NULs.</p>"},{"location":"man3/X509_check_host/#notes","title":"NOTES","text":"<p>Applications are encouraged to use X509_VERIFY_PARAM_set1_host() rather than explicitly calling X509_check_host(3). Host name checks may be out of scope with the DANE-EE(3) certificate usage, and the internal checks will be suppressed as appropriate when DANE support is enabled.</p>"},{"location":"man3/X509_check_host/#see-also","title":"SEE ALSO","text":"<p>SSL_get_verify_result(3), X509_VERIFY_PARAM_set1_host(3), X509_VERIFY_PARAM_add1_host(3), X509_VERIFY_PARAM_set1_email(3), X509_VERIFY_PARAM_set1_ip(3), X509_VERIFY_PARAM_set1_ipasc(3)</p>"},{"location":"man3/X509_check_host/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.0.2.</p>"},{"location":"man3/X509_check_host/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2012-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_check_issued/","title":"X509_check_issued","text":""},{"location":"man3/X509_check_issued/#name","title":"NAME","text":"<p>X509_check_issued - checks if certificate is apparently issued by another certificate</p>"},{"location":"man3/X509_check_issued/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509v3.h&gt;\n\nint X509_check_issued(X509 *issuer, X509 *subject);\n</code></pre>"},{"location":"man3/X509_check_issued/#description","title":"DESCRIPTION","text":"<p>X509_check_issued() checks if certificate subject was apparently issued using (CA) certificate issuer. This function takes into account not only matching of the issuer field of subject with the subject field of issuer, but also compares all sub-fields of the authorityKeyIdentifier extension of subject, as far as present, with the respective subjectKeyIdentifier, serial number, and issuer fields of issuer, as far as present. It also checks if the keyUsage field (if present) of issuer allows certificate signing. It does not check the certificate signature.</p>"},{"location":"man3/X509_check_issued/#return-values","title":"RETURN VALUES","text":"<p>Function return X509_V_OK if certificate subject is issued by issuer or some X509_V_ERR* constant to indicate an error.</p>"},{"location":"man3/X509_check_issued/#see-also","title":"SEE ALSO","text":"<p>X509_verify_cert(3), X509_check_ca(3), verify(1)</p>"},{"location":"man3/X509_check_issued/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_check_private_key/","title":"X509_check_private_key","text":""},{"location":"man3/X509_check_private_key/#name","title":"NAME","text":"<p>X509_check_private_key, X509_REQ_check_private_key - check the consistency of a private key with the public key in an X509 certificate or certificate request</p>"},{"location":"man3/X509_check_private_key/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_check_private_key(X509 *x, EVP_PKEY *k);\n\nint X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k);\n</code></pre>"},{"location":"man3/X509_check_private_key/#description","title":"DESCRIPTION","text":"<p>X509_check_private_key() function checks the consistency of private key k with the public key in x.</p> <p>X509_REQ_check_private_key() is equivalent to X509_check_private_key() except that x represents a certificate request of structure X509_REQ.</p>"},{"location":"man3/X509_check_private_key/#return-values","title":"RETURN VALUES","text":"<p>X509_check_private_key() and X509_REQ_check_private_key() return 1 if the keys match each other, and 0 if not.</p> <p>If the key is invalid or an error occurred, the reason code can be obtained using ERR_get_error(3).</p>"},{"location":"man3/X509_check_private_key/#bugs","title":"BUGS","text":"<p>The check_private_key functions don't check if k itself is indeed a private key or not. It merely compares the public materials (e.g. exponent and modulus of an RSA key) and/or key parameters (e.g. EC params of an EC key) of a key pair. So if you pass a public key to these functions in k, it will return success.</p>"},{"location":"man3/X509_check_private_key/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3)</p>"},{"location":"man3/X509_check_private_key/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_check_purpose/","title":"X509_check_purpose","text":""},{"location":"man3/X509_check_purpose/#name","title":"NAME","text":"<p>X509_check_purpose - Check the purpose of a certificate</p>"},{"location":"man3/X509_check_purpose/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509v3.h&gt;\n\nint X509_check_purpose(X509 *x, int id, int ca)\n</code></pre>"},{"location":"man3/X509_check_purpose/#description","title":"DESCRIPTION","text":"<p>This function checks if certificate x was created with the purpose represented by id. If ca is nonzero, then certificate x is checked to determine if it's a possible CA with various levels of certainty possibly returned.</p> <p>Below are the potential ID's that can be checked:</p> <pre><code># define X509_PURPOSE_SSL_CLIENT        1\n# define X509_PURPOSE_SSL_SERVER        2\n# define X509_PURPOSE_NS_SSL_SERVER     3\n# define X509_PURPOSE_SMIME_SIGN        4\n# define X509_PURPOSE_SMIME_ENCRYPT     5\n# define X509_PURPOSE_CRL_SIGN          6\n# define X509_PURPOSE_ANY               7\n# define X509_PURPOSE_OCSP_HELPER       8\n# define X509_PURPOSE_TIMESTAMP_SIGN    9\n</code></pre>"},{"location":"man3/X509_check_purpose/#return-values","title":"RETURN VALUES","text":"<p>For non-CA checks</p> <ul> <li>-1 an error condition has occurred</li> <li>1 if the certificate was created to perform the purpose represented by id</li> <li>0 if the certificate was not created to perform the purpose represented by id</li> </ul> <p>For CA checks the below integers could be returned with the following meanings:</p> <ul> <li>-1 an error condition has occurred</li> <li>0 not a CA or does not have the purpose represented by id</li> <li>1 is a CA.</li> <li>2 Only possible in old versions of openSSL when basicConstraints are absent.          New versions will not return this value. May be a CA</li> <li>3 basicConstraints absent but self signed V1.</li> <li>4 basicConstraints absent but keyUsage present and keyCertSign asserted.</li> <li>5 legacy Netscape specific CA Flags present</li> </ul>"},{"location":"man3/X509_check_purpose/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2019-2020 The OpenSSL Project Authors. All Rights Reserved. Licensed under the Apache License 2.0 (the \"License\"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_cmp/","title":"X509_cmp","text":""},{"location":"man3/X509_cmp/#name","title":"NAME","text":"<p>X509_cmp, X509_NAME_cmp, X509_issuer_and_serial_cmp, X509_issuer_name_cmp, X509_subject_name_cmp, X509_CRL_cmp, X509_CRL_match - compare X509 certificates and related values</p>"},{"location":"man3/X509_cmp/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_cmp(const X509 *a, const X509 *b);\nint X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);\nint X509_issuer_and_serial_cmp(const X509 *a, const X509 *b);\nint X509_issuer_name_cmp(const X509 *a, const X509 *b);\nint X509_subject_name_cmp(const X509 *a, const X509 *b);\nint X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);\nint X509_CRL_match(const X509_CRL *a, const X509_CRL *b);\n</code></pre>"},{"location":"man3/X509_cmp/#description","title":"DESCRIPTION","text":"<p>This set of functions are used to compare X509 objects, including X509 certificates, X509 CRL objects and various values in an X509 certificate.</p> <p>The X509_cmp() function compares two X509 objects indicated by parameters a and b. The comparison is based on the memcmp result of the hash values of two X509 objects and the canonical (DER) encoding values.</p> <p>The X509_NAME_cmp() function compares two X509_NAME objects indicated by parameters a and b. The comparison is based on the memcmp result of the canonical (DER) encoding values of the two objects. i2d_X509_NAME(3) has a more detailed description of the DER encoding of the X509_NAME structure.</p> <p>The X509_issuer_and_serial_cmp() function compares the serial number and issuer values in the given X509 objects a and b.</p> <p>The X509_issuer_name_cmp(), X509_subject_name_cmp() and X509_CRL_cmp() functions are effectively wrappers of the X509_NAME_cmp() function. These functions compare issuer names and subject names of the  objects, or issuers of X509_CRL objects, respectively.</p> <p>The X509_CRL_match() function compares two X509_CRL objects. Unlike the X509_CRL_cmp() function, this function compares the whole CRL content instead of just the issuer name.</p>"},{"location":"man3/X509_cmp/#return-values","title":"RETURN VALUES","text":"<p>Like common memory comparison functions, the X509 comparison functions return an integer less than, equal to, or greater than zero if object a is found to be less than, to match, or be greater than object b, respectively.</p> <p>X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp() and X509_CRL_cmp() may return -2 to indicate an error.</p>"},{"location":"man3/X509_cmp/#notes","title":"NOTES","text":"<p>These functions in fact utilize the underlying memcmp of the C library to do the comparison job. Data to be compared varies from DER encoding data, hash value or ASN1_STRING. The sign of the comparison can be used to order the objects but it does not have a special meaning in some cases.</p> <p>X509_NAME_cmp() and wrappers utilize the value -2 to indicate errors in some circumstances, which could cause confusion for the applications.</p>"},{"location":"man3/X509_cmp/#see-also","title":"SEE ALSO","text":"<p>i2d_X509_NAME(3), i2d_X509(3)</p>"},{"location":"man3/X509_cmp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the Apache License 2.0 (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_cmp_time/","title":"X509_cmp_time","text":""},{"location":"man3/X509_cmp_time/#name","title":"NAME","text":"<p>X509_cmp_time, X509_cmp_current_time, X509_time_adj, X509_time_adj_ex - X509 time functions</p>"},{"location":"man3/X509_cmp_time/#synopsis","title":"SYNOPSIS","text":"<pre><code>int X509_cmp_time(const ASN1_TIME *asn1_time, time_t *in_tm);\nint X509_cmp_current_time(const ASN1_TIME *asn1_time);\nASN1_TIME *X509_time_adj(ASN1_TIME *asn1_time, long offset_sec, time_t *in_tm);\nASN1_TIME *X509_time_adj_ex(ASN1_TIME *asn1_time, int offset_day, long\n                            offset_sec, time_t *in_tm);\n</code></pre>"},{"location":"man3/X509_cmp_time/#description","title":"DESCRIPTION","text":"<p>X509_cmp_time() compares the ASN1_TIME in asn1_time with the time in &lt;cmp_time&gt;. X509_cmp_current_time() compares the ASN1_TIME in asn1_time with the current time, expressed as time_t. asn1_time must satisfy the ASN1_TIME format mandated by RFC 5280, i.e., its format must be either YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ.</p> <p>X509_time_adj_ex() sets the ASN1_TIME structure asn1_time to the time offset_day and offset_sec after in_tm.</p> <p>X509_time_adj() sets the ASN1_TIME structure asn1_time to the time offset_sec after in_tm. This method can only handle second offsets up to the capacity of long, so the newer X509_time_adj_ex() API should be preferred.</p> <p>In both methods, if asn1_time is NULL, a new ASN1_TIME structure is allocated and returned.</p> <p>In all methods, if in_tm is NULL, the current time, expressed as time_t, is used.</p>"},{"location":"man3/X509_cmp_time/#bugs","title":"BUGS","text":"<p>Unlike many standard comparison functions, X509_cmp_time() and X509_cmp_current_time() return 0 on error.</p>"},{"location":"man3/X509_cmp_time/#return-values","title":"RETURN VALUES","text":"<p>X509_cmp_time() and X509_cmp_current_time() return -1 if asn1_time is earlier than, or equal to, cmp_time (resp. current time), and 1 otherwise. These methods return 0 on error.</p> <p>X509_time_adj() and X509_time_adj_ex() return a pointer to the updated ASN1_TIME structure, and NULL on error.</p>"},{"location":"man3/X509_cmp_time/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_digest/","title":"X509_digest","text":""},{"location":"man3/X509_digest/#name","title":"NAME","text":"<p>X509_digest, X509_CRL_digest, X509_pubkey_digest, X509_NAME_digest, X509_REQ_digest, PKCS7_ISSUER_AND_SERIAL_digest - get digest of various objects</p>"},{"location":"man3/X509_digest/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,\n                unsigned int *len);\n\nint X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned char *md,\n                    unsigned int *len);\n\nint X509_pubkey_digest(const X509 *data, const EVP_MD *type,\n                       unsigned char *md, unsigned int *len);\n\nint X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,\n                    unsigned char *md, unsigned int *len);\n\nint X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,\n                     unsigned char *md, unsigned int *len);\n\n#include &lt;openssl/pkcs7.h&gt;\n\nint PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,\n                                   const EVP_MD *type, unsigned char *md,\n                                   unsigned int *len);\n</code></pre>"},{"location":"man3/X509_digest/#description","title":"DESCRIPTION","text":"<p>X509_pubkey_digest() returns a digest of the DER representation of the public key in the specified X509 data object. All other functions described here return a digest of the DER representation of their entire data objects.</p> <p>The type parameter specifies the digest to be used, such as EVP_sha1(). The md is a pointer to the buffer where the digest will be copied and is assumed to be large enough; the constant EVP_MAX_MD_SIZE is suggested. The len parameter, if not NULL, points to a place where the digest size will be stored.</p>"},{"location":"man3/X509_digest/#return-values","title":"RETURN VALUES","text":"<p>All functions described here return 1 for success and 0 for failure.</p>"},{"location":"man3/X509_digest/#see-also","title":"SEE ALSO","text":"<p>EVP_sha1(3)</p>"},{"location":"man3/X509_digest/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_dup/","title":"X509_dup","text":""},{"location":"man3/X509_dup/#name","title":"NAME","text":"<p>DECLARE_ASN1_FUNCTIONS, IMPLEMENT_ASN1_FUNCTIONS, ASN1_ITEM, ACCESS_DESCRIPTION_free, ACCESS_DESCRIPTION_new, ADMISSIONS_free, ADMISSIONS_new, ADMISSION_SYNTAX_free, ADMISSION_SYNTAX_new, ASIdOrRange_free, ASIdOrRange_new, ASIdentifierChoice_free, ASIdentifierChoice_new, ASIdentifiers_free, ASIdentifiers_new, ASRange_free, ASRange_new, AUTHORITY_INFO_ACCESS_free, AUTHORITY_INFO_ACCESS_new, AUTHORITY_KEYID_free, AUTHORITY_KEYID_new, BASIC_CONSTRAINTS_free, BASIC_CONSTRAINTS_new, CERTIFICATEPOLICIES_free, CERTIFICATEPOLICIES_new, CMS_ContentInfo_free, CMS_ContentInfo_new, CMS_ContentInfo_print_ctx, CMS_ReceiptRequest_free, CMS_ReceiptRequest_new, CRL_DIST_POINTS_free, CRL_DIST_POINTS_new, DIRECTORYSTRING_free, DIRECTORYSTRING_new, DISPLAYTEXT_free, DISPLAYTEXT_new, DIST_POINT_NAME_free, DIST_POINT_NAME_new, DIST_POINT_free, DIST_POINT_new, DSAparams_dup, ECPARAMETERS_free, ECPARAMETERS_new, ECPKPARAMETERS_free, ECPKPARAMETERS_new, EDIPARTYNAME_free, EDIPARTYNAME_new, ESS_CERT_ID_dup, ESS_CERT_ID_free, ESS_CERT_ID_new, ESS_ISSUER_SERIAL_dup, ESS_ISSUER_SERIAL_free, ESS_ISSUER_SERIAL_new, ESS_SIGNING_CERT_dup, ESS_SIGNING_CERT_free, ESS_SIGNING_CERT_new, EXTENDED_KEY_USAGE_free, EXTENDED_KEY_USAGE_new, GENERAL_NAMES_free, GENERAL_NAMES_new, GENERAL_NAME_dup, GENERAL_NAME_free, GENERAL_NAME_new, GENERAL_SUBTREE_free, GENERAL_SUBTREE_new, IPAddressChoice_free, IPAddressChoice_new, IPAddressFamily_free, IPAddressFamily_new, IPAddressOrRange_free, IPAddressOrRange_new, IPAddressRange_free, IPAddressRange_new, ISSUING_DIST_POINT_free, ISSUING_DIST_POINT_new, NAME_CONSTRAINTS_free, NAME_CONSTRAINTS_new, NAMING_AUTHORITY_free, NAMING_AUTHORITY_new, NETSCAPE_CERT_SEQUENCE_free, NETSCAPE_CERT_SEQUENCE_new, NETSCAPE_SPKAC_free, NETSCAPE_SPKAC_new, NETSCAPE_SPKI_free, NETSCAPE_SPKI_new, NOTICEREF_free, NOTICEREF_new, OCSP_BASICRESP_free, OCSP_BASICRESP_new, OCSP_CERTID_dup, OCSP_CERTID_new, OCSP_CERTSTATUS_free, OCSP_CERTSTATUS_new, OCSP_CRLID_free, OCSP_CRLID_new, OCSP_ONEREQ_free, OCSP_ONEREQ_new, OCSP_REQINFO_free, OCSP_REQINFO_new, OCSP_RESPBYTES_free, OCSP_RESPBYTES_new, OCSP_RESPDATA_free, OCSP_RESPDATA_new, OCSP_RESPID_free, OCSP_RESPID_new, OCSP_RESPONSE_new, OCSP_REVOKEDINFO_free, OCSP_REVOKEDINFO_new, OCSP_SERVICELOC_free, OCSP_SERVICELOC_new, OCSP_SIGNATURE_free, OCSP_SIGNATURE_new, OCSP_SINGLERESP_free, OCSP_SINGLERESP_new, OTHERNAME_free, OTHERNAME_new, PBE2PARAM_free, PBE2PARAM_new, PBEPARAM_free, PBEPARAM_new, PBKDF2PARAM_free, PBKDF2PARAM_new, PKCS12_BAGS_free, PKCS12_BAGS_new, PKCS12_MAC_DATA_free, PKCS12_MAC_DATA_new, PKCS12_SAFEBAG_free, PKCS12_SAFEBAG_new, PKCS12_free, PKCS12_new, PKCS7_DIGEST_free, PKCS7_DIGEST_new, PKCS7_ENCRYPT_free, PKCS7_ENCRYPT_new, PKCS7_ENC_CONTENT_free, PKCS7_ENC_CONTENT_new, PKCS7_ENVELOPE_free, PKCS7_ENVELOPE_new, PKCS7_ISSUER_AND_SERIAL_free, PKCS7_ISSUER_AND_SERIAL_new, PKCS7_RECIP_INFO_free, PKCS7_RECIP_INFO_new, PKCS7_SIGNED_free, PKCS7_SIGNED_new, PKCS7_SIGNER_INFO_free, PKCS7_SIGNER_INFO_new, PKCS7_SIGN_ENVELOPE_free, PKCS7_SIGN_ENVELOPE_new, PKCS7_dup, PKCS7_free, PKCS7_new, PKCS7_print_ctx, PKCS8_PRIV_KEY_INFO_free, PKCS8_PRIV_KEY_INFO_new, PKEY_USAGE_PERIOD_free, PKEY_USAGE_PERIOD_new, POLICYINFO_free, POLICYINFO_new, POLICYQUALINFO_free, POLICYQUALINFO_new, POLICY_CONSTRAINTS_free, POLICY_CONSTRAINTS_new, POLICY_MAPPING_free, POLICY_MAPPING_new, PROFESSION_INFO_free, PROFESSION_INFO_new, PROFESSION_INFOS_free, PROFESSION_INFOS_new, PROXY_CERT_INFO_EXTENSION_free, PROXY_CERT_INFO_EXTENSION_new, PROXY_POLICY_free, PROXY_POLICY_new, RSAPrivateKey_dup, RSAPublicKey_dup, RSA_OAEP_PARAMS_free, RSA_OAEP_PARAMS_new, RSA_PSS_PARAMS_free, RSA_PSS_PARAMS_new, SCRYPT_PARAMS_free, SCRYPT_PARAMS_new, SXNETID_free, SXNETID_new, SXNET_free, SXNET_new, TLS_FEATURE_free, TLS_FEATURE_new, TS_ACCURACY_dup, TS_ACCURACY_free, TS_ACCURACY_new, TS_MSG_IMPRINT_dup, TS_MSG_IMPRINT_free, TS_MSG_IMPRINT_new, TS_REQ_dup, TS_REQ_free, TS_REQ_new, TS_RESP_dup, TS_RESP_free, TS_RESP_new, TS_STATUS_INFO_dup, TS_STATUS_INFO_free, TS_STATUS_INFO_new, TS_TST_INFO_dup, TS_TST_INFO_free, TS_TST_INFO_new, USERNOTICE_free, USERNOTICE_new, X509_ALGOR_free, X509_ALGOR_new, X509_ATTRIBUTE_dup, X509_ATTRIBUTE_free, X509_ATTRIBUTE_new, X509_CERT_AUX_free, X509_CERT_AUX_new, X509_CINF_free, X509_CINF_new, X509_CRL_INFO_free, X509_CRL_INFO_new, X509_CRL_dup, X509_CRL_free, X509_CRL_new, X509_EXTENSION_dup, X509_EXTENSION_free, X509_EXTENSION_new, X509_NAME_ENTRY_dup, X509_NAME_ENTRY_free, X509_NAME_ENTRY_new, X509_NAME_dup, X509_NAME_free, X509_NAME_new, X509_REQ_INFO_free, X509_REQ_INFO_new, X509_REQ_dup, X509_REQ_free, X509_REQ_new, X509_REVOKED_dup, X509_REVOKED_free, X509_REVOKED_new, X509_SIG_free, X509_SIG_new, X509_VAL_free, X509_VAL_new, X509_dup, - ASN1 object utilities</p>"},{"location":"man3/X509_dup/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/asn1t.h&gt;\n\nDECLARE_ASN1_FUNCTIONS(type)\nIMPLEMENT_ASN1_FUNCTIONS(stname)\n\ntypedef struct ASN1_ITEM_st ASN1_ITEM;\n\nextern const ASN1_ITEM TYPE_it;\nTYPE *TYPE_new(void);\nTYPE *TYPE_dup(TYPE *a);\nvoid TYPE_free(TYPE *a);\nint TYPE_print_ctx(BIO *out, TYPE *a, int indent, const ASN1_PCTX *pctx);\n</code></pre>"},{"location":"man3/X509_dup/#description","title":"DESCRIPTION","text":"<p>In the description below, TYPE is used as a placeholder for any of the OpenSSL datatypes, such as X509.</p> <p>The OpenSSL ASN1 parsing library templates are like a data-driven bytecode interpreter. Every ASN1 object as a global variable, TYPE_it, that describes the item such as its fields.  (On systems which cannot export variables from shared libraries, the global is instead a function which returns a pointer to a static variable.</p> <p>The macro DECLARE_ASN1_FUNCTIONS() is typically used in header files to generate the function declarations.</p> <p>The macro IMPLEMENT_ASN1_FUNCTIONS() is used once in a source file to generate the function bodies.</p> <p>TYPE_new() allocates an empty object of the indicated type. The object returned must be released by calling TYPE_free().</p> <p>TYPE_dup() copies an existing object.</p> <p>TYPE_free() releases the object and all pointers and sub-objects within it.</p> <p>TYPE_print_ctx() prints the object a on the specified BIO out. Each line will be prefixed with indent spaces. The pctx specifies the printing context and is for internal use; use NULL to get the default behavior.  If a print function is user-defined, then pass in any pctx down to any nested calls.</p>"},{"location":"man3/X509_dup/#return-values","title":"RETURN VALUES","text":"<p>TYPE_new() and TYPE_dup() return a pointer to the object or NULL on failure.</p> <p>TYPE_print_ctx() returns 1 on success or zero on failure.</p>"},{"location":"man3/X509_dup/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get0_notBefore/","title":"X509_get0_notBefore","text":""},{"location":"man3/X509_get0_notBefore/#name","title":"NAME","text":"<p>X509_get0_notBefore, X509_getm_notBefore, X509_get0_notAfter, X509_getm_notAfter, X509_set1_notBefore, X509_set1_notAfter, X509_CRL_get0_lastUpdate, X509_CRL_get0_nextUpdate, X509_CRL_set1_lastUpdate, X509_CRL_set1_nextUpdate - get or set certificate or CRL dates</p>"},{"location":"man3/X509_get0_notBefore/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nconst ASN1_TIME *X509_get0_notBefore(const X509 *x);\nconst ASN1_TIME *X509_get0_notAfter(const X509 *x);\n\nASN1_TIME *X509_getm_notBefore(const X509 *x);\nASN1_TIME *X509_getm_notAfter(const X509 *x);\n\nint X509_set1_notBefore(X509 *x, const ASN1_TIME *tm);\nint X509_set1_notAfter(X509 *x, const ASN1_TIME *tm);\n\nconst ASN1_TIME *X509_CRL_get0_lastUpdate(const X509_CRL *crl);\nconst ASN1_TIME *X509_CRL_get0_nextUpdate(const X509_CRL *crl);\n\nint X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm);\nint X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm);\n</code></pre>"},{"location":"man3/X509_get0_notBefore/#description","title":"DESCRIPTION","text":"<p>X509_get0_notBefore() and X509_get0_notAfter() return the notBefore and notAfter fields of certificate x respectively. The value returned is an internal pointer which must not be freed up after the call.</p> <p>X509_getm_notBefore() and X509_getm_notAfter() are similar to X509_get0_notBefore() and X509_get0_notAfter() except they return non-constant mutable references to the associated date field of the certificate.</p> <p>X509_set1_notBefore() and X509_set1_notAfter() set the notBefore and notAfter fields of x to tm. Ownership of the passed parameter tm is not transferred by these functions so it must be freed up after the call.</p> <p>X509_CRL_get0_lastUpdate() and X509_CRL_get0_nextUpdate() return the lastUpdate and nextUpdate fields of crl. The value returned is an internal pointer which must not be freed up after the call. If the nextUpdate field is absent from crl then NULL is returned.</p> <p>X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() set the lastUpdate and nextUpdate fields of crl to tm. Ownership of the passed parameter tm is not transferred by these functions so it must be freed up after the call.</p>"},{"location":"man3/X509_get0_notBefore/#return-values","title":"RETURN VALUES","text":"<p>X509_get0_notBefore(), X509_get0_notAfter() and X509_CRL_get0_lastUpdate() return a pointer to an ASN1_TIME structure.</p> <p>X509_CRL_get0_lastUpdate() return a pointer to an ASN1_TIME structure or NULL if the lastUpdate field is absent.</p> <p>X509_set1_notBefore(), X509_set1_notAfter(), X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() return 1 for success or 0 for failure.</p>"},{"location":"man3/X509_get0_notBefore/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get0_notBefore/#history","title":"HISTORY","text":"<p>These functions are available in all versions of OpenSSL.</p> <p>X509_get_notBefore() and X509_get_notAfter() were deprecated in OpenSSL 1.1.0</p>"},{"location":"man3/X509_get0_notBefore/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get0_signature/","title":"X509_get0_signature","text":""},{"location":"man3/X509_get0_signature/#name","title":"NAME","text":"<p>X509_get0_signature, X509_REQ_set0_signature, X509_REQ_set1_signature_algo, X509_get_signature_nid, X509_get0_tbs_sigalg, X509_REQ_get0_signature,  X509_REQ_get_signature_nid, X509_CRL_get0_signature, X509_CRL_get_signature_nid,  X509_get_signature_info, X509_SIG_INFO_get, X509_SIG_INFO_set - signature information</p>"},{"location":"man3/X509_get0_signature/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nvoid X509_get0_signature(const ASN1_BIT_STRING **psig,\n                         const X509_ALGOR **palg,\n                         const X509 *x);\nvoid X509_REQ_set0_signature(X509_REQ *req, ASN1_BIT_STRING *psig);\nint X509_REQ_set1_signature_algo(X509_REQ *req, X509_ALGOR *palg);\nint X509_get_signature_nid(const X509 *x);\nconst X509_ALGOR *X509_get0_tbs_sigalg(const X509 *x);\n\nvoid X509_REQ_get0_signature(const X509_REQ *crl,\n                             const ASN1_BIT_STRING **psig,\n                             const X509_ALGOR **palg);\nint X509_REQ_get_signature_nid(const X509_REQ *crl);\n\nvoid X509_CRL_get0_signature(const X509_CRL *crl,\n                             const ASN1_BIT_STRING **psig,\n                             const X509_ALGOR **palg);\nint X509_CRL_get_signature_nid(const X509_CRL *crl);\n\nint X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,\n                            uint32_t *flags);\n\nint X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,\n                     int *secbits, uint32_t *flags);\nvoid X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,\n                       int secbits, uint32_t flags);\n</code></pre>"},{"location":"man3/X509_get0_signature/#description","title":"DESCRIPTION","text":"<p>X509_get0_signature() sets *psig to the signature of x and *palg to the signature algorithm of x. The values returned are internal pointers which MUST NOT be freed up after the call.</p> <p>X509_set0_signature() and X509_REQ_set1_signature_algo() are the equivalent setters for the two values of X509_get0_signature().</p> <p>X509_get0_tbs_sigalg() returns the signature algorithm in the signed portion of x.</p> <p>X509_get_signature_nid() returns the NID corresponding to the signature algorithm of x.</p> <p>X509_REQ_get0_signature(), X509_REQ_get_signature_nid() X509_CRL_get0_signature() and X509_CRL_get_signature_nid() perform the same function for certificate requests and CRLs.</p> <p>X509_get_signature_info() retrieves information about the signature of certificate x. The NID of the signing digest is written to *mdnid, the public key algorithm to *pknid, the effective security bits to *secbits and flag details to *flags. Any of the parameters can be set to NULL if the information is not required.</p> <p>X509_SIG_INFO_get() and X509_SIG_INFO_set() get and set information about a signature in an X509_SIG_INFO structure. They are only used by implementations of algorithms which need to set custom signature information: most applications will never need to call them.</p>"},{"location":"man3/X509_get0_signature/#notes","title":"NOTES","text":"<p>These functions provide lower level access to signatures in certificates where an application wishes to analyse or generate a signature in a form where X509_sign() et al is not appropriate (for example a non standard or unsupported format).</p> <p>The security bits returned by X509_get_signature_info() refers to information available from the certificate signature (such as the signing digest). In some cases the actual security of the signature is less because the signing key is less secure: for example a certificate signed using SHA-512 and a 1024 bit RSA key.</p>"},{"location":"man3/X509_get0_signature/#return-values","title":"RETURN VALUES","text":"<p>X509_get_signature_nid(), X509_REQ_get_signature_nid() and X509_CRL_get_signature_nid() return a NID.</p> <p>X509_get0_signature(), X509_REQ_get0_signature() and X509_CRL_get0_signature() do not return values.</p> <p>X509_get_signature_info() returns 1 if the signature information returned is valid or 0 if the information is not available (e.g. unknown algorithms or malformed parameters).</p> <p>X509_REQ_set1_signature_algo() returns 0 on success; or 1 on an error (e.g. null ALGO pointer). X509_REQ_set0_signature does not return an error value.</p>"},{"location":"man3/X509_get0_signature/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get0_signature/#history","title":"HISTORY","text":"<p>The X509_get0_signature() and X509_get_signature_nid() functions were added in OpenSSL 1.0.2.</p> <p>The X509_REQ_get0_signature(), X509_REQ_get_signature_nid(), X509_CRL_get0_signature() and X509_CRL_get_signature_nid() were added in OpenSSL 1.1.0.</p> <p>The X509_REQ_set0_signature() and X509_REQ_set1_signature_algo() were added in OpenSSL 1.1.1e.</p>"},{"location":"man3/X509_get0_signature/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get0_uids/","title":"X509_get0_uids","text":""},{"location":"man3/X509_get0_uids/#name","title":"NAME","text":"<p>X509_get0_uids - get certificate unique identifiers</p>"},{"location":"man3/X509_get0_uids/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nvoid X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,\n                    const ASN1_BIT_STRING **psuid);\n</code></pre>"},{"location":"man3/X509_get0_uids/#description","title":"DESCRIPTION","text":"<p>X509_get0_uids() sets *piuid and *psuid to the issuer and subject unique identifiers of certificate x or NULL if the fields are not present.</p>"},{"location":"man3/X509_get0_uids/#notes","title":"NOTES","text":"<p>The issuer and subject unique identifier fields are very rarely encountered in practice outside test cases.</p>"},{"location":"man3/X509_get0_uids/#return-values","title":"RETURN VALUES","text":"<p>X509_get0_uids() does not return a value.</p>"},{"location":"man3/X509_get0_uids/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get0_uids/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get_extension_flags/","title":"X509_get_extension_flags","text":""},{"location":"man3/X509_get_extension_flags/#name","title":"NAME","text":"<p>X509_get0_subject_key_id, X509_get0_authority_key_id, X509_get0_authority_issuer, X509_get0_authority_serial, X509_get_pathlen, X509_get_extension_flags, X509_get_key_usage, X509_get_extended_key_usage, X509_set_proxy_flag, X509_set_proxy_pathlen, X509_get_proxy_pathlen - retrieve certificate extension data</p>"},{"location":"man3/X509_get_extension_flags/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509v3.h&gt;\n\nlong X509_get_pathlen(X509 *x);\nuint32_t X509_get_extension_flags(X509 *x);\nuint32_t X509_get_key_usage(X509 *x);\nuint32_t X509_get_extended_key_usage(X509 *x);\nconst ASN1_OCTET_STRING *X509_get0_subject_key_id(X509 *x);\nconst ASN1_OCTET_STRING *X509_get0_authority_key_id(X509 *x);\nconst GENERAL_NAMES *X509_get0_authority_issuer(X509 *x);\nconst ASN1_INTEGER *X509_get0_authority_serial(X509 *x);\nvoid X509_set_proxy_flag(X509 *x);\nvoid X509_set_proxy_pathlen(int l);\nlong X509_get_proxy_pathlen(X509 *x);\n</code></pre>"},{"location":"man3/X509_get_extension_flags/#description","title":"DESCRIPTION","text":"<p>These functions retrieve information related to commonly used certificate extensions.</p> <p>X509_get_pathlen() retrieves the path length extension from a certificate. This extension is used to limit the length of a cert chain that may be issued from that CA.</p> <p>X509_get_extension_flags() retrieves general information about a certificate, it will return one or more of the following flags ored together.</p> <ul> <li> <p>EXFLAG_V1</p> <p>The certificate is an obsolete version 1 certificate.</p> </li> <li> <p>EXFLAG_BCONS</p> <p>The certificate contains a basic constraints extension.</p> </li> <li> <p>EXFLAG_CA</p> <p>The certificate contains basic constraints and asserts the CA flag.</p> </li> <li> <p>EXFLAG_PROXY</p> <p>The certificate is a valid proxy certificate.</p> </li> <li> <p>EXFLAG_SI</p> <p>The certificate is self issued (that is subject and issuer names match).</p> </li> <li> <p>EXFLAG_SS</p> <p>The subject and issuer names match and extension values imply it is self signed.</p> </li> <li> <p>EXFLAG_FRESHEST</p> <p>The freshest CRL extension is present in the certificate.</p> </li> <li> <p>EXFLAG_CRITICAL</p> <p>The certificate contains an unhandled critical extension.</p> </li> <li> <p>EXFLAG_INVALID</p> <p>Some certificate extension values are invalid or inconsistent. The certificate should be rejected. This bit may also be raised after an out-of-memory error while processing the X509 object, so it may not be related to the processed ASN1 object itself.</p> </li> <li> <p>EXFLAG_NO_FINGERPRINT</p> <p>Failed to compute the internal SHA1 hash value of the certificate. This may be due to malloc failure or because no SHA1 implementation was found.</p> </li> <li> <p>EXFLAG_INVALID_POLICY</p> <p>The NID_certificate_policies certificate extension is invalid or inconsistent. The certificate should be rejected. This bit may also be raised after an out-of-memory error while processing the X509 object, so it may not be related to the processed ASN1 object itself.</p> </li> <li> <p>EXFLAG_KUSAGE</p> <p>The certificate contains a key usage extension. The value can be retrieved using X509_get_key_usage().</p> </li> <li> <p>EXFLAG_XKUSAGE</p> <p>The certificate contains an extended key usage extension. The value can be retrieved using X509_get_extended_key_usage().</p> </li> </ul> <p>X509_get_key_usage() returns the value of the key usage extension.  If key usage is present will return zero or more of the flags: KU_DIGITAL_SIGNATURE, KU_NON_REPUDIATION, KU_KEY_ENCIPHERMENT, KU_DATA_ENCIPHERMENT, KU_KEY_AGREEMENT, KU_KEY_CERT_SIGN, KU_CRL_SIGN, KU_ENCIPHER_ONLY or KU_DECIPHER_ONLY corresponding to individual key usage bits. If key usage is absent then UINT32_MAX is returned.</p> <p>X509_get_extended_key_usage() returns the value of the extended key usage extension. If extended key usage is present it will return zero or more of the flags: XKU_SSL_SERVER, XKU_SSL_CLIENT, XKU_SMIME, XKU_CODE_SIGN XKU_OCSP_SIGN, XKU_TIMESTAMP, XKU_DVCS or XKU_ANYEKU. These correspond to the OIDs id-kp-serverAuth, id-kp-clientAuth, id-kp-emailProtection, id-kp-codeSigning, id-kp-OCSPSigning, id-kp-timeStamping, id-kp-dvcs and anyExtendedKeyUsage respectively. Additionally XKU_SGC is set if either Netscape or Microsoft SGC OIDs are present.</p> <p>X509_get0_subject_key_id() returns an internal pointer to the subject key identifier of x as an ASN1_OCTET_STRING or NULL if the extension is not present or cannot be parsed.</p> <p>X509_get0_authority_key_id() returns an internal pointer to the authority key identifier of x as an ASN1_OCTET_STRING or NULL if the extension is not present or cannot be parsed.</p> <p>X509_get0_authority_issuer() returns an internal pointer to the authority certificate issuer of x as a stack of GENERAL_NAME structures or NULL if the extension is not present or cannot be parsed.</p> <p>X509_get0_authority_serial() returns an internal pointer to the authority certificate serial number of x as an ASN1_INTEGER or NULL if the extension is not present or cannot be parsed.</p> <p>X509_set_proxy_flag() marks the certificate with the EXFLAG_PROXY flag. This is for the users who need to mark non-RFC3820 proxy certificates as such, as OpenSSL only detects RFC3820 compliant ones.</p> <p>X509_set_proxy_pathlen() sets the proxy certificate path length for the given certificate x.  This is for the users who need to mark non-RFC3820 proxy certificates as such, as OpenSSL only detects RFC3820 compliant ones.</p> <p>X509_get_proxy_pathlen() returns the proxy certificate path length for the given certificate x if it is a proxy certificate.</p>"},{"location":"man3/X509_get_extension_flags/#notes","title":"NOTES","text":"<p>The value of the flags correspond to extension values which are cached in the X509 structure. If the flags returned do not provide sufficient information an application should examine extension values directly for example using X509_get_ext_d2i().</p> <p>If the key usage or extended key usage extension is absent then typically usage is unrestricted. For this reason X509_get_key_usage() and X509_get_extended_key_usage() return UINT32_MAX when the corresponding extension is absent. Applications can additionally check the return value of X509_get_extension_flags() and take appropriate action is an extension is absent.</p> <p>If X509_get0_subject_key_id() returns NULL then the extension may be absent or malformed. Applications can determine the precise reason using X509_get_ext_d2i().</p>"},{"location":"man3/X509_get_extension_flags/#return-values","title":"RETURN VALUES","text":"<p>X509_get_pathlen() returns the path length value, or -1 if the extension is not present.</p> <p>X509_get_extension_flags(), X509_get_key_usage() and X509_get_extended_key_usage() return sets of flags corresponding to the certificate extension values.</p> <p>X509_get0_subject_key_id() returns the subject key identifier as a pointer to an ASN1_OCTET_STRING structure or NULL if the extension is absent or an error occurred during parsing.</p> <p>X509_get_proxy_pathlen() returns the path length value if the given certificate is a proxy one and has a path length set, and -1 otherwise.</p>"},{"location":"man3/X509_get_extension_flags/#see-also","title":"SEE ALSO","text":"<p>X509_check_purpose(3)</p>"},{"location":"man3/X509_get_extension_flags/#history","title":"HISTORY","text":"<p>X509_get_pathlen(), X509_set_proxy_flag(), X509_set_proxy_pathlen() and X509_get_proxy_pathlen() were added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_get_extension_flags/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get_pubkey/","title":"X509_get_pubkey","text":""},{"location":"man3/X509_get_pubkey/#name","title":"NAME","text":"<p>X509_get_pubkey, X509_get0_pubkey, X509_set_pubkey, X509_get_X509_PUBKEY, X509_REQ_get_pubkey, X509_REQ_get0_pubkey, X509_REQ_set_pubkey, X509_REQ_get_X509_PUBKEY - get or set certificate or certificate request public key</p>"},{"location":"man3/X509_get_pubkey/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nEVP_PKEY *X509_get_pubkey(X509 *x);\nEVP_PKEY *X509_get0_pubkey(const X509 *x);\nint X509_set_pubkey(X509 *x, EVP_PKEY *pkey);\nX509_PUBKEY *X509_get_X509_PUBKEY(X509 *x);\n\nEVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req);\nEVP_PKEY *X509_REQ_get0_pubkey(X509_REQ *req);\nint X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);\nX509_PUBKEY *X509_REQ_get_X509_PUBKEY(X509_REQ *x);\n</code></pre>"},{"location":"man3/X509_get_pubkey/#description","title":"DESCRIPTION","text":"<p>X509_get_pubkey() attempts to decode the public key for certificate x. If successful it returns the public key as an EVP_PKEY pointer with its reference count incremented: this means the returned key must be freed up after use. X509_get0_pubkey() is similar except it does not increment the reference count of the returned EVP_PKEY so it must not be freed up after use.</p> <p>X509_get_X509_PUBKEY() returns an internal pointer to the X509_PUBKEY structure which encodes the certificate of x. The returned value must not be freed up after use.</p> <p>X509_set_pubkey() attempts to set the public key for certificate x to pkey. The key pkey should be freed up after use.</p> <p>X509_REQ_get_pubkey(), X509_REQ_get0_pubkey(), X509_REQ_set_pubkey() and X509_REQ_get_X509_PUBKEY() are similar but operate on certificate request req.</p>"},{"location":"man3/X509_get_pubkey/#notes","title":"NOTES","text":"<p>The first time a public key is decoded the EVP_PKEY structure is cached in the certificate or certificate request itself. Subsequent calls return the cached structure with its reference count incremented to improve performance.</p>"},{"location":"man3/X509_get_pubkey/#return-values","title":"RETURN VALUES","text":"<p>X509_get_pubkey(), X509_get0_pubkey(), X509_get_X509_PUBKEY(), X509_REQ_get_pubkey() and X509_REQ_get_X509_PUBKEY() return a public key or NULL if an error occurred.</p> <p>X509_set_pubkey() and X509_REQ_set_pubkey() return 1 for success and 0 for failure.</p>"},{"location":"man3/X509_get_pubkey/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get_pubkey/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get_serialNumber/","title":"X509_get_serialNumber","text":""},{"location":"man3/X509_get_serialNumber/#name","title":"NAME","text":"<p>X509_get_serialNumber, X509_get0_serialNumber, X509_set_serialNumber - get or set certificate serial number</p>"},{"location":"man3/X509_get_serialNumber/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nASN1_INTEGER *X509_get_serialNumber(X509 *x);\nconst ASN1_INTEGER *X509_get0_serialNumber(const X509 *x);\nint X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);\n</code></pre>"},{"location":"man3/X509_get_serialNumber/#description","title":"DESCRIPTION","text":"<p>X509_get_serialNumber() returns the serial number of certificate x as an ASN1_INTEGER structure which can be examined or initialised. The value returned is an internal pointer which MUST NOT be freed up after the call.</p> <p>X509_get0_serialNumber() is the same as X509_get_serialNumber() except it accepts a const parameter and returns a const result.</p> <p>X509_set_serialNumber() sets the serial number of certificate x to serial. A copy of the serial number is used internally so serial should be freed up after use.</p>"},{"location":"man3/X509_get_serialNumber/#return-values","title":"RETURN VALUES","text":"<p>X509_get_serialNumber() and X509_get0_serialNumber() return an ASN1_INTEGER structure.</p> <p>X509_set_serialNumber() returns 1 for success and 0 for failure.</p>"},{"location":"man3/X509_get_serialNumber/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get_serialNumber/#history","title":"HISTORY","text":"<p>The X509_get_serialNumber() and X509_set_serialNumber() functions are available in all versions of OpenSSL. The X509_get0_serialNumber() function was added in OpenSSL 1.1.0.</p>"},{"location":"man3/X509_get_serialNumber/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get_subject_name/","title":"X509_get_subject_name","text":""},{"location":"man3/X509_get_subject_name/#name","title":"NAME","text":"<p>X509_get_subject_name, X509_set_subject_name, X509_get_issuer_name, X509_set_issuer_name, X509_REQ_get_subject_name, X509_REQ_set_subject_name, X509_CRL_get_issuer, X509_CRL_set_issuer_name - get and set issuer or subject names</p>"},{"location":"man3/X509_get_subject_name/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nX509_NAME *X509_get_subject_name(const X509 *x);\nint X509_set_subject_name(X509 *x, X509_NAME *name);\n\nX509_NAME *X509_get_issuer_name(const X509 *x);\nint X509_set_issuer_name(X509 *x, X509_NAME *name);\n\nX509_NAME *X509_REQ_get_subject_name(const X509_REQ *req);\nint X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name);\n\nX509_NAME *X509_CRL_get_issuer(const X509_CRL *crl);\nint X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name);\n</code></pre>"},{"location":"man3/X509_get_subject_name/#description","title":"DESCRIPTION","text":"<p>X509_get_subject_name() returns the subject name of certificate x. The returned value is an internal pointer which MUST NOT be freed.</p> <p>X509_set_subject_name() sets the issuer name of certificate x to name. The name parameter is copied internally and should be freed up when it is no longer needed.</p> <p>X509_get_issuer_name() and X509_set_issuer_name() are identical to X509_get_subject_name() and X509_set_subject_name() except the get and set the issuer name of x.</p> <p>Similarly X509_REQ_get_subject_name(), X509_REQ_set_subject_name(), X509_CRL_get_issuer() and X509_CRL_set_issuer_name() get or set the subject or issuer names of certificate requests of CRLs respectively.</p>"},{"location":"man3/X509_get_subject_name/#return-values","title":"RETURN VALUES","text":"<p>X509_get_subject_name(), X509_get_issuer_name(), X509_REQ_get_subject_name() and X509_CRL_get_issuer() return an X509_NAME pointer.</p> <p>X509_set_subject_name(), X509_set_issuer_name(), X509_REQ_set_subject_name() and X509_CRL_set_issuer_name() return 1 for success and 0 for failure.</p>"},{"location":"man3/X509_get_subject_name/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), d2i_X509(3) X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get_subject_name/#history","title":"HISTORY","text":"<p>X509_REQ_get_subject_name() is a function in OpenSSL 1.1.0 and a macro in earlier versions.</p> <p>X509_CRL_get_issuer() is a function in OpenSSL 1.1.0. It was previously added in OpenSSL 1.0.0 as a macro.</p>"},{"location":"man3/X509_get_subject_name/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_get_version/","title":"X509_get_version","text":""},{"location":"man3/X509_get_version/#name","title":"NAME","text":"<p>X509_get_version, X509_set_version, X509_REQ_get_version, X509_REQ_set_version, X509_CRL_get_version, X509_CRL_set_version - get or set certificate, certificate request or CRL version</p>"},{"location":"man3/X509_get_version/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nlong X509_get_version(const X509 *x);\nint X509_set_version(X509 *x, long version);\n\nlong X509_REQ_get_version(const X509_REQ *req);\nint X509_REQ_set_version(X509_REQ *x, long version);\n\nlong X509_CRL_get_version(const X509_CRL *crl);\nint X509_CRL_set_version(X509_CRL *x, long version);\n</code></pre>"},{"location":"man3/X509_get_version/#description","title":"DESCRIPTION","text":"<p>X509_get_version() returns the numerical value of the version field of certificate x. Note: this is defined by standards (X.509 et al) to be one less than the certificate version. So a version 3 certificate will return 2 and a version 1 certificate will return 0.</p> <p>X509_set_version() sets the numerical value of the version field of certificate x to version.</p> <p>Similarly X509_REQ_get_version(), X509_REQ_set_version(), X509_CRL_get_version() and X509_CRL_set_version() get and set the version number of certificate requests and CRLs.</p>"},{"location":"man3/X509_get_version/#notes","title":"NOTES","text":"<p>The version field of certificates, certificate requests and CRLs has a DEFAULT value of v1(0) meaning the field should be omitted for version 1. This is handled transparently by these functions.</p>"},{"location":"man3/X509_get_version/#return-values","title":"RETURN VALUES","text":"<p>X509_get_version(), X509_REQ_get_version() and X509_CRL_get_version() return the numerical value of the version field.</p> <p>X509_set_version(), X509_REQ_set_version() and X509_CRL_set_version() return 1 for success and 0 for failure.</p>"},{"location":"man3/X509_get_version/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_get_version/#history","title":"HISTORY","text":"<p>X509_get_version(), X509_REQ_get_version() and X509_CRL_get_version() are functions in OpenSSL 1.1.0, in previous versions they were macros.</p>"},{"location":"man3/X509_get_version/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_new/","title":"X509_new","text":""},{"location":"man3/X509_new/#name","title":"NAME","text":"<p>X509_chain_up_ref, X509_new, X509_free, X509_up_ref - X509 certificate ASN1 allocation functions</p>"},{"location":"man3/X509_new/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nX509 *X509_new(void);\nvoid X509_free(X509 *a);\nint X509_up_ref(X509 *a);\nSTACK_OF(X509) *X509_chain_up_ref(STACK_OF(X509) *x);\n</code></pre>"},{"location":"man3/X509_new/#description","title":"DESCRIPTION","text":"<p>The X509 ASN1 allocation routines, allocate and free an X509 structure, which represents an X509 certificate.</p> <p>X509_new() allocates and initializes a X509 structure with reference count 1.</p> <p>X509_free() decrements the reference count of X509 structure a and frees it up if the reference count is zero. If a is NULL nothing is done.</p> <p>X509_up_ref() increments the reference count of a.</p> <p>X509_chain_up_ref() increases the reference count of all certificates in chain x and returns a copy of the stack.</p>"},{"location":"man3/X509_new/#notes","title":"NOTES","text":"<p>The function X509_up_ref() if useful if a certificate structure is being used by several different operations each of which will free it up after use: this avoids the need to duplicate the entire certificate structure.</p> <p>The function X509_chain_up_ref() doesn't just up the reference count of each certificate it also returns a copy of the stack, using sk_X509_dup(), but it serves a similar purpose: the returned chain persists after the original has been freed.</p>"},{"location":"man3/X509_new/#return-values","title":"RETURN VALUES","text":"<p>If the allocation fails, X509_new() returns NULL and sets an error code that can be obtained by ERR_get_error(3). Otherwise it returns a pointer to the newly allocated structure.</p> <p>X509_up_ref() returns 1 for success and 0 for failure.</p> <p>X509_chain_up_ref() returns a copy of the stack or NULL if an error occurred.</p>"},{"location":"man3/X509_new/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_new/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_sign/","title":"X509_sign","text":""},{"location":"man3/X509_sign/#name","title":"NAME","text":"<p>X509_sign, X509_sign_ctx, X509_verify, X509_REQ_sign, X509_REQ_sign_ctx, X509_REQ_verify, X509_CRL_sign, X509_CRL_sign_ctx, X509_CRL_verify - sign or verify certificate, certificate request or CRL signature</p>"},{"location":"man3/X509_sign/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);\nint X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx);\nint X509_verify(X509 *a, EVP_PKEY *r);\n\nint X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);\nint X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx);\nint X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);\n\nint X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);\nint X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx);\nint X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);\n</code></pre>"},{"location":"man3/X509_sign/#description","title":"DESCRIPTION","text":"<p>X509_sign() signs certificate x using private key pkey and message digest md and sets the signature in x. X509_sign_ctx() also signs certificate x but uses the parameters contained in digest context ctx.</p> <p>X509_verify() verifies the signature of certificate x using public key pkey. Only the signature is checked: no other checks (such as certificate chain validity) are performed.</p> <p>X509_REQ_sign(), X509_REQ_sign_ctx(), X509_REQ_verify(), X509_CRL_sign(), X509_CRL_sign_ctx() and X509_CRL_verify() sign and verify certificate requests and CRLs respectively.</p>"},{"location":"man3/X509_sign/#notes","title":"NOTES","text":"<p>X509_sign_ctx() is used where the default parameters for the corresponding public key and digest are not suitable. It can be used to sign keys using RSA-PSS for example.</p> <p>For efficiency reasons and to work around ASN.1 encoding issues the encoding of the signed portion of a certificate, certificate request and CRL is cached internally. If the signed portion of the structure is modified the encoding is not always updated meaning a stale version is sometimes used. This is not normally a problem because modifying the signed portion will invalidate the signature and signing will always update the encoding.</p>"},{"location":"man3/X509_sign/#return-values","title":"RETURN VALUES","text":"<p>X509_sign(), X509_sign_ctx(), X509_REQ_sign(), X509_REQ_sign_ctx(), X509_CRL_sign() and X509_CRL_sign_ctx() return the size of the signature in bytes for success and zero for failure.</p> <p>X509_verify(), X509_REQ_verify() and X509_CRL_verify() return 1 if the signature is valid and 0 if the signature check fails. If the signature could not be checked at all because it was invalid or some other error occurred then -1 is returned.</p>"},{"location":"man3/X509_sign/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3), ERR_get_error(3), X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/X509_sign/#history","title":"HISTORY","text":"<p>The X509_sign(), X509_REQ_sign() and X509_CRL_sign() functions are available in all versions of OpenSSL.</p> <p>The X509_sign_ctx(), X509_REQ_sign_ctx() and X509_CRL_sign_ctx() functions were added OpenSSL 1.0.1.</p>"},{"location":"man3/X509_sign/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509_verify_cert/","title":"X509_verify_cert","text":""},{"location":"man3/X509_verify_cert/#name","title":"NAME","text":"<p>X509_verify_cert - discover and verify X509 certificate chain</p>"},{"location":"man3/X509_verify_cert/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509_verify_cert(X509_STORE_CTX *ctx);\n</code></pre>"},{"location":"man3/X509_verify_cert/#description","title":"DESCRIPTION","text":"<p>The X509_verify_cert() function attempts to discover and validate a certificate chain based on parameters in ctx. A complete description of the process is contained in the verify(1) manual page.</p>"},{"location":"man3/X509_verify_cert/#return-values","title":"RETURN VALUES","text":"<p>If a complete chain can be built and validated this function returns 1, otherwise it return zero, in exceptional circumstances it can also return a negative code.</p> <p>If the function fails additional error information can be obtained by examining ctx using, for example X509_STORE_CTX_get_error().</p>"},{"location":"man3/X509_verify_cert/#notes","title":"NOTES","text":"<p>Applications rarely call this function directly but it is used by OpenSSL internally for certificate validation, in both the S/MIME and SSL/TLS code.</p> <p>A negative return value from X509_verify_cert() can occur if it is invoked incorrectly, such as with no certificate set in ctx, or when it is called twice in succession without reinitialising ctx for the second call. A negative return value can also happen due to internal resource problems or if a retry operation is requested during internal lookups (which never happens with standard lookup methods). Applications must check for &lt;= 0 return value on error.</p>"},{"location":"man3/X509_verify_cert/#bugs","title":"BUGS","text":"<p>This function uses the header x509.h as opposed to most chain verification functions which use x509_vfy.h.</p>"},{"location":"man3/X509_verify_cert/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_CTX_get_error(3)</p>"},{"location":"man3/X509_verify_cert/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2009-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/X509v3_get_ext_by_NID/","title":"X509v3_get_ext_by_NID","text":""},{"location":"man3/X509v3_get_ext_by_NID/#name","title":"NAME","text":"<p>X509v3_get_ext_count, X509v3_get_ext, X509v3_get_ext_by_NID, X509v3_get_ext_by_OBJ, X509v3_get_ext_by_critical, X509v3_delete_ext, X509v3_add_ext, X509_get_ext_count, X509_get_ext, X509_get_ext_by_NID, X509_get_ext_by_OBJ, X509_get_ext_by_critical, X509_delete_ext, X509_add_ext, X509_CRL_get_ext_count, X509_CRL_get_ext, X509_CRL_get_ext_by_NID, X509_CRL_get_ext_by_OBJ, X509_CRL_get_ext_by_critical, X509_CRL_delete_ext, X509_CRL_add_ext, X509_REVOKED_get_ext_count, X509_REVOKED_get_ext, X509_REVOKED_get_ext_by_NID, X509_REVOKED_get_ext_by_OBJ, X509_REVOKED_get_ext_by_critical, X509_REVOKED_delete_ext, X509_REVOKED_add_ext - extension stack utility functions</p>"},{"location":"man3/X509v3_get_ext_by_NID/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nint X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x);\nX509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc);\n\nint X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x,\n                          int nid, int lastpos);\nint X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *x,\n                          const ASN1_OBJECT *obj, int lastpos);\nint X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *x,\n                               int crit, int lastpos);\nX509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc);\nSTACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,\n                                         X509_EXTENSION *ex, int loc);\n\nint X509_get_ext_count(const X509 *x);\nX509_EXTENSION *X509_get_ext(const X509 *x, int loc);\nint X509_get_ext_by_NID(const X509 *x, int nid, int lastpos);\nint X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos);\nint X509_get_ext_by_critical(const X509 *x, int crit, int lastpos);\nX509_EXTENSION *X509_delete_ext(X509 *x, int loc);\nint X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);\n\nint X509_CRL_get_ext_count(const X509_CRL *x);\nX509_EXTENSION *X509_CRL_get_ext(const X509_CRL *x, int loc);\nint X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos);\nint X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj, int lastpos);\nint X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos);\nX509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc);\nint X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);\n\nint X509_REVOKED_get_ext_count(const X509_REVOKED *x);\nX509_EXTENSION *X509_REVOKED_get_ext(const X509_REVOKED *x, int loc);\nint X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos);\nint X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj,\n                                int lastpos);\nint X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit, int lastpos);\nX509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);\nint X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);\n</code></pre>"},{"location":"man3/X509v3_get_ext_by_NID/#description","title":"DESCRIPTION","text":"<p>X509v3_get_ext_count() retrieves the number of extensions in x.</p> <p>X509v3_get_ext() retrieves extension loc from x. The index loc can take any value from 0 to X509_get_ext_count(x) - 1. The returned extension is an internal pointer which must not be freed up by the application.</p> <p>X509v3_get_ext_by_NID() and X509v3_get_ext_by_OBJ() look for an extension with nid or obj from extension stack x. The search starts from the extension after lastpos or from the beginning if &lt;lastpos&gt; is -1. If the extension is found its index is returned otherwise -1 is returned.</p> <p>X509v3_get_ext_by_critical() is similar to X509v3_get_ext_by_NID() except it looks for an extension of criticality crit. A zero value for crit looks for a non-critical extension a nonzero value looks for a critical extension.</p> <p>X509v3_delete_ext() deletes the extension with index loc from x. The deleted extension is returned and must be freed by the caller. If loc is in invalid index value NULL is returned.</p> <p>X509v3_add_ext() adds extension ex to stack *x at position loc. If loc is -1 the new extension is added to the end. If *x is NULL a new stack will be allocated. The passed extension ex is duplicated internally so it must be freed after use.</p> <p>X509_get_ext_count(), X509_get_ext(), X509_get_ext_by_NID(), X509_get_ext_by_OBJ(), X509_get_ext_by_critical(), X509_delete_ext() and X509_add_ext() operate on the extensions of certificate x they are otherwise identical to the X509v3 functions.</p> <p>X509_CRL_get_ext_count(), X509_CRL_get_ext(), X509_CRL_get_ext_by_NID(), X509_CRL_get_ext_by_OBJ(), X509_CRL_get_ext_by_critical(), X509_CRL_delete_ext() and X509_CRL_add_ext() operate on the extensions of CRL x they are otherwise identical to the X509v3 functions.</p> <p>X509_REVOKED_get_ext_count(), X509_REVOKED_get_ext(), X509_REVOKED_get_ext_by_NID(), X509_REVOKED_get_ext_by_OBJ(), X509_REVOKED_get_ext_by_critical(), X509_REVOKED_delete_ext() and X509_REVOKED_add_ext() operate on the extensions of CRL entry x they are otherwise identical to the X509v3 functions.</p>"},{"location":"man3/X509v3_get_ext_by_NID/#notes","title":"NOTES","text":"<p>These functions are used to examine stacks of extensions directly. Many applications will want to parse or encode and add an extension: they should use the extension encode and decode functions instead such as X509_add1_ext_i2d() and X509_get_ext_d2i().</p> <p>Extension indices start from zero, so a zero index return value is not an error. These search functions start from the extension after the lastpos parameter so it should initially be set to -1, if it is set to zero the initial extension will not be checked.</p>"},{"location":"man3/X509v3_get_ext_by_NID/#return-values","title":"RETURN VALUES","text":"<p>X509v3_get_ext_count() returns the extension count.</p> <p>X509v3_get_ext(), X509v3_delete_ext() and X509_delete_ext() return an X509_EXTENSION pointer or NULL if an error occurs.</p> <p>X509v3_get_ext_by_NID() X509v3_get_ext_by_OBJ() and X509v3_get_ext_by_critical() return the an extension index or -1 if an error occurs.</p> <p>X509v3_add_ext() returns a stack of extensions or NULL on error.</p> <p>X509_add_ext() returns 1 on success and 0 on error.</p>"},{"location":"man3/X509v3_get_ext_by_NID/#see-also","title":"SEE ALSO","text":"<p>X509V3_get_d2i(3)</p>"},{"location":"man3/X509v3_get_ext_by_NID/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/d2i_DHparams/","title":"d2i_DHparams","text":""},{"location":"man3/d2i_DHparams/#name","title":"NAME","text":"<p>d2i_DHparams, i2d_DHparams - PKCS#3 DH parameter functions</p>"},{"location":"man3/d2i_DHparams/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/dh.h&gt;\n\nDH *d2i_DHparams(DH **a, const unsigned char **pp, long length);\nint i2d_DHparams(DH *a, unsigned char **pp);\n</code></pre>"},{"location":"man3/d2i_DHparams/#description","title":"DESCRIPTION","text":"<p>These functions decode and encode PKCS#3 DH parameters using the DHparameter structure described in PKCS#3.</p> <p>Otherwise these behave in a similar way to d2i_X509() and i2d_X509() described in the d2i_X509(3) manual page.</p>"},{"location":"man3/d2i_DHparams/#return-values","title":"RETURN VALUES","text":"<p>d2i_DHparams() returns a valid DH structure or NULL if an error occurred.</p> <p>i2d_DHparams() returns the length of encoded data on success or a value which is less than or equal to 0 on error.</p>"},{"location":"man3/d2i_DHparams/#see-also","title":"SEE ALSO","text":"<p>d2i_X509(3)</p>"},{"location":"man3/d2i_DHparams/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/","title":"d2i_PKCS8PrivateKey_bio","text":""},{"location":"man3/d2i_PKCS8PrivateKey_bio/#name","title":"NAME","text":"<p>d2i_PKCS8PrivateKey_bio, d2i_PKCS8PrivateKey_fp, i2d_PKCS8PrivateKey_bio, i2d_PKCS8PrivateKey_fp, i2d_PKCS8PrivateKey_nid_bio, i2d_PKCS8PrivateKey_nid_fp - PKCS#8 format private key functions</p>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u);\nEVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u);\n\nint i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,\n                            char *kstr, int klen,\n                            pem_password_cb *cb, void *u);\n\nint i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,\n                           char *kstr, int klen,\n                           pem_password_cb *cb, void *u);\n\nint i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,\n                                char *kstr, int klen,\n                                pem_password_cb *cb, void *u);\n\nint i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,\n                               char *kstr, int klen,\n                               pem_password_cb *cb, void *u);\n</code></pre>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/#description","title":"DESCRIPTION","text":"<p>The PKCS#8 functions encode and decode private keys in PKCS#8 format using both PKCS#5 v1.5 and PKCS#5 v2.0 password based encryption algorithms.</p> <p>Other than the use of DER as opposed to PEM these functions are identical to the corresponding PEM function as described in PEM_read_PrivateKey(3).</p>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/#notes","title":"NOTES","text":"<p>These functions are currently the only way to store encrypted private keys using DER format.</p> <p>Currently all the functions use BIOs or FILE pointers, there are no functions which work directly on memory: this can be readily worked around by converting the buffers to memory BIOs, see BIO_s_mem(3) for details.</p> <p>These functions make no assumption regarding the pass phrase received from the password callback. It will simply be treated as a byte sequence.</p>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/#return-values","title":"RETURN VALUES","text":"<p>d2i_PKCS8PrivateKey_bio() and d2i_PKCS8PrivateKey_fp() return a valid EVP_PKEY structure or NULL if an error occurred.</p> <p>i2d_PKCS8PrivateKey_bio(), i2d_PKCS8PrivateKey_fp(), i2d_PKCS8PrivateKey_nid_bio() and i2d_PKCS8PrivateKey_nid_fp() return 1 on success or 0 on error.</p>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/#see-also","title":"SEE ALSO","text":"<p>PEM_read_PrivateKey(3), passphrase-encoding(7)</p>"},{"location":"man3/d2i_PKCS8PrivateKey_bio/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/d2i_PrivateKey/","title":"d2i_PrivateKey","text":""},{"location":"man3/d2i_PrivateKey/#name","title":"NAME","text":"<p>d2i_PrivateKey, d2i_PublicKey, d2i_AutoPrivateKey, i2d_PrivateKey, i2d_PublicKey, d2i_PrivateKey_bio, d2i_PrivateKey_fp - decode and encode functions for reading and saving EVP_PKEY structures</p>"},{"location":"man3/d2i_PrivateKey/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n\nEVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,\n                         long length);\nEVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,\n                        long length);\nEVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,\n                             long length);\nint i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);\nint i2d_PublicKey(EVP_PKEY *a, unsigned char **pp);\n\nEVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);\nEVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)\n</code></pre>"},{"location":"man3/d2i_PrivateKey/#description","title":"DESCRIPTION","text":"<p>d2i_PrivateKey() decodes a private key using algorithm type. It attempts to use any key specific format or PKCS#8 unencrypted PrivateKeyInfo format. The type parameter should be a public key algorithm constant such as EVP_PKEY_RSA. An error occurs if the decoded key does not match type. d2i_PublicKey() does the same for public keys.</p> <p>d2i_AutoPrivateKey() is similar to d2i_PrivateKey() except it attempts to automatically detect the private key format.</p> <p>i2d_PrivateKey() encodes key. It uses a key specific format or, if none is defined for that key type, PKCS#8 unencrypted PrivateKeyInfo format. i2d_PublicKey() does the same for public keys.</p> <p>These functions are similar to the d2i_X509() functions; see d2i_X509(3).</p>"},{"location":"man3/d2i_PrivateKey/#notes","title":"NOTES","text":"<p>All the functions that operate on data in memory update the data pointer *pp after a successful operation, just like the other d2i and i2d functions; see d2i_X509(3).</p> <p>All these functions use DER format and unencrypted keys. Applications wishing to encrypt or decrypt private keys should use other functions such as d2i_PKCS8PrivateKey() instead.</p> <p>If the *a is not NULL when calling d2i_PrivateKey() or d2i_AutoPrivateKey() (i.e. an existing structure is being reused) and the key format is PKCS#8 then *a will be freed and replaced on a successful call.</p> <p>To decode a key with type EVP_PKEY_EC, d2i_PublicKey() requires *a to be a non-NULL EVP_PKEY structure assigned an EC_KEY structure referencing the proper EC_GROUP.</p>"},{"location":"man3/d2i_PrivateKey/#return-values","title":"RETURN VALUES","text":"<p>The d2i_PrivateKey(), d2i_AutoPrivateKey(), d2i_PrivateKey_bio(), d2i_PrivateKey_fp(), and d2i_PublicKey() functions return a valid EVP_KEY structure or NULL if an error occurs. The error code can be obtained by calling ERR_get_error(3).</p> <p>i2d_PrivateKey() and i2d_PublicKey() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling ERR_get_error(3).</p>"},{"location":"man3/d2i_PrivateKey/#see-also","title":"SEE ALSO","text":"<p>crypto(7), d2i_PKCS8PrivateKey_bio(3)</p>"},{"location":"man3/d2i_PrivateKey/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/d2i_SSL_SESSION/","title":"d2i_SSL_SESSION","text":""},{"location":"man3/d2i_SSL_SESSION/#name","title":"NAME","text":"<p>d2i_SSL_SESSION, i2d_SSL_SESSION - convert SSL_SESSION object from/to ASN1 representation</p>"},{"location":"man3/d2i_SSL_SESSION/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ssl.h&gt;\n\nSSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,\n                             long length);\nint i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);\n</code></pre>"},{"location":"man3/d2i_SSL_SESSION/#description","title":"DESCRIPTION","text":"<p>These functions decode and encode an SSL_SESSION object. For encoding details see d2i_X509(3).</p> <p>SSL_SESSION objects keep internal link information about the session cache list, when being inserted into one SSL_CTX object's session cache. One SSL_SESSION object, regardless of its reference count, must therefore only be used with one SSL_CTX object (and the SSL objects created from this SSL_CTX object).</p>"},{"location":"man3/d2i_SSL_SESSION/#return-values","title":"RETURN VALUES","text":"<p>d2i_SSL_SESSION() returns a pointer to the newly allocated SSL_SESSION object. In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack.</p> <p>i2d_SSL_SESSION() returns the size of the ASN1 representation in bytes. When the session is not valid, 0 is returned and no operation is performed.</p>"},{"location":"man3/d2i_SSL_SESSION/#see-also","title":"SEE ALSO","text":"<p>ssl(7), SSL_SESSION_free(3), SSL_CTX_sess_set_get_cb(3), d2i_X509(3)</p>"},{"location":"man3/d2i_SSL_SESSION/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/d2i_X509/","title":"d2i_X509","text":""},{"location":"man3/d2i_X509/#name","title":"NAME","text":"<p>d2i_ACCESS_DESCRIPTION, d2i_ADMISSIONS, d2i_ADMISSION_SYNTAX, d2i_ASIdOrRange, d2i_ASIdentifierChoice, d2i_ASIdentifiers, d2i_ASN1_BIT_STRING, d2i_ASN1_BMPSTRING, d2i_ASN1_ENUMERATED, d2i_ASN1_GENERALIZEDTIME, d2i_ASN1_GENERALSTRING, d2i_ASN1_IA5STRING, d2i_ASN1_INTEGER, d2i_ASN1_NULL, d2i_ASN1_OBJECT, d2i_ASN1_OCTET_STRING, d2i_ASN1_PRINTABLE, d2i_ASN1_PRINTABLESTRING, d2i_ASN1_SEQUENCE_ANY, d2i_ASN1_SET_ANY, d2i_ASN1_T61STRING, d2i_ASN1_TIME, d2i_ASN1_TYPE, d2i_ASN1_UINTEGER, d2i_ASN1_UNIVERSALSTRING, d2i_ASN1_UTCTIME, d2i_ASN1_UTF8STRING, d2i_ASN1_VISIBLESTRING, d2i_ASRange, d2i_AUTHORITY_INFO_ACCESS, d2i_AUTHORITY_KEYID, d2i_BASIC_CONSTRAINTS, d2i_CERTIFICATEPOLICIES, d2i_CMS_ContentInfo, d2i_CMS_ReceiptRequest, d2i_CMS_bio, d2i_CRL_DIST_POINTS, d2i_DHxparams, d2i_DIRECTORYSTRING, d2i_DISPLAYTEXT, d2i_DIST_POINT, d2i_DIST_POINT_NAME, d2i_DSAPrivateKey, d2i_DSAPrivateKey_bio, d2i_DSAPrivateKey_fp, d2i_DSAPublicKey, d2i_DSA_PUBKEY, d2i_DSA_PUBKEY_bio, d2i_DSA_PUBKEY_fp, d2i_DSA_SIG, d2i_DSAparams, d2i_ECDSA_SIG, d2i_ECPKParameters, d2i_ECParameters, d2i_ECPrivateKey, d2i_ECPrivateKey_bio, d2i_ECPrivateKey_fp, d2i_EC_PUBKEY, d2i_EC_PUBKEY_bio, d2i_EC_PUBKEY_fp, d2i_EDIPARTYNAME, d2i_ESS_CERT_ID, d2i_ESS_ISSUER_SERIAL, d2i_ESS_SIGNING_CERT, d2i_EXTENDED_KEY_USAGE, d2i_GENERAL_NAME, d2i_GENERAL_NAMES, d2i_IPAddressChoice, d2i_IPAddressFamily, d2i_IPAddressOrRange, d2i_IPAddressRange, d2i_ISSUING_DIST_POINT, d2i_NAMING_AUTHORITY, d2i_NETSCAPE_CERT_SEQUENCE, d2i_NETSCAPE_SPKAC, d2i_NETSCAPE_SPKI, d2i_NOTICEREF, d2i_OCSP_BASICRESP, d2i_OCSP_CERTID, d2i_OCSP_CERTSTATUS, d2i_OCSP_CRLID, d2i_OCSP_ONEREQ, d2i_OCSP_REQINFO, d2i_OCSP_REQUEST, d2i_OCSP_RESPBYTES, d2i_OCSP_RESPDATA, d2i_OCSP_RESPID, d2i_OCSP_RESPONSE, d2i_OCSP_REVOKEDINFO, d2i_OCSP_SERVICELOC, d2i_OCSP_SIGNATURE, d2i_OCSP_SINGLERESP, d2i_OTHERNAME, d2i_PBE2PARAM, d2i_PBEPARAM, d2i_PBKDF2PARAM, d2i_PKCS12, d2i_PKCS12_BAGS, d2i_PKCS12_MAC_DATA, d2i_PKCS12_SAFEBAG, d2i_PKCS12_bio, d2i_PKCS12_fp, d2i_PKCS7, d2i_PKCS7_DIGEST, d2i_PKCS7_ENCRYPT, d2i_PKCS7_ENC_CONTENT, d2i_PKCS7_ENVELOPE, d2i_PKCS7_ISSUER_AND_SERIAL, d2i_PKCS7_RECIP_INFO, d2i_PKCS7_SIGNED, d2i_PKCS7_SIGNER_INFO, d2i_PKCS7_SIGN_ENVELOPE, d2i_PKCS7_bio, d2i_PKCS7_fp, d2i_PKCS8_PRIV_KEY_INFO, d2i_PKCS8_PRIV_KEY_INFO_bio, d2i_PKCS8_PRIV_KEY_INFO_fp, d2i_PKCS8_bio, d2i_PKCS8_fp, d2i_PKEY_USAGE_PERIOD, d2i_POLICYINFO, d2i_POLICYQUALINFO, d2i_PROFESSION_INFO, d2i_PROXY_CERT_INFO_EXTENSION, d2i_PROXY_POLICY, d2i_RSAPrivateKey, d2i_RSAPrivateKey_bio, d2i_RSAPrivateKey_fp, d2i_RSAPublicKey, d2i_RSAPublicKey_bio, d2i_RSAPublicKey_fp, d2i_RSA_OAEP_PARAMS, d2i_RSA_PSS_PARAMS, d2i_RSA_PUBKEY, d2i_RSA_PUBKEY_bio, d2i_RSA_PUBKEY_fp, d2i_SCRYPT_PARAMS, d2i_SCT_LIST, d2i_SXNET, d2i_SXNETID, d2i_TS_ACCURACY, d2i_TS_MSG_IMPRINT, d2i_TS_MSG_IMPRINT_bio, d2i_TS_MSG_IMPRINT_fp, d2i_TS_REQ, d2i_TS_REQ_bio, d2i_TS_REQ_fp, d2i_TS_RESP, d2i_TS_RESP_bio, d2i_TS_RESP_fp, d2i_TS_STATUS_INFO, d2i_TS_TST_INFO, d2i_TS_TST_INFO_bio, d2i_TS_TST_INFO_fp, d2i_USERNOTICE, d2i_X509, d2i_X509_bio, d2i_X509_fp, d2i_X509_ALGOR, d2i_X509_ALGORS, d2i_X509_ATTRIBUTE, d2i_X509_CERT_AUX, d2i_X509_CINF, d2i_X509_CRL, d2i_X509_CRL_INFO, d2i_X509_CRL_bio, d2i_X509_CRL_fp, d2i_X509_EXTENSION, d2i_X509_EXTENSIONS, d2i_X509_NAME, d2i_X509_NAME_ENTRY, d2i_X509_PUBKEY, d2i_X509_REQ, d2i_X509_REQ_INFO, d2i_X509_REQ_bio, d2i_X509_REQ_fp, d2i_X509_REVOKED, d2i_X509_SIG, d2i_X509_VAL, i2d_ACCESS_DESCRIPTION, i2d_ADMISSIONS, i2d_ADMISSION_SYNTAX, i2d_ASIdOrRange, i2d_ASIdentifierChoice, i2d_ASIdentifiers, i2d_ASN1_BIT_STRING, i2d_ASN1_BMPSTRING, i2d_ASN1_ENUMERATED, i2d_ASN1_GENERALIZEDTIME, i2d_ASN1_GENERALSTRING, i2d_ASN1_IA5STRING, i2d_ASN1_INTEGER, i2d_ASN1_NULL, i2d_ASN1_OBJECT, i2d_ASN1_OCTET_STRING, i2d_ASN1_PRINTABLE, i2d_ASN1_PRINTABLESTRING, i2d_ASN1_SEQUENCE_ANY, i2d_ASN1_SET_ANY, i2d_ASN1_T61STRING, i2d_ASN1_TIME, i2d_ASN1_TYPE, i2d_ASN1_UNIVERSALSTRING, i2d_ASN1_UTCTIME, i2d_ASN1_UTF8STRING, i2d_ASN1_VISIBLESTRING, i2d_ASN1_bio_stream, i2d_ASRange, i2d_AUTHORITY_INFO_ACCESS, i2d_AUTHORITY_KEYID, i2d_BASIC_CONSTRAINTS, i2d_CERTIFICATEPOLICIES, i2d_CMS_ContentInfo, i2d_CMS_ReceiptRequest, i2d_CMS_bio, i2d_CRL_DIST_POINTS, i2d_DHxparams, i2d_DIRECTORYSTRING, i2d_DISPLAYTEXT, i2d_DIST_POINT, i2d_DIST_POINT_NAME, i2d_DSAPrivateKey, i2d_DSAPrivateKey_bio, i2d_DSAPrivateKey_fp, i2d_DSAPublicKey, i2d_DSA_PUBKEY, i2d_DSA_PUBKEY_bio, i2d_DSA_PUBKEY_fp, i2d_DSA_SIG, i2d_DSAparams, i2d_ECDSA_SIG, i2d_ECPKParameters, i2d_ECParameters, i2d_ECPrivateKey, i2d_ECPrivateKey_bio, i2d_ECPrivateKey_fp, i2d_EC_PUBKEY, i2d_EC_PUBKEY_bio, i2d_EC_PUBKEY_fp, i2d_EDIPARTYNAME, i2d_ESS_CERT_ID, i2d_ESS_ISSUER_SERIAL, i2d_ESS_SIGNING_CERT, i2d_EXTENDED_KEY_USAGE, i2d_GENERAL_NAME, i2d_GENERAL_NAMES, i2d_IPAddressChoice, i2d_IPAddressFamily, i2d_IPAddressOrRange, i2d_IPAddressRange, i2d_ISSUING_DIST_POINT, i2d_NAMING_AUTHORITY, i2d_NETSCAPE_CERT_SEQUENCE, i2d_NETSCAPE_SPKAC, i2d_NETSCAPE_SPKI, i2d_NOTICEREF, i2d_OCSP_BASICRESP, i2d_OCSP_CERTID, i2d_OCSP_CERTSTATUS, i2d_OCSP_CRLID, i2d_OCSP_ONEREQ, i2d_OCSP_REQINFO, i2d_OCSP_REQUEST, i2d_OCSP_RESPBYTES, i2d_OCSP_RESPDATA, i2d_OCSP_RESPID, i2d_OCSP_RESPONSE, i2d_OCSP_REVOKEDINFO, i2d_OCSP_SERVICELOC, i2d_OCSP_SIGNATURE, i2d_OCSP_SINGLERESP, i2d_OTHERNAME, i2d_PBE2PARAM, i2d_PBEPARAM, i2d_PBKDF2PARAM, i2d_PKCS12, i2d_PKCS12_BAGS, i2d_PKCS12_MAC_DATA, i2d_PKCS12_SAFEBAG, i2d_PKCS12_bio, i2d_PKCS12_fp, i2d_PKCS7, i2d_PKCS7_DIGEST, i2d_PKCS7_ENCRYPT, i2d_PKCS7_ENC_CONTENT, i2d_PKCS7_ENVELOPE, i2d_PKCS7_ISSUER_AND_SERIAL, i2d_PKCS7_NDEF, i2d_PKCS7_RECIP_INFO, i2d_PKCS7_SIGNED, i2d_PKCS7_SIGNER_INFO, i2d_PKCS7_SIGN_ENVELOPE, i2d_PKCS7_bio, i2d_PKCS7_fp, i2d_PKCS8PrivateKeyInfo_bio, i2d_PKCS8PrivateKeyInfo_fp, i2d_PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO_bio, i2d_PKCS8_PRIV_KEY_INFO_fp, i2d_PKCS8_bio, i2d_PKCS8_fp, i2d_PKEY_USAGE_PERIOD, i2d_POLICYINFO, i2d_POLICYQUALINFO, i2d_PROFESSION_INFO, i2d_PROXY_CERT_INFO_EXTENSION, i2d_PROXY_POLICY, i2d_RSAPrivateKey, i2d_RSAPrivateKey_bio, i2d_RSAPrivateKey_fp, i2d_RSAPublicKey, i2d_RSAPublicKey_bio, i2d_RSAPublicKey_fp, i2d_RSA_OAEP_PARAMS, i2d_RSA_PSS_PARAMS, i2d_RSA_PUBKEY, i2d_RSA_PUBKEY_bio, i2d_RSA_PUBKEY_fp, i2d_SCRYPT_PARAMS, i2d_SCT_LIST, i2d_SXNET, i2d_SXNETID, i2d_TS_ACCURACY, i2d_TS_MSG_IMPRINT, i2d_TS_MSG_IMPRINT_bio, i2d_TS_MSG_IMPRINT_fp, i2d_TS_REQ, i2d_TS_REQ_bio, i2d_TS_REQ_fp, i2d_TS_RESP, i2d_TS_RESP_bio, i2d_TS_RESP_fp, i2d_TS_STATUS_INFO, i2d_TS_TST_INFO, i2d_TS_TST_INFO_bio, i2d_TS_TST_INFO_fp, i2d_USERNOTICE, i2d_X509, i2d_X509_bio, i2d_X509_fp, i2d_X509_ALGOR, i2d_X509_ALGORS, i2d_X509_ATTRIBUTE, i2d_X509_CERT_AUX, i2d_X509_CINF, i2d_X509_CRL, i2d_X509_CRL_INFO, i2d_X509_CRL_bio, i2d_X509_CRL_fp, i2d_X509_EXTENSION, i2d_X509_EXTENSIONS, i2d_X509_NAME, i2d_X509_NAME_ENTRY, i2d_X509_PUBKEY, i2d_X509_REQ, i2d_X509_REQ_INFO, i2d_X509_REQ_bio, i2d_X509_REQ_fp, i2d_X509_REVOKED, i2d_X509_SIG, i2d_X509_VAL, - convert objects from/to ASN.1/DER representation</p>"},{"location":"man3/d2i_X509/#synopsis","title":"SYNOPSIS","text":"<pre><code>TYPE *d2i_TYPE(TYPE **a, const unsigned char **ppin, long length);\nTYPE *d2i_TYPE_bio(BIO *bp, TYPE **a);\nTYPE *d2i_TYPE_fp(FILE *fp, TYPE **a);\n\nint i2d_TYPE(TYPE *a, unsigned char **ppout);\nint i2d_TYPE_fp(FILE *fp, TYPE *a);\nint i2d_TYPE_bio(BIO *bp, TYPE *a);\n</code></pre>"},{"location":"man3/d2i_X509/#description","title":"DESCRIPTION","text":"<p>In the description here, TYPE is used a placeholder for any of the OpenSSL datatypes, such as X509_CRL. The function parameters ppin and ppout are generally either both named pp in the headers, or in and out.</p> <p>These functions convert OpenSSL objects to and from their ASN.1/DER encoding.  Unlike the C structures which can have pointers to sub-objects within, the DER is a serialized encoding, suitable for sending over the network, writing to a file, and so on.</p> <p>d2i_TYPE() attempts to decode len bytes at *ppin. If successful a pointer to the TYPE structure is returned and *ppin is incremented to the byte following the parsed data.  If a is not NULL then a pointer to the returned structure is also written to *a.  If an error occurred then NULL is returned.</p> <p>On a successful return, if *a is not NULL then it is assumed that *a contains a valid TYPE structure and an attempt is made to reuse it. This \"reuse\" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section).</p> <p>d2i_TYPE_bio() is similar to d2i_TYPE() except it attempts to parse data from BIO bp.</p> <p>d2i_TYPE_fp() is similar to d2i_TYPE() except it attempts to parse data from FILE pointer fp.</p> <p>i2d_TYPE() encodes the structure pointed to by a into DER format. If ppout is not NULL, it writes the DER encoded data to the buffer at *ppout, and increments it to point after the data just written. If the return value is negative an error occurred, otherwise it returns the length of the encoded data.</p> <p>If *ppout is NULL memory will be allocated for a buffer and the encoded data written to it. In this case *ppout is not incremented and it points to the start of the data just written.</p> <p>i2d_TYPE_bio() is similar to i2d_TYPE() except it writes the encoding of the structure a to BIO bp and it returns 1 for success and 0 for failure.</p> <p>i2d_TYPE_fp() is similar to i2d_TYPE() except it writes the encoding of the structure a to BIO bp and it returns 1 for success and 0 for failure.</p> <p>These routines do not encrypt private keys and therefore offer no security; use PEM_write_PrivateKey(3) or similar for writing to files.</p>"},{"location":"man3/d2i_X509/#notes","title":"NOTES","text":"<p>The letters i and d in i2d_TYPE stand for \"internal\" (that is, an internal C structure) and \"DER\" respectively. So i2d_TYPE converts from internal to DER.</p> <p>The functions can also understand BER forms.</p> <p>The actual TYPE structure passed to i2d_TYPE() must be a valid populated TYPE structure -- it cannot simply be fed with an empty structure such as that returned by TYPE_new().</p> <p>The encoded data is in binary form and may contain embedded zeros. Therefore, any FILE pointers or BIOs should be opened in binary mode. Functions such as strlen() will not return the correct length of the encoded structure.</p> <p>The ways that *ppin and *ppout are incremented after the operation can trap the unwary. See the WARNINGS section for some common errors. The reason for this-auto increment behaviour is to reflect a typical usage of ASN1 functions: after one structure is encoded or decoded another will be processed after it.</p> <p>The following points about the data types might be useful:</p> <ul> <li> <p>ASN1_OBJECT</p> <p>Represents an ASN1 OBJECT IDENTIFIER.</p> </li> <li> <p>DHparams</p> <p>Represents a PKCS#3 DH parameters structure.</p> </li> <li> <p>DHxparams</p> <p>Represents an ANSI X9.42 DH parameters structure.</p> </li> <li> <p>DSA_PUBKEY</p> <p>Represents a DSA public key using a SubjectPublicKeyInfo structure.</p> </li> <li> <p>DSAPublicKey, DSAPrivateKey</p> <p>Use a non-standard OpenSSL format and should be avoided; use DSA_PUBKEY, PEM_write_PrivateKey(3), or similar instead.</p> </li> <li> <p>ECDSA_SIG</p> <p>Represents an ECDSA signature.</p> </li> <li> <p>RSAPublicKey</p> <p>Represents a PKCS#1 RSA public key structure.</p> </li> <li> <p>X509_ALGOR</p> <p>Represents an AlgorithmIdentifier structure as used in IETF RFC 6960 and elsewhere.</p> </li> <li> <p>X509_Name</p> <p>Represents a Name type as used for subject and issuer names in IETF RFC 6960 and elsewhere.</p> </li> <li> <p>X509_REQ</p> <p>Represents a PKCS#10 certificate request.</p> </li> <li> <p>X509_SIG</p> <p>Represents the DigestInfo structure defined in PKCS#1 and PKCS#7.</p> </li> </ul>"},{"location":"man3/d2i_X509/#return-values","title":"RETURN VALUES","text":"<p>d2i_TYPE(), d2i_TYPE_bio() and d2i_TYPE_fp() return a valid TYPE structure or NULL if an error occurs.  If the \"reuse\" capability has been used with a valid structure being passed in via a, then the object is freed in the event of error and *a is set to NULL.</p> <p>i2d_TYPE() returns the number of bytes successfully encoded or a negative value if an error occurs.</p> <p>i2d_TYPE_bio() and i2d_TYPE_fp() return 1 for success and 0 if an error occurs.</p>"},{"location":"man3/d2i_X509/#examples","title":"EXAMPLES","text":"<p>Allocate and encode the DER encoding of an X509 structure:</p> <pre><code>int len;\nunsigned char *buf;\n\nbuf = NULL;\nlen = i2d_X509(x, &amp;buf);\nif (len &lt; 0)\n    /* error */\n</code></pre> <p>Attempt to decode a buffer:</p> <pre><code>X509 *x;\nunsigned char *buf;\nconst unsigned char *p;\nint len;\n\n/* Set up buf and len to point to the input buffer. */\np = buf;\nx = d2i_X509(NULL, &amp;p, len);\nif (x == NULL)\n    /* error */\n</code></pre> <p>Alternative technique:</p> <pre><code>X509 *x;\nunsigned char *buf;\nconst unsigned char *p;\nint len;\n\n/* Set up buf and len to point to the input buffer. */\np = buf;\nx = NULL;\n\nif (d2i_X509(&amp;x, &amp;p, len) == NULL)\n    /* error */\n</code></pre>"},{"location":"man3/d2i_X509/#warnings","title":"WARNINGS","text":"<p>Using a temporary variable is mandatory. A common mistake is to attempt to use a buffer directly as follows:</p> <pre><code>int len;\nunsigned char *buf;\n\nlen = i2d_X509(x, NULL);\nbuf = OPENSSL_malloc(len);\n...\ni2d_X509(x, &amp;buf);\n...\nOPENSSL_free(buf);\n</code></pre> <p>This code will result in buf apparently containing garbage because it was incremented after the call to point after the data just written. Also buf will no longer contain the pointer allocated by OPENSSL_malloc() and the subsequent call to OPENSSL_free() is likely to crash.</p> <p>Another trap to avoid is misuse of the a argument to d2i_TYPE():</p> <pre><code>X509 *x;\n\nif (d2i_X509(&amp;x, &amp;p, len) == NULL)\n    /* error */\n</code></pre> <p>This will probably crash somewhere in d2i_X509(). The reason for this is that the variable x is uninitialized and an attempt will be made to interpret its (invalid) value as an X509 structure, typically causing a segmentation violation. If x is set to NULL first then this will not happen.</p>"},{"location":"man3/d2i_X509/#bugs","title":"BUGS","text":"<p>In some versions of OpenSSL the \"reuse\" behaviour of d2i_TYPE() when *a is valid is broken and some parts of the reused structure may persist if they are not present in the new one. Additionally, in versions of OpenSSL prior to 1.1.0, when the \"reuse\" behaviour is used and an error occurs the behaviour is inconsistent. Some functions behaved as described here, while some did not free *a on error and did not set *a to NULL.</p> <p>As a result of the above issues the \"reuse\" behaviour is strongly discouraged.</p> <p>i2d_TYPE() will not return an error in many versions of OpenSSL, if mandatory fields are not initialized due to a programming error then the encoded structure may contain invalid data or omit the fields entirely and will not be parsed by d2i_TYPE(). This may be fixed in future so code should not assume that i2d_TYPE() will always succeed.</p> <p>Any function which encodes a structure (i2d_TYPE(), i2d_TYPE() or i2d_TYPE()) may return a stale encoding if the structure has been modified after deserialization or previous serialization. This is because some objects cache the encoding for efficiency reasons.</p>"},{"location":"man3/d2i_X509/#copyright","title":"COPYRIGHT","text":"<p>Copyright 1998-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/i2d_CMS_bio_stream/","title":"i2d_CMS_bio_stream","text":""},{"location":"man3/i2d_CMS_bio_stream/#name","title":"NAME","text":"<p>i2d_CMS_bio_stream - output CMS_ContentInfo structure in BER format</p>"},{"location":"man3/i2d_CMS_bio_stream/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/cms.h&gt;\n\nint i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *data, int flags);\n</code></pre>"},{"location":"man3/i2d_CMS_bio_stream/#description","title":"DESCRIPTION","text":"<p>i2d_CMS_bio_stream() outputs a CMS_ContentInfo structure in BER format.</p> <p>It is otherwise identical to the function SMIME_write_CMS().</p>"},{"location":"man3/i2d_CMS_bio_stream/#notes","title":"NOTES","text":"<p>This function is effectively a version of the i2d_CMS_bio() supporting streaming.</p>"},{"location":"man3/i2d_CMS_bio_stream/#bugs","title":"BUGS","text":"<p>The prefix \"i2d\" is arguably wrong because the function outputs BER format.</p>"},{"location":"man3/i2d_CMS_bio_stream/#return-values","title":"RETURN VALUES","text":"<p>i2d_CMS_bio_stream() returns 1 for success or 0 for failure.</p>"},{"location":"man3/i2d_CMS_bio_stream/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), CMS_sign(3), CMS_verify(3), CMS_encrypt(3) CMS_decrypt(3), SMIME_write_CMS(3), PEM_write_bio_CMS_stream(3)</p>"},{"location":"man3/i2d_CMS_bio_stream/#history","title":"HISTORY","text":"<p>The i2d_CMS_bio_stream() function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/i2d_CMS_bio_stream/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/i2d_PKCS7_bio_stream/","title":"i2d_PKCS7_bio_stream","text":""},{"location":"man3/i2d_PKCS7_bio_stream/#name","title":"NAME","text":"<p>i2d_PKCS7_bio_stream - output PKCS7 structure in BER format</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/pkcs7.h&gt;\n\nint i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *data, int flags);\n</code></pre>"},{"location":"man3/i2d_PKCS7_bio_stream/#description","title":"DESCRIPTION","text":"<p>i2d_PKCS7_bio_stream() outputs a PKCS7 structure in BER format.</p> <p>It is otherwise identical to the function SMIME_write_PKCS7().</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#notes","title":"NOTES","text":"<p>This function is effectively a version of the d2i_PKCS7_bio() supporting streaming.</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#bugs","title":"BUGS","text":"<p>The prefix \"i2d\" is arguably wrong because the function outputs BER format.</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#return-values","title":"RETURN VALUES","text":"<p>i2d_PKCS7_bio_stream() returns 1 for success or 0 for failure.</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3), PKCS7_sign(3), PKCS7_verify(3), PKCS7_encrypt(3) PKCS7_decrypt(3), SMIME_write_PKCS7(3), PEM_write_bio_PKCS7_stream(3)</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#history","title":"HISTORY","text":"<p>The i2d_PKCS7_bio_stream() function was added in OpenSSL 1.0.0.</p>"},{"location":"man3/i2d_PKCS7_bio_stream/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/i2d_re_X509_tbs/","title":"i2d_re_X509_tbs","text":""},{"location":"man3/i2d_re_X509_tbs/#name","title":"NAME","text":"<p>d2i_X509_AUX, i2d_X509_AUX, i2d_re_X509_tbs, i2d_re_X509_CRL_tbs, i2d_re_X509_REQ_tbs - X509 encode and decode functions</p>"},{"location":"man3/i2d_re_X509_tbs/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n\nX509 *d2i_X509_AUX(X509 **px, const unsigned char **in, long len);\nint i2d_X509_AUX(X509 *x, unsigned char **out);\nint i2d_re_X509_tbs(X509 *x, unsigned char **out);\nint i2d_re_X509_CRL_tbs(X509_CRL *crl, unsigned char **pp);\nint i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp);\n</code></pre>"},{"location":"man3/i2d_re_X509_tbs/#description","title":"DESCRIPTION","text":"<p>The X509 encode and decode routines encode and parse an X509 structure, which represents an X509 certificate.</p> <p>d2i_X509_AUX() is similar to d2i_X509(3) but the input is expected to consist of an X509 certificate followed by auxiliary trust information. This is used by the PEM routines to read \"TRUSTED CERTIFICATE\" objects. This function should not be called on untrusted input.</p> <p>i2d_X509_AUX() is similar to i2d_X509(3), but the encoded output contains both the certificate and any auxiliary trust information. This is used by the PEM routines to write \"TRUSTED CERTIFICATE\" objects. Note that this is a non-standard OpenSSL-specific data format.</p> <p>i2d_re_X509_tbs() is similar to i2d_X509(3) except it encodes only the TBSCertificate portion of the certificate.  i2d_re_X509_CRL_tbs() and i2d_re_X509_REQ_tbs() are analogous for CRL and certificate request, respectively.  The \"re\" in i2d_re_X509_tbs stands for \"re-encode\", and ensures that a fresh encoding is generated in case the object has been modified after creation (see the BUGS section).</p> <p>The encoding of the TBSCertificate portion of a certificate is cached in the X509 structure internally to improve encoding performance and to ensure certificate signatures are verified correctly in some certificates with broken (non-DER) encodings.</p> <p>If, after modification, the X509 object is re-signed with X509_sign(), the encoding is automatically renewed. Otherwise, the encoding of the TBSCertificate portion of the X509 can be manually renewed by calling i2d_re_X509_tbs().</p>"},{"location":"man3/i2d_re_X509_tbs/#return-values","title":"RETURN VALUES","text":"<p>d2i_X509_AUX() returns a valid X509 structure or NULL if an error occurred.</p> <p>i2d_X509_AUX() returns the length of encoded data or -1 on error.</p> <p>i2d_re_X509_tbs(), i2d_re_X509_CRL_tbs() and i2d_re_X509_REQ_tbs() return the length of encoded data or 0 on error.</p>"},{"location":"man3/i2d_re_X509_tbs/#see-also","title":"SEE ALSO","text":"<p>ERR_get_error(3) X509_CRL_get0_by_serial(3), X509_get0_signature(3), X509_get_ext_d2i(3), X509_get_extension_flags(3), X509_get_pubkey(3), X509_get_subject_name(3), X509_get_version(3), X509_NAME_add_entry_by_txt(3), X509_NAME_ENTRY_get_object(3), X509_NAME_get_index_by_NID(3), X509_NAME_print_ex(3), X509_new(3), X509_sign(3), X509V3_get_d2i(3), X509_verify_cert(3)</p>"},{"location":"man3/i2d_re_X509_tbs/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2002-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man3/o2i_SCT_LIST/","title":"o2i_SCT_LIST","text":""},{"location":"man3/o2i_SCT_LIST/#name","title":"NAME","text":"<p>o2i_SCT_LIST, i2o_SCT_LIST, o2i_SCT, i2o_SCT - decode and encode Signed Certificate Timestamp lists in TLS wire format</p>"},{"location":"man3/o2i_SCT_LIST/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n\nSTACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,\n                            size_t len);\nint i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);\nSCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len);\nint i2o_SCT(const SCT *sct, unsigned char **out);\n</code></pre>"},{"location":"man3/o2i_SCT_LIST/#description","title":"DESCRIPTION","text":"<p>The SCT_LIST and SCT functions are very similar to the i2d and d2i family of functions, except that they convert to and from TLS wire format, as described in RFC 6962. See d2i_SCT_LIST for more information about how the parameters are treated and the return values.</p>"},{"location":"man3/o2i_SCT_LIST/#return-values","title":"RETURN VALUES","text":"<p>All of the functions have return values consistent with those stated for d2i_SCT_LIST and i2d_SCT_LIST.</p>"},{"location":"man3/o2i_SCT_LIST/#see-also","title":"SEE ALSO","text":"<p>ct(7), d2i_SCT_LIST(3), i2d_SCT_LIST(3)</p>"},{"location":"man3/o2i_SCT_LIST/#history","title":"HISTORY","text":"<p>These functions were added in OpenSSL 1.1.0.</p>"},{"location":"man3/o2i_SCT_LIST/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man5/config/","title":"config","text":""},{"location":"man5/config/#name","title":"NAME","text":"<p>config - OpenSSL CONF library configuration files</p>"},{"location":"man5/config/#description","title":"DESCRIPTION","text":"<p>The OpenSSL CONF library can be used to read configuration files. It is used for the OpenSSL master configuration file openssl.cnf and in a few other places like SPKAC files and certificate extension files for the x509 utility. OpenSSL applications can also use the CONF library for their own purposes.</p> <p>A configuration file is divided into a number of sections. Each section starts with a line [ section_name ] and ends when a new section is started or end of file is reached. A section name can consist of alphanumeric characters and underscores.</p> <p>The first section of a configuration file is special and is referred to as the default section. This section is usually unnamed and spans from the start of file until the first named section. When a name is being looked up it is first looked up in a named section (if any) and then the default section.</p> <p>The environment is mapped onto a section called ENV.</p> <p>Comments can be included by preceding them with the # character</p> <p>Other files can be included using the .include directive followed by a path. If the path points to a directory all files with names ending with .cnf or .conf are included from the directory. Recursive inclusion of directories from files in such directory is not supported. That means the files in the included directory can also contain .include directives but only inclusion of regular files is supported there. The inclusion of directories is not supported on systems without POSIX IO support.</p> <p>It is strongly recommended to use absolute paths with the .include directive. Relative paths are evaluated based on the application current working directory so unless the configuration file containing the .include directive is application specific the inclusion will not work as expected.</p> <p>There can be optional = character and whitespace characters between .include directive and the path which can be useful in cases the configuration file needs to be loaded by old OpenSSL versions which do not support the .include syntax. They would bail out with error if the = character is not present but with it they just ignore the include.</p> <p>Each section in a configuration file consists of a number of name and value pairs of the form name=value</p> <p>The name string can contain any alphanumeric characters as well as a few punctuation symbols such as . , ; and _.</p> <p>The value string consists of the string following the = character until end of line with any leading and trailing white space removed.</p> <p>The value string undergoes variable expansion. This can be done by including the form $var or ${var}: this will substitute the value of the named variable in the current section. It is also possible to substitute a value from another section using the syntax $section::name or ${section::name}. By using the form $ENV::name environment variables can be substituted. It is also possible to assign values to environment variables by using the name ENV::name, this will work if the program looks up environment variables using the CONF library instead of calling getenv() directly. The value string must not exceed 64k in length after variable expansion. Otherwise an error will occur.</p> <p>It is possible to escape certain characters by using any kind of quote or the \\ character. By making the last character of a line a \\ a value string can be spread across multiple lines. In addition the sequences \\n, \\r, \\b and \\t are recognized.</p> <p>All expansion and escape rules as described above that apply to value also apply to the path of the .include directive.</p>"},{"location":"man5/config/#openssl-library-configuration","title":"OPENSSL LIBRARY CONFIGURATION","text":"<p>Applications can automatically configure certain aspects of OpenSSL using the master OpenSSL configuration file, or optionally an alternative configuration file. The openssl utility includes this functionality: any sub command uses the master OpenSSL configuration file unless an option is used in the sub command to use an alternative configuration file.</p> <p>To enable library configuration the default section needs to contain an appropriate line which points to the main configuration section. The default name is openssl_conf which is used by the openssl utility. Other applications may use an alternative name such as myapplication_conf. All library configuration lines appear in the default section at the start of the configuration file.</p> <p>The configuration section should consist of a set of name value pairs which contain specific module configuration information. The name represents the name of the configuration module. The meaning of the value is module specific: it may, for example, represent a further configuration section containing configuration module specific information. E.g.:</p> <pre><code># This must be in the default section\nopenssl_conf = openssl_init\n\n[openssl_init]\n\noid_section = new_oids\nengines = engine_section\n\n[new_oids]\n\n... new oids here ...\n\n[engine_section]\n\n... engine stuff here ...\n</code></pre> <p>The features of each configuration module are described below.</p>"},{"location":"man5/config/#asn1-object-configuration-module","title":"ASN1 Object Configuration Module","text":"<p>This module has the name oid_section. The value of this variable points to a section containing name value pairs of OIDs: the name is the OID short and long name, the value is the numerical form of the OID. Although some of the openssl utility sub commands already have their own ASN1 OBJECT section functionality not all do. By using the ASN1 OBJECT configuration module all the openssl utility sub commands can see the new objects as well as any compliant applications. For example:</p> <pre><code>[new_oids]\n\nsome_new_oid = 1.2.3.4\nsome_other_oid = 1.2.3.5\n</code></pre> <p>It is also possible to set the value to the long name followed by a comma and the numerical OID form. For example:</p> <pre><code>shortName = some object long name, 1.2.3.4\n</code></pre>"},{"location":"man5/config/#engine-configuration-module","title":"Engine Configuration Module","text":"<p>This ENGINE configuration module has the name engines. The value of this variable points to a section containing further ENGINE configuration information.</p> <p>The section pointed to by engines is a table of engine names (though see engine_id below) and further sections containing configuration information specific to each ENGINE.</p> <p>Each ENGINE specific section is used to set default algorithms, load dynamic, perform initialization and send ctrls. The actual operation performed depends on the command name which is the name of the name value pair. The currently supported commands are listed below.</p> <p>For example:</p> <pre><code>[engine_section]\n\n# Configure ENGINE named \"foo\"\nfoo = foo_section\n# Configure ENGINE named \"bar\"\nbar = bar_section\n\n[foo_section]\n... foo ENGINE specific commands ...\n\n[bar_section]\n... \"bar\" ENGINE specific commands ...\n</code></pre> <p>The command engine_id is used to give the ENGINE name. If used this command must be first. For example:</p> <pre><code>[engine_section]\n# This would normally handle an ENGINE named \"foo\"\nfoo = foo_section\n\n[foo_section]\n# Override default name and use \"myfoo\" instead.\nengine_id = myfoo\n</code></pre> <p>The command dynamic_path loads and adds an ENGINE from the given path. It is equivalent to sending the ctrls SO_PATH with the path argument followed by LIST_ADD with value 2 and LOAD to the dynamic ENGINE. If this is not the required behaviour then alternative ctrls can be sent directly to the dynamic ENGINE using ctrl commands.</p> <p>The command init determines whether to initialize the ENGINE. If the value is 0 the ENGINE will not be initialized, if 1 and attempt it made to initialized the ENGINE immediately. If the init command is not present then an attempt will be made to initialize the ENGINE after all commands in its section have been processed.</p> <p>The command default_algorithms sets the default algorithms an ENGINE will supply using the functions ENGINE_set_default_string().</p> <p>If the name matches none of the above command names it is assumed to be a ctrl command which is sent to the ENGINE. The value of the command is the argument to the ctrl command. If the value is the string EMPTY then no value is sent to the command.</p> <p>For example:</p> <pre><code>[engine_section]\n\n# Configure ENGINE named \"foo\"\nfoo = foo_section\n\n[foo_section]\n# Load engine from DSO\ndynamic_path = /some/path/fooengine.so\n# A foo specific ctrl.\nsome_ctrl = some_value\n# Another ctrl that doesn't take a value.\nother_ctrl = EMPTY\n# Supply all default algorithms\ndefault_algorithms = ALL\n</code></pre>"},{"location":"man5/config/#evp-configuration-module","title":"EVP Configuration Module","text":"<p>This modules has the name alg_section which points to a section containing algorithm commands.</p> <p>Currently the only algorithm command supported is fips_mode whose value can only be the boolean string off. If fips_mode is set to on, an error occurs as this library version is not FIPS capable.</p>"},{"location":"man5/config/#ssl-configuration-module","title":"SSL Configuration Module","text":"<p>This module has the name ssl_conf which points to a section containing SSL configurations.</p> <p>Each line in the SSL configuration section contains the name of the configuration and the section containing it.</p> <p>Each configuration section consists of command value pairs for SSL_CONF. Each pair will be passed to a SSL_CTX or SSL structure if it calls SSL_CTX_config() or SSL_config() with the appropriate configuration name.</p> <p>Note: any characters before an initial dot in the configuration section are ignored so the same command can be used multiple times.</p> <p>For example:</p> <pre><code>ssl_conf = ssl_sect\n\n[ssl_sect]\n\nserver = server_section\n\n[server_section]\n\nRSA.Certificate = server-rsa.pem\nECDSA.Certificate = server-ecdsa.pem\nCiphers = ALL:!RC4\n</code></pre> <p>The system default configuration with name system_default if present will be applied during any creation of the SSL_CTX structure.</p> <p>Example of a configuration with the system default:</p> <pre><code>ssl_conf = ssl_sect\n\n[ssl_sect]\nsystem_default = system_default_sect\n\n[system_default_sect]\nMinProtocol = TLSv1.2\nMinProtocol = DTLSv1.2\n</code></pre>"},{"location":"man5/config/#notes","title":"NOTES","text":"<p>If a configuration file attempts to expand a variable that doesn't exist then an error is flagged and the file will not load. This can happen if an attempt is made to expand an environment variable that doesn't exist. For example in a previous version of OpenSSL the default OpenSSL master configuration file used the value of HOME which may not be defined on non Unix systems and would cause an error.</p> <p>This can be worked around by including a default section to provide a default value: then if the environment lookup fails the default value will be used instead. For this to work properly the default value must be defined earlier in the configuration file than the expansion. See the EXAMPLES section for an example of how to do this.</p> <p>If the same variable exists in the same section then all but the last value will be silently ignored. In certain circumstances such as with DNs the same field may occur multiple times. This is usually worked around by ignoring any characters before an initial . e.g.</p> <pre><code>1.OU=\"My first OU\"\n2.OU=\"My Second OU\"\n</code></pre>"},{"location":"man5/config/#examples","title":"EXAMPLES","text":"<p>Here is a sample configuration file using some of the features mentioned above.</p> <pre><code># This is the default section.\n\nHOME=/temp\nRANDFILE= ${ENV::HOME}/.rnd\nconfigdir=$ENV::HOME/config\n\n[ section_one ]\n\n# We are now in section one.\n\n# Quotes permit leading and trailing whitespace\nany = \" any variable name \"\n\nother = A string that can \\\ncover several lines \\\nby including \\\\ characters\n\nmessage = Hello World\\n\n\n[ section_two ]\n\ngreeting = $section_one::message\n</code></pre> <p>This next example shows how to expand environment variables safely.</p> <p>Suppose you want a variable called tmpfile to refer to a temporary filename. The directory it is placed in can determined by the TEMP or TMP environment variables but they may not be set to any value at all. If you just include the environment variable names and the variable doesn't exist then this will cause an error when an attempt is made to load the configuration file. By making use of the default section both values can be looked up with TEMP taking priority and /tmp used if neither is defined:</p> <pre><code>TMP=/tmp\n# The above value is used if TMP isn't in the environment\nTEMP=$ENV::TMP\n# The above value is used if TEMP isn't in the environment\ntmpfile=${ENV::TEMP}/tmp.filename\n</code></pre> <p>Simple OpenSSL library configuration example to enter FIPS mode:</p> <pre><code># Default appname: should match \"appname\" parameter (if any)\n# supplied to CONF_modules_load_file et al.\nopenssl_conf = openssl_conf_section\n\n[openssl_conf_section]\n# Configuration module list\nalg_section = evp_sect\n\n[evp_sect]\n# Set to \"yes\" to enter FIPS mode if supported\nfips_mode = yes\n</code></pre> <p>Note: in the above example you will get an error in non FIPS capable versions of OpenSSL.</p> <p>Simple OpenSSL library configuration to make TLS 1.2 and DTLS 1.2 the system-default minimum TLS and DTLS versions, respectively:</p> <pre><code># Toplevel section for openssl (including libssl)\nopenssl_conf = default_conf_section\n\n[default_conf_section]\n# We only specify configuration for the \"ssl module\"\nssl_conf = ssl_section\n\n[ssl_section]\nsystem_default = system_default_section\n\n[system_default_section]\nMinProtocol = TLSv1.2\nMinProtocol = DTLSv1.2\n</code></pre> <p>The minimum TLS protocol is applied to SSL_CTX objects that are TLS-based, and the minimum DTLS protocol to those are DTLS-based. The same applies also to maximum versions set with MaxProtocol.</p> <p>More complex OpenSSL library configuration. Add OID and don't enter FIPS mode:</p> <pre><code># Default appname: should match \"appname\" parameter (if any)\n# supplied to CONF_modules_load_file et al.\nopenssl_conf = openssl_conf_section\n\n[openssl_conf_section]\n# Configuration module list\nalg_section = evp_sect\noid_section = new_oids\n\n[evp_sect]\n# This will have no effect as FIPS mode is off by default.\n# Set to \"yes\" to enter FIPS mode, if supported\nfips_mode = no\n\n[new_oids]\n# New OID, just short name\nnewoid1 = 1.2.3.4.1\n# New OID shortname and long name\nnewoid2 = New OID 2 long name, 1.2.3.4.2\n</code></pre> <p>The above examples can be used with any application supporting library configuration if \"openssl_conf\" is modified to match the appropriate \"appname\".</p> <p>For example if the second sample file above is saved to \"example.cnf\" then the command line:</p> <pre><code>OPENSSL_CONF=example.cnf openssl asn1parse -genstr OID:1.2.3.4.1\n</code></pre> <p>will output:</p> <pre><code>0:d=0  hl=2 l=   4 prim: OBJECT            :newoid1\n</code></pre> <p>showing that the OID \"newoid1\" has been added as \"1.2.3.4.1\".</p>"},{"location":"man5/config/#environment","title":"ENVIRONMENT","text":"<ul> <li> <p>OPENSSL_CONF</p> <p>The path to the config file. Ignored in set-user-ID and set-group-ID programs.</p> </li> <li> <p>OPENSSL_ENGINES</p> <p>The path to the engines directory. Ignored in set-user-ID and set-group-ID programs.</p> </li> </ul>"},{"location":"man5/config/#bugs","title":"BUGS","text":"<p>Currently there is no way to include characters using the octal \\nnn form. Strings are all null terminated so nulls cannot form part of the value.</p> <p>The escaping isn't quite right: if you want to use sequences like \\n you can't use any quote escaping on the same line.</p> <p>Files are loaded in a single pass. This means that a variable expansion will only work if the variables referenced are defined earlier in the file.</p>"},{"location":"man5/config/#see-also","title":"SEE ALSO","text":"<p>x509(1), req(1), ca(1)</p>"},{"location":"man5/config/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man5/x509v3_config/","title":"x509v3_config","text":""},{"location":"man5/x509v3_config/#name","title":"NAME","text":"<p>x509v3_config - X509 V3 certificate extension configuration format</p>"},{"location":"man5/x509v3_config/#description","title":"DESCRIPTION","text":"<p>Several of the OpenSSL utilities can add extensions to a certificate or certificate request based on the contents of a configuration file.</p> <p>Typically the application will contain an option to point to an extension section. Each line of the extension section takes the form:</p> <pre><code>extension_name=[critical,] extension_options\n</code></pre> <p>If critical is present then the extension will be critical.</p> <p>The format of extension_options depends on the value of extension_name.</p> <p>There are four main types of extension: string extensions, multi-valued extensions, raw and arbitrary extensions.</p> <p>String extensions simply have a string which contains either the value itself or how it is obtained.</p> <p>For example:</p> <pre><code>nsComment=\"This is a Comment\"\n</code></pre> <p>Multi-valued extensions have a short form and a long form. The short form is a list of names and values:</p> <pre><code>basicConstraints=critical,CA:true,pathlen:1\n</code></pre> <p>The long form allows the values to be placed in a separate section:</p> <pre><code>basicConstraints=critical,@bs_section\n\n[bs_section]\n\nCA=true\npathlen=1\n</code></pre> <p>Both forms are equivalent.</p> <p>The syntax of raw extensions is governed by the extension code: it can for example contain data in multiple sections. The correct syntax to use is defined by the extension code itself: check out the certificate policies extension for an example.</p> <p>If an extension type is unsupported then the arbitrary extension syntax must be used, see the ARBITRARY EXTENSIONS section for more details.</p>"},{"location":"man5/x509v3_config/#standard-extensions","title":"STANDARD EXTENSIONS","text":"<p>The following sections describe each supported extension in detail.</p>"},{"location":"man5/x509v3_config/#basic-constraints","title":"Basic Constraints.","text":"<p>This is a multi valued extension which indicates whether a certificate is a CA certificate. The first (mandatory) name is CA followed by TRUE or FALSE. If CA is TRUE then an optional pathlen name followed by a nonnegative value can be included.</p> <p>For example:</p> <pre><code>basicConstraints=CA:TRUE\n\nbasicConstraints=CA:FALSE\n\nbasicConstraints=critical,CA:TRUE, pathlen:0\n</code></pre> <p>A CA certificate must include the basicConstraints value with the CA field set to TRUE. An end user certificate must either set CA to FALSE or exclude the extension entirely. Some software may require the inclusion of basicConstraints with CA set to FALSE for end entity certificates.</p> <p>The pathlen parameter indicates the maximum number of CAs that can appear below this one in a chain. So if you have a CA with a pathlen of zero it can only be used to sign end user certificates and not further CAs.</p>"},{"location":"man5/x509v3_config/#key-usage","title":"Key Usage.","text":"<p>Key usage is a multi valued extension consisting of a list of names of the permitted key usages.</p> <p>The supported names are: digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly and decipherOnly.</p> <p>Examples:</p> <pre><code>keyUsage=digitalSignature, nonRepudiation\n\nkeyUsage=critical, keyCertSign\n</code></pre>"},{"location":"man5/x509v3_config/#extended-key-usage","title":"Extended Key Usage.","text":"<p>This extensions consists of a list of usages indicating purposes for which the certificate public key can be used for,</p> <p>These can either be object short names or the dotted numerical form of OIDs. While any OID can be used only certain values make sense. In particular the following PKIX, NS and MS values are meaningful:</p> <pre><code>Value                  Meaning\n-----                  -------\nserverAuth             SSL/TLS Web Server Authentication.\nclientAuth             SSL/TLS Web Client Authentication.\ncodeSigning            Code signing.\nemailProtection        E-mail Protection (S/MIME).\ntimeStamping           Trusted Timestamping\nOCSPSigning            OCSP Signing\nipsecIKE               ipsec Internet Key Exchange\nmsCodeInd              Microsoft Individual Code Signing (authenticode)\nmsCodeCom              Microsoft Commercial Code Signing (authenticode)\nmsCTLSign              Microsoft Trust List Signing\nmsEFS                  Microsoft Encrypted File System\n</code></pre> <p>Examples:</p> <pre><code>extendedKeyUsage=critical,codeSigning,1.2.3.4\nextendedKeyUsage=serverAuth,clientAuth\n</code></pre>"},{"location":"man5/x509v3_config/#subject-key-identifier","title":"Subject Key Identifier.","text":"<p>This is really a string extension and can take two possible values. Either the word hash which will automatically follow the guidelines in RFC3280 or a hex string giving the extension value to include. The use of the hex string is strongly discouraged.</p> <p>Example:</p> <pre><code>subjectKeyIdentifier=hash\n</code></pre>"},{"location":"man5/x509v3_config/#authority-key-identifier","title":"Authority Key Identifier.","text":"<p>The authority key identifier extension permits two options. keyid and issuer: both can take the optional value \"always\".</p> <p>If the keyid option is present an attempt is made to copy the subject key identifier from the parent certificate. If the value \"always\" is present then an error is returned if the option fails.</p> <p>The issuer option copies the issuer and serial number from the issuer certificate. This will only be done if the keyid option fails or is not included unless the \"always\" flag will always include the value.</p> <p>Example:</p> <pre><code>authorityKeyIdentifier=keyid,issuer\n</code></pre>"},{"location":"man5/x509v3_config/#subject-alternative-name","title":"Subject Alternative Name.","text":"<p>The subject alternative name extension allows various literal values to be included in the configuration file. These include email (an email address) URI a uniform resource indicator, DNS (a DNS domain name), RID (a registered ID: OBJECT IDENTIFIER), IP (an IP address), dirName (a distinguished name) and otherName.</p> <p>The email option include a special 'copy' value. This will automatically include any email addresses contained in the certificate subject name in the extension.</p> <p>The IP address used in the IP options can be in either IPv4 or IPv6 format.</p> <p>The value of dirName should point to a section containing the distinguished name to use as a set of name value pairs. Multi values AVAs can be formed by prefacing the name with a + character.</p> <p>otherName can include arbitrary data associated with an OID: the value should be the OID followed by a semicolon and the content in standard ASN1_generate_nconf(3) format.</p> <p>Examples:</p> <pre><code>subjectAltName=email:copy,email:my@other.address,URI:http://my.url.here/\nsubjectAltName=IP:192.168.7.1\nsubjectAltName=IP:13::17\nsubjectAltName=email:my@other.address,RID:1.2.3.4\nsubjectAltName=otherName:1.2.3.4;UTF8:some other identifier\n\nsubjectAltName=dirName:dir_sect\n\n[dir_sect]\nC=UK\nO=My Organization\nOU=My Unit\nCN=My Name\n</code></pre>"},{"location":"man5/x509v3_config/#issuer-alternative-name","title":"Issuer Alternative Name.","text":"<p>The issuer alternative name option supports all the literal options of subject alternative name. It does not support the email:copy option because that would not make sense. It does support an additional issuer:copy option that will copy all the subject alternative name values from the issuer certificate (if possible).</p> <p>Example:</p> <pre><code>issuerAltName = issuer:copy\n</code></pre>"},{"location":"man5/x509v3_config/#authority-info-access","title":"Authority Info Access.","text":"<p>The authority information access extension gives details about how to access certain information relating to the CA. Its syntax is accessOID;location where location has the same syntax as subject alternative name (except that email:copy is not supported). accessOID can be any valid OID but only certain values are meaningful, for example OCSP and caIssuers.</p> <p>Example:</p> <pre><code>authorityInfoAccess = OCSP;URI:http://ocsp.my.host/\nauthorityInfoAccess = caIssuers;URI:http://my.ca/ca.html\n</code></pre>"},{"location":"man5/x509v3_config/#crl-distribution-points","title":"CRL distribution points","text":"<p>This is a multi-valued extension whose options can be either in name:value pair using the same form as subject alternative name or a single value representing a section name containing all the distribution point fields.</p> <p>For a name:value pair a new DistributionPoint with the fullName field set to the given value both the cRLissuer and reasons fields are omitted in this case.</p> <p>In the single option case the section indicated contains values for each field. In this section:</p> <p>If the name is \"fullname\" the value field should contain the full name of the distribution point in the same format as subject alternative name.</p> <p>If the name is \"relativename\" then the value field should contain a section name whose contents represent a DN fragment to be placed in this field.</p> <p>The name \"CRLIssuer\" if present should contain a value for this field in subject alternative name format.</p> <p>If the name is \"reasons\" the value field should consist of a comma separated field containing the reasons. Valid reasons are: \"keyCompromise\", \"CACompromise\", \"affiliationChanged\", \"superseded\", \"cessationOfOperation\", \"certificateHold\", \"privilegeWithdrawn\" and \"AACompromise\".</p> <p>Simple examples:</p> <pre><code>crlDistributionPoints=URI:http://myhost.com/myca.crl\ncrlDistributionPoints=URI:http://my.com/my.crl,URI:http://oth.com/my.crl\n</code></pre> <p>Full distribution point example:</p> <pre><code>crlDistributionPoints=crldp1_section\n\n[crldp1_section]\n\nfullname=URI:http://myhost.com/myca.crl\nCRLissuer=dirName:issuer_sect\nreasons=keyCompromise, CACompromise\n\n[issuer_sect]\nC=UK\nO=Organisation\nCN=Some Name\n</code></pre>"},{"location":"man5/x509v3_config/#issuing-distribution-point","title":"Issuing Distribution Point","text":"<p>This extension should only appear in CRLs. It is a multi valued extension whose syntax is similar to the \"section\" pointed to by the CRL distribution points extension with a few differences.</p> <p>The names \"reasons\" and \"CRLissuer\" are not recognized.</p> <p>The name \"onlysomereasons\" is accepted which sets this field. The value is in the same format as the CRL distribution point \"reasons\" field.</p> <p>The names \"onlyuser\", \"onlyCA\", \"onlyAA\" and \"indirectCRL\" are also accepted the values should be a boolean value (TRUE or FALSE) to indicate the value of the corresponding field.</p> <p>Example:</p> <pre><code>issuingDistributionPoint=critical, @idp_section\n\n[idp_section]\n\nfullname=URI:http://myhost.com/myca.crl\nindirectCRL=TRUE\nonlysomereasons=keyCompromise, CACompromise\n\n[issuer_sect]\nC=UK\nO=Organisation\nCN=Some Name\n</code></pre>"},{"location":"man5/x509v3_config/#certificate-policies","title":"Certificate Policies.","text":"<p>This is a raw extension. All the fields of this extension can be set by using the appropriate syntax.</p> <p>If you follow the PKIX recommendations and just using one OID then you just include the value of that OID. Multiple OIDs can be set separated by commas, for example:</p> <pre><code>certificatePolicies= 1.2.4.5, 1.1.3.4\n</code></pre> <p>If you wish to include qualifiers then the policy OID and qualifiers need to be specified in a separate section: this is done by using the @section syntax instead of a literal OID value.</p> <p>The section referred to must include the policy OID using the name policyIdentifier, cPSuri qualifiers can be included using the syntax:</p> <pre><code>CPS.nnn=value\n</code></pre> <p>userNotice qualifiers can be set using the syntax:</p> <pre><code>userNotice.nnn=@notice\n</code></pre> <p>The value of the userNotice qualifier is specified in the relevant section. This section can include explicitText, organization and noticeNumbers options. explicitText and organization are text strings, noticeNumbers is a comma separated list of numbers. The organization and noticeNumbers options (if included) must BOTH be present. If you use the userNotice option with IE5 then you need the 'ia5org' option at the top level to modify the encoding: otherwise it will not be interpreted properly.</p> <p>Example:</p> <pre><code>certificatePolicies=ia5org,1.2.3.4,1.5.6.7.8,@polsect\n\n[polsect]\n\npolicyIdentifier = 1.3.5.8\nCPS.1=\"http://my.host.name/\"\nCPS.2=\"http://my.your.name/\"\nuserNotice.1=@notice\n\n[notice]\n\nexplicitText=\"Explicit Text Here\"\norganization=\"Organisation Name\"\nnoticeNumbers=1,2,3,4\n</code></pre> <p>The ia5org option changes the type of the organization field. In RFC2459 it can only be of type DisplayText. In RFC3280 IA5String is also permissible. Some software (for example some versions of MSIE) may require ia5org.</p> <p>ASN1 type of explicitText can be specified by prepending UTF8, BMP or VISIBLE prefix followed by colon. For example:</p> <pre><code>[notice]\nexplicitText=\"UTF8:Explicit Text Here\"\n</code></pre>"},{"location":"man5/x509v3_config/#policy-constraints","title":"Policy Constraints","text":"<p>This is a multi-valued extension which consisting of the names requireExplicitPolicy or inhibitPolicyMapping and a non negative integer value. At least one component must be present.</p> <p>Example:</p> <pre><code>policyConstraints = requireExplicitPolicy:3\n</code></pre>"},{"location":"man5/x509v3_config/#inhibit-any-policy","title":"Inhibit Any Policy","text":"<p>This is a string extension whose value must be a non negative integer.</p> <p>Example:</p> <pre><code>inhibitAnyPolicy = 2\n</code></pre>"},{"location":"man5/x509v3_config/#name-constraints","title":"Name Constraints","text":"<p>The name constraints extension is a multi-valued extension. The name should begin with the word permitted or excluded followed by a ;. The rest of the name and the value follows the syntax of subjectAltName except email:copy is not supported and the IP form should consist of an IP addresses and subnet mask separated by a /.</p> <p>Examples:</p> <pre><code>nameConstraints=permitted;IP:192.168.0.0/255.255.0.0\n\nnameConstraints=permitted;email:.somedomain.com\n\nnameConstraints=excluded;email:.com\n</code></pre>"},{"location":"man5/x509v3_config/#ocsp-no-check","title":"OCSP No Check","text":"<p>The OCSP No Check extension is a string extension but its value is ignored.</p> <p>Example:</p> <pre><code>noCheck = ignored\n</code></pre>"},{"location":"man5/x509v3_config/#tls-feature-aka-must-staple","title":"TLS Feature (aka Must Staple)","text":"<p>This is a multi-valued extension consisting of a list of TLS extension identifiers. Each identifier may be a number (0..65535) or a supported name. When a TLS client sends a listed extension, the TLS server is expected to include that extension in its reply.</p> <p>The supported names are: status_request and status_request_v2.</p> <p>Example:</p> <pre><code>tlsfeature = status_request\n</code></pre>"},{"location":"man5/x509v3_config/#deprecated-extensions","title":"DEPRECATED EXTENSIONS","text":"<p>The following extensions are non standard, Netscape specific and largely obsolete. Their use in new applications is discouraged.</p>"},{"location":"man5/x509v3_config/#netscape-string-extensions","title":"Netscape String extensions.","text":"<p>Netscape Comment (nsComment) is a string extension containing a comment which will be displayed when the certificate is viewed in some browsers.</p> <p>Example:</p> <pre><code>nsComment = \"Some Random Comment\"\n</code></pre> <p>Other supported extensions in this category are: nsBaseUrl, nsRevocationUrl, nsCaRevocationUrl, nsRenewalUrl, nsCaPolicyUrl and nsSslServerName.</p>"},{"location":"man5/x509v3_config/#netscape-certificate-type","title":"Netscape Certificate Type","text":"<p>This is a multi-valued extensions which consists of a list of flags to be included. It was used to indicate the purposes for which a certificate could be used. The basicConstraints, keyUsage and extended key usage extensions are now used instead.</p> <p>Acceptable values for nsCertType are: client, server, email, objsign, reserved, sslCA, emailCA, objCA.</p>"},{"location":"man5/x509v3_config/#arbitrary-extensions","title":"ARBITRARY EXTENSIONS","text":"<p>If an extension is not supported by the OpenSSL code then it must be encoded using the arbitrary extension format. It is also possible to use the arbitrary format for supported extensions. Extreme care should be taken to ensure that the data is formatted correctly for the given extension type.</p> <p>There are two ways to encode arbitrary extensions.</p> <p>The first way is to use the word ASN1 followed by the extension content using the same syntax as ASN1_generate_nconf(3). For example:</p> <pre><code>1.2.3.4=critical,ASN1:UTF8String:Some random data\n\n1.2.3.4=ASN1:SEQUENCE:seq_sect\n\n[seq_sect]\n\nfield1 = UTF8:field1\nfield2 = UTF8:field2\n</code></pre> <p>It is also possible to use the word DER to include the raw encoded data in any extension.</p> <pre><code>1.2.3.4=critical,DER:01:02:03:04\n1.2.3.4=DER:01020304\n</code></pre> <p>The value following DER is a hex dump of the DER encoding of the extension Any extension can be placed in this form to override the default behaviour. For example:</p> <pre><code>basicConstraints=critical,DER:00:01:02:03\n</code></pre>"},{"location":"man5/x509v3_config/#warnings","title":"WARNINGS","text":"<p>There is no guarantee that a specific implementation will process a given extension. It may therefore be sometimes possible to use certificates for purposes prohibited by their extensions because a specific application does not recognize or honour the values of the relevant extensions.</p> <p>The DER and ASN1 options should be used with caution. It is possible to create totally invalid extensions if they are not used carefully.</p>"},{"location":"man5/x509v3_config/#notes","title":"NOTES","text":"<p>If an extension is multi-value and a field value must contain a comma the long form must be used otherwise the comma would be misinterpreted as a field separator. For example:</p> <pre><code>subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar\n</code></pre> <p>will produce an error but the equivalent form:</p> <pre><code>subjectAltName=@subject_alt_section\n\n[subject_alt_section]\nsubjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar\n</code></pre> <p>is valid.</p> <p>Due to the behaviour of the OpenSSL conf library the same field name can only occur once in a section. This means that:</p> <pre><code>subjectAltName=@alt_section\n\n[alt_section]\n\nemail=steve@here\nemail=steve@there\n</code></pre> <p>will only recognize the last value. This can be worked around by using the form:</p> <pre><code>[alt_section]\n\nemail.1=steve@here\nemail.2=steve@there\n</code></pre>"},{"location":"man5/x509v3_config/#see-also","title":"SEE ALSO","text":"<p>req(1), ca(1), x509(1), ASN1_generate_nconf(3)</p>"},{"location":"man5/x509v3_config/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/Ed25519/","title":"Ed25519","text":""},{"location":"man7/Ed25519/#name","title":"NAME","text":"<p>Ed25519, Ed448 - EVP_PKEY Ed25519 and Ed448 support</p>"},{"location":"man7/Ed25519/#description","title":"DESCRIPTION","text":"<p>The Ed25519 and Ed448 EVP_PKEY implementation supports key generation, one-shot digest sign and digest verify using PureEdDSA and Ed25519 or Ed448 (see RFC8032). It has associated private and public key formats compatible with RFC 8410.</p> <p>No additional parameters can be set during key generation, one-shot signing or verification. In particular, because PureEdDSA is used, a digest must NOT be specified when signing or verifying.</p>"},{"location":"man7/Ed25519/#notes","title":"NOTES","text":"<p>The PureEdDSA algorithm does not support the streaming mechanism of other signature algorithms using, for example, EVP_DigestUpdate(). The message to sign or verify must be passed using the one-shot EVP_DigestSign() and EVP_DigestVerify() functions.</p> <p>When calling EVP_DigestSignInit() or EVP_DigestVerifyInit(), the digest type parameter MUST be set to NULL.</p> <p>Applications wishing to sign certificates (or other structures such as CRLs or certificate requests) using Ed25519 or Ed448 can either use X509_sign() or X509_sign_ctx() in the usual way.</p> <p>A context for the Ed25519 algorithm can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_ED25519, NULL);\n</code></pre> <p>For the Ed448 algorithm a context can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_ED448, NULL);\n</code></pre> <p>Ed25519 or Ed448 private keys can be set directly using EVP_PKEY_new_raw_private_key(3) or loaded from a PKCS#8 private key file using PEM_read_bio_PrivateKey(3) (or similar function). Completely new keys can also be generated (see the example below). Setting a private key also sets the associated public key.</p> <p>Ed25519 or Ed448 public keys can be set directly using EVP_PKEY_new_raw_public_key(3) or loaded from a SubjectPublicKeyInfo structure in a PEM file using PEM_read_bio_PUBKEY(3) (or similar function).</p> <p>Ed25519 and Ed448 can be tested within speed(1) application since version 1.1.1. Valid algorithm names are ed25519, ed448 and eddsa. If eddsa is specified, then both Ed25519 and Ed448 are benchmarked.</p>"},{"location":"man7/Ed25519/#examples","title":"EXAMPLES","text":"<p>This example generates an ED25519 private key and writes it to standard output in PEM format:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/pem.h&gt;\n...\nEVP_PKEY *pkey = NULL;\nEVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_ED25519, NULL);\nEVP_PKEY_keygen_init(pctx);\nEVP_PKEY_keygen(pctx, &amp;pkey);\nEVP_PKEY_CTX_free(pctx);\nPEM_write_PrivateKey(stdout, pkey, NULL, NULL, 0, NULL, NULL);\n</code></pre>"},{"location":"man7/Ed25519/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_keygen(3), EVP_DigestSignInit(3), EVP_DigestVerifyInit(3),</p>"},{"location":"man7/Ed25519/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/RAND/","title":"RAND","text":""},{"location":"man7/RAND/#name","title":"NAME","text":"<p>RAND - the OpenSSL random generator</p>"},{"location":"man7/RAND/#description","title":"DESCRIPTION","text":"<p>Random numbers are a vital part of cryptography, they are needed to provide unpredictability for tasks like key generation, creating salts, and many more. Software-based generators must be seeded with external randomness before they can be used as a cryptographically-secure pseudo-random number generator (CSPRNG). The availability of common hardware with special instructions and modern operating systems, which may use items such as interrupt jitter and network packet timings, can be reasonable sources of seeding material.</p> <p>OpenSSL comes with a default implementation of the RAND API which is based on the deterministic random bit generator (DRBG) model as described in [NIST SP 800-90A Rev. 1]. The default random generator will initialize automatically on first use and will be fully functional without having to be initialized ('seeded') explicitly. It seeds and reseeds itself automatically using trusted random sources provided by the operating system.</p> <p>As a normal application developer, you do not have to worry about any details, just use RAND_bytes(3) to obtain random data. Having said that, there is one important rule to obey: Always check the error return value of RAND_bytes(3) and do not take randomness for granted. Although (re-)seeding is automatic, it can fail because no trusted random source is available or the trusted source(s) temporarily fail to provide sufficient random seed material. In this case the CSPRNG enters an error state and ceases to provide output, until it is able to recover from the error by reseeding itself. For more details on reseeding and error recovery, see RAND_DRBG(7).</p> <p>For values that should remain secret, you can use RAND_priv_bytes(3) instead. This method does not provide 'better' randomness, it uses the same type of CSPRNG. The intention behind using a dedicated CSPRNG exclusively for private values is that none of its output should be visible to an attacker (e.g., used as salt value), in order to reveal as little information as possible about its internal state, and that a compromise of the \"public\" CSPRNG instance will not affect the secrecy of these private values.</p> <p>In the rare case where the default implementation does not satisfy your special requirements, there are two options:</p> <ul> <li>Replace the default RAND method by your own RAND method using RAND_set_rand_method(3).</li> <li>Modify the default settings of the OpenSSL RAND method by modifying the security parameters of the underlying DRBG, which is described in detail in RAND_DRBG(7).</li> </ul> <p>Changing the default random generator or its default parameters should be necessary only in exceptional cases and is not recommended, unless you have a profound knowledge of cryptographic principles and understand the implications of your changes.</p>"},{"location":"man7/RAND/#see-also","title":"SEE ALSO","text":"<p>RAND_add(3), RAND_bytes(3), RAND_priv_bytes(3), RAND_get_rand_method(3), RAND_set_rand_method(3), RAND_OpenSSL(3), RAND_DRBG(7)</p>"},{"location":"man7/RAND/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/RAND_DRBG/","title":"RAND_DRBG","text":""},{"location":"man7/RAND_DRBG/#name","title":"NAME","text":"<p>RAND_DRBG - the deterministic random bit generator</p>"},{"location":"man7/RAND_DRBG/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/rand_drbg.h&gt;\n</code></pre>"},{"location":"man7/RAND_DRBG/#description","title":"DESCRIPTION","text":"<p>The default OpenSSL RAND method is based on the RAND_DRBG class, which implements a deterministic random bit generator (DRBG). A DRBG is a certain type of cryptographically-secure pseudo-random number generator (CSPRNG), which is described in [NIST SP 800-90A Rev. 1].</p> <p>While the RAND API is the 'frontend' which is intended to be used by application developers for obtaining random bytes, the RAND_DRBG API serves as the 'backend', connecting the former with the operating systems's entropy sources and providing access to the DRBG's configuration parameters.</p>"},{"location":"man7/RAND_DRBG/#disclaimer","title":"Disclaimer","text":"<p>Unless you have very specific requirements for your random generator, it is in general not necessary to utilize the RAND_DRBG API directly. The usual way to obtain random bytes is to use RAND_bytes(3) or RAND_priv_bytes(3), see also RAND(7).</p>"},{"location":"man7/RAND_DRBG/#typical-use-cases","title":"Typical Use Cases","text":"<p>Typical examples for such special use cases are the following:</p> <ul> <li>You want to use your own private DRBG instances. Multiple DRBG instances which are accessed only by a single thread provide additional security (because their internal states are independent) and better scalability in multithreaded applications (because they don't need to be locked).</li> <li>You need to integrate a previously unsupported entropy source.</li> <li>You need to change the default settings of the standard OpenSSL RAND implementation to meet specific requirements.</li> </ul>"},{"location":"man7/RAND_DRBG/#chaining","title":"CHAINING","text":"<p>A DRBG instance can be used as the entropy source of another DRBG instance, provided it has itself access to a valid entropy source. The DRBG instance which acts as entropy source is called the parent DRBG, the other instance the child DRBG.</p> <p>This is called chaining. A chained DRBG instance is created by passing a pointer to the parent DRBG as argument to the RAND_DRBG_new() call. It is possible to create chains of more than two DRBG in a row.</p>"},{"location":"man7/RAND_DRBG/#the-three-shared-drbg-instances","title":"THE THREE SHARED DRBG INSTANCES","text":"<p>Currently, there are three shared DRBG instances, the &lt;master&gt;, &lt;public&gt;, and &lt;private&gt; DRBG. While the &lt;master&gt; DRBG is a single global instance, the &lt;public&gt; and &lt;private&gt; DRBG are created per thread and accessed through thread-local storage.</p> <p>By default, the functions RAND_bytes(3) and RAND_priv_bytes(3) use the thread-local &lt;public&gt; and &lt;private&gt; DRBG instance, respectively.</p>"},{"location":"man7/RAND_DRBG/#the-master-drbg-instance","title":"The &lt;master&gt; DRBG instance","text":"<p>The &lt;master&gt; DRBG is not used directly by the application, only for reseeding the two other two DRBG instances. It reseeds itself by obtaining randomness either from os entropy sources or by consuming randomness which was added previously by RAND_add(3).</p>"},{"location":"man7/RAND_DRBG/#the-public-drbg-instance","title":"The &lt;public&gt; DRBG instance","text":"<p>This instance is used per default by RAND_bytes(3).</p>"},{"location":"man7/RAND_DRBG/#the-private-drbg-instance","title":"The &lt;private&gt; DRBG instance","text":"<p>This instance is used per default by RAND_priv_bytes(3)</p>"},{"location":"man7/RAND_DRBG/#locking","title":"LOCKING","text":"<p>The &lt;master&gt; DRBG is intended to be accessed concurrently for reseeding by its child DRBG instances. The necessary locking is done internally. It is not thread-safe to access the &lt;master&gt; DRBG directly via the RAND_DRBG interface. The &lt;public&gt; and &lt;private&gt; DRBG are thread-local, i.e. there is an instance of each per thread. So they can safely be accessed without locking via the RAND_DRBG interface.</p> <p>Pointers to these DRBG instances can be obtained using RAND_DRBG_get0_master(), RAND_DRBG_get0_public(), and RAND_DRBG_get0_private(), respectively. Note that it is not allowed to store a pointer to one of the thread-local DRBG instances in a variable or other memory location where it will be accessed and used by multiple threads.</p> <p>All other DRBG instances created by an application don't support locking, because they are intended to be used by a single thread. Instead of accessing a single DRBG instance concurrently from different threads, it is recommended to instantiate a separate DRBG instance per thread. Using the &lt;master&gt; DRBG as entropy source for multiple DRBG instances on different threads is thread-safe, because the DRBG instance will lock the &lt;master&gt; DRBG automatically for obtaining random input.</p>"},{"location":"man7/RAND_DRBG/#the-overall-picture","title":"THE OVERALL PICTURE","text":"<p>The following picture gives an overview over how the DRBG instances work together and are being used.</p> <pre><code>           +--------------------+\n           | os entropy sources |\n           +--------------------+\n                    |\n                    v           +-----------------------------+\n  RAND_add() ==&gt; &lt;master&gt;     &lt;-| shared DRBG (with locking)  |\n                  /   \\         +-----------------------------+\n                 /     \\              +---------------------------+\n          &lt;public&gt;     &lt;private&gt;   &lt;- | per-thread DRBG instances |\n             |             |          +---------------------------+\n             v             v\n           RAND_bytes()   RAND_priv_bytes()\n                |               ^\n                |               |\n+------------------+      +------------------------------------+\n| general purpose  |      | used for secrets like session keys |\n| random generator |      | and private keys for certificates  |\n+------------------+      +------------------------------------+\n</code></pre> <p>The usual way to obtain random bytes is to call RAND_bytes(...) or RAND_priv_bytes(...). These calls are roughly equivalent to calling RAND_DRBG_bytes(&lt;public&gt;, ...) and RAND_DRBG_bytes(&lt;private&gt;, ...), respectively. The method RAND_DRBG_bytes(3) is a convenience method wrapping the RAND_DRBG_generate(3) function, which serves the actual request for random data.</p>"},{"location":"man7/RAND_DRBG/#reseeding","title":"RESEEDING","text":"<p>A DRBG instance seeds itself automatically, pulling random input from its entropy source. The entropy source can be either a trusted operating system entropy source, or another DRBG with access to such a source.</p> <p>Automatic reseeding occurs after a predefined number of generate requests. The selection of the trusted entropy sources is configured at build time using the --with-rand-seed option. The following sections explain the reseeding process in more detail.</p>"},{"location":"man7/RAND_DRBG/#automatic-reseeding","title":"Automatic Reseeding","text":"<p>Before satisfying a generate request (RAND_DRBG_generate(3)), the DRBG reseeds itself automatically, if one of the following conditions holds:</p> <p>- the DRBG was not instantiated (=seeded) yet or has been uninstantiated.</p> <p>- the number of generate requests since the last reseeding exceeds a certain threshold, the so called reseed_interval. This behaviour can be disabled by setting the reseed_interval to 0.</p> <p>- the time elapsed since the last reseeding exceeds a certain time interval, the so called reseed_time_interval. This can be disabled by setting the reseed_time_interval to 0.</p> <p>- the DRBG is in an error state.</p> <p>Note: An error state is entered if the entropy source fails while the DRBG is seeding or reseeding. The last case ensures that the DRBG automatically recovers from the error as soon as the entropy source is available again.</p>"},{"location":"man7/RAND_DRBG/#manual-reseeding","title":"Manual Reseeding","text":"<p>In addition to automatic reseeding, the caller can request an immediate reseeding of the DRBG with fresh entropy by setting the prediction resistance parameter to 1 when calling RAND_DRBG_generate(3).</p> <p>The document [NIST SP 800-90C] describes prediction resistance requests in detail and imposes strict conditions on the entropy sources that are approved for providing prediction resistance. Since the default DRBG implementation does not have access to such an approved entropy source, a request for prediction resistance will currently always fail. In other words, prediction resistance is currently not supported yet by the DRBG.</p> <p>For the three shared DRBGs (and only for these) there is another way to reseed them manually: If RAND_add(3) is called with a positive randomness argument (or RAND_seed(3)), then this will immediately reseed the &lt;master&gt; DRBG. The &lt;public&gt; and &lt;private&gt; DRBG will detect this on their next generate call and reseed, pulling randomness from &lt;master&gt;.</p> <p>The last feature has been added to support the common practice used with previous OpenSSL versions to call RAND_add() before calling RAND_bytes().</p>"},{"location":"man7/RAND_DRBG/#entropy-input-vs-additional-data","title":"Entropy Input vs. Additional Data","text":"<p>The DRBG distinguishes two different types of random input: entropy, which comes from a trusted source, and additional input', which can optionally be added by the user and is considered untrusted. It is possible to add additional input not only during reseeding, but also for every generate request. This is in fact done automatically by RAND_DRBG_bytes(3).</p>"},{"location":"man7/RAND_DRBG/#configuring-the-random-seed-source","title":"Configuring the Random Seed Source","text":"<p>In most cases OpenSSL will automatically choose a suitable seed source for automatically seeding and reseeding its &lt;master&gt; DRBG. In some cases however, it will be necessary to explicitly specify a seed source during configuration, using the --with-rand-seed option. For more information, see the INSTALL instructions. There are also operating systems where no seed source is available and automatic reseeding is disabled by default.</p> <p>The following two sections describe the reseeding process of the master DRBG, depending on whether automatic reseeding is available or not.</p>"},{"location":"man7/RAND_DRBG/#reseeding-the-master-drbg-with-automatic-seeding-enabled","title":"Reseeding the master DRBG with automatic seeding enabled","text":"<p>Calling RAND_poll() or RAND_add() is not necessary, because the DRBG pulls the necessary entropy from its source automatically. However, both calls are permitted, and do reseed the RNG.</p> <p>RAND_add() can be used to add both kinds of random input, depending on the value of the randomness argument:</p> <ul> <li> <p>randomness == 0:</p> <p>The random bytes are mixed as additional input into the current state of the DRBG. Mixing in additional input is not considered a full reseeding, hence the reseed counter is not reset.</p> </li> <li> <p>randomness &gt; 0:</p> <p>The random bytes are used as entropy input for a full reseeding (resp. reinstantiation) if the DRBG is instantiated (resp. uninstantiated or in an error state). The number of random bits required for reseeding is determined by the security strength of the DRBG. Currently it defaults to 256 bits (32 bytes). It is possible to provide less randomness than required. In this case the missing randomness will be obtained by pulling random input from the trusted entropy sources.</p> </li> </ul>"},{"location":"man7/RAND_DRBG/#reseeding-the-master-drbg-with-automatic-seeding-disabled","title":"Reseeding the master DRBG with automatic seeding disabled","text":"<p>Calling RAND_poll() will always fail.</p> <p>RAND_add() needs to be called for initial seeding and periodic reseeding. At least 48 bytes (384 bits) of randomness have to be provided, otherwise the (re-)seeding of the DRBG will fail. This corresponds to one and a half times the security strength of the DRBG. The extra half is used for the nonce during instantiation.</p> <p>More precisely, the number of bytes needed for seeding depend on the security strength of the DRBG, which is set to 256 by default.</p>"},{"location":"man7/RAND_DRBG/#see-also","title":"SEE ALSO","text":"<p>RAND_DRBG_bytes(3), RAND_DRBG_generate(3), RAND_DRBG_reseed(3), RAND_DRBG_get0_master(3), RAND_DRBG_get0_public(3), RAND_DRBG_get0_private(3), RAND_DRBG_set_reseed_interval(3), RAND_DRBG_set_reseed_time_interval(3), RAND_DRBG_set_reseed_defaults(3), RAND(7),</p>"},{"location":"man7/RAND_DRBG/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/RSA-PSS/","title":"RSA-PSS","text":""},{"location":"man7/RSA-PSS/#name","title":"NAME","text":"<p>RSA-PSS - EVP_PKEY RSA-PSS algorithm support</p>"},{"location":"man7/RSA-PSS/#description","title":"DESCRIPTION","text":"<p>The RSA-PSS EVP_PKEY implementation is a restricted version of the RSA algorithm which only supports signing, verification and key generation using PSS padding modes with optional parameter restrictions.</p> <p>It has associated private key and public key formats.</p> <p>This algorithm shares several control operations with the RSA algorithm but with some restrictions described below.</p>"},{"location":"man7/RSA-PSS/#signing-and-verification","title":"Signing and Verification","text":"<p>Signing and verification is similar to the RSA algorithm except the padding mode is always PSS. If the key in use has parameter restrictions then the corresponding signature parameters are set to the restrictions: for example, if the key can only be used with digest SHA256, MGF1 SHA256 and minimum salt length 32 then the digest, MGF1 digest and salt length will be set to SHA256, SHA256 and 32 respectively.</p>"},{"location":"man7/RSA-PSS/#key-generation","title":"Key Generation","text":"<p>By default no parameter restrictions are placed on the generated key.</p>"},{"location":"man7/RSA-PSS/#notes","title":"NOTES","text":"<p>The public key format is documented in RFC4055.</p> <p>The PKCS#8 private key format used for RSA-PSS keys is similar to the RSA format except it uses the id-RSASSA-PSS OID and the parameters field, if present, restricts the key parameters in the same way as the public key.</p>"},{"location":"man7/RSA-PSS/#conforming-to","title":"CONFORMING TO","text":"<p>RFC 4055</p>"},{"location":"man7/RSA-PSS/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_set_rsa_pss_keygen_md(3), EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(3), EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(3), EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man7/RSA-PSS/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/SM2/","title":"SM2","text":""},{"location":"man7/SM2/#name","title":"NAME","text":"<p>SM2 - Chinese SM2 signature and encryption algorithm support</p>"},{"location":"man7/SM2/#description","title":"DESCRIPTION","text":"<p>The SM2 algorithm was first defined by the Chinese national standard GM/T 0003-2012 and was later standardized by ISO as ISO/IEC 14888. SM2 is actually an elliptic curve based algorithm. The current implementation in OpenSSL supports both signature and encryption schemes via the EVP interface.</p> <p>When doing the SM2 signature algorithm, it requires a distinguishing identifier to form the message prefix which is hashed before the real message is hashed.</p>"},{"location":"man7/SM2/#notes","title":"NOTES","text":"<p>SM2 signatures can be generated by using the 'DigestSign' series of APIs, for instance, EVP_DigestSignInit(), EVP_DigestSignUpdate() and EVP_DigestSignFinal(). Ditto for the verification process by calling the 'DigestVerify' series of APIs.</p> <p>There are several special steps that need to be done before computing an SM2 signature.</p> <p>The EVP_PKEY structure will default to using ECDSA for signatures when it is created. It should be set to EVP_PKEY_SM2 by calling:</p> <pre><code>EVP_PKEY_set_alias_type(pkey, EVP_PKEY_SM2);\n</code></pre> <p>Then an ID should be set by calling:</p> <pre><code>EVP_PKEY_CTX_set1_id(pctx, id, id_len);\n</code></pre> <p>When calling the EVP_DigestSignInit() or EVP_DigestVerifyInit() functions, a preallocated EVP_PKEY_CTX should be assigned to the EVP_MD_CTX. This is done by calling:</p> <pre><code>EVP_MD_CTX_set_pkey_ctx(mctx, pctx);\n</code></pre> <p>And normally there is no need to pass a pctx parameter to EVP_DigestSignInit() or EVP_DigestVerifyInit() in such a scenario.</p>"},{"location":"man7/SM2/#examples","title":"EXAMPLES","text":"<p>This example demonstrates the calling sequence for using an EVP_PKEY to verify a message with the SM2 signature algorithm and the SM3 hash algorithm:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n\n/* obtain an EVP_PKEY using whatever methods... */\nEVP_PKEY_set_alias_type(pkey, EVP_PKEY_SM2);\nmctx = EVP_MD_CTX_new();\npctx = EVP_PKEY_CTX_new(pkey, NULL);\nEVP_PKEY_CTX_set1_id(pctx, id, id_len);\nEVP_MD_CTX_set_pkey_ctx(mctx, pctx);;\nEVP_DigestVerifyInit(mctx, NULL, EVP_sm3(), NULL, pkey);\nEVP_DigestVerifyUpdate(mctx, msg, msg_len);\nEVP_DigestVerifyFinal(mctx, sig, sig_len)\n</code></pre>"},{"location":"man7/SM2/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_set_alias_type(3), EVP_DigestSignInit(3), EVP_DigestVerifyInit(3), EVP_PKEY_CTX_set1_id(3), EVP_MD_CTX_set_pkey_ctx(3)</p>"},{"location":"man7/SM2/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/X25519/","title":"X25519","text":""},{"location":"man7/X25519/#name","title":"NAME","text":"<p>X25519, X448 - EVP_PKEY X25519 and X448 support</p>"},{"location":"man7/X25519/#description","title":"DESCRIPTION","text":"<p>The X25519 and X448 EVP_PKEY implementation supports key generation and key derivation using X25519 and X448. It has associated private and public key formats compatible with RFC 8410.</p> <p>No additional parameters can be set during key generation.</p> <p>The peer public key must be set using EVP_PKEY_derive_set_peer() when performing key derivation.</p>"},{"location":"man7/X25519/#notes","title":"NOTES","text":"<p>A context for the X25519 algorithm can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_X25519, NULL);\n</code></pre> <p>For the X448 algorithm a context can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_X448, NULL);\n</code></pre> <p>X25519 or X448 private keys can be set directly using EVP_PKEY_new_raw_private_key(3) or loaded from a PKCS#8 private key file using PEM_read_bio_PrivateKey(3) (or similar function). Completely new keys can also be generated (see the example below). Setting a private key also sets the associated public key.</p> <p>X25519 or X448 public keys can be set directly using EVP_PKEY_new_raw_public_key(3) or loaded from a SubjectPublicKeyInfo structure in a PEM file using PEM_read_bio_PUBKEY(3) (or similar function).</p>"},{"location":"man7/X25519/#examples","title":"EXAMPLES","text":"<p>This example generates an X25519 private key and writes it to standard output in PEM format:</p> <pre><code>#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/pem.h&gt;\n...\nEVP_PKEY *pkey = NULL;\nEVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_X25519, NULL);\nEVP_PKEY_keygen_init(pctx);\nEVP_PKEY_keygen(pctx, &amp;pkey);\nEVP_PKEY_CTX_free(pctx);\nPEM_write_PrivateKey(stdout, pkey, NULL, NULL, 0, NULL, NULL);\n</code></pre> <p>The key derivation example in EVP_PKEY_derive(3) can be used with X25519 and X448.</p>"},{"location":"man7/X25519/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_new(3), EVP_PKEY_keygen(3), EVP_PKEY_derive(3), EVP_PKEY_derive_set_peer(3)</p>"},{"location":"man7/X25519/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/bio/","title":"bio","text":""},{"location":"man7/bio/#name","title":"NAME","text":"<p>bio - Basic I/O abstraction</p>"},{"location":"man7/bio/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/bio.h&gt;\n</code></pre>"},{"location":"man7/bio/#description","title":"DESCRIPTION","text":"<p>A BIO is an I/O abstraction, it hides many of the underlying I/O details from an application. If an application uses a BIO for its I/O it can transparently handle SSL connections, unencrypted network connections and file I/O.</p> <p>There are two type of BIO, a source/sink BIO and a filter BIO.</p> <p>As its name implies a source/sink BIO is a source and/or sink of data, examples include a socket BIO and a file BIO.</p> <p>A filter BIO takes data from one BIO and passes it through to another, or the application. The data may be left unmodified (for example a message digest BIO) or translated (for example an encryption BIO). The effect of a filter BIO may change according to the I/O operation it is performing: for example an encryption BIO will encrypt data if it is being written to and decrypt data if it is being read from.</p> <p>BIOs can be joined together to form a chain (a single BIO is a chain with one component). A chain normally consist of one source/sink BIO and one or more filter BIOs. Data read from or written to the first BIO then traverses the chain to the end (normally a source/sink BIO).</p> <p>Some BIOs (such as memory BIOs) can be used immediately after calling BIO_new(). Others (such as file BIOs) need some additional initialization, and frequently a utility function exists to create and initialize such BIOs.</p> <p>If BIO_free() is called on a BIO chain it will only free one BIO resulting in a memory leak.</p> <p>Calling BIO_free_all() on a single BIO has the same effect as calling BIO_free() on it other than the discarded return value.</p> <p>Normally the type argument is supplied by a function which returns a pointer to a BIO_METHOD. There is a naming convention for such functions: a source/sink BIO is normally called BIO_s_*() and a filter BIO BIO_f_*();</p>"},{"location":"man7/bio/#examples","title":"EXAMPLES","text":"<p>Create a memory BIO:</p> <pre><code>BIO *mem = BIO_new(BIO_s_mem());\n</code></pre>"},{"location":"man7/bio/#see-also","title":"SEE ALSO","text":"<p>BIO_ctrl(3), BIO_f_base64(3), BIO_f_buffer(3), BIO_f_cipher(3), BIO_f_md(3), BIO_f_null(3), BIO_f_ssl(3), BIO_find_type(3), BIO_new(3), BIO_new_bio_pair(3), BIO_push(3), BIO_read_ex(3), BIO_s_accept(3), BIO_s_bio(3), BIO_s_connect(3), BIO_s_fd(3), BIO_s_file(3), BIO_s_mem(3), BIO_s_null(3), BIO_s_socket(3), BIO_set_callback(3), BIO_should_retry(3)</p>"},{"location":"man7/bio/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/crypto/","title":"crypto","text":""},{"location":"man7/crypto/#name","title":"NAME","text":"<p>crypto - OpenSSL cryptographic library</p>"},{"location":"man7/crypto/#synopsis","title":"SYNOPSIS","text":"<p>See the individual manual pages for details.</p>"},{"location":"man7/crypto/#description","title":"DESCRIPTION","text":"<p>The OpenSSL crypto library implements a wide range of cryptographic algorithms used in various Internet standards. The services provided by this library are used by the OpenSSL implementations of SSL, TLS and S/MIME, and they have also been used to implement SSH, OpenPGP, and other cryptographic standards.</p> <p>libcrypto consists of a number of sub-libraries that implement the individual algorithms.</p> <p>The functionality includes symmetric encryption, public key cryptography and key agreement, certificate handling, cryptographic hash functions, cryptographic pseudo-random number generator, and various utilities.</p>"},{"location":"man7/crypto/#notes","title":"NOTES","text":"<p>Some of the newer functions follow a naming convention using the numbers 0 and 1. For example the functions:</p> <pre><code>int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);\nint X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj);\n</code></pre> <p>The 0 version uses the supplied structure pointer directly in the parent and it will be freed up when the parent is freed. In the above example crl would be freed but rev would not.</p> <p>The 1 function uses a copy of the supplied structure pointer (or in some cases increases its link count) in the parent and so both (x and obj above) should be freed up.</p>"},{"location":"man7/crypto/#return-values","title":"RETURN VALUES","text":"<p>See the individual manual pages for details.</p>"},{"location":"man7/crypto/#see-also","title":"SEE ALSO","text":"<p>openssl(1), ssl(7)</p>"},{"location":"man7/crypto/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/ct/","title":"ct","text":""},{"location":"man7/ct/#name","title":"NAME","text":"<p>ct - Certificate Transparency</p>"},{"location":"man7/ct/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/ct.h&gt;\n</code></pre>"},{"location":"man7/ct/#description","title":"DESCRIPTION","text":"<p>This library implements Certificate Transparency (CT) verification for TLS clients, as defined in RFC 6962. This verification can provide some confidence that a certificate has been publicly logged in a set of CT logs.</p> <p>By default, these checks are disabled. They can be enabled using SSL_CTX_enable_ct(3) or SSL_enable_ct(3).</p> <p>This library can also be used to parse and examine CT data structures, such as Signed Certificate Timestamps (SCTs), or to read a list of CT logs. There are functions for: - decoding and encoding SCTs in DER and TLS wire format. - printing SCTs. - verifying the authenticity of SCTs. - loading a CT log list from a CONF file.</p>"},{"location":"man7/ct/#see-also","title":"SEE ALSO","text":"<p>d2i_SCT_LIST(3), CTLOG_STORE_new(3), CTLOG_STORE_get0_log_by_id(3), SCT_new(3), SCT_print(3), SCT_validate(3), SCT_validate(3), CT_POLICY_EVAL_CTX_new(3), SSL_CTX_set_ct_validation_callback(3)</p>"},{"location":"man7/ct/#history","title":"HISTORY","text":"<p>The ct library was added in OpenSSL 1.1.0.</p>"},{"location":"man7/ct/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/des_modes/","title":"des_modes","text":""},{"location":"man7/des_modes/#name","title":"NAME","text":"<p>des_modes - the variants of DES and other crypto algorithms of OpenSSL</p>"},{"location":"man7/des_modes/#description","title":"DESCRIPTION","text":"<p>Several crypto algorithms for OpenSSL can be used in a number of modes.  Those are used for using block ciphers in a way similar to stream ciphers, among other things.</p>"},{"location":"man7/des_modes/#overview","title":"OVERVIEW","text":""},{"location":"man7/des_modes/#electronic-codebook-mode-ecb","title":"Electronic Codebook Mode (ECB)","text":"<p>Normally, this is found as the function algorithm_ecb_encrypt().</p> <ul> <li>64 bits are enciphered at a time.</li> <li>The order of the blocks can be rearranged without detection.</li> <li>The same plaintext block always produces the same ciphertext block (for the same key) making it vulnerable to a 'dictionary attack'.</li> <li>An error will only affect one ciphertext block.</li> </ul>"},{"location":"man7/des_modes/#cipher-block-chaining-mode-cbc","title":"Cipher Block Chaining Mode (CBC)","text":"<p>Normally, this is found as the function algorithm_cbc_encrypt(). Be aware that des_cbc_encrypt() is not really DES CBC (it does not update the IV); use des_ncbc_encrypt() instead.</p> <ul> <li>a multiple of 64 bits are enciphered at a time.</li> <li>The CBC mode produces the same ciphertext whenever the same plaintext is encrypted using the same key and starting variable.</li> <li>The chaining operation makes the ciphertext blocks dependent on the current and all preceding plaintext blocks and therefore blocks can not be rearranged.</li> <li>The use of different starting variables prevents the same plaintext enciphering to the same ciphertext.</li> <li>An error will affect the current and the following ciphertext blocks.</li> </ul>"},{"location":"man7/des_modes/#cipher-feedback-mode-cfb","title":"Cipher Feedback Mode (CFB)","text":"<p>Normally, this is found as the function algorithm_cfb_encrypt().</p> <ul> <li>a number of bits (j) &lt;= 64 are enciphered at a time.</li> <li>The CFB mode produces the same ciphertext whenever the same plaintext is encrypted using the same key and starting variable.</li> <li>The chaining operation makes the ciphertext variables dependent on the current and all preceding variables and therefore j-bit variables are chained together and can not be rearranged.</li> <li>The use of different starting variables prevents the same plaintext enciphering to the same ciphertext.</li> <li>The strength of the CFB mode depends on the size of k (maximal if j == k).  In my implementation this is always the case.</li> <li>Selection of a small value for j will require more cycles through the encipherment algorithm per unit of plaintext and thus cause greater processing overheads.</li> <li>Only multiples of j bits can be enciphered.</li> <li>An error will affect the current and the following ciphertext variables.</li> </ul>"},{"location":"man7/des_modes/#output-feedback-mode-ofb","title":"Output Feedback Mode (OFB)","text":"<p>Normally, this is found as the function algorithm_ofb_encrypt().</p> <ul> <li>a number of bits (j) &lt;= 64 are enciphered at a time.</li> <li>The OFB mode produces the same ciphertext whenever the same plaintext enciphered using the same key and starting variable.  More over, in the OFB mode the same key stream is produced when the same key and start variable are used.  Consequently, for security reasons a specific start variable should be used only once for a given key.</li> <li>The absence of chaining makes the OFB more vulnerable to specific attacks.</li> <li>The use of different start variables values prevents the same plaintext enciphering to the same ciphertext, by producing different key streams.</li> <li>Selection of a small value for j will require more cycles through the encipherment algorithm per unit of plaintext and thus cause greater processing overheads.</li> <li>Only multiples of j bits can be enciphered.</li> <li>OFB mode of operation does not extend ciphertext errors in the resultant plaintext output.  Every bit error in the ciphertext causes only one bit to be in error in the deciphered plaintext.</li> <li>OFB mode is not self-synchronizing.  If the two operation of encipherment and decipherment get out of synchronism, the system needs to be re-initialized.</li> <li>Each re-initialization should use a value of the start variable different from the start variable values used before with the same key.  The reason for this is that an identical bit stream would be produced each time from the same parameters.  This would be susceptible to a 'known plaintext' attack.</li> </ul>"},{"location":"man7/des_modes/#triple-ecb-mode","title":"Triple ECB Mode","text":"<p>Normally, this is found as the function algorithm_ecb3_encrypt().</p> <ul> <li>Encrypt with key1, decrypt with key2 and encrypt with key3 again.</li> <li>As for ECB encryption but increases the key length to 168 bits. There are theoretic attacks that can be used that make the effective key length 112 bits, but this attack also requires 2^56 blocks of memory, not very likely, even for the NSA.</li> <li>If both keys are the same it is equivalent to encrypting once with just one key.</li> <li>If the first and last key are the same, the key length is 112 bits. There are attacks that could reduce the effective key strength to only slightly more than 56 bits, but these require a lot of memory.</li> <li>If all 3 keys are the same, this is effectively the same as normal ecb mode.</li> </ul>"},{"location":"man7/des_modes/#triple-cbc-mode","title":"Triple CBC Mode","text":"<p>Normally, this is found as the function algorithm_ede3_cbc_encrypt().</p> <ul> <li>Encrypt with key1, decrypt with key2 and then encrypt with key3.</li> <li>As for CBC encryption but increases the key length to 168 bits with the same restrictions as for triple ecb mode.</li> </ul>"},{"location":"man7/des_modes/#notes","title":"NOTES","text":"<p>This text was been written in large parts by Eric Young in his original documentation for SSLeay, the predecessor of OpenSSL.  In turn, he attributed it to:</p> <pre><code>    AS 2805.5.2\n    Australian Standard\n    Electronic funds transfer - Requirements for interfaces,\n    Part 5.2: Modes of operation for an n-bit block cipher algorithm\n    Appendix A\n</code></pre>"},{"location":"man7/des_modes/#see-also","title":"SEE ALSO","text":"<p>BF_encrypt(3), DES_crypt(3)</p>"},{"location":"man7/des_modes/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/evp/","title":"evp","text":""},{"location":"man7/evp/#name","title":"NAME","text":"<p>evp - high-level cryptographic functions</p>"},{"location":"man7/evp/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/evp.h&gt;\n</code></pre>"},{"location":"man7/evp/#description","title":"DESCRIPTION","text":"<p>The EVP library provides a high-level interface to cryptographic functions.</p> <p>The EVP_SealXXX and EVP_OpenXXX functions provide public key encryption and decryption to implement digital \"envelopes\".</p> <p>The EVP_DigestSignXXX and EVP_DigestVerifyXXX functions implement digital signatures and Message Authentication Codes (MACs). Also see the older EVP_SignXXX and EVP_VerifyXXX functions.</p> <p>Symmetric encryption is available with the EVP_EncryptXXX functions.  The EVP_DigestXXX functions provide message digests.</p> <p>The EVP_PKEYXXX functions provide a high-level interface to asymmetric algorithms. To create a new EVP_PKEY see EVP_PKEY_new(3). EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA(3) page, or new keys can be generated using EVP_PKEY_keygen(3). EVP_PKEYs can be compared using EVP_PKEY_cmp(3), or printed using EVP_PKEY_print_private(3).</p> <p>The EVP_PKEY functions support the full range of asymmetric algorithm operations:</p> <ul> <li>For key agreement see EVP_PKEY_derive(3)</li> <li>For signing and verifying see EVP_PKEY_sign(3), EVP_PKEY_verify(3) and EVP_PKEY_verify_recover(3). However, note that these functions do not perform a digest of the data to be signed. Therefore, normally you would use the EVP_DigestSignInit(3) functions for this purpose.</li> <li>For encryption and decryption see EVP_PKEY_encrypt(3) and EVP_PKEY_decrypt(3) respectively. However, note that these functions perform encryption and decryption only. As public key encryption is an expensive operation, normally you would wrap an encrypted message in a \"digital envelope\" using the EVP_SealInit(3) and EVP_OpenInit(3) functions.</li> </ul> <p>The EVP_BytesToKey(3) function provides some limited support for password based encryption. Careful selection of the parameters will provide a PKCS#5 PBKDF1 compatible implementation. However, new applications should not typically use this (preferring, for example, PBKDF2 from PCKS#5).</p> <p>The EVP_EncodeXXX and EVP_DecodeXXX functions implement base 64 encoding and decoding.</p> <p>All the symmetric algorithms (ciphers), digests and asymmetric algorithms (public key algorithms) can be replaced by ENGINE modules providing alternative implementations. If ENGINE implementations of ciphers or digests are registered as defaults, then the various EVP functions will automatically use those implementations automatically in preference to built in software implementations. For more information, consult the engine(3) man page.</p> <p>Although low-level algorithm specific functions exist for many algorithms their use is discouraged. They cannot be used with an ENGINE and ENGINE versions of new algorithms cannot be accessed using the low-level functions. Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low-level and some operations are more efficient using the high-level interface.</p>"},{"location":"man7/evp/#see-also","title":"SEE ALSO","text":"<p>EVP_DigestInit(3), EVP_EncryptInit(3), EVP_OpenInit(3), EVP_SealInit(3), EVP_DigestSignInit(3), EVP_SignInit(3), EVP_VerifyInit(3), EVP_EncodeInit(3), EVP_PKEY_new(3), EVP_PKEY_set1_RSA(3), EVP_PKEY_keygen(3), EVP_PKEY_print_private(3), EVP_PKEY_decrypt(3), EVP_PKEY_encrypt(3), EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3), EVP_PKEY_derive(3), EVP_BytesToKey(3), ENGINE_by_id(3)</p>"},{"location":"man7/evp/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/ossl_store-file/","title":"ossl_store-file","text":""},{"location":"man7/ossl_store-file/#name","title":"NAME","text":"<p>ossl_store-file - The store 'file' scheme loader</p>"},{"location":"man7/ossl_store-file/#synopsis","title":"SYNOPSIS","text":"<p>#include &lt;openssl/store.h&gt;</p>"},{"location":"man7/ossl_store-file/#description","title":"DESCRIPTION","text":"<p>Support for the 'file' scheme is built into <code>libcrypto</code>. Since files come in all kinds of formats and content types, the 'file' scheme has its own layer of functionality called \"file handlers\", which are used to try to decode diverse types of file contents.</p> <p>In case a file is formatted as PEM, each called file handler receives the PEM name (everything following any '<code>-----BEGIN</code>') as well as possible PEM headers, together with the decoded PEM body.  Since PEM formatted files can contain more than one object, the file handlers are called upon for each such object.</p> <p>If the file isn't determined to be formatted as PEM, the content is loaded in raw form in its entirety and passed to the available file handlers as is, with no PEM name or headers.</p> <p>Each file handler is expected to handle PEM and non-PEM content as appropriate.  Some may refuse non-PEM content for the sake of determinism (for example, there are keys out in the wild that are represented as an ASN.1 OCTET STRING.  In raw form, it's not easily possible to distinguish those from any other data coming as an ASN.1 OCTET STRING, so such keys would naturally be accepted as PEM files only).</p>"},{"location":"man7/ossl_store-file/#notes","title":"NOTES","text":"<p>When needed, the 'file' scheme loader will require a pass phrase by using the <code>UI_METHOD</code> that was passed via OSSL_STORE_open(). This pass phrase is expected to be UTF-8 encoded, anything else will give an undefined result. The files made accessible through this loader are expected to be standard compliant with regards to pass phrase encoding. Files that aren't should be re-generated with a correctly encoded pass phrase. See passphrase-encoding(7) for more information.</p>"},{"location":"man7/ossl_store-file/#see-also","title":"SEE ALSO","text":"<p>ossl_store(7), passphrase-encoding(7)</p>"},{"location":"man7/ossl_store-file/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/ossl_store/","title":"ossl_store","text":""},{"location":"man7/ossl_store/#name","title":"NAME","text":"<p>ossl_store - Store retrieval functions</p>"},{"location":"man7/ossl_store/#synopsis","title":"SYNOPSIS","text":"<p>#include &lt;openssl/store.h&gt;</p>"},{"location":"man7/ossl_store/#description","title":"DESCRIPTION","text":""},{"location":"man7/ossl_store/#general","title":"General","text":"<p>A STORE is a layer of functionality to retrieve a number of supported objects from a repository of any kind, addressable as a filename or as a URI.</p> <p>The functionality supports the pattern \"open a channel to the repository\", \"loop and retrieve one object at a time\", and \"finish up by closing the channel\".</p> <p>The retrieved objects are returned as a wrapper type OSSL_STORE_INFO, from which an OpenSSL type can be retrieved.</p>"},{"location":"man7/ossl_store/#uri-schemes-and-loaders","title":"URI schemes and loaders","text":"<p>Support for a URI scheme is called a STORE \"loader\", and can be added dynamically from the calling application or from a loadable engine.</p> <p>Support for the 'file' scheme is built into <code>libcrypto</code>. See ossl_store-file(7) for more information.</p>"},{"location":"man7/ossl_store/#ui_method-and-pass-phrases","title":"UI_METHOD and pass phrases","text":"<p>The OSS_STORE API does nothing to enforce any specific format or encoding on the pass phrase that the UI_METHOD provides.  However, the pass phrase is expected to be UTF-8 encoded.  The result of any other encoding is undefined.</p>"},{"location":"man7/ossl_store/#examples","title":"EXAMPLES","text":""},{"location":"man7/ossl_store/#a-generic-call","title":"A generic call","text":"<pre><code>OSSL_STORE_CTX *ctx = OSSL_STORE_open(\"file:/foo/bar/data.pem\");\n\n/*\n * OSSL_STORE_eof() simulates file semantics for any repository to signal\n * that no more data can be expected\n */\nwhile (!OSSL_STORE_eof(ctx)) {\n    OSSL_STORE_INFO *info = OSSL_STORE_load(ctx);\n\n    /*\n     * Do whatever is necessary with the OSSL_STORE_INFO,\n     * here just one example\n     */\n    switch (OSSL_STORE_INFO_get_type(info)) {\n    case OSSL_STORE_INFO_CERT:\n        /* Print the X.509 certificate text */\n        X509_print_fp(stdout, OSSL_STORE_INFO_get0_CERT(info));\n        /* Print the X.509 certificate PEM output */\n        PEM_write_X509(stdout, OSSL_STORE_INFO_get0_CERT(info));\n        break;\n    }\n}\n\nOSSL_STORE_close(ctx);\n</code></pre>"},{"location":"man7/ossl_store/#see-also","title":"SEE ALSO","text":"<p>OSSL_STORE_INFO(3), OSSL_STORE_LOADER(3), OSSL_STORE_open(3), OSSL_STORE_expect(3), OSSL_STORE_SEARCH(3)</p>"},{"location":"man7/ossl_store/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/passphrase-encoding/","title":"passphrase-encoding","text":""},{"location":"man7/passphrase-encoding/#name","title":"NAME","text":"<p>passphrase-encoding - How diverse parts of OpenSSL treat pass phrases character encoding</p>"},{"location":"man7/passphrase-encoding/#description","title":"DESCRIPTION","text":"<p>In a modern world with all sorts of character encodings, the treatment of pass phrases has become increasingly complex. This manual page attempts to give an overview over how this problem is currently addressed in different parts of the OpenSSL library.</p>"},{"location":"man7/passphrase-encoding/#the-general-case","title":"The general case","text":"<p>The OpenSSL library doesn't treat pass phrases in any special way as a general rule, and trusts the application or user to choose a suitable character set and stick to that throughout the lifetime of affected objects. This means that for an object that was encrypted using a pass phrase encoded in ISO-8859-1, that object needs to be decrypted using a pass phrase encoded in ISO-8859-1. Using the wrong encoding is expected to cause a decryption failure.</p>"},{"location":"man7/passphrase-encoding/#pkcs12","title":"PKCS#12","text":"<p>PKCS#12 is a bit different regarding pass phrase encoding. The standard stipulates that the pass phrase shall be encoded as an ASN.1 BMPString, which consists of the code points of the basic multilingual plane, encoded in big endian (UCS-2 BE).</p> <p>OpenSSL tries to adapt to this requirements in one of the following manners:</p> <ol> <li>Treats the received pass phrase as UTF-8 encoded and tries to re-encode it to UTF-16 (which is the same as UCS-2 for characters U+0000 to U+D7FF and U+E000 to U+FFFF, but becomes an expansion for any other character), or failing that, proceeds with step 2.</li> <li> <p>Assumes that the pass phrase is encoded in ASCII or ISO-8859-1 and opportunistically prepends each byte with a zero byte to obtain the UCS-2 encoding of the characters, which it stores as a BMPString.</p> <p>Note that since there is no check of your locale, this may produce UCS-2 / UTF-16 characters that do not correspond to the original pass phrase characters for other character sets, such as any ISO-8859-X encoding other than ISO-8859-1 (or for Windows, CP 1252 with exception for the extra \"graphical\" characters in the 0x80-0x9F range).</p> </li> </ol> <p>OpenSSL versions older than 1.1.0 do variant 2 only, and that is the reason why OpenSSL still does this, to be able to read files produced with older versions.</p> <p>It should be noted that this approach isn't entirely fault free.</p> <p>A pass phrase encoded in ISO-8859-2 could very well have a sequence such as 0xC3 0xAF (which is the two characters \"LATIN CAPITAL LETTER A WITH BREVE\" and \"LATIN CAPITAL LETTER Z WITH DOT ABOVE\" in ISO-8859-2 encoding), but would be misinterpreted as the perfectly valid UTF-8 encoded code point U+00EF (LATIN SMALL LETTER I WITH DIAERESIS) if the pass phrase doesn't contain anything that would be invalid UTF-8. A pass phrase that contains this kind of byte sequence will give a different outcome in OpenSSL 1.1.0 and newer than in OpenSSL older than 1.1.0.</p> <pre><code>0x00 0xC3 0x00 0xAF                    # OpenSSL older than 1.1.0\n0x00 0xEF                              # OpenSSL 1.1.0 and newer\n</code></pre> <p>On the same accord, anything encoded in UTF-8 that was given to OpenSSL older than 1.1.0 was misinterpreted as ISO-8859-1 sequences.</p>"},{"location":"man7/passphrase-encoding/#ossl_store","title":"OSSL_STORE","text":"<p>ossl_store(7) acts as a general interface to access all kinds of objects, potentially protected with a pass phrase, a PIN or something else. This API stipulates that pass phrases should be UTF-8 encoded, and that any other pass phrase encoding may give undefined results. This API relies on the application to ensure UTF-8 encoding, and doesn't check that this is the case, so what it gets, it will also pass to the underlying loader.</p>"},{"location":"man7/passphrase-encoding/#recommendations","title":"RECOMMENDATIONS","text":"<p>This section assumes that you know what pass phrase was used for encryption, but that it may have been encoded in a different character encoding than the one used by your current input method. For example, the pass phrase may have been used at a time when your default encoding was ISO-8859-1 (i.e. \"na\u00efve\" resulting in the byte sequence 0x6E 0x61 0xEF 0x76 0x65), and you're now in an environment where your default encoding is UTF-8 (i.e. \"na\u00efve\" resulting in the byte sequence 0x6E 0x61 0xC3 0xAF 0x76 0x65). Whenever it's mentioned that you should use a certain character encoding, it should be understood that you either change the input method to use the mentioned encoding when you type in your pass phrase, or use some suitable tool to convert your pass phrase from your default encoding to the target encoding.</p> <p>Also note that the sub-sections below discuss human readable pass phrases. This is particularly relevant for PKCS#12 objects, where human readable pass phrases are assumed. For other objects, it's as legitimate to use any byte sequence (such as a sequence of bytes from `/dev/urandom` that's been saved away), which makes any character encoding discussion irrelevant; in such cases, simply use the same byte sequence as it is.</p>"},{"location":"man7/passphrase-encoding/#creating-new-objects","title":"Creating new objects","text":"<p>For creating new pass phrase protected objects, make sure the pass phrase is encoded using UTF-8. This is default on most modern Unixes, but may involve an effort on other platforms. Specifically for Windows, setting the environment variable <code>OPENSSL_WIN32_UTF8</code> will have anything entered on [Windows] console prompt converted to UTF-8 (command line and separately prompted pass phrases alike).</p>"},{"location":"man7/passphrase-encoding/#opening-existing-objects","title":"Opening existing objects","text":"<p>For opening pass phrase protected objects where you know what character encoding was used for the encryption pass phrase, make sure to use the same encoding again.</p> <p>For opening pass phrase protected objects where the character encoding that was used is unknown, or where the producing application is unknown, try one of the following:</p> <ol> <li>Try the pass phrase that you have as it is in the character encoding of your environment. It's possible that its byte sequence is exactly right.</li> <li>Convert the pass phrase to UTF-8 and try with the result. Specifically with PKCS#12, this should open up any object that was created according to the specification.</li> <li> <p>Do a na\u00efve (i.e. purely mathematical) ISO-8859-1 to UTF-8 conversion and try with the result. This differs from the previous attempt because ISO-8859-1 maps directly to U+0000 to U+00FF, which other non-UTF-8 character sets do not.</p> <p>This also takes care of the case when a UTF-8 encoded string was used with OpenSSL older than 1.1.0. (for example, <code>\u00ef</code>, which is 0xC3 0xAF when encoded in UTF-8, would become 0xC3 0x83 0xC2 0xAF when re-encoded in the na\u00efve manner. The conversion to BMPString would then yield 0x00 0xC3 0x00 0xA4 0x00 0x00, the erroneous/non-compliant encoding used by OpenSSL older than 1.1.0)</p> </li> </ol>"},{"location":"man7/passphrase-encoding/#see-also","title":"SEE ALSO","text":"<p>evp(7), ossl_store(7), EVP_BytesToKey(3), EVP_DecryptInit(3), PEM_do_header(3), PKCS12_parse(3), PKCS12_newpass(3), d2i_PKCS8PrivateKey_bio(3)</p>"},{"location":"man7/passphrase-encoding/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2018-2020 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/proxy-certificates/","title":"proxy-certificates","text":""},{"location":"man7/proxy-certificates/#name","title":"NAME","text":"<p>proxy-certificates - Proxy certificates in OpenSSL</p>"},{"location":"man7/proxy-certificates/#description","title":"DESCRIPTION","text":"<p>Proxy certificates are defined in RFC 3820.  They are used to extend rights to some other entity (a computer process, typically, or sometimes to the user itself).  This allows the entity to perform operations on behalf of the owner of the EE (End Entity) certificate.</p> <p>The requirements for a valid proxy certificate are:</p> <ul> <li>They are issued by an End Entity, either a normal EE certificate, or another proxy certificate.</li> <li>They must not have the subjectAltName or issuerAltName extensions.</li> <li>They must have the proxyCertInfo extension.</li> <li>They must have the subject of their issuer, with one commonName added.</li> </ul>"},{"location":"man7/proxy-certificates/#enabling-proxy-certificate-verification","title":"Enabling proxy certificate verification","text":"<p>OpenSSL expects applications that want to use proxy certificates to be specially aware of them, and make that explicit.  This is done by setting an X509 verification flag:</p> <pre><code>X509_STORE_CTX_set_flags(ctx, X509_V_FLAG_ALLOW_PROXY_CERTS);\n</code></pre> <p>or</p> <pre><code>X509_VERIFY_PARAM_set_flags(param, X509_V_FLAG_ALLOW_PROXY_CERTS);\n</code></pre> <p>See \"NOTES\" for a discussion on this requirement.</p>"},{"location":"man7/proxy-certificates/#creating-proxy-certificates","title":"Creating proxy certificates","text":"<p>Creating proxy certificates can be done using the openssl-x509(1) command, with some extra extensions:</p> <pre><code>[ v3_proxy ]\n# A proxy certificate MUST NEVER be a CA certificate.\nbasicConstraints=CA:FALSE\n\n# Usual authority key ID\nauthorityKeyIdentifier=keyid,issuer:always\n\n# The extension which marks this certificate as a proxy\nproxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:1,policy:text:AB\n</code></pre> <p>It's also possible to specify the proxy extension in a separate section:</p> <pre><code>proxyCertInfo=critical,@proxy_ext\n\n[ proxy_ext ]\nlanguage=id-ppl-anyLanguage\npathlen=0\npolicy=text:BC\n</code></pre> <p>The policy value has a specific syntax, syntag:string, where the syntag determines what will be done with the string.  The following _syntag_s are recognised:</p> <ul> <li> <p>text</p> <p>indicates that the string is a byte sequence, without any encoding:</p> <pre><code>policy=text:r\u00e4ksm\u00f6rg\u00e5s\n</code></pre> </li> <li> <p>hex</p> <p>indicates the string is encoded hexadecimal encoded binary data, with colons between each byte (every second hex digit):</p> <pre><code>policy=hex:72:E4:6B:73:6D:F6:72:67:E5:73\n</code></pre> </li> <li> <p>file</p> <p>indicates that the text of the policy should be taken from a file. The string is then a filename.  This is useful for policies that are large (more than a few lines, e.g. XML documents).</p> </li> </ul> <p>NOTE: The proxy policy value is what determines the rights granted to the process during the proxy certificate.  It's up to the application to interpret and combine these policies.</p> <p>With a proxy extension, creating a proxy certificate is a matter of two commands:</p> <pre><code>openssl req -new -config proxy.cnf \\\n    -out proxy.req -keyout proxy.key \\\n    -subj \"/DC=org/DC=openssl/DC=users/CN=proxy 1\"\n\nopenssl x509 -req -CAcreateserial -in proxy.req -out proxy.crt \\\n    -CA user.crt -CAkey user.key -days 7 \\\n    -extfile proxy.cnf -extensions v3_proxy1\n</code></pre> <p>You can also create a proxy certificate using another proxy certificate as issuer (note: using a different configuration section for the proxy extensions):</p> <pre><code>openssl req -new -config proxy.cnf \\\n    -out proxy2.req -keyout proxy2.key \\\n    -subj \"/DC=org/DC=openssl/DC=users/CN=proxy 1/CN=proxy 2\"\n\nopenssl x509 -req -CAcreateserial -in proxy2.req -out proxy2.crt \\\n    -CA proxy.crt -CAkey proxy.key -days 7 \\\n    -extfile proxy.cnf -extensions v3_proxy2\n</code></pre>"},{"location":"man7/proxy-certificates/#using-proxy-certs-in-applications","title":"Using proxy certs in applications","text":"<p>To interpret proxy policies, the application would normally start with some default rights (perhaps none at all), then compute the resulting rights by checking the rights against the chain of proxy certificates, user certificate and CA certificates.</p> <p>The complicated part is figuring out how to pass data between your application and the certificate validation procedure.</p> <p>The following ingredients are needed for such processing:</p> <ul> <li>a callback function that will be called for every certificate being validated.  The callback is called several times for each certificate, so you must be careful to do the proxy policy interpretation at the right time.  You also need to fill in the defaults when the EE certificate is checked.</li> <li>a data structure that is shared between your application code and the callback.</li> <li>a wrapper function that sets it all up.</li> <li>an ex_data index function that creates an index into the generic ex_data store that is attached to an X509 validation context.</li> </ul> <p>The following skeleton code can be used as a starting point:</p> <pre><code>#include &lt;string.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;openssl/x509.h&gt;\n#include &lt;openssl/x509v3.h&gt;\n\n#define total_rights 25\n\n/*\n * In this example, I will use a view of granted rights as a bit\n * array, one bit for each possible right.\n */\ntypedef struct your_rights {\n    unsigned char rights[(total_rights + 7) / 8];\n} YOUR_RIGHTS;\n\n/*\n * The following procedure will create an index for the ex_data\n * store in the X509 validation context the first time it's\n * called.  Subsequent calls will return the same index.\n */\nstatic int get_proxy_auth_ex_data_idx(X509_STORE_CTX *ctx)\n{\n    static volatile int idx = -1;\n\n    if (idx &lt; 0) {\n        X509_STORE_lock(X509_STORE_CTX_get0_store(ctx));\n        if (idx &lt; 0) {\n            idx = X509_STORE_CTX_get_ex_new_index(0,\n                                                  \"for verify callback\",\n                                                  NULL,NULL,NULL);\n        }\n        X509_STORE_unlock(X509_STORE_CTX_get0_store(ctx));\n    }\n    return idx;\n}\n\n/* Callback to be given to the X509 validation procedure.  */\nstatic int verify_callback(int ok, X509_STORE_CTX *ctx)\n{\n    if (ok == 1) {\n        /*\n         * It's REALLY important you keep the proxy policy check\n         * within this section.  It's important to know that when\n         * ok is 1, the certificates are checked from top to\n         * bottom.  You get the CA root first, followed by the\n         * possible chain of intermediate CAs, followed by the EE\n         * certificate, followed by the possible proxy\n         * certificates. \n         */\n        X509 *xs = X509_STORE_CTX_get_current_cert(ctx);\n\n        if (X509_get_extension_flags(xs) &amp; EXFLAG_PROXY) {\n            YOUR_RIGHTS *rights =\n                (YOUR_RIGHTS *)X509_STORE_CTX_get_ex_data(ctx,\n                    get_proxy_auth_ex_data_idx(ctx));\n            PROXY_CERT_INFO_EXTENSION *pci =\n                X509_get_ext_d2i(xs, NID_proxyCertInfo, NULL, NULL);\n\n            switch (OBJ_obj2nid(pci-&gt;proxyPolicy-&gt;policyLanguage)) {\n            case NID_Independent:\n                /*\n                 * Do whatever you need to grant explicit rights\n                 * to this particular proxy certificate, usually\n                 * by pulling them from some database.  If there\n                 * are none to be found, clear all rights (making\n                 * this and any subsequent proxy certificate void\n                 * of any rights). \n                 */\n                memset(rights-&gt;rights, 0, sizeof(rights-&gt;rights));\n                break;\n            case NID_id_ppl_inheritAll:\n                /*\n                 * This is basically a NOP, we simply let the\n                 * current rights stand as they are.\n                 */\n                break;\n            default:\n                /*\n                 * This is usually the most complex section of\n                 * code.  You really do whatever you want as long\n                 * as you follow RFC 3820.  In the example we use\n                 * here, the simplest thing to do is to build\n                 * another, temporary bit array and fill it with\n                 * the rights granted by the current proxy\n                 * certificate, then use it as a mask on the\n                 * accumulated rights bit array, and voil\u00e0, you\n                 * now have a new accumulated rights bit array.\n                 */\n                {\n                    int i;\n                    YOUR_RIGHTS tmp_rights;\n                    memset(tmp_rights.rights, 0,\n                           sizeof(tmp_rights.rights));\n\n                    /*\n                     * process_rights() is supposed to be a\n                     * procedure that takes a string and its\n                     * length, interprets it and sets the bits\n                     * in the YOUR_RIGHTS pointed at by the\n                     * third argument.\n                     */\n                    process_rights((char *) pci-&gt;proxyPolicy-&gt;policy-&gt;data,\n                                   pci-&gt;proxyPolicy-&gt;policy-&gt;length,\n                                   &amp;tmp_rights);\n\n                    for(i = 0; i &lt; total_rights / 8; i++)\n                        rights-&gt;rights[i] &amp;= tmp_rights.rights[i];\n                }\n                break;\n            }\n            PROXY_CERT_INFO_EXTENSION_free(pci);\n        } else if (!(X509_get_extension_flags(xs) &amp; EXFLAG_CA)) {\n            /* We have an EE certificate, let's use it to set default! */\n            YOUR_RIGHTS *rights =\n                (YOUR_RIGHTS *)X509_STORE_CTX_get_ex_data(ctx,\n                    get_proxy_auth_ex_data_idx(ctx));\n\n            /*\n             * The following procedure finds out what rights the\n             * owner of the current certificate has, and sets them\n             * in the YOUR_RIGHTS structure pointed at by the\n             * second argument.\n             */\n            set_default_rights(xs, rights);\n        }\n    }\n    return ok;\n}\n\nstatic int my_X509_verify_cert(X509_STORE_CTX *ctx,\n                               YOUR_RIGHTS *needed_rights)\n{\n    int ok;\n    int (*save_verify_cb)(int ok,X509_STORE_CTX *ctx) =\n        X509_STORE_CTX_get_verify_cb(ctx);\n    YOUR_RIGHTS rights;\n\n    X509_STORE_CTX_set_verify_cb(ctx, verify_callback);\n    X509_STORE_CTX_set_ex_data(ctx, get_proxy_auth_ex_data_idx(ctx),\n                               &amp;rights);\n    X509_STORE_CTX_set_flags(ctx, X509_V_FLAG_ALLOW_PROXY_CERTS);\n    ok = X509_verify_cert(ctx);\n\n    if (ok == 1) {\n        ok = check_needed_rights(rights, needed_rights);\n    }\n\n    X509_STORE_CTX_set_verify_cb(ctx, save_verify_cb);\n\n    return ok;\n}\n</code></pre> <p>If you use SSL or TLS, you can easily set up a callback to have the certificates checked properly, using the code above:</p> <pre><code>SSL_CTX_set_cert_verify_callback(s_ctx, my_X509_verify_cert,\n                                 &amp;needed_rights);\n</code></pre>"},{"location":"man7/proxy-certificates/#notes","title":"NOTES","text":"<p>To this date, it seems that proxy certificates have only been used in environments that are aware of them, and no one seems to have investigated how they can be used or misused outside of such an environment.</p> <p>For that reason, OpenSSL requires that applications aware of proxy certificates must also make that explicit.</p> <p>subjectAltName and issuerAltName are forbidden in proxy certificates, and this is enforced in OpenSSL.  The subject must be the same as the issuer, with one commonName added on.</p>"},{"location":"man7/proxy-certificates/#see-also","title":"SEE ALSO","text":"<p>X509_STORE_CTX_set_flags(3), X509_STORE_CTX_set_verify_cb(3), X509_VERIFY_PARAM_set_flags(3), SSL_CTX_set_cert_verify_callback(3), openssl-req(1), openssl-x509(1), RFC 3820</p>"},{"location":"man7/proxy-certificates/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the Apache License 2.0 (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/scrypt/","title":"scrypt","text":""},{"location":"man7/scrypt/#name","title":"NAME","text":"<p>scrypt - EVP_PKEY scrypt KDF support</p>"},{"location":"man7/scrypt/#description","title":"DESCRIPTION","text":"<p>The EVP_PKEY_SCRYPT algorithm implements the scrypt password based key derivation function, as described in RFC 7914.  It is memory-hard in the sense that it deliberately requires a significant amount of RAM for efficient computation. The intention of this is to render brute forcing of passwords on systems that lack large amounts of main memory (such as GPUs or ASICs) computationally infeasible.</p> <p>scrypt provides three work factors that can be customized: N, r and p. N, which has to be a positive power of two, is the general work factor and scales CPU time in an approximately linear fashion. r is the block size of the internally used hash function and p is the parallelization factor. Both r and p need to be greater than zero. The amount of RAM that scrypt requires for its computation is roughly (128 * N * r * p) bytes.</p> <p>In the original paper of Colin Percival (\"Stronger Key Derivation via Sequential Memory-Hard Functions\", 2009), the suggested values that give a computation time of less than 5 seconds on a 2.5 GHz Intel Core 2 Duo are N = 2^20 = 1048576, r = 8, p = 1. Consequently, the required amount of memory for this computation is roughly 1 GiB. On a more recent CPU (Intel i7-5930K at 3.5 GHz), this computation takes about 3 seconds. When N, r or p are not specified, they default to 1048576, 8, and 1, respectively. The default amount of RAM that may be used by scrypt defaults to 1025 MiB.</p>"},{"location":"man7/scrypt/#notes","title":"NOTES","text":"<p>A context for scrypt can be obtained by calling:</p> <pre><code>EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_SCRYPT, NULL);\n</code></pre> <p>The output length of an scrypt key derivation is specified via the length parameter to the EVP_PKEY_derive(3) function.</p>"},{"location":"man7/scrypt/#examples","title":"EXAMPLES","text":"<p>This example derives a 64-byte long test vector using scrypt using the password \"password\", salt \"NaCl\" and N = 1024, r = 8, p = 16.</p> <pre><code>EVP_PKEY_CTX *pctx;\nunsigned char out[64];\n\nsize_t outlen = sizeof(out);\npctx = EVP_PKEY_CTX_new_id(EVP_PKEY_SCRYPT, NULL);\n\nif (EVP_PKEY_derive_init(pctx) &lt;= 0) {\n    error(\"EVP_PKEY_derive_init\");\n}\nif (EVP_PKEY_CTX_set1_pbe_pass(pctx, \"password\", 8) &lt;= 0) {\n    error(\"EVP_PKEY_CTX_set1_pbe_pass\");\n}\nif (EVP_PKEY_CTX_set1_scrypt_salt(pctx, \"NaCl\", 4) &lt;= 0) {\n    error(\"EVP_PKEY_CTX_set1_scrypt_salt\");\n}\nif (EVP_PKEY_CTX_set_scrypt_N(pctx, 1024) &lt;= 0) {\n    error(\"EVP_PKEY_CTX_set_scrypt_N\");\n}\nif (EVP_PKEY_CTX_set_scrypt_r(pctx, 8) &lt;= 0) {\n    error(\"EVP_PKEY_CTX_set_scrypt_r\");\n}\nif (EVP_PKEY_CTX_set_scrypt_p(pctx, 16) &lt;= 0) {\n    error(\"EVP_PKEY_CTX_set_scrypt_p\");\n}\nif (EVP_PKEY_derive(pctx, out, &amp;outlen) &lt;= 0) {\n    error(\"EVP_PKEY_derive\");\n}\n\n{\n    const unsigned char expected[sizeof(out)] = {\n        0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00,\n        0x78, 0x56, 0xe7, 0x19, 0x0d, 0x01, 0xe9, 0xfe,\n        0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30,\n        0xe7, 0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62,\n        0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88,\n        0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,\n        0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d,\n        0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40\n    };\n\n    assert(!memcmp(out, expected, sizeof(out)));\n}\n\nEVP_PKEY_CTX_free(pctx);\n</code></pre>"},{"location":"man7/scrypt/#conforming-to","title":"CONFORMING TO","text":"<p>RFC 7914</p>"},{"location":"man7/scrypt/#see-also","title":"SEE ALSO","text":"<p>EVP_PKEY_CTX_set1_scrypt_salt(3), EVP_PKEY_CTX_set_scrypt_N(3), EVP_PKEY_CTX_set_scrypt_r(3), EVP_PKEY_CTX_set_scrypt_p(3), EVP_PKEY_CTX_set_scrypt_maxmem_bytes(3), EVP_PKEY_CTX_new(3), EVP_PKEY_CTX_ctrl_str(3), EVP_PKEY_derive(3)</p>"},{"location":"man7/scrypt/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/ssl/","title":"ssl","text":""},{"location":"man7/ssl/#name","title":"NAME","text":"<p>ssl - OpenSSL SSL/TLS library</p>"},{"location":"man7/ssl/#synopsis","title":"SYNOPSIS","text":"<p>See the individual manual pages for details.</p>"},{"location":"man7/ssl/#description","title":"DESCRIPTION","text":"<p>The OpenSSL ssl library implements the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols. It provides a rich API which is documented here.</p> <p>An SSL_CTX object is created as a framework to establish TLS/SSL enabled connections (see SSL_CTX_new(3)). Various options regarding certificates, algorithms etc. can be set in this object.</p> <p>When a network connection has been created, it can be assigned to an SSL object. After the SSL object has been created using SSL_new(3), SSL_set_fd(3) or SSL_set_bio(3) can be used to associate the network connection with the object.</p> <p>When the TLS/SSL handshake is performed using SSL_accept(3) or SSL_connect(3) respectively. SSL_read_ex(3), SSL_read(3), SSL_write_ex(3) and SSL_write(3) are used to read and write data on the TLS/SSL connection. SSL_shutdown(3) can be used to shut down the TLS/SSL connection.</p>"},{"location":"man7/ssl/#data-structures","title":"DATA STRUCTURES","text":"<p>Currently the OpenSSL ssl library functions deals with the following data structures:</p> <ul> <li> <p>SSL_METHOD (SSL Method)</p> <p>This is a dispatch structure describing the internal ssl library methods/functions which implement the various protocol versions (SSLv3 TLSv1, ...). It's needed to create an SSL_CTX.</p> </li> <li> <p>SSL_CIPHER (SSL Cipher)</p> <p>This structure holds the algorithm information for a particular cipher which are a core part of the SSL/TLS protocol. The available ciphers are configured on a SSL_CTX basis and the actual ones used are then part of the SSL_SESSION.</p> </li> <li> <p>SSL_CTX (SSL Context)</p> <p>This is the global context structure which is created by a server or client once per program life-time and which holds mainly default values for the SSL structures which are later created for the connections.</p> </li> <li> <p>SSL_SESSION (SSL Session)</p> <p>This is a structure containing the current TLS/SSL session details for a connection: SSL_CIPHERs, client and server certificates, keys, etc.</p> </li> <li> <p>SSL (SSL Connection)</p> <p>This is the main SSL/TLS structure which is created by a server or client per established connection. This actually is the core structure in the SSL API. At run-time the application usually deals with this structure which has links to mostly all other structures.</p> </li> </ul>"},{"location":"man7/ssl/#header-files","title":"HEADER FILES","text":"<p>Currently the OpenSSL ssl library provides the following C header files containing the prototypes for the data structures and functions:</p> <ul> <li> <p>ssl.h</p> <p>This is the common header file for the SSL/TLS API.  Include it into your program to make the API of the ssl library available. It internally includes both more private SSL headers and headers from the crypto library. Whenever you need hard-core details on the internals of the SSL API, look inside this header file.</p> </li> <li> <p>ssl2.h</p> <p>Unused. Present for backwards compatibility only.</p> </li> <li> <p>ssl3.h</p> <p>This is the sub header file dealing with the SSLv3 protocol only. Usually you don't have to include it explicitly because it's already included by ssl.h.</p> </li> <li> <p>tls1.h</p> <p>This is the sub header file dealing with the TLSv1 protocol only. Usually you don't have to include it explicitly because it's already included by ssl.h.</p> </li> </ul>"},{"location":"man7/ssl/#api-functions","title":"API FUNCTIONS","text":"<p>Currently the OpenSSL ssl library exports 214 API functions. They are documented in the following:</p>"},{"location":"man7/ssl/#dealing-with-protocol-methods","title":"Dealing with Protocol Methods","text":"<p>Here we document the various API functions which deal with the SSL/TLS protocol methods defined in SSL_METHOD structures.</p> <ul> <li> <p>const SSL_METHOD *TLS_method(void);</p> <p>Constructor for the version-flexible SSL_METHOD structure for clients, servers or both. See SSL_CTX_new(3) for details.</p> </li> <li> <p>const SSL_METHOD *TLS_client_method(void);</p> <p>Constructor for the version-flexible SSL_METHOD structure for clients. Must be used to support the TLSv1.3 protocol.</p> </li> <li> <p>const SSL_METHOD *TLS_server_method(void);</p> <p>Constructor for the version-flexible SSL_METHOD structure for servers. Must be used to support the TLSv1.3 protocol.</p> </li> <li> <p>const SSL_METHOD *TLSv1_2_method(void);</p> <p>Constructor for the TLSv1.2 SSL_METHOD structure for clients, servers or both.</p> </li> <li> <p>const SSL_METHOD *TLSv1_2_client_method(void);</p> <p>Constructor for the TLSv1.2 SSL_METHOD structure for clients.</p> </li> <li> <p>const SSL_METHOD *TLSv1_2_server_method(void);</p> <p>Constructor for the TLSv1.2 SSL_METHOD structure for servers.</p> </li> <li> <p>const SSL_METHOD *TLSv1_1_method(void);</p> <p>Constructor for the TLSv1.1 SSL_METHOD structure for clients, servers or both.</p> </li> <li> <p>const SSL_METHOD *TLSv1_1_client_method(void);</p> <p>Constructor for the TLSv1.1 SSL_METHOD structure for clients.</p> </li> <li> <p>const SSL_METHOD *TLSv1_1_server_method(void);</p> <p>Constructor for the TLSv1.1 SSL_METHOD structure for servers.</p> </li> <li> <p>const SSL_METHOD *TLSv1_method(void);</p> <p>Constructor for the TLSv1 SSL_METHOD structure for clients, servers or both.</p> </li> <li> <p>const SSL_METHOD *TLSv1_client_method(void);</p> <p>Constructor for the TLSv1 SSL_METHOD structure for clients.</p> </li> <li> <p>const SSL_METHOD *TLSv1_server_method(void);</p> <p>Constructor for the TLSv1 SSL_METHOD structure for servers.</p> </li> <li> <p>const SSL_METHOD *SSLv3_method(void);</p> <p>Constructor for the SSLv3 SSL_METHOD structure for clients, servers or both.</p> </li> <li> <p>const SSL_METHOD *SSLv3_client_method(void);</p> <p>Constructor for the SSLv3 SSL_METHOD structure for clients.</p> </li> <li> <p>const SSL_METHOD *SSLv3_server_method(void);</p> <p>Constructor for the SSLv3 SSL_METHOD structure for servers.</p> </li> </ul>"},{"location":"man7/ssl/#dealing-with-ciphers","title":"Dealing with Ciphers","text":"<p>Here we document the various API functions which deal with the SSL/TLS ciphers defined in SSL_CIPHER structures.</p> <ul> <li> <p>char *SSL_CIPHER_description(SSL_CIPHER *cipher, char *buf, int len);</p> <p>Write a string to buf (with a maximum size of len) containing a human readable description of cipher. Returns buf.</p> </li> <li> <p>int SSL_CIPHER_get_bits(SSL_CIPHER *cipher, int *alg_bits);</p> <p>Determine the number of bits in cipher. Because of export crippled ciphers there are two bits: The bits the algorithm supports in general (stored to alg_bits) and the bits which are actually used (the return value).</p> </li> <li> <p>const char *SSL_CIPHER_get_name(SSL_CIPHER *cipher);</p> <p>Return the internal name of cipher as a string. These are the various strings defined by the SSL3_TXT_xxx and TLS1_TXT_xxx definitions in the header files.</p> </li> <li> <p>const char *SSL_CIPHER_get_version(SSL_CIPHER *cipher);</p> <p>Returns a string like \"<code>SSLv3</code>\" or \"<code>TLSv1.2</code>\" which indicates the SSL/TLS protocol version to which cipher belongs (i.e. where it was defined in the specification the first time).</p> </li> </ul>"},{"location":"man7/ssl/#dealing-with-protocol-contexts","title":"Dealing with Protocol Contexts","text":"<p>Here we document the various API functions which deal with the SSL/TLS protocol context defined in the SSL_CTX structure.</p> <ul> <li>int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);</li> <li>long SSL_CTX_add_extra_chain_cert(SSL_CTX *ctx, X509 *x509);</li> <li>int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *c);</li> <li>int SSL_CTX_check_private_key(const SSL_CTX *ctx);</li> <li>long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, char *parg);</li> <li>void SSL_CTX_flush_sessions(SSL_CTX *s, long t);</li> <li>void SSL_CTX_free(SSL_CTX *a);</li> <li>char *SSL_CTX_get_app_data(SSL_CTX *ctx);</li> <li>X509_STORE *SSL_CTX_get_cert_store(SSL_CTX *ctx);</li> <li>STACK *SSL_CTX_get_ciphers(const SSL_CTX *ctx);</li> <li>STACK *SSL_CTX_get_client_CA_list(const SSL_CTX *ctx);</li> <li>int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);</li> <li>void SSL_CTX_get_default_read_ahead(SSL_CTX *ctx);</li> <li>char *SSL_CTX_get_ex_data(const SSL_CTX *s, int idx);</li> <li>int SSL_CTX_get_ex_new_index(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))</li> <li>void (*SSL_CTX_get_info_callback(SSL_CTX *ctx))(SSL *ssl, int cb, int ret);</li> <li>int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);</li> <li>void SSL_CTX_get_read_ahead(SSL_CTX *ctx);</li> <li>int SSL_CTX_get_session_cache_mode(SSL_CTX *ctx);</li> <li>long SSL_CTX_get_timeout(const SSL_CTX *ctx);</li> <li>int (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx))(int ok, X509_STORE_CTX *ctx);</li> <li>int SSL_CTX_get_verify_mode(SSL_CTX *ctx);</li> <li>int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile, const char *CApath);</li> <li>SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);</li> <li>int SSL_CTX_up_ref(SSL_CTX *ctx);</li> <li>int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *c);</li> <li>int SSL_CTX_sess_accept(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_accept_good(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_accept_renegotiate(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_cache_full(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_cb_hits(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_connect(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_connect_good(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_connect_renegotiate(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_get_cache_size(SSL_CTX *ctx);</li> <li>SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx))(SSL *ssl, unsigned char *data, int len, int *copy);</li> <li>int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)(SSL *ssl, SSL_SESSION *sess);</li> <li>void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)(SSL_CTX *ctx, SSL_SESSION *sess);</li> <li>int SSL_CTX_sess_hits(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_misses(SSL_CTX *ctx);</li> <li>int SSL_CTX_sess_number(SSL_CTX *ctx);</li> <li>void SSL_CTX_sess_set_cache_size(SSL_CTX *ctx, t);</li> <li>void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx, SSL_SESSION *(*cb)(SSL *ssl, unsigned char *data, int len, int *copy));</li> <li>void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx, int (*cb)(SSL *ssl, SSL_SESSION *sess));</li> <li>void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx, void (*cb)(SSL_CTX *ctx, SSL_SESSION *sess));</li> <li>int SSL_CTX_sess_timeouts(SSL_CTX *ctx);</li> <li>LHASH *SSL_CTX_sessions(SSL_CTX *ctx);</li> <li>int SSL_CTX_set_app_data(SSL_CTX *ctx, void *arg);</li> <li>void SSL_CTX_set_cert_store(SSL_CTX *ctx, X509_STORE *cs);</li> <li>void SSL_CTX_set1_cert_store(SSL_CTX *ctx, X509_STORE *cs);</li> <li>void SSL_CTX_set_cert_verify_cb(SSL_CTX *ctx, int (*cb)(), char *arg)</li> <li>int SSL_CTX_set_cipher_list(SSL_CTX *ctx, char *str);</li> <li>void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK *list);</li> <li>void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx, int (*cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));</li> <li>int SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx, ssl_ct_validation_cb callback, void *arg);</li> <li>void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, int (*cb);(void))</li> <li>void SSL_CTX_set_default_read_ahead(SSL_CTX *ctx, int m);</li> <li> <p>int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);</p> <p>Use the default paths to locate trusted CA certificates. There is one default directory path and one default file path. Both are set via this call.</p> </li> <li> <p>int SSL_CTX_set_default_verify_dir(SSL_CTX *ctx)</p> <p>Use the default directory path to locate trusted CA certificates.</p> </li> <li> <p>int SSL_CTX_set_default_verify_file(SSL_CTX *ctx)</p> <p>Use the file path to locate trusted CA certificates.</p> </li> <li> <p>int SSL_CTX_set_ex_data(SSL_CTX *s, int idx, char *arg);</p> </li> <li>void SSL_CTX_set_info_callback(SSL_CTX *ctx, void (*cb)(SSL *ssl, int cb, int ret));</li> <li>void SSL_CTX_set_msg_callback(SSL_CTX *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));</li> <li>void SSL_CTX_set_msg_callback_arg(SSL_CTX *ctx, void *arg);</li> <li>unsigned long SSL_CTX_clear_options(SSL_CTX *ctx, unsigned long op);</li> <li>unsigned long SSL_CTX_get_options(SSL_CTX *ctx);</li> <li>unsigned long SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op);</li> <li>void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);</li> <li>void SSL_CTX_set_read_ahead(SSL_CTX *ctx, int m);</li> <li>void SSL_CTX_set_session_cache_mode(SSL_CTX *ctx, int mode);</li> <li>int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth);</li> <li>void SSL_CTX_set_timeout(SSL_CTX *ctx, long t);</li> <li>long SSL_CTX_set_tmp_dh(SSL_CTX* ctx, DH *dh);</li> <li>long SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx, DH *(*cb)(void));</li> <li>void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, int (*cb);(void))</li> <li>int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);</li> <li>int SSL_CTX_use_PrivateKey_ASN1(int type, SSL_CTX *ctx, unsigned char *d, long len);</li> <li>int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);</li> <li>int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);</li> <li>int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned char *d, long len);</li> <li>int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type);</li> <li>int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);</li> <li>int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, unsigned char *d);</li> <li>int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);</li> <li>int SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x, EVP_PKEY *pkey, STACK_OF(X509) *chain, int override);</li> <li>X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx);</li> <li>EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx);</li> <li>void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, unsigned int (*callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));</li> <li>int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *hint);</li> <li>void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, unsigned int (*callback)(SSL *ssl, const char *identity, unsigned char *psk, int max_psk_len));</li> </ul>"},{"location":"man7/ssl/#dealing-with-sessions","title":"Dealing with Sessions","text":"<p>Here we document the various API functions which deal with the SSL/TLS sessions defined in the SSL_SESSION structures.</p> <ul> <li>int SSL_SESSION_cmp(const SSL_SESSION *a, const SSL_SESSION *b);</li> <li>void SSL_SESSION_free(SSL_SESSION *ss);</li> <li>char *SSL_SESSION_get_app_data(SSL_SESSION *s);</li> <li>char *SSL_SESSION_get_ex_data(const SSL_SESSION *s, int idx);</li> <li>int SSL_SESSION_get_ex_new_index(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))</li> <li>long SSL_SESSION_get_time(const SSL_SESSION *s);</li> <li>long SSL_SESSION_get_timeout(const SSL_SESSION *s);</li> <li>unsigned long SSL_SESSION_hash(const SSL_SESSION *a);</li> <li>SSL_SESSION *SSL_SESSION_new(void);</li> <li>int SSL_SESSION_print(BIO *bp, const SSL_SESSION *x);</li> <li>int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x);</li> <li>int SSL_SESSION_set_app_data(SSL_SESSION *s, char *a);</li> <li>int SSL_SESSION_set_ex_data(SSL_SESSION *s, int idx, char *arg);</li> <li>long SSL_SESSION_set_time(SSL_SESSION *s, long t);</li> <li>long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);</li> </ul>"},{"location":"man7/ssl/#dealing-with-connections","title":"Dealing with Connections","text":"<p>Here we document the various API functions which deal with the SSL/TLS connection defined in the SSL structure.</p> <ul> <li>int SSL_accept(SSL *ssl);</li> <li>int SSL_add_dir_cert_subjects_to_stack(STACK *stack, const char *dir);</li> <li>int SSL_add_file_cert_subjects_to_stack(STACK *stack, const char *file);</li> <li>int SSL_add_client_CA(SSL *ssl, X509 *x);</li> <li>char *SSL_alert_desc_string(int value);</li> <li>char *SSL_alert_desc_string_long(int value);</li> <li>char *SSL_alert_type_string(int value);</li> <li>char *SSL_alert_type_string_long(int value);</li> <li>int SSL_check_private_key(const SSL *ssl);</li> <li>void SSL_clear(SSL *ssl);</li> <li>long SSL_clear_num_renegotiations(SSL *ssl);</li> <li>int SSL_connect(SSL *ssl);</li> <li> <p>int SSL_copy_session_id(SSL *t, const SSL *f);</p> <p>Sets the session details for t to be the same as in f. Returns 1 on success or 0 on failure.</p> </li> <li> <p>long SSL_ctrl(SSL *ssl, int cmd, long larg, char *parg);</p> </li> <li>int SSL_do_handshake(SSL *ssl);</li> <li> <p>SSL *SSL_dup(SSL *ssl);</p> <p>SSL_dup() allows applications to configure an SSL handle for use in multiple SSL connections, and then duplicate it prior to initiating each connection with the duplicated handle. Use of SSL_dup() avoids the need to repeat the configuration of the handles for each connection.</p> <p>For SSL_dup() to work, the connection MUST be in its initial state and MUST NOT have not yet have started the SSL handshake. For connections that are not in their initial state SSL_dup() just increments an internal reference count and returns the same handle. It may be possible to use SSL_clear(3) to recycle an SSL handle that is not in its initial state for re-use, but this is best avoided. Instead, save and restore the session, if desired, and construct a fresh handle for each connection.</p> </li> <li> <p>STACK *SSL_dup_CA_list(STACK *sk);</p> </li> <li>void SSL_free(SSL *ssl);</li> <li>SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);</li> <li>char *SSL_get_app_data(SSL *ssl);</li> <li>X509 *SSL_get_certificate(const SSL *ssl);</li> <li>const char *SSL_get_cipher(const SSL *ssl);</li> <li>int SSL_is_dtls(const SSL *ssl);</li> <li>int SSL_get_cipher_bits(const SSL *ssl, int *alg_bits);</li> <li>char *SSL_get_cipher_list(const SSL *ssl, int n);</li> <li>char *SSL_get_cipher_name(const SSL *ssl);</li> <li>char *SSL_get_cipher_version(const SSL *ssl);</li> <li>STACK *SSL_get_ciphers(const SSL *ssl);</li> <li>STACK *SSL_get_client_CA_list(const SSL *ssl);</li> <li>SSL_CIPHER *SSL_get_current_cipher(SSL *ssl);</li> <li>long SSL_get_default_timeout(const SSL *ssl);</li> <li>int SSL_get_error(const SSL *ssl, int i);</li> <li>char *SSL_get_ex_data(const SSL *ssl, int idx);</li> <li>int SSL_get_ex_data_X509_STORE_CTX_idx(void);</li> <li>int SSL_get_ex_new_index(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))</li> <li>int SSL_get_fd(const SSL *ssl);</li> <li>void (*SSL_get_info_callback(const SSL *ssl);)()</li> <li>int SSL_get_key_update_type(SSL *s);</li> <li>STACK *SSL_get_peer_cert_chain(const SSL *ssl);</li> <li>X509 *SSL_get_peer_certificate(const SSL *ssl);</li> <li>const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s);</li> <li>EVP_PKEY *SSL_get_privatekey(const SSL *ssl);</li> <li>int SSL_get_quiet_shutdown(const SSL *ssl);</li> <li>BIO *SSL_get_rbio(const SSL *ssl);</li> <li>int SSL_get_read_ahead(const SSL *ssl);</li> <li>SSL_SESSION *SSL_get_session(const SSL *ssl);</li> <li>char *SSL_get_shared_ciphers(const SSL *ssl, char *buf, int size);</li> <li>int SSL_get_shutdown(const SSL *ssl);</li> <li>const SSL_METHOD *SSL_get_ssl_method(SSL *ssl);</li> <li>int SSL_get_state(const SSL *ssl);</li> <li>long SSL_get_time(const SSL *ssl);</li> <li>long SSL_get_timeout(const SSL *ssl);</li> <li>int (*SSL_get_verify_callback(const SSL *ssl))(int, X509_STORE_CTX *)</li> <li>int SSL_get_verify_mode(const SSL *ssl);</li> <li>long SSL_get_verify_result(const SSL *ssl);</li> <li>char *SSL_get_version(const SSL *ssl);</li> <li>BIO *SSL_get_wbio(const SSL *ssl);</li> <li>int SSL_in_accept_init(SSL *ssl);</li> <li>int SSL_in_before(SSL *ssl);</li> <li>int SSL_in_connect_init(SSL *ssl);</li> <li>int SSL_in_init(SSL *ssl);</li> <li>int SSL_is_init_finished(SSL *ssl);</li> <li>int SSL_key_update(SSL *s, int updatetype);</li> <li>STACK *SSL_load_client_CA_file(const char *file);</li> <li>SSL *SSL_new(SSL_CTX *ctx);</li> <li>int SSL_up_ref(SSL *s);</li> <li>long SSL_num_renegotiations(SSL *ssl);</li> <li>int SSL_peek(SSL *ssl, void *buf, int num);</li> <li>int SSL_pending(const SSL *ssl);</li> <li>int SSL_read(SSL *ssl, void *buf, int num);</li> <li>int SSL_renegotiate(SSL *ssl);</li> <li>char *SSL_rstate_string(SSL *ssl);</li> <li>char *SSL_rstate_string_long(SSL *ssl);</li> <li>long SSL_session_reused(SSL *ssl);</li> <li>void SSL_set_accept_state(SSL *ssl);</li> <li>void SSL_set_app_data(SSL *ssl, char *arg);</li> <li>void SSL_set_bio(SSL *ssl, BIO *rbio, BIO *wbio);</li> <li>int SSL_set_cipher_list(SSL *ssl, char *str);</li> <li>void SSL_set_client_CA_list(SSL *ssl, STACK *list);</li> <li>void SSL_set_connect_state(SSL *ssl);</li> <li>int SSL_set_ct_validation_callback(SSL *ssl, ssl_ct_validation_cb callback, void *arg);</li> <li>int SSL_set_ex_data(SSL *ssl, int idx, char *arg);</li> <li>int SSL_set_fd(SSL *ssl, int fd);</li> <li>void SSL_set_info_callback(SSL *ssl, void (*cb);(void))</li> <li>void SSL_set_msg_callback(SSL *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));</li> <li>void SSL_set_msg_callback_arg(SSL *ctx, void *arg);</li> <li>unsigned long SSL_clear_options(SSL *ssl, unsigned long op);</li> <li>unsigned long SSL_get_options(SSL *ssl);</li> <li>unsigned long SSL_set_options(SSL *ssl, unsigned long op);</li> <li>void SSL_set_quiet_shutdown(SSL *ssl, int mode);</li> <li>void SSL_set_read_ahead(SSL *ssl, int yes);</li> <li>int SSL_set_rfd(SSL *ssl, int fd);</li> <li>int SSL_set_session(SSL *ssl, SSL_SESSION *session);</li> <li>void SSL_set_shutdown(SSL *ssl, int mode);</li> <li>int SSL_set_ssl_method(SSL *ssl, const SSL_METHOD *meth);</li> <li>void SSL_set_time(SSL *ssl, long t);</li> <li>void SSL_set_timeout(SSL *ssl, long t);</li> <li>void SSL_set_verify(SSL *ssl, int mode, int (*callback);(void))</li> <li>void SSL_set_verify_result(SSL *ssl, long arg);</li> <li>int SSL_set_wfd(SSL *ssl, int fd);</li> <li>int SSL_shutdown(SSL *ssl);</li> <li> <p>OSSL_HANDSHAKE_STATE SSL_get_state(const SSL *ssl);</p> <p>Returns the current handshake state.</p> </li> <li> <p>char *SSL_state_string(const SSL *ssl);</p> </li> <li>char *SSL_state_string_long(const SSL *ssl);</li> <li>long SSL_total_renegotiations(SSL *ssl);</li> <li>int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);</li> <li>int SSL_use_PrivateKey_ASN1(int type, SSL *ssl, unsigned char *d, long len);</li> <li>int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);</li> <li>int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);</li> <li>int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len);</li> <li>int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);</li> <li>int SSL_use_certificate(SSL *ssl, X509 *x);</li> <li>int SSL_use_certificate_ASN1(SSL *ssl, int len, unsigned char *d);</li> <li>int SSL_use_certificate_file(SSL *ssl, const char *file, int type);</li> <li>int SSL_use_cert_and_key(SSL *ssl, X509 *x, EVP_PKEY *pkey, STACK_OF(X509) *chain, int override);</li> <li>int SSL_version(const SSL *ssl);</li> <li>int SSL_want(const SSL *ssl);</li> <li>int SSL_want_nothing(const SSL *ssl);</li> <li>int SSL_want_read(const SSL *ssl);</li> <li>int SSL_want_write(const SSL *ssl);</li> <li>int SSL_want_x509_lookup(const SSL *ssl);</li> <li>int SSL_write(SSL *ssl, const void *buf, int num);</li> <li>void SSL_set_psk_client_callback(SSL *ssl, unsigned int (*callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));</li> <li>int SSL_use_psk_identity_hint(SSL *ssl, const char *hint);</li> <li>void SSL_set_psk_server_callback(SSL *ssl, unsigned int (*callback)(SSL *ssl, const char *identity, unsigned char *psk, int max_psk_len));</li> <li>const char *SSL_get_psk_identity_hint(SSL *ssl);</li> <li>const char *SSL_get_psk_identity(SSL *ssl);</li> </ul>"},{"location":"man7/ssl/#return-values","title":"RETURN VALUES","text":"<p>See the individual manual pages for details.</p>"},{"location":"man7/ssl/#see-also","title":"SEE ALSO","text":"<p>openssl(1), crypto(7), CRYPTO_get_ex_new_index(3), SSL_accept(3), SSL_clear(3), SSL_connect(3), SSL_CIPHER_get_name(3), SSL_COMP_add_compression_method(3), SSL_CTX_add_extra_chain_cert(3), SSL_CTX_add_session(3), SSL_CTX_ctrl(3), SSL_CTX_flush_sessions(3), SSL_CTX_get_verify_mode(3), SSL_CTX_load_verify_locations(3) SSL_CTX_new(3), SSL_CTX_sess_number(3), SSL_CTX_sess_set_cache_size(3), SSL_CTX_sess_set_get_cb(3), SSL_CTX_sessions(3), SSL_CTX_set_cert_store(3), SSL_CTX_set_cert_verify_callback(3), SSL_CTX_set_cipher_list(3), SSL_CTX_set_client_CA_list(3), SSL_CTX_set_client_cert_cb(3), SSL_CTX_set_default_passwd_cb(3), SSL_CTX_set_generate_session_id(3), SSL_CTX_set_info_callback(3), SSL_CTX_set_max_cert_list(3), SSL_CTX_set_mode(3), SSL_CTX_set_msg_callback(3), SSL_CTX_set_options(3), SSL_CTX_set_quiet_shutdown(3), SSL_CTX_set_read_ahead(3), SSL_CTX_set_security_level(3), SSL_CTX_set_session_cache_mode(3), SSL_CTX_set_session_id_context(3), SSL_CTX_set_ssl_version(3), SSL_CTX_set_timeout(3), SSL_CTX_set_tmp_dh_callback(3), SSL_CTX_set_verify(3), SSL_CTX_use_certificate(3), SSL_alert_type_string(3), SSL_do_handshake(3), SSL_enable_ct(3), SSL_get_SSL_CTX(3), SSL_get_ciphers(3), SSL_get_client_CA_list(3), SSL_get_default_timeout(3), SSL_get_error(3), SSL_get_ex_data_X509_STORE_CTX_idx(3), SSL_get_fd(3), SSL_get_peer_cert_chain(3), SSL_get_rbio(3), SSL_get_session(3), SSL_get_verify_result(3), SSL_get_version(3), SSL_load_client_CA_file(3), SSL_new(3), SSL_pending(3), SSL_read_ex(3), SSL_read(3), SSL_rstate_string(3), SSL_session_reused(3), SSL_set_bio(3), SSL_set_connect_state(3), SSL_set_fd(3), SSL_set_session(3), SSL_set_shutdown(3), SSL_shutdown(3), SSL_state_string(3), SSL_want(3), SSL_write_ex(3), SSL_write(3), SSL_SESSION_free(3), SSL_SESSION_get_time(3), d2i_SSL_SESSION(3), SSL_CTX_set_psk_client_callback(3), SSL_CTX_use_psk_identity_hint(3), SSL_get_psk_identity(3), DTLSv1_listen(3)</p>"},{"location":"man7/ssl/#history","title":"HISTORY","text":"<p>SSLv2_client_method, SSLv2_server_method and SSLv2_method were removed in OpenSSL 1.1.0.</p> <p>The return type of SSL_copy_session_id was changed from void to int in OpenSSL 1.1.0.</p>"},{"location":"man7/ssl/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"},{"location":"man7/x509/","title":"x509","text":""},{"location":"man7/x509/#name","title":"NAME","text":"<p>x509 - X.509 certificate handling</p>"},{"location":"man7/x509/#synopsis","title":"SYNOPSIS","text":"<pre><code>#include &lt;openssl/x509.h&gt;\n</code></pre>"},{"location":"man7/x509/#description","title":"DESCRIPTION","text":"<p>An X.509 certificate is a structured grouping of information about an individual, a device, or anything one can imagine.  An X.509 CRL (certificate revocation list) is a tool to help determine if a certificate is still valid.  The exact definition of those can be found in the X.509 document from ITU-T, or in RFC3280 from PKIX. In OpenSSL, the type X509 is used to express such a certificate, and the type X509_CRL is used to express a CRL.</p> <p>A related structure is a certificate request, defined in PKCS#10 from RSA Security, Inc, also reflected in RFC2896.  In OpenSSL, the type X509_REQ is used to express such a certificate request.</p> <p>To handle some complex parts of a certificate, there are the types X509_NAME (to express a certificate name), X509_ATTRIBUTE (to express a certificate attribute), X509_EXTENSION (to express a certificate extension) and a few more.</p> <p>Finally, there's the supertype X509_INFO, which can contain a CRL, a certificate and a corresponding private key.</p> <p>X509_XXX, d2i_X509_XXX, and i2d_X509_XXX functions handle X.509 certificates, with some exceptions, shown below.</p> <p>X509_CRL_XXX, d2i_X509_CRL_XXX, and i2d_X509_CRL_XXX functions handle X.509 CRLs.</p> <p>X509_REQ_XXX, d2i_X509_REQ_XXX, and i2d_X509_REQ_XXX functions handle PKCS#10 certificate requests.</p> <p>X509_NAME_XXX functions handle certificate names.</p> <p>X509_ATTRIBUTE_XXX functions handle certificate attributes.</p> <p>X509_EXTENSION_XXX functions handle certificate extensions.</p>"},{"location":"man7/x509/#see-also","title":"SEE ALSO","text":"<p>X509_NAME_ENTRY_get_object(3), X509_NAME_add_entry_by_txt(3), X509_NAME_add_entry_by_NID(3), X509_NAME_print_ex(3), X509_NAME_new(3), d2i_X509(3), d2i_X509_ALGOR(3), d2i_X509_CRL(3), d2i_X509_NAME(3), d2i_X509_REQ(3), d2i_X509_SIG(3), X509v3(3), crypto(7)</p>"},{"location":"man7/x509/#copyright","title":"COPYRIGHT","text":"<p>Copyright 2003-2021 The OpenSSL Project Authors. All Rights Reserved.</p> <p>Licensed under the OpenSSL license (the \"License\").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html.</p>"}]}